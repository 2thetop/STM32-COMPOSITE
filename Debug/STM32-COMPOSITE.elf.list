
STM32-COMPOSITE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086d8  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000314  080088c0  080088c0  000188c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008bd4  08008bd4  00018bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008bdc  08008bdc  00018bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008be0  08008be0  00018be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000006c8  20000000  08008be4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000a6c  200006c8  080092ac  000206c8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001134  080092ac  00021134  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  000206c8  2**0
                  CONTENTS, READONLY
 10 .debug_line   00005154  00000000  00000000  000206f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0000e962  00000000  00000000  00025845  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002d8f  00000000  00000000  000341a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000009b8  00000000  00000000  00036f38  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000bf0  00000000  00000000  000378f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000057f5  00000000  00000000  000384e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003054  00000000  00000000  0003dcd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007e  00000000  00000000  00040d29  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000027ac  00000000  00000000  00040da8  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stab         0000009c  00000000  00000000  00043554  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      0000014d  00000000  00000000  000435f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200006c8 	.word	0x200006c8
 8000204:	00000000 	.word	0x00000000
 8000208:	080088a8 	.word	0x080088a8

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200006cc 	.word	0x200006cc
 8000224:	080088a8 	.word	0x080088a8

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000376:	f1a4 0401 	sub.w	r4, r4, #1
 800037a:	d1e9      	bne.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f092 0f00 	teq	r2, #0
 8000522:	bf14      	ite	ne
 8000524:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e720      	b.n	800037c <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aedc 	beq.w	800032a <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6c1      	b.n	800032a <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295
 8000b6c:	f000 b982 	b.w	8000e74 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b8c:	468c      	mov	ip, r1
 8000b8e:	460c      	mov	r4, r1
 8000b90:	4605      	mov	r5, r0
 8000b92:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d14f      	bne.n	8000c38 <__udivmoddi4+0xb0>
 8000b98:	428a      	cmp	r2, r1
 8000b9a:	4617      	mov	r7, r2
 8000b9c:	d96b      	bls.n	8000c76 <__udivmoddi4+0xee>
 8000b9e:	fab2 fe82 	clz	lr, r2
 8000ba2:	f1be 0f00 	cmp.w	lr, #0
 8000ba6:	d00b      	beq.n	8000bc0 <__udivmoddi4+0x38>
 8000ba8:	f1ce 0520 	rsb	r5, lr, #32
 8000bac:	fa20 f505 	lsr.w	r5, r0, r5
 8000bb0:	fa01 f30e 	lsl.w	r3, r1, lr
 8000bb4:	ea45 0c03 	orr.w	ip, r5, r3
 8000bb8:	fa02 f70e 	lsl.w	r7, r2, lr
 8000bbc:	fa00 f50e 	lsl.w	r5, r0, lr
 8000bc0:	0c39      	lsrs	r1, r7, #16
 8000bc2:	fbbc f0f1 	udiv	r0, ip, r1
 8000bc6:	b2ba      	uxth	r2, r7
 8000bc8:	fb01 c310 	mls	r3, r1, r0, ip
 8000bcc:	fb00 f802 	mul.w	r8, r0, r2
 8000bd0:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 8000bd4:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 8000bd8:	45a0      	cmp	r8, r4
 8000bda:	d909      	bls.n	8000bf0 <__udivmoddi4+0x68>
 8000bdc:	19e4      	adds	r4, r4, r7
 8000bde:	f100 33ff 	add.w	r3, r0, #4294967295
 8000be2:	f080 8128 	bcs.w	8000e36 <__udivmoddi4+0x2ae>
 8000be6:	45a0      	cmp	r8, r4
 8000be8:	f240 8125 	bls.w	8000e36 <__udivmoddi4+0x2ae>
 8000bec:	3802      	subs	r0, #2
 8000bee:	443c      	add	r4, r7
 8000bf0:	ebc8 0404 	rsb	r4, r8, r4
 8000bf4:	fbb4 f3f1 	udiv	r3, r4, r1
 8000bf8:	fb01 4c13 	mls	ip, r1, r3, r4
 8000bfc:	fb03 f202 	mul.w	r2, r3, r2
 8000c00:	b2ac      	uxth	r4, r5
 8000c02:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 8000c06:	428a      	cmp	r2, r1
 8000c08:	d909      	bls.n	8000c1e <__udivmoddi4+0x96>
 8000c0a:	19c9      	adds	r1, r1, r7
 8000c0c:	f103 34ff 	add.w	r4, r3, #4294967295
 8000c10:	f080 810f 	bcs.w	8000e32 <__udivmoddi4+0x2aa>
 8000c14:	428a      	cmp	r2, r1
 8000c16:	f240 810c 	bls.w	8000e32 <__udivmoddi4+0x2aa>
 8000c1a:	3b02      	subs	r3, #2
 8000c1c:	4439      	add	r1, r7
 8000c1e:	1a8a      	subs	r2, r1, r2
 8000c20:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c24:	2100      	movs	r1, #0
 8000c26:	2e00      	cmp	r6, #0
 8000c28:	d063      	beq.n	8000cf2 <__udivmoddi4+0x16a>
 8000c2a:	fa22 f20e 	lsr.w	r2, r2, lr
 8000c2e:	2300      	movs	r3, #0
 8000c30:	e886 000c 	stmia.w	r6, {r2, r3}
 8000c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c38:	428b      	cmp	r3, r1
 8000c3a:	d907      	bls.n	8000c4c <__udivmoddi4+0xc4>
 8000c3c:	2e00      	cmp	r6, #0
 8000c3e:	d056      	beq.n	8000cee <__udivmoddi4+0x166>
 8000c40:	2100      	movs	r1, #0
 8000c42:	e886 0011 	stmia.w	r6, {r0, r4}
 8000c46:	4608      	mov	r0, r1
 8000c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c4c:	fab3 f183 	clz	r1, r3
 8000c50:	2900      	cmp	r1, #0
 8000c52:	f040 8093 	bne.w	8000d7c <__udivmoddi4+0x1f4>
 8000c56:	42a3      	cmp	r3, r4
 8000c58:	d302      	bcc.n	8000c60 <__udivmoddi4+0xd8>
 8000c5a:	4282      	cmp	r2, r0
 8000c5c:	f200 80fe 	bhi.w	8000e5c <__udivmoddi4+0x2d4>
 8000c60:	1a85      	subs	r5, r0, r2
 8000c62:	eb64 0303 	sbc.w	r3, r4, r3
 8000c66:	469c      	mov	ip, r3
 8000c68:	2001      	movs	r0, #1
 8000c6a:	2e00      	cmp	r6, #0
 8000c6c:	d041      	beq.n	8000cf2 <__udivmoddi4+0x16a>
 8000c6e:	e886 1020 	stmia.w	r6, {r5, ip}
 8000c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c76:	b912      	cbnz	r2, 8000c7e <__udivmoddi4+0xf6>
 8000c78:	2701      	movs	r7, #1
 8000c7a:	fbb7 f7f2 	udiv	r7, r7, r2
 8000c7e:	fab7 fe87 	clz	lr, r7
 8000c82:	f1be 0f00 	cmp.w	lr, #0
 8000c86:	d136      	bne.n	8000cf6 <__udivmoddi4+0x16e>
 8000c88:	1be4      	subs	r4, r4, r7
 8000c8a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c8e:	fa1f f987 	uxth.w	r9, r7
 8000c92:	2101      	movs	r1, #1
 8000c94:	fbb4 f3f8 	udiv	r3, r4, r8
 8000c98:	fb08 4413 	mls	r4, r8, r3, r4
 8000c9c:	fb09 f203 	mul.w	r2, r9, r3
 8000ca0:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 8000ca4:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 8000ca8:	42a2      	cmp	r2, r4
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0x134>
 8000cac:	19e4      	adds	r4, r4, r7
 8000cae:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0x132>
 8000cb4:	42a2      	cmp	r2, r4
 8000cb6:	f200 80d3 	bhi.w	8000e60 <__udivmoddi4+0x2d8>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	1aa4      	subs	r4, r4, r2
 8000cbe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cc2:	fb08 4810 	mls	r8, r8, r0, r4
 8000cc6:	fb09 f900 	mul.w	r9, r9, r0
 8000cca:	b2ac      	uxth	r4, r5
 8000ccc:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 8000cd0:	4591      	cmp	r9, r2
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x15c>
 8000cd4:	19d2      	adds	r2, r2, r7
 8000cd6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x15a>
 8000cdc:	4591      	cmp	r9, r2
 8000cde:	f200 80ba 	bhi.w	8000e56 <__udivmoddi4+0x2ce>
 8000ce2:	4620      	mov	r0, r4
 8000ce4:	ebc9 0202 	rsb	r2, r9, r2
 8000ce8:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cec:	e79b      	b.n	8000c26 <__udivmoddi4+0x9e>
 8000cee:	4631      	mov	r1, r6
 8000cf0:	4630      	mov	r0, r6
 8000cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cf6:	fa07 f70e 	lsl.w	r7, r7, lr
 8000cfa:	f1ce 0c20 	rsb	ip, lr, #32
 8000cfe:	fa24 f30c 	lsr.w	r3, r4, ip
 8000d02:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d06:	fbb3 faf8 	udiv	sl, r3, r8
 8000d0a:	fa1f f987 	uxth.w	r9, r7
 8000d0e:	fb08 351a 	mls	r5, r8, sl, r3
 8000d12:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000d16:	fa04 f40e 	lsl.w	r4, r4, lr
 8000d1a:	fb0a fb09 	mul.w	fp, sl, r9
 8000d1e:	ea4c 0c04 	orr.w	ip, ip, r4
 8000d22:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000d26:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 8000d2a:	459b      	cmp	fp, r3
 8000d2c:	fa00 f50e 	lsl.w	r5, r0, lr
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x1c0>
 8000d32:	19db      	adds	r3, r3, r7
 8000d34:	f10a 32ff 	add.w	r2, sl, #4294967295
 8000d38:	f080 808b 	bcs.w	8000e52 <__udivmoddi4+0x2ca>
 8000d3c:	459b      	cmp	fp, r3
 8000d3e:	f240 8088 	bls.w	8000e52 <__udivmoddi4+0x2ca>
 8000d42:	f1aa 0a02 	sub.w	sl, sl, #2
 8000d46:	443b      	add	r3, r7
 8000d48:	ebcb 0303 	rsb	r3, fp, r3
 8000d4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d50:	fb08 3310 	mls	r3, r8, r0, r3
 8000d54:	fb00 f409 	mul.w	r4, r0, r9
 8000d58:	fa1f fc8c 	uxth.w	ip, ip
 8000d5c:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 8000d60:	429c      	cmp	r4, r3
 8000d62:	d907      	bls.n	8000d74 <__udivmoddi4+0x1ec>
 8000d64:	19db      	adds	r3, r3, r7
 8000d66:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6a:	d26e      	bcs.n	8000e4a <__udivmoddi4+0x2c2>
 8000d6c:	429c      	cmp	r4, r3
 8000d6e:	d96c      	bls.n	8000e4a <__udivmoddi4+0x2c2>
 8000d70:	3802      	subs	r0, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1b1c      	subs	r4, r3, r4
 8000d76:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 8000d7a:	e78b      	b.n	8000c94 <__udivmoddi4+0x10c>
 8000d7c:	f1c1 0e20 	rsb	lr, r1, #32
 8000d80:	408b      	lsls	r3, r1
 8000d82:	fa22 fc0e 	lsr.w	ip, r2, lr
 8000d86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8a:	fa24 f70e 	lsr.w	r7, r4, lr
 8000d8e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d92:	fbb7 faf9 	udiv	sl, r7, r9
 8000d96:	fa1f f38c 	uxth.w	r3, ip
 8000d9a:	fb09 771a 	mls	r7, r9, sl, r7
 8000d9e:	fa20 f80e 	lsr.w	r8, r0, lr
 8000da2:	408c      	lsls	r4, r1
 8000da4:	fb0a f503 	mul.w	r5, sl, r3
 8000da8:	ea48 0404 	orr.w	r4, r8, r4
 8000dac:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8000db0:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 8000db4:	42bd      	cmp	r5, r7
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 fb01 	lsl.w	fp, r0, r1
 8000dbe:	d909      	bls.n	8000dd4 <__udivmoddi4+0x24c>
 8000dc0:	eb17 070c 	adds.w	r7, r7, ip
 8000dc4:	f10a 30ff 	add.w	r0, sl, #4294967295
 8000dc8:	d241      	bcs.n	8000e4e <__udivmoddi4+0x2c6>
 8000dca:	42bd      	cmp	r5, r7
 8000dcc:	d93f      	bls.n	8000e4e <__udivmoddi4+0x2c6>
 8000dce:	f1aa 0a02 	sub.w	sl, sl, #2
 8000dd2:	4467      	add	r7, ip
 8000dd4:	1b7f      	subs	r7, r7, r5
 8000dd6:	fbb7 f5f9 	udiv	r5, r7, r9
 8000dda:	fb09 7715 	mls	r7, r9, r5, r7
 8000dde:	fb05 f303 	mul.w	r3, r5, r3
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8000de8:	42bb      	cmp	r3, r7
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x276>
 8000dec:	eb17 070c 	adds.w	r7, r7, ip
 8000df0:	f105 30ff 	add.w	r0, r5, #4294967295
 8000df4:	d227      	bcs.n	8000e46 <__udivmoddi4+0x2be>
 8000df6:	42bb      	cmp	r3, r7
 8000df8:	d925      	bls.n	8000e46 <__udivmoddi4+0x2be>
 8000dfa:	3d02      	subs	r5, #2
 8000dfc:	4467      	add	r7, ip
 8000dfe:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 8000e02:	fba0 8902 	umull	r8, r9, r0, r2
 8000e06:	1aff      	subs	r7, r7, r3
 8000e08:	454f      	cmp	r7, r9
 8000e0a:	4645      	mov	r5, r8
 8000e0c:	464c      	mov	r4, r9
 8000e0e:	d314      	bcc.n	8000e3a <__udivmoddi4+0x2b2>
 8000e10:	d029      	beq.n	8000e66 <__udivmoddi4+0x2de>
 8000e12:	b366      	cbz	r6, 8000e6e <__udivmoddi4+0x2e6>
 8000e14:	ebbb 0305 	subs.w	r3, fp, r5
 8000e18:	eb67 0704 	sbc.w	r7, r7, r4
 8000e1c:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000e20:	40cb      	lsrs	r3, r1
 8000e22:	40cf      	lsrs	r7, r1
 8000e24:	ea4e 0303 	orr.w	r3, lr, r3
 8000e28:	e886 0088 	stmia.w	r6, {r3, r7}
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e32:	4623      	mov	r3, r4
 8000e34:	e6f3      	b.n	8000c1e <__udivmoddi4+0x96>
 8000e36:	4618      	mov	r0, r3
 8000e38:	e6da      	b.n	8000bf0 <__udivmoddi4+0x68>
 8000e3a:	ebb8 0502 	subs.w	r5, r8, r2
 8000e3e:	eb69 040c 	sbc.w	r4, r9, ip
 8000e42:	3801      	subs	r0, #1
 8000e44:	e7e5      	b.n	8000e12 <__udivmoddi4+0x28a>
 8000e46:	4605      	mov	r5, r0
 8000e48:	e7d9      	b.n	8000dfe <__udivmoddi4+0x276>
 8000e4a:	4610      	mov	r0, r2
 8000e4c:	e792      	b.n	8000d74 <__udivmoddi4+0x1ec>
 8000e4e:	4682      	mov	sl, r0
 8000e50:	e7c0      	b.n	8000dd4 <__udivmoddi4+0x24c>
 8000e52:	4692      	mov	sl, r2
 8000e54:	e778      	b.n	8000d48 <__udivmoddi4+0x1c0>
 8000e56:	3802      	subs	r0, #2
 8000e58:	443a      	add	r2, r7
 8000e5a:	e743      	b.n	8000ce4 <__udivmoddi4+0x15c>
 8000e5c:	4608      	mov	r0, r1
 8000e5e:	e704      	b.n	8000c6a <__udivmoddi4+0xe2>
 8000e60:	3b02      	subs	r3, #2
 8000e62:	443c      	add	r4, r7
 8000e64:	e72a      	b.n	8000cbc <__udivmoddi4+0x134>
 8000e66:	45c3      	cmp	fp, r8
 8000e68:	d3e7      	bcc.n	8000e3a <__udivmoddi4+0x2b2>
 8000e6a:	463c      	mov	r4, r7
 8000e6c:	e7d1      	b.n	8000e12 <__udivmoddi4+0x28a>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000e74 <__aeabi_idiv0>:
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop

08000e78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000e78:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000e7a:	e003      	b.n	8000e84 <LoopCopyDataInit>

08000e7c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000e7c:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000e7e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000e80:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000e82:	3104      	adds	r1, #4

08000e84 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000e84:	480a      	ldr	r0, [pc, #40]	; (8000eb0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000e86:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000e88:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000e8a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000e8c:	d3f6      	bcc.n	8000e7c <CopyDataInit>
  ldr r2, =_sbss
 8000e8e:	4a0a      	ldr	r2, [pc, #40]	; (8000eb8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000e90:	e002      	b.n	8000e98 <LoopFillZerobss>

08000e92 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000e92:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000e94:	f842 3b04 	str.w	r3, [r2], #4

08000e98 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000e98:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000e9a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000e9c:	d3f9      	bcc.n	8000e92 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e9e:	f000 f811 	bl	8000ec4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ea2:	f002 ff9b 	bl	8003ddc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ea6:	f002 fcbb 	bl	8003820 <main>
  bx lr
 8000eaa:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8000eac:	08008be4 	.word	0x08008be4
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8000eb0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000eb4:	200006c8 	.word	0x200006c8
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8000eb8:	200006c8 	.word	0x200006c8
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8000ebc:	20001134 	.word	0x20001134

08000ec0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ec0:	e7fe      	b.n	8000ec0 <ADC1_2_IRQHandler>
	...

08000ec4 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <SystemInit+0x40>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	f042 0201 	orr.w	r2, r2, #1
 8000ecc:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000ece:	6859      	ldr	r1, [r3, #4]
 8000ed0:	4a0d      	ldr	r2, [pc, #52]	; (8000f08 <SystemInit+0x44>)
 8000ed2:	400a      	ands	r2, r1
 8000ed4:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000edc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000ee0:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000ee8:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000eea:	685a      	ldr	r2, [r3, #4]
 8000eec:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000ef0:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000ef2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000ef6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000ef8:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <SystemInit+0x48>)
 8000efa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	40021000 	.word	0x40021000
 8000f08:	f8ff0000 	.word	0xf8ff0000
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f10:	b510      	push	{r4, lr}
 8000f12:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000f14:	f001 f8ee 	bl	80020f4 <HAL_RCC_GetHCLKFreq>
 8000f18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f20:	f000 f888 	bl	8001034 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000f24:	2200      	movs	r2, #0
 8000f26:	4621      	mov	r1, r4
 8000f28:	f04f 30ff 	mov.w	r0, #4294967295
 8000f2c:	f000 f842 	bl	8000fb4 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000f30:	2000      	movs	r0, #0
 8000f32:	bd10      	pop	{r4, pc}

08000f34 <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f34:	4a07      	ldr	r2, [pc, #28]	; (8000f54 <HAL_Init+0x20>)
  *        In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f36:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f38:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f3a:	2003      	movs	r0, #3
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f3c:	f043 0310 	orr.w	r3, r3, #16
 8000f40:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f42:	f000 f825 	bl	8000f90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f46:	2000      	movs	r0, #0
 8000f48:	f7ff ffe2 	bl	8000f10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f4c:	f002 fd14 	bl	8003978 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000f50:	2000      	movs	r0, #0
 8000f52:	bd08      	pop	{r3, pc}
 8000f54:	40022000 	.word	0x40022000

08000f58 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000f58:	4a02      	ldr	r2, [pc, #8]	; (8000f64 <HAL_IncTick+0xc>)
 8000f5a:	6813      	ldr	r3, [r2, #0]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	6013      	str	r3, [r2, #0]
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	200006e4 	.word	0x200006e4

08000f68 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f68:	4b01      	ldr	r3, [pc, #4]	; (8000f70 <HAL_GetTick+0x8>)
 8000f6a:	6818      	ldr	r0, [r3, #0]
}
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	200006e4 	.word	0x200006e4

08000f74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000f74:	b513      	push	{r0, r1, r4, lr}
 8000f76:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8000f78:	f7ff fff6 	bl	8000f68 <HAL_GetTick>
 8000f7c:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8000f7e:	f7ff fff3 	bl	8000f68 <HAL_GetTick>
 8000f82:	9b01      	ldr	r3, [sp, #4]
 8000f84:	1b00      	subs	r0, r0, r4
 8000f86:	4298      	cmp	r0, r3
 8000f88:	d3f9      	bcc.n	8000f7e <HAL_Delay+0xa>
  {
  }
}
 8000f8a:	b002      	add	sp, #8
 8000f8c:	bd10      	pop	{r4, pc}
	...

08000f90 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f90:	4a07      	ldr	r2, [pc, #28]	; (8000fb0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000f92:	0200      	lsls	r0, r0, #8
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f94:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000f96:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8000f9a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f9e:	041b      	lsls	r3, r3, #16
 8000fa0:	0c1b      	lsrs	r3, r3, #16
 8000fa2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000faa:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000fac:	60d3      	str	r3, [r2, #12]
 8000fae:	4770      	bx	lr
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb4:	4b17      	ldr	r3, [pc, #92]	; (8001014 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb6:	b530      	push	{r4, r5, lr}
 8000fb8:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fba:	f3c3 2302 	ubfx	r3, r3, #8, #3
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fbe:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fc2:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc4:	2c04      	cmp	r4, #4
 8000fc6:	bf28      	it	cs
 8000fc8:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fca:	2d06      	cmp	r5, #6

  return (
 8000fcc:	f04f 0501 	mov.w	r5, #1
 8000fd0:	fa05 f404 	lsl.w	r4, r5, r4
 8000fd4:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fd8:	bf8c      	ite	hi
 8000fda:	3b03      	subhi	r3, #3
 8000fdc:	2300      	movls	r3, #0

  return (
 8000fde:	400c      	ands	r4, r1
 8000fe0:	409c      	lsls	r4, r3
 8000fe2:	fa05 f303 	lsl.w	r3, r5, r3
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000fea:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8000fec:	ea42 0204 	orr.w	r2, r2, r4
 8000ff0:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff4:	bfaf      	iteee	ge
 8000ff6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffa:	4b07      	ldrlt	r3, [pc, #28]	; (8001018 <HAL_NVIC_SetPriority+0x64>)
 8000ffc:	f000 000f 	andlt.w	r0, r0, #15
 8001000:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001002:	bfa5      	ittet	ge
 8001004:	b2d2      	uxtbge	r2, r2
 8001006:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100a:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001010:	bd30      	pop	{r4, r5, pc}
 8001012:	bf00      	nop
 8001014:	e000ed00 	.word	0xe000ed00
 8001018:	e000ed14 	.word	0xe000ed14

0800101c <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800101c:	0942      	lsrs	r2, r0, #5
 800101e:	2301      	movs	r3, #1
 8001020:	f000 001f 	and.w	r0, r0, #31
 8001024:	fa03 f000 	lsl.w	r0, r3, r0
 8001028:	4b01      	ldr	r3, [pc, #4]	; (8001030 <HAL_NVIC_EnableIRQ+0x14>)
 800102a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800102e:	4770      	bx	lr
 8001030:	e000e100 	.word	0xe000e100

08001034 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001034:	3801      	subs	r0, #1
 8001036:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800103a:	d20a      	bcs.n	8001052 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800103c:	4b06      	ldr	r3, [pc, #24]	; (8001058 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103e:	4a07      	ldr	r2, [pc, #28]	; (800105c <HAL_SYSTICK_Config+0x28>)
 8001040:	21f0      	movs	r1, #240	; 0xf0
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001042:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001044:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001048:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800104a:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800104c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 8001052:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	e000e010 	.word	0xe000e010
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001060:	4b04      	ldr	r3, [pc, #16]	; (8001074 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001062:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	bf0c      	ite	eq
 8001068:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800106c:	f022 0204 	bicne.w	r2, r2, #4
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	4770      	bx	lr
 8001074:	e000e010 	.word	0xe000e010

08001078 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001078:	4770      	bx	lr

0800107a <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800107a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800107c:	f7ff fffc 	bl	8001078 <HAL_SYSTICK_Callback>
 8001080:	bd08      	pop	{r3, pc}
	...

08001084 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001084:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;
  uint32_t config = 0x00;
 8001088:	2400      	movs	r4, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800108a:	4626      	mov	r6, r4
 800108c:	4b6a      	ldr	r3, [pc, #424]	; (8001238 <HAL_GPIO_Init+0x1b4>)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800108e:	f8df e1b0 	ldr.w	lr, [pc, #432]	; 8001240 <HAL_GPIO_Init+0x1bc>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001092:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 8001244 <HAL_GPIO_Init+0x1c0>

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001096:	2201      	movs	r2, #1
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if (iocurrent == ioposition)
 8001098:	680d      	ldr	r5, [r1, #0]

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800109a:	40b2      	lsls	r2, r6
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if (iocurrent == ioposition)
 800109c:	ea32 0505 	bics.w	r5, r2, r5
 80010a0:	f040 80c2 	bne.w	8001228 <HAL_GPIO_Init+0x1a4>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010a4:	684d      	ldr	r5, [r1, #4]
 80010a6:	2d12      	cmp	r5, #18
 80010a8:	d02b      	beq.n	8001102 <HAL_GPIO_Init+0x7e>
 80010aa:	d80e      	bhi.n	80010ca <HAL_GPIO_Init+0x46>
 80010ac:	2d02      	cmp	r5, #2
 80010ae:	d025      	beq.n	80010fc <HAL_GPIO_Init+0x78>
 80010b0:	d804      	bhi.n	80010bc <HAL_GPIO_Init+0x38>
 80010b2:	b34d      	cbz	r5, 8001108 <HAL_GPIO_Init+0x84>
 80010b4:	2d01      	cmp	r5, #1
 80010b6:	d130      	bne.n	800111a <HAL_GPIO_Init+0x96>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010b8:	68cc      	ldr	r4, [r1, #12]
          break;
 80010ba:	e02e      	b.n	800111a <HAL_GPIO_Init+0x96>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010bc:	2d03      	cmp	r5, #3
 80010be:	d01b      	beq.n	80010f8 <HAL_GPIO_Init+0x74>
 80010c0:	2d11      	cmp	r5, #17
 80010c2:	d12a      	bne.n	800111a <HAL_GPIO_Init+0x96>
          
        /* If we are configuring the pin in OUTPUT open-drain mode */
        case GPIO_MODE_OUTPUT_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010c4:	68cc      	ldr	r4, [r1, #12]
 80010c6:	3404      	adds	r4, #4
          break;
 80010c8:	e027      	b.n	800111a <HAL_GPIO_Init+0x96>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010ca:	4565      	cmp	r5, ip
 80010cc:	d01c      	beq.n	8001108 <HAL_GPIO_Init+0x84>
 80010ce:	d806      	bhi.n	80010de <HAL_GPIO_Init+0x5a>
 80010d0:	f8df 8174 	ldr.w	r8, [pc, #372]	; 8001248 <HAL_GPIO_Init+0x1c4>
 80010d4:	4545      	cmp	r5, r8
 80010d6:	d017      	beq.n	8001108 <HAL_GPIO_Init+0x84>
 80010d8:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 80010dc:	e009      	b.n	80010f2 <HAL_GPIO_Init+0x6e>
 80010de:	f8df 816c 	ldr.w	r8, [pc, #364]	; 800124c <HAL_GPIO_Init+0x1c8>
 80010e2:	4545      	cmp	r5, r8
 80010e4:	d010      	beq.n	8001108 <HAL_GPIO_Init+0x84>
 80010e6:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 80010ea:	4545      	cmp	r5, r8
 80010ec:	d00c      	beq.n	8001108 <HAL_GPIO_Init+0x84>
 80010ee:	f5a8 1880 	sub.w	r8, r8, #1048576	; 0x100000
 80010f2:	4545      	cmp	r5, r8
 80010f4:	d111      	bne.n	800111a <HAL_GPIO_Init+0x96>
 80010f6:	e007      	b.n	8001108 <HAL_GPIO_Init+0x84>
          }
          break; 
          
        /* If we are configuring the pin in INPUT analog mode */
        case GPIO_MODE_ANALOG:
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010f8:	2400      	movs	r4, #0
 80010fa:	e00e      	b.n	800111a <HAL_GPIO_Init+0x96>
          
        /* If we are configuring the pin in ALTERNATE FUNCTION push-pull mode */
        case GPIO_MODE_AF_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010fc:	68cc      	ldr	r4, [r1, #12]
 80010fe:	3408      	adds	r4, #8
          break;
 8001100:	e00b      	b.n	800111a <HAL_GPIO_Init+0x96>
          
        /* If we are configuring the pin in ALTERNATE FUNCTION open-drain mode */
        case GPIO_MODE_AF_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001102:	68cc      	ldr	r4, [r1, #12]
 8001104:	340c      	adds	r4, #12
          break;
 8001106:	e008      	b.n	800111a <HAL_GPIO_Init+0x96>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if(GPIO_Init->Pull == GPIO_NOPULL)
 8001108:	688c      	ldr	r4, [r1, #8]
 800110a:	b12c      	cbz	r4, 8001118 <HAL_GPIO_Init+0x94>
          {  
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 800110c:	2c01      	cmp	r4, #1
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
            
            /* Set the corresponding ODR bit */
            GPIOx->BSRR = ioposition;
 800110e:	bf0c      	ite	eq
 8001110:	6102      	streq	r2, [r0, #16]
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
            
            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8001112:	6142      	strne	r2, [r0, #20]
            /* Set the corresponding ODR bit */
            GPIOx->BSRR = ioposition;
          }
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001114:	2408      	movs	r4, #8
 8001116:	e000      	b.n	800111a <HAL_GPIO_Init+0x96>
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if(GPIO_Init->Pull == GPIO_NOPULL)
          {  
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001118:	2404      	movs	r4, #4
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800111a:	2aff      	cmp	r2, #255	; 0xff
 800111c:	bf97      	itett	ls
 800111e:	4683      	movls	fp, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 8001120:	f1a6 0508 	subhi.w	r5, r6, #8
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001124:	f8d0 9000 	ldrls.w	r9, [r0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 8001128:	00b5      	lslls	r5, r6, #2
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800112a:	bf84      	itt	hi
 800112c:	f8d0 9004 	ldrhi.w	r9, [r0, #4]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 8001130:	00ad      	lslhi	r5, r5, #2
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8001132:	f04f 080f 	mov.w	r8, #15
 8001136:	fa08 fa05 	lsl.w	sl, r8, r5
 800113a:	ea29 090a 	bic.w	r9, r9, sl
 800113e:	fa04 f505 	lsl.w	r5, r4, r5
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001142:	bf88      	it	hi
 8001144:	f100 0b04 	addhi.w	fp, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8001148:	ea49 0505 	orr.w	r5, r9, r5
 800114c:	f8cb 5000 	str.w	r5, [fp]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001150:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8001154:	f019 5f80 	tst.w	r9, #268435456	; 0x10000000
 8001158:	d066      	beq.n	8001228 <HAL_GPIO_Init+0x1a4>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800115a:	4d38      	ldr	r5, [pc, #224]	; (800123c <HAL_GPIO_Init+0x1b8>)
 800115c:	4f37      	ldr	r7, [pc, #220]	; (800123c <HAL_GPIO_Init+0x1b8>)
 800115e:	69ad      	ldr	r5, [r5, #24]
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001160:	f006 0a03 	and.w	sl, r6, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001164:	f045 0501 	orr.w	r5, r5, #1
 8001168:	61bd      	str	r5, [r7, #24]
 800116a:	69bd      	ldr	r5, [r7, #24]
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 800116c:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001170:	f005 0501 	and.w	r5, r5, #1
 8001174:	9501      	str	r5, [sp, #4]
 8001176:	9d01      	ldr	r5, [sp, #4]
 8001178:	f026 0503 	bic.w	r5, r6, #3
 800117c:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8001180:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2];
 8001184:	f8d5 b008 	ldr.w	fp, [r5, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001188:	f5a7 3784 	sub.w	r7, r7, #67584	; 0x10800
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 800118c:	fa08 f80a 	lsl.w	r8, r8, sl
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001190:	42b8      	cmp	r0, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001192:	ea2b 0808 	bic.w	r8, fp, r8
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001196:	d016      	beq.n	80011c6 <HAL_GPIO_Init+0x142>
 8001198:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800119c:	42b8      	cmp	r0, r7
 800119e:	d015      	beq.n	80011cc <HAL_GPIO_Init+0x148>
 80011a0:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80011a4:	42b8      	cmp	r0, r7
 80011a6:	d014      	beq.n	80011d2 <HAL_GPIO_Init+0x14e>
 80011a8:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80011ac:	42b8      	cmp	r0, r7
 80011ae:	d013      	beq.n	80011d8 <HAL_GPIO_Init+0x154>
 80011b0:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80011b4:	42b8      	cmp	r0, r7
 80011b6:	d012      	beq.n	80011de <HAL_GPIO_Init+0x15a>
 80011b8:	4570      	cmp	r0, lr
 80011ba:	bf0c      	ite	eq
 80011bc:	f04f 0b05 	moveq.w	fp, #5
 80011c0:	f04f 0b06 	movne.w	fp, #6
 80011c4:	e00d      	b.n	80011e2 <HAL_GPIO_Init+0x15e>
 80011c6:	f04f 0b00 	mov.w	fp, #0
 80011ca:	e00a      	b.n	80011e2 <HAL_GPIO_Init+0x15e>
 80011cc:	f04f 0b01 	mov.w	fp, #1
 80011d0:	e007      	b.n	80011e2 <HAL_GPIO_Init+0x15e>
 80011d2:	f04f 0b02 	mov.w	fp, #2
 80011d6:	e004      	b.n	80011e2 <HAL_GPIO_Init+0x15e>
 80011d8:	f04f 0b03 	mov.w	fp, #3
 80011dc:	e001      	b.n	80011e2 <HAL_GPIO_Init+0x15e>
 80011de:	f04f 0b04 	mov.w	fp, #4
 80011e2:	fa0b fa0a 	lsl.w	sl, fp, sl
 80011e6:	ea4a 0a08 	orr.w	sl, sl, r8
        AFIO->EXTICR[position >> 2] = temp;
 80011ea:	f8c5 a008 	str.w	sl, [r5, #8]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 80011ee:	681d      	ldr	r5, [r3, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        AFIO->EXTICR[position >> 2] = temp;
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011f0:	f419 3f80 	tst.w	r9, #65536	; 0x10000
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 80011f4:	bf14      	ite	ne
 80011f6:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 80011f8:	4395      	biceq	r5, r2
 80011fa:	601d      	str	r5, [r3, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 80011fc:	685d      	ldr	r5, [r3, #4]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011fe:	f419 3f00 	tst.w	r9, #131072	; 0x20000
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8001202:	bf14      	ite	ne
 8001204:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 8001206:	4395      	biceq	r5, r2
 8001208:	605d      	str	r5, [r3, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 800120a:	689d      	ldr	r5, [r3, #8]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800120c:	f419 1f80 	tst.w	r9, #1048576	; 0x100000
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 8001210:	bf14      	ite	ne
 8001212:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 8001214:	4395      	biceq	r5, r2
 8001216:	609d      	str	r5, [r3, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 8001218:	68dd      	ldr	r5, [r3, #12]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800121a:	f419 1f00 	tst.w	r9, #2097152	; 0x200000
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 800121e:	bf14      	ite	ne
 8001220:	432a      	orrne	r2, r5
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 8001222:	ea25 0202 	biceq.w	r2, r5, r2
 8001226:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001228:	3601      	adds	r6, #1
 800122a:	2e10      	cmp	r6, #16
 800122c:	f47f af33 	bne.w	8001096 <HAL_GPIO_Init+0x12>
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
        }
      }
    }
  }
}
 8001230:	b003      	add	sp, #12
 8001232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001236:	bf00      	nop
 8001238:	40010400 	.word	0x40010400
 800123c:	40021000 	.word	0x40021000
 8001240:	40011c00 	.word	0x40011c00
 8001244:	10210000 	.word	0x10210000
 8001248:	10110000 	.word	0x10110000
 800124c:	10310000 	.word	0x10310000

08001250 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001250:	b902      	cbnz	r2, 8001254 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001252:	0409      	lsls	r1, r1, #16
 8001254:	6101      	str	r1, [r0, #16]
 8001256:	4770      	bx	lr

08001258 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001258:	68c3      	ldr	r3, [r0, #12]
 800125a:	4059      	eors	r1, r3
 800125c:	60c1      	str	r1, [r0, #12]
 800125e:	4770      	bx	lr

08001260 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t index = 0;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8001264:	4604      	mov	r4, r0
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001266:	b086      	sub	sp, #24
  uint32_t index = 0;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8001268:	2800      	cmp	r0, #0
 800126a:	d05f      	beq.n	800132c <HAL_PCD_Init+0xcc>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 800126c:	f890 33e9 	ldrb.w	r3, [r0, #1001]	; 0x3e9
 8001270:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001274:	b91b      	cbnz	r3, 800127e <HAL_PCD_Init+0x1e>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001276:	f880 23e8 	strb.w	r2, [r0, #1000]	; 0x3e8

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800127a:	f002 fc5b 	bl	8003b34 <HAL_PCD_MspInit>
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800127e:	4625      	mov	r5, r4
  
  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8001280:	466e      	mov	r6, sp

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001282:	2303      	movs	r3, #3
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001284:	f855 0b10 	ldr.w	r0, [r5], #16

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001288:	f884 33e9 	strb.w	r3, [r4, #1001]	; 0x3e9
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800128c:	f001 f9e8 	bl	8002660 <USB_DisableGlobalInt>
  
  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8001290:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001292:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001294:	682b      	ldr	r3, [r5, #0]
 8001296:	1d27      	adds	r7, r4, #4
 8001298:	6033      	str	r3, [r6, #0]
 800129a:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800129e:	6820      	ldr	r0, [r4, #0]
 80012a0:	f001 f9ce 	bl	8002640 <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 80012a4:	2100      	movs	r1, #0
 80012a6:	6820      	ldr	r0, [r4, #0]
 80012a8:	f001 f9e4 	bl	8002674 <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0; index < 15 ; index++)
 80012ac:	2100      	movs	r1, #0
 80012ae:	4623      	mov	r3, r4
  
  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 80012b0:	4622      	mov	r2, r4
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1;
    hpcd->IN_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 80012b2:	4608      	mov	r0, r1
 80012b4:	f104 0510 	add.w	r5, r4, #16
 
  /* Init endpoints structures */
  for (index = 0; index < 15 ; index++)
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1;
 80012b8:	2601      	movs	r6, #1
    hpcd->IN_ep[index].num = index;
 80012ba:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
    hpcd->IN_ep[index].tx_fifo_num = index;
 80012be:	8691      	strh	r1, [r2, #52]	; 0x34
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 
  /* Init endpoints structures */
  for (index = 0; index < 15 ; index++)
 80012c0:	3101      	adds	r1, #1
 80012c2:	290f      	cmp	r1, #15
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1;
 80012c4:	f882 6029 	strb.w	r6, [r2, #41]	; 0x29
    hpcd->IN_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 80012c8:	f882 002b 	strb.w	r0, [r2, #43]	; 0x2b
    hpcd->IN_ep[index].maxpacket =  0;
 80012cc:	6390      	str	r0, [r2, #56]	; 0x38
    hpcd->IN_ep[index].xfer_buff = 0;
 80012ce:	63d0      	str	r0, [r2, #60]	; 0x3c
    hpcd->IN_ep[index].xfer_len = 0;
 80012d0:	6410      	str	r0, [r2, #64]	; 0x40
 80012d2:	f102 0220 	add.w	r2, r2, #32
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 
  /* Init endpoints structures */
  for (index = 0; index < 15 ; index++)
 80012d6:	d1f0      	bne.n	80012ba <HAL_PCD_Init+0x5a>
 80012d8:	2200      	movs	r2, #0
    hpcd->IN_ep[index].xfer_len = 0;
  }
  
  for (index = 0; index < 15 ; index++)
  {
    hpcd->OUT_ep[index].is_in = 0;
 80012da:	4611      	mov	r1, r2
    hpcd->OUT_ep[index].num = index;
 80012dc:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
    hpcd->IN_ep[index].tx_fifo_num = index;
 80012e0:	869a      	strh	r2, [r3, #52]	; 0x34
    hpcd->IN_ep[index].maxpacket =  0;
    hpcd->IN_ep[index].xfer_buff = 0;
    hpcd->IN_ep[index].xfer_len = 0;
  }
  
  for (index = 0; index < 15 ; index++)
 80012e2:	3201      	adds	r2, #1
 80012e4:	2a0f      	cmp	r2, #15
  {
    hpcd->OUT_ep[index].is_in = 0;
 80012e6:	f883 1209 	strb.w	r1, [r3, #521]	; 0x209
    hpcd->OUT_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 80012ea:	f883 120b 	strb.w	r1, [r3, #523]	; 0x20b
    hpcd->OUT_ep[index].maxpacket = 0;
 80012ee:	f8c3 1218 	str.w	r1, [r3, #536]	; 0x218
    hpcd->OUT_ep[index].xfer_buff = 0;
 80012f2:	f8c3 121c 	str.w	r1, [r3, #540]	; 0x21c
    hpcd->OUT_ep[index].xfer_len = 0;
 80012f6:	f8c3 1220 	str.w	r1, [r3, #544]	; 0x220
    hpcd->IN_ep[index].xfer_len = 0;
  }
  
  for (index = 0; index < 15 ; index++)
  {
    hpcd->OUT_ep[index].is_in = 0;
 80012fa:	f04f 0800 	mov.w	r8, #0
 80012fe:	f103 0320 	add.w	r3, r3, #32
    hpcd->IN_ep[index].maxpacket =  0;
    hpcd->IN_ep[index].xfer_buff = 0;
    hpcd->IN_ep[index].xfer_len = 0;
  }
  
  for (index = 0; index < 15 ; index++)
 8001302:	d1eb      	bne.n	80012dc <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[index].xfer_buff = 0;
    hpcd->OUT_ep[index].xfer_len = 0;
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 8001304:	466e      	mov	r6, sp
 8001306:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001308:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800130a:	682b      	ldr	r3, [r5, #0]
 800130c:	6033      	str	r3, [r6, #0]
 800130e:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001312:	6820      	ldr	r0, [r4, #0]
 8001314:	f001 f9b0 	bl	8002678 <USB_DevInit>
  
  hpcd->USB_Address = 0;
  hpcd->State= HAL_PCD_STATE_READY;
 8001318:	2301      	movs	r3, #1
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
  
  hpcd->USB_Address = 0;
 800131a:	f884 8024 	strb.w	r8, [r4, #36]	; 0x24
  hpcd->State= HAL_PCD_STATE_READY;
  
  USB_DevDisconnect (hpcd->Instance);  
 800131e:	6820      	ldr	r0, [r4, #0]
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
  
  hpcd->USB_Address = 0;
  hpcd->State= HAL_PCD_STATE_READY;
 8001320:	f884 33e9 	strb.w	r3, [r4, #1001]	; 0x3e9
  
  USB_DevDisconnect (hpcd->Instance);  
 8001324:	f001 fc61 	bl	8002bea <USB_DevDisconnect>
  return HAL_OK;
 8001328:	4640      	mov	r0, r8
 800132a:	e000      	b.n	800132e <HAL_PCD_Init+0xce>
  uint32_t index = 0;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
  {
    return HAL_ERROR;
 800132c:	2001      	movs	r0, #1
  hpcd->USB_Address = 0;
  hpcd->State= HAL_PCD_STATE_READY;
  
  USB_DevDisconnect (hpcd->Instance);  
  return HAL_OK;
}
 800132e:	b006      	add	sp, #24
 8001330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001334 <HAL_PCD_Start>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8001334:	f890 33e8 	ldrb.w	r3, [r0, #1000]	; 0x3e8
  * @brief  Start The USB Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001338:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 800133a:	2b01      	cmp	r3, #1
  * @brief  Start The USB Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800133c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800133e:	d00e      	beq.n	800135e <HAL_PCD_Start+0x2a>
 8001340:	2101      	movs	r1, #1
 8001342:	f880 13e8 	strb.w	r1, [r0, #1000]	; 0x3e8
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 8001346:	f002 fcf6 	bl	8003d36 <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 800134a:	6820      	ldr	r0, [r4, #0]
 800134c:	f001 fc4b 	bl	8002be6 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001350:	6820      	ldr	r0, [r4, #0]
 8001352:	f001 f97c 	bl	800264e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001356:	2000      	movs	r0, #0
 8001358:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  return HAL_OK;
 800135c:	bd10      	pop	{r4, pc}
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 800135e:	2002      	movs	r0, #2
  HAL_PCDEx_SetConnectionState (hpcd, 1);
  USB_DevConnect (hpcd->Instance);
  __HAL_PCD_ENABLE(hpcd);
  __HAL_UNLOCK(hpcd);
  return HAL_OK;
}
 8001360:	bd10      	pop	{r4, pc}

08001362 <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8001362:	f890 23e8 	ldrb.w	r2, [r0, #1000]	; 0x3e8
  * @param  hpcd: PCD handle
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001366:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8001368:	2a01      	cmp	r2, #1
  * @param  hpcd: PCD handle
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800136a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800136c:	d00b      	beq.n	8001386 <HAL_PCD_SetAddress+0x24>
 800136e:	2201      	movs	r2, #1
 8001370:	f880 23e8 	strb.w	r2, [r0, #1000]	; 0x3e8
  hpcd->USB_Address = address;
 8001374:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 8001378:	6800      	ldr	r0, [r0, #0]
 800137a:	f001 fc2e 	bl	8002bda <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800137e:	2000      	movs	r0, #0
 8001380:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
 8001384:	bd10      	pop	{r4, pc}
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8001386:	2002      	movs	r0, #2
  hpcd->USB_Address = address;
  USB_SetDevAddress(hpcd->Instance, address);
  __HAL_UNLOCK(hpcd);
  return HAL_OK;
}
 8001388:	bd10      	pop	{r4, pc}

0800138a <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800138a:	b538      	push	{r3, r4, r5, lr}
 800138c:	4604      	mov	r4, r0
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80) == 0x80)
 800138e:	b248      	sxtb	r0, r1
 8001390:	2800      	cmp	r0, #0
 8001392:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001396:	bfb5      	itete	lt
 8001398:	eb04 1145 	addlt.w	r1, r4, r5, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800139c:	eb04 1141 	addge.w	r1, r4, r1, lsl #5
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80013a0:	3128      	addlt	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80013a2:	f501 7102 	addge.w	r1, r1, #520	; 0x208
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 80013a6:	0fc0      	lsrs	r0, r0, #31
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
 80013a8:	700d      	strb	r5, [r1, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 80013aa:	7048      	strb	r0, [r1, #1]
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
 80013ac:	70cb      	strb	r3, [r1, #3]
    
  __HAL_LOCK(hpcd);
 80013ae:	f894 33e8 	ldrb.w	r3, [r4, #1000]	; 0x3e8
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
  ep->maxpacket = ep_mps;
 80013b2:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
    
  __HAL_LOCK(hpcd);
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d009      	beq.n	80013cc <HAL_PCD_EP_Open+0x42>
 80013b8:	2301      	movs	r3, #1
 80013ba:	f884 33e8 	strb.w	r3, [r4, #1000]	; 0x3e8
  USB_ActivateEndpoint(hpcd->Instance , ep);
 80013be:	6820      	ldr	r0, [r4, #0]
 80013c0:	f001 f96e 	bl	80026a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80013c4:	2000      	movs	r0, #0
 80013c6:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  return ret;
 80013ca:	bd38      	pop	{r3, r4, r5, pc}
  
  ep->is_in = (0x80 & ep_addr) != 0;
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
    
  __HAL_LOCK(hpcd);
 80013cc:	2002      	movs	r0, #2
  USB_ActivateEndpoint(hpcd->Instance , ep);
  __HAL_UNLOCK(hpcd);
  return ret;
}
 80013ce:	bd38      	pop	{r3, r4, r5, pc}

080013d0 <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80) == 0x80)
 80013d0:	b24b      	sxtb	r3, r1
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	f001 027f 	and.w	r2, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80013d8:	bfb5      	itete	lt
 80013da:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80013de:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
{  
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80013e2:	3128      	addlt	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80013e4:	f501 7102 	addge.w	r1, r1, #520	; 0x208
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 80013e8:	0fdb      	lsrs	r3, r3, #31
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 80013ea:	b510      	push	{r4, lr}
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
 80013ec:	700a      	strb	r2, [r1, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 80013ee:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd);
 80013f0:	f890 33e8 	ldrb.w	r3, [r0, #1000]	; 0x3e8
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 80013f4:	4604      	mov	r4, r0
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
  
  __HAL_LOCK(hpcd);
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d009      	beq.n	800140e <HAL_PCD_EP_Close+0x3e>
 80013fa:	2301      	movs	r3, #1
 80013fc:	f880 33e8 	strb.w	r3, [r0, #1000]	; 0x3e8
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8001400:	6800      	ldr	r0, [r0, #0]
 8001402:	f001 fabf 	bl	8002984 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001406:	2000      	movs	r0, #0
 8001408:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  return HAL_OK;
 800140c:	bd10      	pop	{r4, pc}
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
  
  __HAL_LOCK(hpcd);
 800140e:	2002      	movs	r0, #2
  USB_DeactivateEndpoint(hpcd->Instance , ep);
  __HAL_UNLOCK(hpcd);
  return HAL_OK;
}
 8001410:	bd10      	pop	{r4, pc}

08001412 <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001412:	b570      	push	{r4, r5, r6, lr}
 8001414:	4604      	mov	r4, r0
 8001416:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 800141a:	0170      	lsls	r0, r6, #5
 800141c:	1825      	adds	r5, r4, r0
  ep->xfer_len = len;
 800141e:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
  ep->xfer_count = 0;
 8001422:	2300      	movs	r3, #0
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8001424:	f8c5 221c 	str.w	r2, [r5, #540]	; 0x21c
  ep->xfer_len = len;
  ep->xfer_count = 0;
 8001428:	f8c5 3224 	str.w	r3, [r5, #548]	; 0x224
  ep->is_in = 0;
 800142c:	f885 3209 	strb.w	r3, [r5, #521]	; 0x209
  ep->num = ep_addr & 0x7F;
 8001430:	f885 6208 	strb.w	r6, [r5, #520]	; 0x208
  
  __HAL_LOCK(hpcd);
 8001434:	f894 33e8 	ldrb.w	r3, [r4, #1000]	; 0x3e8
 8001438:	2b01      	cmp	r3, #1
 800143a:	d00c      	beq.n	8001456 <HAL_PCD_EP_Receive+0x44>
 800143c:	2301      	movs	r3, #1
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800143e:	f500 7002 	add.w	r0, r0, #520	; 0x208
 8001442:	1821      	adds	r1, r4, r0
  ep->xfer_len = len;
  ep->xfer_count = 0;
  ep->is_in = 0;
  ep->num = ep_addr & 0x7F;
  
  __HAL_LOCK(hpcd);
 8001444:	f884 33e8 	strb.w	r3, [r4, #1000]	; 0x3e8
  
  if ((ep_addr & 0x7F) == 0 )
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
 8001448:	6820      	ldr	r0, [r4, #0]
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 800144a:	f001 fbe7 	bl	8002c1c <USB_EPStartXfer>
  }
  __HAL_UNLOCK(hpcd);
 800144e:	2000      	movs	r0, #0
 8001450:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  
  return HAL_OK;
 8001454:	bd70      	pop	{r4, r5, r6, pc}
  ep->xfer_len = len;
  ep->xfer_count = 0;
  ep->is_in = 0;
  ep->num = ep_addr & 0x7F;
  
  __HAL_LOCK(hpcd);
 8001456:	2002      	movs	r0, #2
    USB_EPStartXfer(hpcd->Instance , ep);
  }
  __HAL_UNLOCK(hpcd);
  
  return HAL_OK;
}
 8001458:	bd70      	pop	{r4, r5, r6, pc}

0800145a <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & 0x7F].xfer_count;
 800145a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800145e:	eb00 1041 	add.w	r0, r0, r1, lsl #5
}
 8001462:	f8b0 0224 	ldrh.w	r0, [r0, #548]	; 0x224
 8001466:	4770      	bx	lr

08001468 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001468:	b570      	push	{r4, r5, r6, lr}
 800146a:	4604      	mov	r4, r0
 800146c:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8001470:	0170      	lsls	r0, r6, #5
 8001472:	1825      	adds	r5, r4, r0
  ep->xfer_len = len;
 8001474:	642b      	str	r3, [r5, #64]	; 0x40
  ep->xfer_count = 0;
 8001476:	2300      	movs	r3, #0
 8001478:	646b      	str	r3, [r5, #68]	; 0x44
  ep->is_in = 1;
 800147a:	2301      	movs	r3, #1
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 800147c:	63ea      	str	r2, [r5, #60]	; 0x3c
  ep->xfer_len = len;
  ep->xfer_count = 0;
  ep->is_in = 1;
 800147e:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
  ep->num = ep_addr & 0x7F;
 8001482:	f885 6028 	strb.w	r6, [r5, #40]	; 0x28
  
  __HAL_LOCK(hpcd);
 8001486:	f894 23e8 	ldrb.w	r2, [r4, #1000]	; 0x3e8
 800148a:	429a      	cmp	r2, r3
 800148c:	d00a      	beq.n	80014a4 <HAL_PCD_EP_Transmit+0x3c>
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800148e:	3028      	adds	r0, #40	; 0x28
 8001490:	1821      	adds	r1, r4, r0
  ep->xfer_len = len;
  ep->xfer_count = 0;
  ep->is_in = 1;
  ep->num = ep_addr & 0x7F;
  
  __HAL_LOCK(hpcd);
 8001492:	f884 33e8 	strb.w	r3, [r4, #1000]	; 0x3e8
  
  if ((ep_addr & 0x7F) == 0 )
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
 8001496:	6820      	ldr	r0, [r4, #0]
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8001498:	f001 fbc0 	bl	8002c1c <USB_EPStartXfer>
  }
  
  __HAL_UNLOCK(hpcd);
 800149c:	2000      	movs	r0, #0
 800149e:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  
  return HAL_OK;
 80014a2:	bd70      	pop	{r4, r5, r6, pc}
  ep->xfer_len = len;
  ep->xfer_count = 0;
  ep->is_in = 1;
  ep->num = ep_addr & 0x7F;
  
  __HAL_LOCK(hpcd);
 80014a4:	2002      	movs	r0, #2
  }
  
  __HAL_UNLOCK(hpcd);
  
  return HAL_OK;
}
 80014a6:	bd70      	pop	{r4, r5, r6, pc}

080014a8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80014a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80014ac:	4604      	mov	r4, r0
  uint32_t wInterrupt_Mask = 0;
  
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 80014ae:	6800      	ldr	r0, [r0, #0]
 80014b0:	f001 fb9d 	bl	8002bee <USB_ReadInterrupts>
 80014b4:	0400      	lsls	r0, r0, #16
 80014b6:	d416      	bmi.n	80014e6 <HAL_PCD_IRQHandler+0x3e>
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    PCD_EP_ISR_Handler(hpcd);
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 80014b8:	6820      	ldr	r0, [r4, #0]
 80014ba:	f001 fb98 	bl	8002bee <USB_ReadInterrupts>
 80014be:	0541      	lsls	r1, r0, #21
 80014c0:	f140 81db 	bpl.w	800187a <HAL_PCD_IRQHandler+0x3d2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80014c4:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 80014c6:	4620      	mov	r0, r4
    PCD_EP_ISR_Handler(hpcd);
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80014c8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80014cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80014d0:	041b      	lsls	r3, r3, #16
 80014d2:	0c1b      	lsrs	r3, r3, #16
 80014d4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 80014d8:	f002 fb63 	bl	8003ba2 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0);
 80014dc:	2100      	movs	r1, #0
 80014de:	4620      	mov	r0, r4
 80014e0:	f7ff ff3f 	bl	8001362 <HAL_PCD_SetAddress>
 80014e4:	e1c9      	b.n	800187a <HAL_PCD_IRQHandler+0x3d2>
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
  PCD_EPTypeDef *ep = NULL;
  uint16_t count = 0;
  uint8_t epindex = 0;
  __IO uint16_t wIstr = 0;  
 80014e6:	2300      	movs	r3, #0
 80014e8:	f8ad 3004 	strh.w	r3, [sp, #4]
        
        if ((wEPVal & USB_EP_SETUP) != 0)
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 80014ec:	f504 777b 	add.w	r7, r4, #1004	; 0x3ec
{
  PCD_EPTypeDef *ep = NULL;
  uint16_t count = 0;
  uint8_t epindex = 0;
  __IO uint16_t wIstr = 0;  
  __IO uint16_t wEPVal = 0;
 80014f0:	f8ad 3006 	strh.w	r3, [sp, #6]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 80014f4:	6820      	ldr	r0, [r4, #0]
 80014f6:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	f8ad 3004 	strh.w	r3, [sp, #4]
 8001500:	041b      	lsls	r3, r3, #16
 8001502:	d5d9      	bpl.n	80014b8 <HAL_PCD_IRQHandler+0x10>
  {
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001504:	f8bd 5004 	ldrh.w	r5, [sp, #4]
    
    if (epindex == 0)
 8001508:	f015 050f 	ands.w	r5, r5, #15
 800150c:	f040 80b5 	bne.w	800167a <HAL_PCD_IRQHandler+0x1d2>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 8001510:	f8bd 1004 	ldrh.w	r1, [sp, #4]
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001514:	8803      	ldrh	r3, [r0, #0]
    if (epindex == 0)
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 8001516:	f001 0110 	and.w	r1, r1, #16
 800151a:	b289      	uxth	r1, r1
 800151c:	bb59      	cbnz	r1, 8001576 <HAL_PCD_IRQHandler+0xce>
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800151e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001526:	041b      	lsls	r3, r3, #16
 8001528:	0c1b      	lsrs	r3, r3, #16
 800152a:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800152c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001530:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8001534:	b29b      	uxth	r3, r3
 8001536:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800153a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800153e:	f8d0 3404 	ldr.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8001542:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
        ep = &hpcd->IN_ep[0];
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001544:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001548:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 800154a:	4413      	add	r3, r2
 800154c:	63e3      	str	r3, [r4, #60]	; 0x3c
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0);
 800154e:	4620      	mov	r0, r4
 8001550:	f002 fb1c 	bl	8003b8c <HAL_PCD_DataInStageCallback>
        
        
        if((hpcd->USB_Address > 0)&& ( ep->xfer_len == 0))
 8001554:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001558:	2b00      	cmp	r3, #0
 800155a:	d0cb      	beq.n	80014f4 <HAL_PCD_IRQHandler+0x4c>
 800155c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800155e:	2a00      	cmp	r2, #0
 8001560:	d1c8      	bne.n	80014f4 <HAL_PCD_IRQHandler+0x4c>
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8001562:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001566:	6821      	ldr	r1, [r4, #0]
 8001568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800156c:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0;
 8001570:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8001574:	e7be      	b.n	80014f4 <HAL_PCD_IRQHandler+0x4c>
        /* DIR = 1 */
        
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001576:	b29b      	uxth	r3, r3
 8001578:	f8ad 3006 	strh.w	r3, [sp, #6]
        
        if ((wEPVal & USB_EP_SETUP) != 0)
 800157c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001580:	051a      	lsls	r2, r3, #20
 8001582:	d51e      	bpl.n	80015c2 <HAL_PCD_IRQHandler+0x11a>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001584:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001588:	f894 2208 	ldrb.w	r2, [r4, #520]	; 0x208
 800158c:	b29b      	uxth	r3, r3
 800158e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001592:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001596:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 800159a:	f8b4 220c 	ldrh.w	r2, [r4, #524]	; 0x20c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
        
        if ((wEPVal & USB_EP_SETUP) != 0)
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800159e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015a2:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 80015a6:	4639      	mov	r1, r7
 80015a8:	f001 fc08 	bl	8002dbc <USB_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 80015ac:	6822      	ldr	r2, [r4, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 80015ae:	4620      	mov	r0, r4
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 80015b0:	8813      	ldrh	r3, [r2, #0]
 80015b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015b6:	051b      	lsls	r3, r3, #20
 80015b8:	0d1b      	lsrs	r3, r3, #20
 80015ba:	8013      	strh	r3, [r2, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 80015bc:	f002 fad8 	bl	8003b70 <HAL_PCD_SetupStageCallback>
 80015c0:	e798      	b.n	80014f4 <HAL_PCD_IRQHandler+0x4c>
        }
        
        else if ((wEPVal & USB_EP_CTR_RX) != 0)
 80015c2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80015c6:	041b      	lsls	r3, r3, #16
 80015c8:	d594      	bpl.n	80014f4 <HAL_PCD_IRQHandler+0x4c>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80015ca:	8803      	ldrh	r3, [r0, #0]
 80015cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015d0:	051b      	lsls	r3, r3, #20
 80015d2:	0d1b      	lsrs	r3, r3, #20
 80015d4:	8003      	strh	r3, [r0, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80015d6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80015da:	f894 2208 	ldrb.w	r2, [r4, #520]	; 0x208
 80015de:	b29b      	uxth	r3, r3
 80015e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80015e4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80015e8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80015ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015f0:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
          
          if (ep->xfer_count != 0)
 80015f4:	b163      	cbz	r3, 8001610 <HAL_PCD_IRQHandler+0x168>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 80015f6:	f8b4 220c 	ldrh.w	r2, [r4, #524]	; 0x20c
 80015fa:	f8d4 121c 	ldr.w	r1, [r4, #540]	; 0x21c
 80015fe:	f001 fbdd 	bl	8002dbc <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8001602:	f8d4 221c 	ldr.w	r2, [r4, #540]	; 0x21c
 8001606:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
 800160a:	4413      	add	r3, r2
 800160c:	f8c4 321c 	str.w	r3, [r4, #540]	; 0x21c
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0);
 8001610:	2100      	movs	r1, #0
 8001612:	4620      	mov	r0, r4
 8001614:	f002 fab2 	bl	8003b7c <HAL_PCD_DataOutStageCallback>
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001618:	6822      	ldr	r2, [r4, #0]
 800161a:	f8d4 5218 	ldr.w	r5, [r4, #536]	; 0x218
 800161e:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8001622:	2d3e      	cmp	r5, #62	; 0x3e
 8001624:	b289      	uxth	r1, r1
 8001626:	f101 0106 	add.w	r1, r1, #6
 800162a:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 800162e:	d90b      	bls.n	8001648 <HAL_PCD_IRQHandler+0x1a0>
 8001630:	f3c5 134f 	ubfx	r3, r5, #5, #16
 8001634:	06ee      	lsls	r6, r5, #27
 8001636:	bf04      	itt	eq
 8001638:	f103 33ff 	addeq.w	r3, r3, #4294967295
 800163c:	b29b      	uxtheq	r3, r3
 800163e:	ea6f 63c3 	mvn.w	r3, r3, lsl #27
 8001642:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001646:	e006      	b.n	8001656 <HAL_PCD_IRQHandler+0x1ae>
 8001648:	f3c5 034f 	ubfx	r3, r5, #1, #16
 800164c:	07ed      	lsls	r5, r5, #31
 800164e:	bf44      	itt	mi
 8001650:	3301      	addmi	r3, #1
 8001652:	b29b      	uxthmi	r3, r3
 8001654:	029b      	lsls	r3, r3, #10
 8001656:	b29b      	uxth	r3, r3
 8001658:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800165c:	8813      	ldrh	r3, [r2, #0]
 800165e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001666:	041b      	lsls	r3, r3, #16
 8001668:	0c1b      	lsrs	r3, r3, #16
 800166a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800166e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001672:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001676:	8013      	strh	r3, [r2, #0]
 8001678:	e73c      	b.n	80014f4 <HAL_PCD_IRQHandler+0x4c>
    else
    {
      /* Decode and service non control endpoints interrupt  */
	  
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800167a:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 800167e:	b29b      	uxth	r3, r3
 8001680:	f8ad 3006 	strh.w	r3, [sp, #6]
      if ((wEPVal & USB_EP_CTR_RX) != 0)
 8001684:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001688:	0419      	lsls	r1, r3, #16
 800168a:	d577      	bpl.n	800177c <HAL_PCD_IRQHandler+0x2d4>
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800168c:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        ep = &hpcd->OUT_ep[epindex];
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0)
 8001690:	ea4f 1845 	mov.w	r8, r5, lsl #5
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
      if ((wEPVal & USB_EP_CTR_RX) != 0)
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001698:	051b      	lsls	r3, r3, #20
 800169a:	0d1b      	lsrs	r3, r3, #20
 800169c:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        ep = &hpcd->OUT_ep[epindex];
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0)
 80016a0:	eb04 0108 	add.w	r1, r4, r8
 80016a4:	f891 3212 	ldrb.w	r3, [r1, #530]	; 0x212
 80016a8:	b9ab      	cbnz	r3, 80016d6 <HAL_PCD_IRQHandler+0x22e>
        {
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80016aa:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80016ae:	f891 2208 	ldrb.w	r2, [r1, #520]	; 0x208
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80016b8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80016bc:	f8d3 640c 	ldr.w	r6, [r3, #1036]	; 0x40c
 80016c0:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0)
 80016c4:	b3de      	cbz	r6, 800173e <HAL_PCD_IRQHandler+0x296>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80016c6:	f8b1 220c 	ldrh.w	r2, [r1, #524]	; 0x20c
 80016ca:	4633      	mov	r3, r6
 80016cc:	f8d1 121c 	ldr.w	r1, [r1, #540]	; 0x21c
 80016d0:	f001 fb74 	bl	8002dbc <USB_ReadPMA>
 80016d4:	e033      	b.n	800173e <HAL_PCD_IRQHandler+0x296>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 80016d6:	f891 3208 	ldrb.w	r3, [r1, #520]	; 0x208
 80016da:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	f412 4f80 	tst.w	r2, #16384	; 0x4000
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80016e4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80016e8:	b292      	uxth	r2, r2
 80016ea:	4413      	add	r3, r2
 80016ec:	eb00 0343 	add.w	r3, r0, r3, lsl #1
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 80016f0:	d008      	beq.n	8001704 <HAL_PCD_IRQHandler+0x25c>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80016f2:	f8d3 6404 	ldr.w	r6, [r3, #1028]	; 0x404
 80016f6:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0)
 80016fa:	b17e      	cbz	r6, 800171c <HAL_PCD_IRQHandler+0x274>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80016fc:	4633      	mov	r3, r6
 80016fe:	f8b1 220e 	ldrh.w	r2, [r1, #526]	; 0x20e
 8001702:	e007      	b.n	8001714 <HAL_PCD_IRQHandler+0x26c>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001704:	f8d3 640c 	ldr.w	r6, [r3, #1036]	; 0x40c
 8001708:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0)
 800170c:	b136      	cbz	r6, 800171c <HAL_PCD_IRQHandler+0x274>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800170e:	4633      	mov	r3, r6
 8001710:	f8b1 2210 	ldrh.w	r2, [r1, #528]	; 0x210
 8001714:	f8d1 121c 	ldr.w	r1, [r1, #540]	; 0x21c
 8001718:	f001 fb50 	bl	8002dbc <USB_ReadPMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 800171c:	eb04 0308 	add.w	r3, r4, r8
 8001720:	f893 1208 	ldrb.w	r1, [r3, #520]	; 0x208
 8001724:	6822      	ldr	r2, [r4, #0]
 8001726:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800172a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800172e:	051b      	lsls	r3, r3, #20
 8001730:	0d1b      	lsrs	r3, r3, #20
 8001732:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001736:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800173a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800173e:	eb04 0108 	add.w	r1, r4, r8
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 8001742:	f8d1 3224 	ldr.w	r3, [r1, #548]	; 0x224
        ep->xfer_buff+=count;
 8001746:	f8d1 221c 	ldr.w	r2, [r1, #540]	; 0x21c
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 800174a:	4433      	add	r3, r6
 800174c:	f8c1 3224 	str.w	r3, [r1, #548]	; 0x224
        ep->xfer_buff+=count;
       
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 8001750:	f8d1 3220 	ldr.w	r3, [r1, #544]	; 0x220
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
        ep->xfer_buff+=count;
 8001754:	4432      	add	r2, r6
 8001756:	f8c1 221c 	str.w	r2, [r1, #540]	; 0x21c
       
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 800175a:	b11b      	cbz	r3, 8001764 <HAL_PCD_IRQHandler+0x2bc>
 800175c:	f8d1 0218 	ldr.w	r0, [r1, #536]	; 0x218
 8001760:	4286      	cmp	r6, r0
 8001762:	d206      	bcs.n	8001772 <HAL_PCD_IRQHandler+0x2ca>
        {
          /* RX COMPLETE */
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001764:	44a0      	add	r8, r4
 8001766:	f898 1208 	ldrb.w	r1, [r8, #520]	; 0x208
 800176a:	4620      	mov	r0, r4
 800176c:	f002 fa06 	bl	8003b7c <HAL_PCD_DataOutStageCallback>
 8001770:	e004      	b.n	800177c <HAL_PCD_IRQHandler+0x2d4>
        }
        else
        {
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001772:	f891 1208 	ldrb.w	r1, [r1, #520]	; 0x208
 8001776:	4620      	mov	r0, r4
 8001778:	f7ff fe4b 	bl	8001412 <HAL_PCD_EP_Receive>
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0)
 800177c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001780:	061a      	lsls	r2, r3, #24
 8001782:	f57f aeb7 	bpl.w	80014f4 <HAL_PCD_IRQHandler+0x4c>
      {
        ep = &hpcd->IN_ep[epindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001786:	6820      	ldr	r0, [r4, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0)
 8001788:	016e      	lsls	r6, r5, #5
      if ((wEPVal & USB_EP_CTR_TX) != 0)
      {
        ep = &hpcd->IN_ep[epindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800178a:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0)
 800178e:	19a1      	adds	r1, r4, r6
      if ((wEPVal & USB_EP_CTR_TX) != 0)
      {
        ep = &hpcd->IN_ep[epindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001790:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001798:	041b      	lsls	r3, r3, #16
 800179a:	0c1b      	lsrs	r3, r3, #16
 800179c:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0)
 80017a0:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 80017a4:	3502      	adds	r5, #2
 80017a6:	b9b3      	cbnz	r3, 80017d6 <HAL_PCD_IRQHandler+0x32e>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80017a8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80017ac:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80017b6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80017ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80017be:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 80017c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017c6:	606b      	str	r3, [r5, #4]
          if (ep->xfer_count != 0)
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d038      	beq.n	800183e <HAL_PCD_IRQHandler+0x396>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 80017cc:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 80017ce:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 80017d0:	f001 fa13 	bl	8002bfa <USB_WritePMA>
 80017d4:	e033      	b.n	800183e <HAL_PCD_IRQHandler+0x396>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 80017d6:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 80017da:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	f012 0f40 	tst.w	r2, #64	; 0x40
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80017e4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80017e8:	b292      	uxth	r2, r2
 80017ea:	4413      	add	r3, r2
 80017ec:	eb00 0343 	add.w	r3, r0, r3, lsl #1
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 80017f0:	d009      	beq.n	8001806 <HAL_PCD_IRQHandler+0x35e>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80017f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80017f6:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 80017fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017fe:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0)
 8001800:	b16b      	cbz	r3, 800181e <HAL_PCD_IRQHandler+0x376>
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8001802:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
 8001804:	e008      	b.n	8001818 <HAL_PCD_IRQHandler+0x370>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001806:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800180a:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 800180e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001812:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0)
 8001814:	b11b      	cbz	r3, 800181e <HAL_PCD_IRQHandler+0x376>
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8001816:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 8001818:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800181a:	f001 f9ee 	bl	8002bfa <USB_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 800181e:	19a3      	adds	r3, r4, r6
 8001820:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8001824:	6822      	ldr	r2, [r4, #0]
 8001826:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800182a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800182e:	051b      	lsls	r3, r3, #20
 8001830:	0d1b      	lsrs	r3, r3, #20
 8001832:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800183a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800183e:	6820      	ldr	r0, [r4, #0]
 8001840:	19a1      	adds	r1, r4, r6
 8001842:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001846:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 800184a:	b292      	uxth	r2, r2
 800184c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8001850:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001854:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
        ep->xfer_buff+=ep->xfer_count;
 8001858:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800185a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800185e:	644a      	str	r2, [r1, #68]	; 0x44
        ep->xfer_buff+=ep->xfer_count;
 8001860:	441a      	add	r2, r3
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
 8001862:	6c0b      	ldr	r3, [r1, #64]	; 0x40
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
        ep->xfer_buff+=ep->xfer_count;
 8001864:	63ca      	str	r2, [r1, #60]	; 0x3c
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001866:	4620      	mov	r0, r4
 8001868:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
        ep->xfer_buff+=ep->xfer_count;
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
 800186c:	b913      	cbnz	r3, 8001874 <HAL_PCD_IRQHandler+0x3cc>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800186e:	f002 f98d 	bl	8003b8c <HAL_PCD_DataInStageCallback>
 8001872:	e63f      	b.n	80014f4 <HAL_PCD_IRQHandler+0x4c>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001874:	f7ff fdf8 	bl	8001468 <HAL_PCD_EP_Transmit>
 8001878:	e63c      	b.n	80014f4 <HAL_PCD_IRQHandler+0x4c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
    HAL_PCD_ResetCallback(hpcd);
    HAL_PCD_SetAddress(hpcd, 0);
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 800187a:	6820      	ldr	r0, [r4, #0]
 800187c:	f001 f9b7 	bl	8002bee <USB_ReadInterrupts>
 8001880:	0447      	lsls	r7, r0, #17
 8001882:	d508      	bpl.n	8001896 <HAL_PCD_IRQHandler+0x3ee>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 8001884:	6822      	ldr	r2, [r4, #0]
 8001886:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800188a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800188e:	041b      	lsls	r3, r3, #16
 8001890:	0c1b      	lsrs	r3, r3, #16
 8001892:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8001896:	6820      	ldr	r0, [r4, #0]
 8001898:	f001 f9a9 	bl	8002bee <USB_ReadInterrupts>
 800189c:	0486      	lsls	r6, r0, #18
 800189e:	d508      	bpl.n	80018b2 <HAL_PCD_IRQHandler+0x40a>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 80018a0:	6822      	ldr	r2, [r4, #0]
 80018a2:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80018a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80018aa:	041b      	lsls	r3, r3, #16
 80018ac:	0c1b      	lsrs	r3, r3, #16
 80018ae:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 80018b2:	6820      	ldr	r0, [r4, #0]
 80018b4:	f001 f99b 	bl	8002bee <USB_ReadInterrupts>
 80018b8:	04c5      	lsls	r5, r0, #19
 80018ba:	d518      	bpl.n	80018ee <HAL_PCD_IRQHandler+0x446>
  {  
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 80018bc:	6822      	ldr	r2, [r4, #0]
      | USB_CNTR_ESOFM | USB_CNTR_RESETM;
    
    /*Set interrupt mask*/
    hpcd->Instance->CNTR = wInterrupt_Mask;
    
    HAL_PCD_ResumeCallback(hpcd);
 80018be:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
  {  
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 80018c0:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80018c4:	f023 0304 	bic.w	r3, r3, #4
 80018c8:	041b      	lsls	r3, r3, #16
 80018ca:	0c1b      	lsrs	r3, r3, #16
 80018cc:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    /*set wInterrupt_Mask global variable*/
    wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
      | USB_CNTR_ESOFM | USB_CNTR_RESETM;
    
    /*Set interrupt mask*/
    hpcd->Instance->CNTR = wInterrupt_Mask;
 80018d0:	f44f 433d 	mov.w	r3, #48384	; 0xbd00
 80018d4:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    
    HAL_PCD_ResumeCallback(hpcd);
 80018d8:	f002 f980 	bl	8003bdc <HAL_PCD_ResumeCallback>
    
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 80018dc:	6822      	ldr	r2, [r4, #0]
 80018de:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80018e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80018e6:	041b      	lsls	r3, r3, #16
 80018e8:	0c1b      	lsrs	r3, r3, #16
 80018ea:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 80018ee:	6820      	ldr	r0, [r4, #0]
 80018f0:	f001 f97d 	bl	8002bee <USB_ReadInterrupts>
 80018f4:	0500      	lsls	r0, r0, #20
 80018f6:	d51d      	bpl.n	8001934 <HAL_PCD_IRQHandler+0x48c>
  {
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 80018f8:	6820      	ldr	r0, [r4, #0]
 80018fa:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80018fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001902:	041b      	lsls	r3, r3, #16
 8001904:	0c1b      	lsrs	r3, r3, #16
 8001906:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 800190a:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800190e:	b29b      	uxth	r3, r3
 8001910:	f043 0308 	orr.w	r3, r3, #8
 8001914:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8001918:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800191c:	b29b      	uxth	r3, r3
 800191e:	f043 0304 	orr.w	r3, r3, #4
 8001922:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0)
 8001926:	f001 f962 	bl	8002bee <USB_ReadInterrupts>
 800192a:	04c1      	lsls	r1, r0, #19
 800192c:	d402      	bmi.n	8001934 <HAL_PCD_IRQHandler+0x48c>
    {
      HAL_PCD_SuspendCallback(hpcd);
 800192e:	4620      	mov	r0, r4
 8001930:	f002 f944 	bl	8003bbc <HAL_PCD_SuspendCallback>
    }
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8001934:	6820      	ldr	r0, [r4, #0]
 8001936:	f001 f95a 	bl	8002bee <USB_ReadInterrupts>
 800193a:	0582      	lsls	r2, r0, #22
 800193c:	d50b      	bpl.n	8001956 <HAL_PCD_IRQHandler+0x4ae>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 800193e:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8001940:	4620      	mov	r0, r4
    }
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8001942:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001946:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800194a:	041b      	lsls	r3, r3, #16
 800194c:	0c1b      	lsrs	r3, r3, #16
 800194e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8001952:	f002 f922 	bl	8003b9a <HAL_PCD_SOFCallback>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8001956:	6820      	ldr	r0, [r4, #0]
 8001958:	f001 f949 	bl	8002bee <USB_ReadInterrupts>
 800195c:	05c3      	lsls	r3, r0, #23
 800195e:	d508      	bpl.n	8001972 <HAL_PCD_IRQHandler+0x4ca>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 8001960:	6822      	ldr	r2, [r4, #0]
 8001962:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001966:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800196a:	041b      	lsls	r3, r3, #16
 800196c:	0c1b      	lsrs	r3, r3, #16
 800196e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }
}
 8001972:	b002      	add	sp, #8
 8001974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001978 <HAL_PCD_EP_SetStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001978:	b538      	push	{r3, r4, r5, lr}
  PCD_EPTypeDef *ep = NULL;
  
  if ((0x80 & ep_addr) == 0x80)
 800197a:	b24b      	sxtb	r3, r1
 800197c:	2b00      	cmp	r3, #0
 800197e:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001982:	bfb5      	itete	lt
 8001984:	eb00 1145 	addlt.w	r1, r0, r5, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001988:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
{
  PCD_EPTypeDef *ep = NULL;
  
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800198c:	3128      	addlt	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800198e:	f501 7102 	addge.w	r1, r1, #520	; 0x208
  }
  
  ep->is_stall = 1;
 8001992:	2201      	movs	r2, #1
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001994:	0fdb      	lsrs	r3, r3, #31
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  ep->is_stall = 1;
  ep->num   = ep_addr & 0x7F;
 8001996:	b2ed      	uxtb	r5, r5
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  ep->is_stall = 1;
 8001998:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 800199a:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800199c:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd);
 800199e:	f890 33e8 	ldrb.w	r3, [r0, #1000]	; 0x3e8
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019a2:	4604      	mov	r4, r0
  
  ep->is_stall = 1;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  __HAL_LOCK(hpcd);
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d00e      	beq.n	80019c6 <HAL_PCD_EP_SetStall+0x4e>
 80019a8:	f880 23e8 	strb.w	r2, [r0, #1000]	; 0x3e8
  USB_EPSetStall(hpcd->Instance , ep);
 80019ac:	6800      	ldr	r0, [r0, #0]
 80019ae:	f001 f8a1 	bl	8002af4 <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 80019b2:	b925      	cbnz	r5, 80019be <HAL_PCD_EP_SetStall+0x46>
  {
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80019b4:	f504 717b 	add.w	r1, r4, #1004	; 0x3ec
 80019b8:	6820      	ldr	r0, [r4, #0]
 80019ba:	f001 f91c 	bl	8002bf6 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd); 
 80019be:	2000      	movs	r0, #0
 80019c0:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  
  return HAL_OK;
 80019c4:	bd38      	pop	{r3, r4, r5, pc}
  
  ep->is_stall = 1;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  __HAL_LOCK(hpcd);
 80019c6:	2002      	movs	r0, #2
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
  }
  __HAL_UNLOCK(hpcd); 
  
  return HAL_OK;
}
 80019c8:	bd38      	pop	{r3, r4, r5, pc}

080019ca <HAL_PCD_EP_ClrStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019ca:	b538      	push	{r3, r4, r5, lr}
  PCD_EPTypeDef *ep = NULL;
  
  if ((0x80 & ep_addr) == 0x80)
 80019cc:	b24b      	sxtb	r3, r1
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	f001 027f 	and.w	r2, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80019d4:	bfb5      	itete	lt
 80019d6:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80019da:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
{
  PCD_EPTypeDef *ep = NULL;
  
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80019de:	3128      	addlt	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80019e0:	f501 7102 	addge.w	r1, r1, #520	; 0x208
  }
  
  ep->is_stall = 0;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80019e4:	0fdb      	lsrs	r3, r3, #31
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  ep->is_stall = 0;
 80019e6:	2400      	movs	r4, #0
 80019e8:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 80019ea:	700a      	strb	r2, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80019ec:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd); 
 80019ee:	f890 33e8 	ldrb.w	r3, [r0, #1000]	; 0x3e8
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019f2:	4605      	mov	r5, r0
  
  ep->is_stall = 0;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  __HAL_LOCK(hpcd); 
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d009      	beq.n	8001a0c <HAL_PCD_EP_ClrStall+0x42>
 80019f8:	2301      	movs	r3, #1
 80019fa:	f880 33e8 	strb.w	r3, [r0, #1000]	; 0x3e8
  USB_EPClearStall(hpcd->Instance , ep);
 80019fe:	6800      	ldr	r0, [r0, #0]
 8001a00:	f001 f8a9 	bl	8002b56 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8001a04:	f885 43e8 	strb.w	r4, [r5, #1000]	; 0x3e8
  
  return HAL_OK;
 8001a08:	4620      	mov	r0, r4
 8001a0a:	bd38      	pop	{r3, r4, r5, pc}
  
  ep->is_stall = 0;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  __HAL_LOCK(hpcd); 
 8001a0c:	2002      	movs	r0, #2
  USB_EPClearStall(hpcd->Instance , ep);
  __HAL_UNLOCK(hpcd); 
  
  return HAL_OK;
}
 8001a0e:	bd38      	pop	{r3, r4, r5, pc}

08001a10 <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep = NULL;
  
  /* initialize ep structure*/
  if ((0x80 & ep_addr) == 0x80)
 8001a10:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001a14:	bf1b      	ittet	ne
 8001a16:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8001a1a:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001a1e:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
  PCD_EPTypeDef *ep = NULL;
  
  /* initialize ep structure*/
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001a22:	3028      	addne	r0, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001a24:	bf08      	it	eq
 8001a26:	f500 7002 	addeq.w	r0, r0, #520	; 0x208
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001a2a:	b912      	cbnz	r2, 8001a32 <HAL_PCDEx_PMAConfig+0x22>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0;
 8001a2c:	7282      	strb	r2, [r0, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8001a2e:	8083      	strh	r3, [r0, #4]
 8001a30:	e004      	b.n	8001a3c <HAL_PCDEx_PMAConfig+0x2c>
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1;
 8001a32:	2201      	movs	r2, #1
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
 8001a34:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
 8001a36:	0c1b      	lsrs	r3, r3, #16
    ep->pmaadress = (uint16_t)pmaadress;
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1;
 8001a38:	7282      	strb	r2, [r0, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
 8001a3a:	8103      	strh	r3, [r0, #8]
  }
  
  return HAL_OK; 
}
 8001a3c:	2000      	movs	r0, #0
 8001a3e:	4770      	bx	lr

08001a40 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a40:	6803      	ldr	r3, [r0, #0]
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a42:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a46:	07dc      	lsls	r4, r3, #31
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a48:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a4a:	d403      	bmi.n	8001a54 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a4c:	682b      	ldr	r3, [r5, #0]
 8001a4e:	0798      	lsls	r0, r3, #30
 8001a50:	d473      	bmi.n	8001b3a <HAL_RCC_OscConfig+0xfa>
 8001a52:	e0f2      	b.n	8001c3a <HAL_RCC_OscConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a54:	4cb9      	ldr	r4, [pc, #740]	; (8001d3c <HAL_RCC_OscConfig+0x2fc>)
 8001a56:	6863      	ldr	r3, [r4, #4]
 8001a58:	f003 030c 	and.w	r3, r3, #12
 8001a5c:	2b04      	cmp	r3, #4
 8001a5e:	d007      	beq.n	8001a70 <HAL_RCC_OscConfig+0x30>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a60:	6863      	ldr	r3, [r4, #4]
 8001a62:	f003 030c 	and.w	r3, r3, #12
 8001a66:	2b08      	cmp	r3, #8
 8001a68:	d116      	bne.n	8001a98 <HAL_RCC_OscConfig+0x58>
 8001a6a:	6863      	ldr	r3, [r4, #4]
 8001a6c:	03d9      	lsls	r1, r3, #15
 8001a6e:	d513      	bpl.n	8001a98 <HAL_RCC_OscConfig+0x58>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a74:	fa93 f2a3 	rbit	r2, r3
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a78:	6822      	ldr	r2, [r4, #0]
 8001a7a:	fa93 f3a3 	rbit	r3, r3
 8001a7e:	fab3 f383 	clz	r3, r3
 8001a82:	f003 031f 	and.w	r3, r3, #31
 8001a86:	fa22 f303 	lsr.w	r3, r2, r3
 8001a8a:	07da      	lsls	r2, r3, #31
 8001a8c:	d5de      	bpl.n	8001a4c <HAL_RCC_OscConfig+0xc>
 8001a8e:	686b      	ldr	r3, [r5, #4]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d1db      	bne.n	8001a4c <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 8001a94:	2001      	movs	r0, #1
 8001a96:	e22d      	b.n	8001ef4 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a98:	686b      	ldr	r3, [r5, #4]
 8001a9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a9e:	d015      	beq.n	8001acc <HAL_RCC_OscConfig+0x8c>
 8001aa0:	b96b      	cbnz	r3, 8001abe <HAL_RCC_OscConfig+0x7e>
 8001aa2:	6823      	ldr	r3, [r4, #0]
 8001aa4:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001aa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aac:	6023      	str	r3, [r4, #0]
 8001aae:	6823      	ldr	r3, [r4, #0]
 8001ab0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ab4:	6023      	str	r3, [r4, #0]
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab6:	f7ff fa57 	bl	8000f68 <HAL_GetTick>
 8001aba:	4607      	mov	r7, r0
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001abc:	e02f      	b.n	8001b1e <HAL_RCC_OscConfig+0xde>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001abe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ac2:	6823      	ldr	r3, [r4, #0]
 8001ac4:	d106      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x94>
 8001ac6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aca:	6023      	str	r3, [r4, #0]
 8001acc:	6823      	ldr	r3, [r4, #0]
 8001ace:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad2:	e005      	b.n	8001ae0 <HAL_RCC_OscConfig+0xa0>
 8001ad4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ad8:	6023      	str	r3, [r4, #0]
 8001ada:	6823      	ldr	r3, [r4, #0]
 8001adc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ae0:	6023      	str	r3, [r4, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae2:	f7ff fa41 	bl	8000f68 <HAL_GetTick>
 8001ae6:	4607      	mov	r7, r0
 8001ae8:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001aec:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af0:	6822      	ldr	r2, [r4, #0]
 8001af2:	fa96 f3a6 	rbit	r3, r6
 8001af6:	fab3 f383 	clz	r3, r3
 8001afa:	f003 031f 	and.w	r3, r3, #31
 8001afe:	fa22 f303 	lsr.w	r3, r2, r3
 8001b02:	07db      	lsls	r3, r3, #31
 8001b04:	d4a2      	bmi.n	8001a4c <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b06:	f7ff fa2f 	bl	8000f68 <HAL_GetTick>
 8001b0a:	1bc0      	subs	r0, r0, r7
 8001b0c:	2864      	cmp	r0, #100	; 0x64
 8001b0e:	d9ed      	bls.n	8001aec <HAL_RCC_OscConfig+0xac>
          {
            return HAL_TIMEOUT;
 8001b10:	2003      	movs	r0, #3
 8001b12:	e1ef      	b.n	8001ef4 <HAL_RCC_OscConfig+0x4b4>
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b14:	f7ff fa28 	bl	8000f68 <HAL_GetTick>
 8001b18:	1bc0      	subs	r0, r0, r7
 8001b1a:	2864      	cmp	r0, #100	; 0x64
 8001b1c:	d8f8      	bhi.n	8001b10 <HAL_RCC_OscConfig+0xd0>
 8001b1e:	fa96 f3a6 	rbit	r3, r6
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b22:	6822      	ldr	r2, [r4, #0]
 8001b24:	fa96 f3a6 	rbit	r3, r6
 8001b28:	fab3 f383 	clz	r3, r3
 8001b2c:	f003 031f 	and.w	r3, r3, #31
 8001b30:	fa22 f303 	lsr.w	r3, r2, r3
 8001b34:	07d8      	lsls	r0, r3, #31
 8001b36:	d4ed      	bmi.n	8001b14 <HAL_RCC_OscConfig+0xd4>
 8001b38:	e788      	b.n	8001a4c <HAL_RCC_OscConfig+0xc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b3a:	4c80      	ldr	r4, [pc, #512]	; (8001d3c <HAL_RCC_OscConfig+0x2fc>)
 8001b3c:	6863      	ldr	r3, [r4, #4]
 8001b3e:	f013 0f0c 	tst.w	r3, #12
 8001b42:	d007      	beq.n	8001b54 <HAL_RCC_OscConfig+0x114>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b44:	6863      	ldr	r3, [r4, #4]
 8001b46:	f003 030c 	and.w	r3, r3, #12
 8001b4a:	2b08      	cmp	r3, #8
 8001b4c:	d121      	bne.n	8001b92 <HAL_RCC_OscConfig+0x152>
 8001b4e:	6863      	ldr	r3, [r4, #4]
 8001b50:	03d9      	lsls	r1, r3, #15
 8001b52:	d41e      	bmi.n	8001b92 <HAL_RCC_OscConfig+0x152>
 8001b54:	2302      	movs	r3, #2
 8001b56:	fa93 f2a3 	rbit	r2, r3
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b5a:	6822      	ldr	r2, [r4, #0]
 8001b5c:	fa93 f3a3 	rbit	r3, r3
 8001b60:	fab3 f383 	clz	r3, r3
 8001b64:	f003 031f 	and.w	r3, r3, #31
 8001b68:	fa22 f303 	lsr.w	r3, r2, r3
 8001b6c:	07da      	lsls	r2, r3, #31
 8001b6e:	d502      	bpl.n	8001b76 <HAL_RCC_OscConfig+0x136>
 8001b70:	692b      	ldr	r3, [r5, #16]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d18e      	bne.n	8001a94 <HAL_RCC_OscConfig+0x54>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b76:	6823      	ldr	r3, [r4, #0]
 8001b78:	22f8      	movs	r2, #248	; 0xf8
 8001b7a:	fa92 f2a2 	rbit	r2, r2
 8001b7e:	fab2 f282 	clz	r2, r2
 8001b82:	6969      	ldr	r1, [r5, #20]
 8001b84:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001b88:	fa01 f202 	lsl.w	r2, r1, r2
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	6023      	str	r3, [r4, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b90:	e053      	b.n	8001c3a <HAL_RCC_OscConfig+0x1fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b92:	692a      	ldr	r2, [r5, #16]
 8001b94:	2301      	movs	r3, #1
 8001b96:	b37a      	cbz	r2, 8001bf8 <HAL_RCC_OscConfig+0x1b8>
 8001b98:	fa93 f2a3 	rbit	r2, r3
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b9c:	fab2 f282 	clz	r2, r2
 8001ba0:	0092      	lsls	r2, r2, #2
 8001ba2:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
 8001ba6:	f502 0284 	add.w	r2, r2, #4325376	; 0x420000
 8001baa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bac:	f7ff f9dc 	bl	8000f68 <HAL_GetTick>
 8001bb0:	4607      	mov	r7, r0
 8001bb2:	2602      	movs	r6, #2
 8001bb4:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb8:	4860      	ldr	r0, [pc, #384]	; (8001d3c <HAL_RCC_OscConfig+0x2fc>)
 8001bba:	6822      	ldr	r2, [r4, #0]
 8001bbc:	fa96 f3a6 	rbit	r3, r6
 8001bc0:	fab3 f383 	clz	r3, r3
 8001bc4:	f003 031f 	and.w	r3, r3, #31
 8001bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bcc:	07db      	lsls	r3, r3, #31
 8001bce:	d405      	bmi.n	8001bdc <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bd0:	f7ff f9ca 	bl	8000f68 <HAL_GetTick>
 8001bd4:	1bc0      	subs	r0, r0, r7
 8001bd6:	2802      	cmp	r0, #2
 8001bd8:	d9ec      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x174>
 8001bda:	e799      	b.n	8001b10 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bdc:	6803      	ldr	r3, [r0, #0]
 8001bde:	22f8      	movs	r2, #248	; 0xf8
 8001be0:	fa92 f2a2 	rbit	r2, r2
 8001be4:	fab2 f282 	clz	r2, r2
 8001be8:	6969      	ldr	r1, [r5, #20]
 8001bea:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001bee:	fa01 f202 	lsl.w	r2, r1, r2
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	6003      	str	r3, [r0, #0]
 8001bf6:	e020      	b.n	8001c3a <HAL_RCC_OscConfig+0x1fa>
 8001bf8:	fa93 f3a3 	rbit	r3, r3
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bfc:	fab3 f383 	clz	r3, r3
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001c06:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001c0a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0c:	f7ff f9ac 	bl	8000f68 <HAL_GetTick>
 8001c10:	4607      	mov	r7, r0
 8001c12:	2602      	movs	r6, #2
 8001c14:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c18:	6822      	ldr	r2, [r4, #0]
 8001c1a:	fa96 f3a6 	rbit	r3, r6
 8001c1e:	fab3 f383 	clz	r3, r3
 8001c22:	f003 031f 	and.w	r3, r3, #31
 8001c26:	fa22 f303 	lsr.w	r3, r2, r3
 8001c2a:	07d9      	lsls	r1, r3, #31
 8001c2c:	d505      	bpl.n	8001c3a <HAL_RCC_OscConfig+0x1fa>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c2e:	f7ff f99b 	bl	8000f68 <HAL_GetTick>
 8001c32:	1bc0      	subs	r0, r0, r7
 8001c34:	2802      	cmp	r0, #2
 8001c36:	d9ed      	bls.n	8001c14 <HAL_RCC_OscConfig+0x1d4>
 8001c38:	e76a      	b.n	8001b10 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c3a:	682b      	ldr	r3, [r5, #0]
 8001c3c:	071a      	lsls	r2, r3, #28
 8001c3e:	d546      	bpl.n	8001cce <HAL_RCC_OscConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c40:	69aa      	ldr	r2, [r5, #24]
 8001c42:	4c3e      	ldr	r4, [pc, #248]	; (8001d3c <HAL_RCC_OscConfig+0x2fc>)
 8001c44:	2301      	movs	r3, #1
 8001c46:	493e      	ldr	r1, [pc, #248]	; (8001d40 <HAL_RCC_OscConfig+0x300>)
 8001c48:	b312      	cbz	r2, 8001c90 <HAL_RCC_OscConfig+0x250>
 8001c4a:	fa93 f2a3 	rbit	r2, r3
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c4e:	fab2 f282 	clz	r2, r2
 8001c52:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c56:	f7ff f987 	bl	8000f68 <HAL_GetTick>
 8001c5a:	4607      	mov	r7, r0
 8001c5c:	2602      	movs	r6, #2
 8001c5e:	fa96 f3a6 	rbit	r3, r6
 8001c62:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c66:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001c68:	fa96 f3a6 	rbit	r3, r6
 8001c6c:	fab3 f383 	clz	r3, r3
 8001c70:	f003 031f 	and.w	r3, r3, #31
 8001c74:	fa22 f303 	lsr.w	r3, r2, r3
 8001c78:	07db      	lsls	r3, r3, #31
 8001c7a:	d405      	bmi.n	8001c88 <HAL_RCC_OscConfig+0x248>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c7c:	f7ff f974 	bl	8000f68 <HAL_GetTick>
 8001c80:	1bc0      	subs	r0, r0, r7
 8001c82:	2802      	cmp	r0, #2
 8001c84:	d9eb      	bls.n	8001c5e <HAL_RCC_OscConfig+0x21e>
 8001c86:	e743      	b.n	8001b10 <HAL_RCC_OscConfig+0xd0>
          return HAL_TIMEOUT;
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      HAL_Delay(1);
 8001c88:	2001      	movs	r0, #1
 8001c8a:	f7ff f973 	bl	8000f74 <HAL_Delay>
 8001c8e:	e01e      	b.n	8001cce <HAL_RCC_OscConfig+0x28e>
 8001c90:	fa93 f3a3 	rbit	r3, r3
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c94:	fab3 f383 	clz	r3, r3
 8001c98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c9c:	f7ff f964 	bl	8000f68 <HAL_GetTick>
 8001ca0:	4607      	mov	r7, r0
 8001ca2:	2602      	movs	r6, #2
 8001ca4:	fa96 f3a6 	rbit	r3, r6
 8001ca8:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cac:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001cae:	fa96 f3a6 	rbit	r3, r6
 8001cb2:	fab3 f383 	clz	r3, r3
 8001cb6:	f003 031f 	and.w	r3, r3, #31
 8001cba:	fa22 f303 	lsr.w	r3, r2, r3
 8001cbe:	07d8      	lsls	r0, r3, #31
 8001cc0:	d505      	bpl.n	8001cce <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cc2:	f7ff f951 	bl	8000f68 <HAL_GetTick>
 8001cc6:	1bc0      	subs	r0, r0, r7
 8001cc8:	2802      	cmp	r0, #2
 8001cca:	d9eb      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x264>
 8001ccc:	e720      	b.n	8001b10 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cce:	682b      	ldr	r3, [r5, #0]
 8001cd0:	0759      	lsls	r1, r3, #29
 8001cd2:	d404      	bmi.n	8001cde <HAL_RCC_OscConfig+0x29e>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cd4:	69ea      	ldr	r2, [r5, #28]
 8001cd6:	2a00      	cmp	r2, #0
 8001cd8:	f040 8081 	bne.w	8001dde <HAL_RCC_OscConfig+0x39e>
 8001cdc:	e0d8      	b.n	8001e90 <HAL_RCC_OscConfig+0x450>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cde:	4c17      	ldr	r4, [pc, #92]	; (8001d3c <HAL_RCC_OscConfig+0x2fc>)
    
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ce0:	4e18      	ldr	r6, [pc, #96]	; (8001d44 <HAL_RCC_OscConfig+0x304>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ce2:	69e3      	ldr	r3, [r4, #28]
 8001ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ce8:	61e3      	str	r3, [r4, #28]
 8001cea:	69e3      	ldr	r3, [r4, #28]
 8001cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf0:	9301      	str	r3, [sp, #4]
 8001cf2:	9b01      	ldr	r3, [sp, #4]
    
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cf4:	6833      	ldr	r3, [r6, #0]
 8001cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cfa:	6033      	str	r3, [r6, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cfc:	f7ff f934 	bl	8000f68 <HAL_GetTick>
 8001d00:	4607      	mov	r7, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001d02:	6833      	ldr	r3, [r6, #0]
 8001d04:	05da      	lsls	r2, r3, #23
 8001d06:	d405      	bmi.n	8001d14 <HAL_RCC_OscConfig+0x2d4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d08:	f7ff f92e 	bl	8000f68 <HAL_GetTick>
 8001d0c:	1bc0      	subs	r0, r0, r7
 8001d0e:	2864      	cmp	r0, #100	; 0x64
 8001d10:	d9f7      	bls.n	8001d02 <HAL_RCC_OscConfig+0x2c2>
 8001d12:	e6fd      	b.n	8001b10 <HAL_RCC_OscConfig+0xd0>
          return HAL_TIMEOUT;
        }
      }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d14:	68eb      	ldr	r3, [r5, #12]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d01c      	beq.n	8001d54 <HAL_RCC_OscConfig+0x314>
 8001d1a:	b9ab      	cbnz	r3, 8001d48 <HAL_RCC_OscConfig+0x308>
 8001d1c:	6a23      	ldr	r3, [r4, #32]
 8001d1e:	2602      	movs	r6, #2
 8001d20:	f023 0301 	bic.w	r3, r3, #1
 8001d24:	6223      	str	r3, [r4, #32]
 8001d26:	6a23      	ldr	r3, [r4, #32]
 8001d28:	4637      	mov	r7, r6
 8001d2a:	f023 0304 	bic.w	r3, r3, #4
 8001d2e:	6223      	str	r3, [r4, #32]
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d30:	f7ff f91a 	bl	8000f68 <HAL_GetTick>
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d34:	f241 3988 	movw	r9, #5000	; 0x1388
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d38:	4680      	mov	r8, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d3a:	e048      	b.n	8001dce <HAL_RCC_OscConfig+0x38e>
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	42420480 	.word	0x42420480
 8001d44:	40007000 	.word	0x40007000
          return HAL_TIMEOUT;
        }
      }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d48:	2b05      	cmp	r3, #5
 8001d4a:	6a23      	ldr	r3, [r4, #32]
 8001d4c:	d106      	bne.n	8001d5c <HAL_RCC_OscConfig+0x31c>
 8001d4e:	f043 0304 	orr.w	r3, r3, #4
 8001d52:	6223      	str	r3, [r4, #32]
 8001d54:	6a23      	ldr	r3, [r4, #32]
 8001d56:	f043 0301 	orr.w	r3, r3, #1
 8001d5a:	e005      	b.n	8001d68 <HAL_RCC_OscConfig+0x328>
 8001d5c:	f023 0301 	bic.w	r3, r3, #1
 8001d60:	6223      	str	r3, [r4, #32]
 8001d62:	6a23      	ldr	r3, [r4, #32]
 8001d64:	f023 0304 	bic.w	r3, r3, #4
 8001d68:	6223      	str	r3, [r4, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d6a:	f7ff f8fd 	bl	8000f68 <HAL_GetTick>
 8001d6e:	2602      	movs	r6, #2
 8001d70:	4681      	mov	r9, r0
 8001d72:	46b0      	mov	r8, r6
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d74:	f241 3788 	movw	r7, #5000	; 0x1388
 8001d78:	fa96 f3a6 	rbit	r3, r6
 8001d7c:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d80:	b10b      	cbz	r3, 8001d86 <HAL_RCC_OscConfig+0x346>
 8001d82:	6a22      	ldr	r2, [r4, #32]
 8001d84:	e000      	b.n	8001d88 <HAL_RCC_OscConfig+0x348>
 8001d86:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001d88:	fa98 f3a8 	rbit	r3, r8
 8001d8c:	fab3 f383 	clz	r3, r3
 8001d90:	f003 031f 	and.w	r3, r3, #31
 8001d94:	fa22 f303 	lsr.w	r3, r2, r3
 8001d98:	07db      	lsls	r3, r3, #31
 8001d9a:	d49b      	bmi.n	8001cd4 <HAL_RCC_OscConfig+0x294>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d9c:	f7ff f8e4 	bl	8000f68 <HAL_GetTick>
 8001da0:	ebc9 0000 	rsb	r0, r9, r0
 8001da4:	42b8      	cmp	r0, r7
 8001da6:	d9e7      	bls.n	8001d78 <HAL_RCC_OscConfig+0x338>
 8001da8:	e6b2      	b.n	8001b10 <HAL_RCC_OscConfig+0xd0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001daa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001dac:	fa97 f3a7 	rbit	r3, r7
 8001db0:	fab3 f383 	clz	r3, r3
 8001db4:	f003 031f 	and.w	r3, r3, #31
 8001db8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dbc:	07d8      	lsls	r0, r3, #31
 8001dbe:	d589      	bpl.n	8001cd4 <HAL_RCC_OscConfig+0x294>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dc0:	f7ff f8d2 	bl	8000f68 <HAL_GetTick>
 8001dc4:	ebc8 0000 	rsb	r0, r8, r0
 8001dc8:	4548      	cmp	r0, r9
 8001dca:	f63f aea1 	bhi.w	8001b10 <HAL_RCC_OscConfig+0xd0>
 8001dce:	fa96 f3a6 	rbit	r3, r6
 8001dd2:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d0e7      	beq.n	8001daa <HAL_RCC_OscConfig+0x36a>
 8001dda:	6a22      	ldr	r2, [r4, #32]
 8001ddc:	e7e6      	b.n	8001dac <HAL_RCC_OscConfig+0x36c>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dde:	4c47      	ldr	r4, [pc, #284]	; (8001efc <HAL_RCC_OscConfig+0x4bc>)
 8001de0:	6863      	ldr	r3, [r4, #4]
 8001de2:	f003 030c 	and.w	r3, r3, #12
 8001de6:	2b08      	cmp	r3, #8
 8001de8:	f43f ae54 	beq.w	8001a94 <HAL_RCC_OscConfig+0x54>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dec:	2a02      	cmp	r2, #2
 8001dee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001df2:	d15c      	bne.n	8001eae <HAL_RCC_OscConfig+0x46e>
 8001df4:	fa93 f3a3 	rbit	r3, r3
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001df8:	fab3 f383 	clz	r3, r3
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001e02:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0a:	f7ff f8ad 	bl	8000f68 <HAL_GetTick>
 8001e0e:	4680      	mov	r8, r0
 8001e10:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8001e14:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e18:	4f38      	ldr	r7, [pc, #224]	; (8001efc <HAL_RCC_OscConfig+0x4bc>)
 8001e1a:	6822      	ldr	r2, [r4, #0]
 8001e1c:	fa96 f3a6 	rbit	r3, r6
 8001e20:	fab3 f383 	clz	r3, r3
 8001e24:	f003 031f 	and.w	r3, r3, #31
 8001e28:	fa22 f303 	lsr.w	r3, r2, r3
 8001e2c:	07d9      	lsls	r1, r3, #31
 8001e2e:	d431      	bmi.n	8001e94 <HAL_RCC_OscConfig+0x454>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e30:	6a2e      	ldr	r6, [r5, #32]
 8001e32:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
 8001e36:	d105      	bne.n	8001e44 <HAL_RCC_OscConfig+0x404>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e38:	6879      	ldr	r1, [r7, #4]
 8001e3a:	f421 3000 	bic.w	r0, r1, #131072	; 0x20000
 8001e3e:	68a9      	ldr	r1, [r5, #8]
 8001e40:	4301      	orrs	r1, r0
 8001e42:	6079      	str	r1, [r7, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e44:	6863      	ldr	r3, [r4, #4]
 8001e46:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001e48:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8001e4c:	4332      	orrs	r2, r6
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	6063      	str	r3, [r4, #4]
 8001e52:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e56:	fa93 f3a3 	rbit	r3, r3
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e5a:	fab3 f383 	clz	r3, r3
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001e64:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001e68:	2201      	movs	r2, #1
 8001e6a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6c:	f7ff f87c 	bl	8000f68 <HAL_GetTick>
 8001e70:	4606      	mov	r6, r0
 8001e72:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001e76:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e7a:	6822      	ldr	r2, [r4, #0]
 8001e7c:	fa95 f3a5 	rbit	r3, r5
 8001e80:	fab3 f383 	clz	r3, r3
 8001e84:	f003 031f 	and.w	r3, r3, #31
 8001e88:	fa22 f303 	lsr.w	r3, r2, r3
 8001e8c:	07da      	lsls	r2, r3, #31
 8001e8e:	d508      	bpl.n	8001ea2 <HAL_RCC_OscConfig+0x462>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001e90:	2000      	movs	r0, #0
 8001e92:	e02f      	b.n	8001ef4 <HAL_RCC_OscConfig+0x4b4>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e94:	f7ff f868 	bl	8000f68 <HAL_GetTick>
 8001e98:	ebc8 0000 	rsb	r0, r8, r0
 8001e9c:	2802      	cmp	r0, #2
 8001e9e:	d9b9      	bls.n	8001e14 <HAL_RCC_OscConfig+0x3d4>
 8001ea0:	e636      	b.n	8001b10 <HAL_RCC_OscConfig+0xd0>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ea2:	f7ff f861 	bl	8000f68 <HAL_GetTick>
 8001ea6:	1b80      	subs	r0, r0, r6
 8001ea8:	2802      	cmp	r0, #2
 8001eaa:	d9e4      	bls.n	8001e76 <HAL_RCC_OscConfig+0x436>
 8001eac:	e630      	b.n	8001b10 <HAL_RCC_OscConfig+0xd0>
 8001eae:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb2:	fab3 f383 	clz	r3, r3
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001ebc:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec4:	f7ff f850 	bl	8000f68 <HAL_GetTick>
 8001ec8:	4606      	mov	r6, r0
 8001eca:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001ece:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ed2:	6822      	ldr	r2, [r4, #0]
 8001ed4:	fa95 f3a5 	rbit	r3, r5
 8001ed8:	fab3 f383 	clz	r3, r3
 8001edc:	f003 031f 	and.w	r3, r3, #31
 8001ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee4:	07db      	lsls	r3, r3, #31
 8001ee6:	d5d3      	bpl.n	8001e90 <HAL_RCC_OscConfig+0x450>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ee8:	f7ff f83e 	bl	8000f68 <HAL_GetTick>
 8001eec:	1b80      	subs	r0, r0, r6
 8001eee:	2802      	cmp	r0, #2
 8001ef0:	d9ed      	bls.n	8001ece <HAL_RCC_OscConfig+0x48e>
 8001ef2:	e60d      	b.n	8001b10 <HAL_RCC_OscConfig+0xd0>
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8001ef4:	b003      	add	sp, #12
 8001ef6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001efa:	bf00      	nop
 8001efc:	40021000 	.word	0x40021000

08001f00 <HAL_RCC_GetSysClockFreq>:
{
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001f00:	4b1f      	ldr	r3, [pc, #124]	; (8001f80 <HAL_RCC_GetSysClockFreq+0x80>)
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f02:	b570      	push	{r4, r5, r6, lr}
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001f04:	f103 0510 	add.w	r5, r3, #16
 8001f08:	462e      	mov	r6, r5
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f0a:	b086      	sub	sp, #24
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001f0c:	ac02      	add	r4, sp, #8
 8001f0e:	4622      	mov	r2, r4
 8001f10:	6818      	ldr	r0, [r3, #0]
 8001f12:	6859      	ldr	r1, [r3, #4]
 8001f14:	3308      	adds	r3, #8
 8001f16:	c203      	stmia	r2!, {r0, r1}
 8001f18:	42ab      	cmp	r3, r5
 8001f1a:	4614      	mov	r4, r2
 8001f1c:	d1f7      	bne.n	8001f0e <HAL_RCC_GetSysClockFreq+0xe>
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 8001f1e:	8833      	ldrh	r3, [r6, #0]
  uint32_t sysclockfreq = 0;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 8001f20:	4c18      	ldr	r4, [pc, #96]	; (8001f84 <HAL_RCC_GetSysClockFreq+0x84>)
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 8001f22:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint32_t sysclockfreq = 0;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 8001f26:	6860      	ldr	r0, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f28:	f000 030c 	and.w	r3, r0, #12
 8001f2c:	2b08      	cmp	r3, #8
 8001f2e:	d124      	bne.n	8001f7a <HAL_RCC_GetSysClockFreq+0x7a>
 8001f30:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8001f34:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 8001f38:	fab3 f383 	clz	r3, r3
 8001f3c:	f400 1270 	and.w	r2, r0, #3932160	; 0x3c0000
 8001f40:	fa22 f303 	lsr.w	r3, r2, r3
 8001f44:	aa06      	add	r2, sp, #24
 8001f46:	4413      	add	r3, r2
 8001f48:	f813 1c10 	ldrb.w	r1, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f4c:	03c3      	lsls	r3, r0, #15
 8001f4e:	d511      	bpl.n	8001f74 <HAL_RCC_GetSysClockFreq+0x74>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> POSITION_VAL(RCC_CFGR2_PREDIV1)];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> POSITION_VAL(RCC_CFGR_PLLXTPRE)];
 8001f50:	6862      	ldr	r2, [r4, #4]
 8001f52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f56:	fa93 f3a3 	rbit	r3, r3
 8001f5a:	fab3 f083 	clz	r0, r3
 8001f5e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8001f62:	40c3      	lsrs	r3, r0
 8001f64:	aa06      	add	r2, sp, #24
 8001f66:	4413      	add	r3, r2
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8001f68:	f813 0c14 	ldrb.w	r0, [r3, #-20]
 8001f6c:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x88>)
 8001f6e:	fbb3 f0f0 	udiv	r0, r3, r0
 8001f72:	e000      	b.n	8001f76 <HAL_RCC_GetSysClockFreq+0x76>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f74:	4805      	ldr	r0, [pc, #20]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x8c>)
 8001f76:	4348      	muls	r0, r1
 8001f78:	e000      	b.n	8001f7c <HAL_RCC_GetSysClockFreq+0x7c>
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f7a:	4803      	ldr	r0, [pc, #12]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x88>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001f7c:	b006      	add	sp, #24
 8001f7e:	bd70      	pop	{r4, r5, r6, pc}
 8001f80:	080088c0 	.word	0x080088c0
 8001f84:	40021000 	.word	0x40021000
 8001f88:	007a1200 	.word	0x007a1200
 8001f8c:	003d0900 	.word	0x003d0900

08001f90 <HAL_RCC_ClockConfig>:
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001f90:	4a54      	ldr	r2, [pc, #336]	; (80020e4 <HAL_RCC_ClockConfig+0x154>)
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001f96:	6813      	ldr	r3, [r2, #0]
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f98:	4606      	mov	r6, r0
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	428b      	cmp	r3, r1
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fa0:	460d      	mov	r5, r1
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001fa2:	d30a      	bcc.n	8001fba <HAL_RCC_ClockConfig+0x2a>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fa4:	6831      	ldr	r1, [r6, #0]
 8001fa6:	078c      	lsls	r4, r1, #30
 8001fa8:	d514      	bpl.n	8001fd4 <HAL_RCC_ClockConfig+0x44>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001faa:	484f      	ldr	r0, [pc, #316]	; (80020e8 <HAL_RCC_ClockConfig+0x158>)
 8001fac:	6843      	ldr	r3, [r0, #4]
 8001fae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fb2:	68b3      	ldr	r3, [r6, #8]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	6043      	str	r3, [r0, #4]
 8001fb8:	e00c      	b.n	8001fd4 <HAL_RCC_ClockConfig+0x44>
#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fba:	6813      	ldr	r3, [r2, #0]
 8001fbc:	f023 0307 	bic.w	r3, r3, #7
 8001fc0:	430b      	orrs	r3, r1
 8001fc2:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001fc4:	6813      	ldr	r3, [r2, #0]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	4299      	cmp	r1, r3
 8001fcc:	d0ea      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 8001fce:	2001      	movs	r0, #1
 8001fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fd4:	07c8      	lsls	r0, r1, #31
 8001fd6:	d406      	bmi.n	8001fe6 <HAL_RCC_ClockConfig+0x56>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001fd8:	4a42      	ldr	r2, [pc, #264]	; (80020e4 <HAL_RCC_ClockConfig+0x154>)
 8001fda:	6813      	ldr	r3, [r2, #0]
 8001fdc:	f003 0307 	and.w	r3, r3, #7
 8001fe0:	429d      	cmp	r5, r3
 8001fe2:	d34a      	bcc.n	800207a <HAL_RCC_ClockConfig+0xea>
 8001fe4:	e053      	b.n	800208e <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fe6:	6872      	ldr	r2, [r6, #4]
 8001fe8:	4c3f      	ldr	r4, [pc, #252]	; (80020e8 <HAL_RCC_ClockConfig+0x158>)
 8001fea:	2a01      	cmp	r2, #1
 8001fec:	d102      	bne.n	8001ff4 <HAL_RCC_ClockConfig+0x64>
 8001fee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ff2:	e004      	b.n	8001ffe <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ff4:	2a02      	cmp	r2, #2
 8001ff6:	bf0c      	ite	eq
 8001ff8:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8001ffc:	2302      	movne	r3, #2
 8001ffe:	fa93 f1a3 	rbit	r1, r3
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002002:	6821      	ldr	r1, [r4, #0]
 8002004:	fa93 f3a3 	rbit	r3, r3
 8002008:	fab3 f383 	clz	r3, r3
 800200c:	f003 031f 	and.w	r3, r3, #31
 8002010:	fa21 f303 	lsr.w	r3, r1, r3
 8002014:	07d9      	lsls	r1, r3, #31
 8002016:	d5da      	bpl.n	8001fce <HAL_RCC_ClockConfig+0x3e>
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002018:	6863      	ldr	r3, [r4, #4]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800201a:	f241 3888 	movw	r8, #5000	; 0x1388
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800201e:	f023 0303 	bic.w	r3, r3, #3
 8002022:	431a      	orrs	r2, r3
 8002024:	6062      	str	r2, [r4, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002026:	f7fe ff9f 	bl	8000f68 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800202a:	6873      	ldr	r3, [r6, #4]
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800202c:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800202e:	2b01      	cmp	r3, #1
 8002030:	d10c      	bne.n	800204c <HAL_RCC_ClockConfig+0xbc>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002032:	6863      	ldr	r3, [r4, #4]
 8002034:	f003 030c 	and.w	r3, r3, #12
 8002038:	2b04      	cmp	r3, #4
 800203a:	d0cd      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800203c:	f7fe ff94 	bl	8000f68 <HAL_GetTick>
 8002040:	1bc0      	subs	r0, r0, r7
 8002042:	4540      	cmp	r0, r8
 8002044:	d9f5      	bls.n	8002032 <HAL_RCC_ClockConfig+0xa2>
        {
          return HAL_TIMEOUT;
 8002046:	2003      	movs	r0, #3
 8002048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800204c:	2b02      	cmp	r3, #2
 800204e:	d10f      	bne.n	8002070 <HAL_RCC_ClockConfig+0xe0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002050:	6863      	ldr	r3, [r4, #4]
 8002052:	f003 030c 	and.w	r3, r3, #12
 8002056:	2b08      	cmp	r3, #8
 8002058:	d0be      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800205a:	f7fe ff85 	bl	8000f68 <HAL_GetTick>
 800205e:	1bc0      	subs	r0, r0, r7
 8002060:	4540      	cmp	r0, r8
 8002062:	d9f5      	bls.n	8002050 <HAL_RCC_ClockConfig+0xc0>
 8002064:	e7ef      	b.n	8002046 <HAL_RCC_ClockConfig+0xb6>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002066:	f7fe ff7f 	bl	8000f68 <HAL_GetTick>
 800206a:	1bc0      	subs	r0, r0, r7
 800206c:	4540      	cmp	r0, r8
 800206e:	d8ea      	bhi.n	8002046 <HAL_RCC_ClockConfig+0xb6>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002070:	6863      	ldr	r3, [r4, #4]
 8002072:	f013 0f0c 	tst.w	r3, #12
 8002076:	d1f6      	bne.n	8002066 <HAL_RCC_ClockConfig+0xd6>
 8002078:	e7ae      	b.n	8001fd8 <HAL_RCC_ClockConfig+0x48>
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800207a:	6813      	ldr	r3, [r2, #0]
 800207c:	f023 0307 	bic.w	r3, r3, #7
 8002080:	432b      	orrs	r3, r5
 8002082:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002084:	6813      	ldr	r3, [r2, #0]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	429d      	cmp	r5, r3
 800208c:	d19f      	bne.n	8001fce <HAL_RCC_ClockConfig+0x3e>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800208e:	6831      	ldr	r1, [r6, #0]
 8002090:	4c15      	ldr	r4, [pc, #84]	; (80020e8 <HAL_RCC_ClockConfig+0x158>)
 8002092:	f011 0f04 	tst.w	r1, #4
 8002096:	d005      	beq.n	80020a4 <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002098:	6863      	ldr	r3, [r4, #4]
 800209a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800209e:	68f3      	ldr	r3, [r6, #12]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	6063      	str	r3, [r4, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020a4:	070b      	lsls	r3, r1, #28
 80020a6:	d506      	bpl.n	80020b6 <HAL_RCC_ClockConfig+0x126>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020a8:	6863      	ldr	r3, [r4, #4]
 80020aa:	6932      	ldr	r2, [r6, #16]
 80020ac:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80020b0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80020b4:	6063      	str	r3, [r4, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80020b6:	f7ff ff23 	bl	8001f00 <HAL_RCC_GetSysClockFreq>
 80020ba:	6863      	ldr	r3, [r4, #4]
 80020bc:	22f0      	movs	r2, #240	; 0xf0
 80020be:	fa92 f2a2 	rbit	r2, r2
 80020c2:	fab2 f282 	clz	r2, r2
 80020c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020ca:	40d3      	lsrs	r3, r2
 80020cc:	4a07      	ldr	r2, [pc, #28]	; (80020ec <HAL_RCC_ClockConfig+0x15c>)
 80020ce:	5cd3      	ldrb	r3, [r2, r3]
 80020d0:	40d8      	lsrs	r0, r3
 80020d2:	4b07      	ldr	r3, [pc, #28]	; (80020f0 <HAL_RCC_ClockConfig+0x160>)
 80020d4:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80020d6:	2000      	movs	r0, #0
 80020d8:	f7fe ff1a 	bl	8000f10 <HAL_InitTick>
  
  return HAL_OK;
 80020dc:	2000      	movs	r0, #0
}
 80020de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80020e2:	bf00      	nop
 80020e4:	40022000 	.word	0x40022000
 80020e8:	40021000 	.word	0x40021000
 80020ec:	080088d2 	.word	0x080088d2
 80020f0:	20000000 	.word	0x20000000

080020f4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80020f4:	4b01      	ldr	r3, [pc, #4]	; (80020fc <HAL_RCC_GetHCLKFreq+0x8>)
 80020f6:	6818      	ldr	r0, [r3, #0]
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	20000000 	.word	0x20000000

08002100 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002100:	4b08      	ldr	r3, [pc, #32]	; (8002124 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002102:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	fa92 f2a2 	rbit	r2, r2
 800210c:	fab2 f282 	clz	r2, r2
 8002110:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002114:	40d3      	lsrs	r3, r2
 8002116:	4a04      	ldr	r2, [pc, #16]	; (8002128 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002118:	5cd3      	ldrb	r3, [r2, r3]
 800211a:	4a04      	ldr	r2, [pc, #16]	; (800212c <HAL_RCC_GetPCLK1Freq+0x2c>)
 800211c:	6810      	ldr	r0, [r2, #0]
}    
 800211e:	40d8      	lsrs	r0, r3
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	40021000 	.word	0x40021000
 8002128:	080088e2 	.word	0x080088e2
 800212c:	20000000 	.word	0x20000000

08002130 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002130:	4b08      	ldr	r3, [pc, #32]	; (8002154 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002132:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	fa92 f2a2 	rbit	r2, r2
 800213c:	fab2 f282 	clz	r2, r2
 8002140:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002144:	40d3      	lsrs	r3, r2
 8002146:	4a04      	ldr	r2, [pc, #16]	; (8002158 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002148:	5cd3      	ldrb	r3, [r2, r3]
 800214a:	4a04      	ldr	r2, [pc, #16]	; (800215c <HAL_RCC_GetPCLK2Freq+0x2c>)
 800214c:	6810      	ldr	r0, [r2, #0]
} 
 800214e:	40d8      	lsrs	r0, r3
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	40021000 	.word	0x40021000
 8002158:	080088e2 	.word	0x080088e2
 800215c:	20000000 	.word	0x20000000

08002160 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002160:	6803      	ldr	r3, [r0, #0]
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002162:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002166:	07dc      	lsls	r4, r3, #31
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002168:	4605      	mov	r5, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800216a:	d564      	bpl.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800216c:	4c3e      	ldr	r4, [pc, #248]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x108>)
    
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 800216e:	4e3f      	ldr	r6, [pc, #252]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002170:	69e3      	ldr	r3, [r4, #28]
 8002172:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002176:	61e3      	str	r3, [r4, #28]
 8002178:	69e3      	ldr	r3, [r4, #28]
 800217a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217e:	9301      	str	r3, [sp, #4]
 8002180:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8002182:	6833      	ldr	r3, [r6, #0]
 8002184:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002188:	6033      	str	r3, [r6, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800218a:	f7fe feed 	bl	8000f68 <HAL_GetTick>
 800218e:	4607      	mov	r7, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002190:	6833      	ldr	r3, [r6, #0]
 8002192:	05d8      	lsls	r0, r3, #23
 8002194:	d406      	bmi.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002196:	f7fe fee7 	bl	8000f68 <HAL_GetTick>
 800219a:	1bc0      	subs	r0, r0, r7
 800219c:	2864      	cmp	r0, #100	; 0x64
 800219e:	d9f7      	bls.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x30>
      {
        return HAL_TIMEOUT;
 80021a0:	2003      	movs	r0, #3
 80021a2:	e05d      	b.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x100>
      }      
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021a4:	6a23      	ldr	r3, [r4, #32]
 80021a6:	4830      	ldr	r0, [pc, #192]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x108>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021a8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80021ac:	d106      	bne.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x5c>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80021ae:	6a23      	ldr	r3, [r4, #32]
 80021b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021b4:	686b      	ldr	r3, [r5, #4]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	6223      	str	r3, [r4, #32]
 80021ba:	e03c      	b.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      }      
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021bc:	686a      	ldr	r2, [r5, #4]
 80021be:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d0f3      	beq.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021c6:	6a01      	ldr	r1, [r0, #32]
 80021c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021cc:	f421 7740 	bic.w	r7, r1, #768	; 0x300
 80021d0:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021d4:	fab2 f282 	clz	r2, r2
 80021d8:	4e25      	ldr	r6, [pc, #148]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80021da:	f04f 0e01 	mov.w	lr, #1
 80021de:	f846 e022 	str.w	lr, [r6, r2, lsl #2]
 80021e2:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021e6:	fab3 f383 	clz	r3, r3
 80021ea:	2200      	movs	r2, #0
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80021ec:	07c9      	lsls	r1, r1, #31
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021ee:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80021f2:	6207      	str	r7, [r0, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80021f4:	d5db      	bpl.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
 80021f6:	f7fe feb7 	bl	8000f68 <HAL_GetTick>
 80021fa:	2602      	movs	r6, #2
 80021fc:	4680      	mov	r8, r0
 80021fe:	4637      	mov	r7, r6
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002200:	f241 3988 	movw	r9, #5000	; 0x1388
 8002204:	fa96 f3a6 	rbit	r3, r6
 8002208:	fa96 f3a6 	rbit	r3, r6
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800220c:	b10b      	cbz	r3, 8002212 <HAL_RCCEx_PeriphCLKConfig+0xb2>
 800220e:	6a22      	ldr	r2, [r4, #32]
 8002210:	e000      	b.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8002212:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002214:	fa97 f3a7 	rbit	r3, r7
 8002218:	fab3 f383 	clz	r3, r3
 800221c:	f003 031f 	and.w	r3, r3, #31
 8002220:	fa22 f303 	lsr.w	r3, r2, r3
 8002224:	07da      	lsls	r2, r3, #31
 8002226:	d4c2      	bmi.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002228:	f7fe fe9e 	bl	8000f68 <HAL_GetTick>
 800222c:	ebc8 0000 	rsb	r0, r8, r0
 8002230:	4548      	cmp	r0, r9
 8002232:	d9e7      	bls.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002234:	e7b4      	b.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x40>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002236:	6828      	ldr	r0, [r5, #0]
 8002238:	0783      	lsls	r3, r0, #30
 800223a:	d506      	bpl.n	800224a <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800223c:	490a      	ldr	r1, [pc, #40]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 800223e:	684b      	ldr	r3, [r1, #4]
 8002240:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002244:	68ab      	ldr	r3, [r5, #8]
 8002246:	4313      	orrs	r3, r2
 8002248:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800224a:	f010 0010 	ands.w	r0, r0, #16
 800224e:	d007      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002250:	4905      	ldr	r1, [pc, #20]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x108>)
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002252:	2000      	movs	r0, #0
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002254:	684b      	ldr	r3, [r1, #4]
 8002256:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800225a:	696b      	ldr	r3, [r5, #20]
 800225c:	4313      	orrs	r3, r2
 800225e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
}
 8002260:	b003      	add	sp, #12
 8002262:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002266:	bf00      	nop
 8002268:	40021000 	.word	0x40021000
 800226c:	40007000 	.word	0x40007000
 8002270:	42420400 	.word	0x42420400

08002274 <UART_SetConfig>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002278:	6806      	ldr	r6, [r0, #0]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode ;
  MODIFY_REG(huart->Instance->CR1, 
 800227a:	6881      	ldr	r1, [r0, #8]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800227c:	6933      	ldr	r3, [r6, #16]
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800227e:	4681      	mov	r9, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002280:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002284:	68c3      	ldr	r3, [r0, #12]
 8002286:	2419      	movs	r4, #25
 8002288:	4313      	orrs	r3, r2
 800228a:	6133      	str	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode ;
  MODIFY_REG(huart->Instance->CR1, 
 800228c:	6903      	ldr	r3, [r0, #16]
 800228e:	68f2      	ldr	r2, [r6, #12]
 8002290:	4319      	orrs	r1, r3
 8002292:	6943      	ldr	r3, [r0, #20]
 8002294:	4319      	orrs	r1, r3
 8002296:	f422 53b0 	bic.w	r3, r2, #5632	; 0x1600
 800229a:	f023 030c 	bic.w	r3, r3, #12
 800229e:	430b      	orrs	r3, r1
 80022a0:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE), 
             tmpreg);
  
  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022a2:	6973      	ldr	r3, [r6, #20]
 80022a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022a8:	6983      	ldr	r3, [r0, #24]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	6173      	str	r3, [r6, #20]
  
  /*------- UART-associated USART registers setting : BRR Configuration ------*/
  if((huart->Instance == USART1))
 80022ae:	4b3d      	ldr	r3, [pc, #244]	; (80023a4 <UART_SetConfig+0x130>)
 80022b0:	429e      	cmp	r6, r3
 80022b2:	d131      	bne.n	8002318 <UART_SetConfig+0xa4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80022b4:	f7ff ff3c 	bl	8002130 <HAL_RCC_GetPCLK2Freq>
 80022b8:	4360      	muls	r0, r4
 80022ba:	f8d9 7004 	ldr.w	r7, [r9, #4]
 80022be:	f04f 0864 	mov.w	r8, #100	; 0x64
 80022c2:	00bf      	lsls	r7, r7, #2
 80022c4:	fbb0 f7f7 	udiv	r7, r0, r7
 80022c8:	f7ff ff32 	bl	8002130 <HAL_RCC_GetPCLK2Freq>
 80022cc:	4360      	muls	r0, r4
 80022ce:	f8d9 5004 	ldr.w	r5, [r9, #4]
 80022d2:	fbb7 f7f8 	udiv	r7, r7, r8
 80022d6:	00ad      	lsls	r5, r5, #2
 80022d8:	fbb0 f5f5 	udiv	r5, r0, r5
 80022dc:	f7ff ff28 	bl	8002130 <HAL_RCC_GetPCLK2Freq>
 80022e0:	4360      	muls	r0, r4
 80022e2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80022e6:	013f      	lsls	r7, r7, #4
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	fbb0 f0f3 	udiv	r0, r0, r3
 80022ee:	fbb0 f0f8 	udiv	r0, r0, r8
 80022f2:	fb08 5510 	mls	r5, r8, r0, r5
 80022f6:	f7ff ff1b 	bl	8002130 <HAL_RCC_GetPCLK2Freq>
 80022fa:	012d      	lsls	r5, r5, #4
 80022fc:	3532      	adds	r5, #50	; 0x32
 80022fe:	fbb5 f5f8 	udiv	r5, r5, r8
 8002302:	4360      	muls	r0, r4
 8002304:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8002308:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 800230c:	0089      	lsls	r1, r1, #2
 800230e:	fbb0 faf1 	udiv	sl, r0, r1
 8002312:	f7ff ff0d 	bl	8002130 <HAL_RCC_GetPCLK2Freq>
 8002316:	e030      	b.n	800237a <UART_SetConfig+0x106>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002318:	f7ff fef2 	bl	8002100 <HAL_RCC_GetPCLK1Freq>
 800231c:	4360      	muls	r0, r4
 800231e:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8002322:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002326:	00bf      	lsls	r7, r7, #2
 8002328:	fbb0 f7f7 	udiv	r7, r0, r7
 800232c:	f7ff fee8 	bl	8002100 <HAL_RCC_GetPCLK1Freq>
 8002330:	4360      	muls	r0, r4
 8002332:	f8d9 5004 	ldr.w	r5, [r9, #4]
 8002336:	fbb7 f7f8 	udiv	r7, r7, r8
 800233a:	00ad      	lsls	r5, r5, #2
 800233c:	fbb0 f5f5 	udiv	r5, r0, r5
 8002340:	f7ff fede 	bl	8002100 <HAL_RCC_GetPCLK1Freq>
 8002344:	4360      	muls	r0, r4
 8002346:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800234a:	013f      	lsls	r7, r7, #4
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002352:	fbb0 f0f8 	udiv	r0, r0, r8
 8002356:	fb08 5510 	mls	r5, r8, r0, r5
 800235a:	f7ff fed1 	bl	8002100 <HAL_RCC_GetPCLK1Freq>
 800235e:	012d      	lsls	r5, r5, #4
 8002360:	3532      	adds	r5, #50	; 0x32
 8002362:	fbb5 f5f8 	udiv	r5, r5, r8
 8002366:	4360      	muls	r0, r4
 8002368:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800236c:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8002370:	0089      	lsls	r1, r1, #2
 8002372:	fbb0 faf1 	udiv	sl, r0, r1
 8002376:	f7ff fec3 	bl	8002100 <HAL_RCC_GetPCLK1Freq>
 800237a:	4344      	muls	r4, r0
 800237c:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8002380:	0080      	lsls	r0, r0, #2
 8002382:	fbb4 f0f0 	udiv	r0, r4, r0
 8002386:	fbb0 f0f8 	udiv	r0, r0, r8
 800238a:	fb08 a210 	mls	r2, r8, r0, sl
 800238e:	0112      	lsls	r2, r2, #4
 8002390:	3232      	adds	r2, #50	; 0x32
 8002392:	fbb2 f3f8 	udiv	r3, r2, r8
 8002396:	f003 030f 	and.w	r3, r3, #15
 800239a:	442b      	add	r3, r5
 800239c:	441f      	add	r7, r3
 800239e:	60b7      	str	r7, [r6, #8]
 80023a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023a4:	40013800 	.word	0x40013800

080023a8 <HAL_UART_Init>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023a8:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 80023aa:	4604      	mov	r4, r0
 80023ac:	b330      	cbz	r0, 80023fc <HAL_UART_Init+0x54>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->State == HAL_UART_STATE_RESET)
 80023ae:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80023b2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80023b6:	b91b      	cbnz	r3, 80023c0 <HAL_UART_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023b8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80023bc:	f001 fb22 	bl	8003a04 <HAL_UART_MspInit>
  }

  huart->State = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023c0:	6822      	ldr	r2, [r4, #0]
    
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
  }

  huart->State = HAL_UART_STATE_BUSY;
 80023c2:	2302      	movs	r3, #2
 80023c4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023c8:	68d3      	ldr	r3, [r2, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023ca:	4620      	mov	r0, r4
  }

  huart->State = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80023d0:	60d3      	str	r3, [r2, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023d2:	f7ff ff4f 	bl	8002274 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023d6:	6823      	ldr	r3, [r4, #0]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023d8:	2000      	movs	r0, #0
  UART_SetConfig(huart);
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023da:	691a      	ldr	r2, [r3, #16]
 80023dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023e2:	695a      	ldr	r2, [r3, #20]
 80023e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023e8:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023ea:	68da      	ldr	r2, [r3, #12]
 80023ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023f0:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->State= HAL_UART_STATE_READY;
 80023f2:	2301      	movs	r3, #1
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023f4:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 80023f6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 80023fa:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 80023fc:	2001      	movs	r0, #1
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->State= HAL_UART_STATE_READY;
  
  return HAL_OK;
}
 80023fe:	bd10      	pop	{r4, pc}

08002400 <HAL_UART_Transmit_IT>:
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  uint32_t tmp_state = 0;

  tmp_state = huart->State;
 8002400:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002404:	b2db      	uxtb	r3, r3
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 8002406:	2b01      	cmp	r3, #1
 8002408:	d001      	beq.n	800240e <HAL_UART_Transmit_IT+0xe>
 800240a:	2b22      	cmp	r3, #34	; 0x22
 800240c:	d120      	bne.n	8002450 <HAL_UART_Transmit_IT+0x50>
  {
    if((pData == NULL ) || (Size == 0))
 800240e:	b1e9      	cbz	r1, 800244c <HAL_UART_Transmit_IT+0x4c>
 8002410:	b1e2      	cbz	r2, 800244c <HAL_UART_Transmit_IT+0x4c>
    {
      return HAL_ERROR;
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8002412:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002416:	2b01      	cmp	r3, #1
 8002418:	d01a      	beq.n	8002450 <HAL_UART_Transmit_IT+0x50>
 800241a:	2301      	movs	r3, #1
 800241c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    
    huart->pTxBuffPtr = pData;
    huart->TxXferSize = Size;
    huart->TxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002420:	2300      	movs	r3, #0
 8002422:	63c3      	str	r3, [r0, #60]	; 0x3c
    
    /* Process Locked */
    __HAL_LOCK(huart);
    
    huart->pTxBuffPtr = pData;
    huart->TxXferSize = Size;
 8002424:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 8002426:	84c2      	strh	r2, [r0, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    /* Check if a receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 8002428:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800242c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->TxXferSize = Size;
    huart->TxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    /* Check if a receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 8002430:	2a22      	cmp	r2, #34	; 0x22
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8002432:	bf0c      	ite	eq
 8002434:	2232      	moveq	r2, #50	; 0x32
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 8002436:	2212      	movne	r2, #18
 8002438:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800243c:	6802      	ldr	r2, [r0, #0]
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
    
    huart->pTxBuffPtr = pData;
 800243e:	6201      	str	r1, [r0, #32]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002440:	68d3      	ldr	r3, [r2, #12]
    
    return HAL_OK;
 8002442:	2000      	movs	r0, #0

    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002448:	60d3      	str	r3, [r2, #12]
    
    return HAL_OK;
 800244a:	4770      	bx	lr
  tmp_state = huart->State;
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
  {
    if((pData == NULL ) || (Size == 0))
    {
      return HAL_ERROR;
 800244c:	2001      	movs	r0, #1
 800244e:	4770      	bx	lr
    
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002450:	2002      	movs	r0, #2
  }
}
 8002452:	4770      	bx	lr

08002454 <HAL_UART_Receive_IT>:
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  uint32_t tmp_state = 0;
  
  tmp_state = huart->State;
 8002454:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002458:	b2db      	uxtb	r3, r3
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_TX))
 800245a:	2b01      	cmp	r3, #1
 800245c:	d001      	beq.n	8002462 <HAL_UART_Receive_IT+0xe>
 800245e:	2b12      	cmp	r3, #18
 8002460:	d128      	bne.n	80024b4 <HAL_UART_Receive_IT+0x60>
  {
    if((pData == NULL ) || (Size == 0))
 8002462:	b329      	cbz	r1, 80024b0 <HAL_UART_Receive_IT+0x5c>
 8002464:	b322      	cbz	r2, 80024b0 <HAL_UART_Receive_IT+0x5c>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002466:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800246a:	2b01      	cmp	r3, #1
 800246c:	d022      	beq.n	80024b4 <HAL_UART_Receive_IT+0x60>
 800246e:	2301      	movs	r3, #1
 8002470:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;
    huart->RxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002474:	2300      	movs	r3, #0
 8002476:	63c3      	str	r3, [r0, #60]	; 0x3c

    /* Process Locked */
    __HAL_LOCK(huart);

    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;
 8002478:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
 800247a:	85c2      	strh	r2, [r0, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 800247c:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002480:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->RxXferSize = Size;
    huart->RxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8002484:	2a12      	cmp	r2, #18

    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002486:	6803      	ldr	r3, [r0, #0]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8002488:	bf0c      	ite	eq
 800248a:	2232      	moveq	r2, #50	; 0x32
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 800248c:	2222      	movne	r2, #34	; 0x22
 800248e:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002492:	68da      	ldr	r2, [r3, #12]
    }

    /* Process Locked */
    __HAL_LOCK(huart);

    huart->pRxBuffPtr = pData;
 8002494:	6281      	str	r1, [r0, #40]	; 0x28

    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002496:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800249a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800249c:	695a      	ldr	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);

    return HAL_OK;
 800249e:	2000      	movs	r0, #0

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80024a0:	f042 0201 	orr.w	r2, r2, #1
 80024a4:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80024a6:	68da      	ldr	r2, [r3, #12]
 80024a8:	f042 0220 	orr.w	r2, r2, #32
 80024ac:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80024ae:	4770      	bx	lr
  tmp_state = huart->State;
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_TX))
  {
    if((pData == NULL ) || (Size == 0))
    {
      return HAL_ERROR;
 80024b0:	2001      	movs	r0, #1
 80024b2:	4770      	bx	lr

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80024b4:	2002      	movs	r0, #2
  }
}
 80024b6:	4770      	bx	lr

080024b8 <HAL_UART_TxCpltCallback>:
 80024b8:	4770      	bx	lr

080024ba <HAL_UART_ErrorCallback>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80024ba:	4770      	bx	lr

080024bc <HAL_UART_IRQHandler>:
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
  uint32_t tmp_flag = 0, tmp_it_source = 0;

  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 80024bc:	6802      	ldr	r2, [r0, #0]
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80024be:	b513      	push	{r0, r1, r4, lr}
  uint32_t tmp_flag = 0, tmp_it_source = 0;

  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 80024c0:	6811      	ldr	r1, [r2, #0]
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80024c2:	4604      	mov	r4, r0
  uint32_t tmp_flag = 0, tmp_it_source = 0;

  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
  /* UART parity error interrupt occurred ------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80024c4:	07c9      	lsls	r1, r1, #31
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
  uint32_t tmp_flag = 0, tmp_it_source = 0;

  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
 80024c6:	68d3      	ldr	r3, [r2, #12]
  /* UART parity error interrupt occurred ------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80024c8:	d505      	bpl.n	80024d6 <HAL_UART_IRQHandler+0x1a>
 80024ca:	05db      	lsls	r3, r3, #23
  { 
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 80024cc:	bf42      	ittt	mi
 80024ce:	6bc3      	ldrmi	r3, [r0, #60]	; 0x3c
 80024d0:	f043 0301 	orrmi.w	r3, r3, #1
 80024d4:	63c3      	strmi	r3, [r0, #60]	; 0x3c
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_FE);
 80024d6:	6811      	ldr	r1, [r2, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 80024d8:	6953      	ldr	r3, [r2, #20]
  /* UART frame error interrupt occurred -------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80024da:	0788      	lsls	r0, r1, #30
  { 
    huart->ErrorCode |= HAL_UART_ERROR_PE;
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_FE);
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 80024dc:	f003 0301 	and.w	r3, r3, #1
  /* UART frame error interrupt occurred -------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80024e0:	d504      	bpl.n	80024ec <HAL_UART_IRQHandler+0x30>
 80024e2:	b11b      	cbz	r3, 80024ec <HAL_UART_IRQHandler+0x30>
  { 
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 80024e4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80024e6:	f041 0104 	orr.w	r1, r1, #4
 80024ea:	63e1      	str	r1, [r4, #60]	; 0x3c
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_NE);
 80024ec:	6811      	ldr	r1, [r2, #0]
  /* UART noise error interrupt occurred -------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80024ee:	0749      	lsls	r1, r1, #29
 80024f0:	d504      	bpl.n	80024fc <HAL_UART_IRQHandler+0x40>
 80024f2:	b11b      	cbz	r3, 80024fc <HAL_UART_IRQHandler+0x40>
  { 
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024f4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80024f6:	f041 0102 	orr.w	r1, r1, #2
 80024fa:	63e1      	str	r1, [r4, #60]	; 0x3c
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_ORE);
 80024fc:	6811      	ldr	r1, [r2, #0]
  /* UART Over-Run interrupt occurred ----------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80024fe:	0708      	lsls	r0, r1, #28
 8002500:	d504      	bpl.n	800250c <HAL_UART_IRQHandler+0x50>
 8002502:	b11b      	cbz	r3, 800250c <HAL_UART_IRQHandler+0x50>
  { 
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002504:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002506:	f043 0308 	orr.w	r3, r3, #8
 800250a:	63e3      	str	r3, [r4, #60]	; 0x3c
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE);
 800250c:	6811      	ldr	r1, [r2, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE);
 800250e:	68d3      	ldr	r3, [r2, #12]
  /* UART in mode Receiver ---------------------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002510:	0689      	lsls	r1, r1, #26
 8002512:	d542      	bpl.n	800259a <HAL_UART_IRQHandler+0xde>
 8002514:	0698      	lsls	r0, r3, #26
 8002516:	d540      	bpl.n	800259a <HAL_UART_IRQHandler+0xde>
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint32_t tmp_state = 0;
  
  tmp_state = huart->State; 
 8002518:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
  if((tmp_state == HAL_UART_STATE_BUSY_RX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 800251c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8002520:	2b22      	cmp	r3, #34	; 0x22
 8002522:	d13a      	bne.n	800259a <HAL_UART_IRQHandler+0xde>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002524:	68a3      	ldr	r3, [r4, #8]
 8002526:	6921      	ldr	r1, [r4, #16]
 8002528:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800252c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800252e:	d10b      	bne.n	8002548 <HAL_UART_IRQHandler+0x8c>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
      if(huart->Init.Parity == UART_PARITY_NONE)
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002530:	6852      	ldr	r2, [r2, #4]
  if((tmp_state == HAL_UART_STATE_BUSY_RX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002532:	b921      	cbnz	r1, 800253e <HAL_UART_IRQHandler+0x82>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002534:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002538:	f823 2b02 	strh.w	r2, [r3], #2
 800253c:	e002      	b.n	8002544 <HAL_UART_IRQHandler+0x88>
        huart->pRxBuffPtr += 2;
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800253e:	b2d2      	uxtb	r2, r2
 8002540:	f823 2b01 	strh.w	r2, [r3], #1
        huart->pRxBuffPtr += 1;
 8002544:	62a3      	str	r3, [r4, #40]	; 0x28
 8002546:	e00a      	b.n	800255e <HAL_UART_IRQHandler+0xa2>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002548:	b919      	cbnz	r1, 8002552 <HAL_UART_IRQHandler+0x96>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800254a:	1c59      	adds	r1, r3, #1
 800254c:	62a1      	str	r1, [r4, #40]	; 0x28
 800254e:	6852      	ldr	r2, [r2, #4]
 8002550:	e004      	b.n	800255c <HAL_UART_IRQHandler+0xa0>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002552:	6852      	ldr	r2, [r2, #4]
 8002554:	1c59      	adds	r1, r3, #1
 8002556:	62a1      	str	r1, [r4, #40]	; 0x28
 8002558:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800255c:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0)
 800255e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8002560:	3b01      	subs	r3, #1
 8002562:	b29b      	uxth	r3, r3
 8002564:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8002566:	b9c3      	cbnz	r3, 800259a <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002568:	6823      	ldr	r3, [r4, #0]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);

        huart->State = HAL_UART_STATE_READY;
      }
      HAL_UART_RxCpltCallback(huart);
 800256a:	4620      	mov	r0, r4
      }
    }

    if(--huart->RxXferCount == 0)
    {
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800256c:	68da      	ldr	r2, [r3, #12]
 800256e:	f022 0220 	bic.w	r2, r2, #32
 8002572:	60da      	str	r2, [r3, #12]

      /* Check if a transmit process is ongoing or not */
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8002574:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8002578:	2a32      	cmp	r2, #50	; 0x32
        huart->State = HAL_UART_STATE_BUSY_TX;
      }
      else
      {
        /* Disable the UART Parity Error Interrupt */
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800257a:	bf17      	itett	ne
 800257c:	68da      	ldrne	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);

      /* Check if a transmit process is ongoing or not */
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
      {
        huart->State = HAL_UART_STATE_BUSY_TX;
 800257e:	2312      	moveq	r3, #18
      }
      else
      {
        /* Disable the UART Parity Error Interrupt */
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002580:	f422 7280 	bicne.w	r2, r2, #256	; 0x100
 8002584:	60da      	strne	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002586:	bf1f      	itttt	ne
 8002588:	695a      	ldrne	r2, [r3, #20]
 800258a:	f022 0201 	bicne.w	r2, r2, #1
 800258e:	615a      	strne	r2, [r3, #20]

        huart->State = HAL_UART_STATE_READY;
 8002590:	2301      	movne	r3, #1
 8002592:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      }
      HAL_UART_RxCpltCallback(huart);
 8002596:	f001 f8ea 	bl	800376e <HAL_UART_RxCpltCallback>
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
  { 
    UART_Receive_IT(huart);
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TXE);
 800259a:	6823      	ldr	r3, [r4, #0]
 800259c:	6819      	ldr	r1, [r3, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE);
 800259e:	68da      	ldr	r2, [r3, #12]
  /* UART in mode Transmitter ------------------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80025a0:	0609      	lsls	r1, r1, #24
 80025a2:	d528      	bpl.n	80025f6 <HAL_UART_IRQHandler+0x13a>
 80025a4:	0610      	lsls	r0, r2, #24
 80025a6:	d526      	bpl.n	80025f6 <HAL_UART_IRQHandler+0x13a>
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint32_t tmp_state = 0;
  
  tmp_state = huart->State;
 80025a8:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
  if((tmp_state == HAL_UART_STATE_BUSY_TX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 80025ac:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80025b0:	2a12      	cmp	r2, #18
 80025b2:	d120      	bne.n	80025f6 <HAL_UART_IRQHandler+0x13a>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80025b4:	68a2      	ldr	r2, [r4, #8]
 80025b6:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80025ba:	6a22      	ldr	r2, [r4, #32]
 80025bc:	d10a      	bne.n	80025d4 <HAL_UART_IRQHandler+0x118>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80025be:	8811      	ldrh	r1, [r2, #0]
 80025c0:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80025c4:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80025c6:	6921      	ldr	r1, [r4, #16]
 80025c8:	b909      	cbnz	r1, 80025ce <HAL_UART_IRQHandler+0x112>
      {
        huart->pTxBuffPtr += 2;
 80025ca:	3202      	adds	r2, #2
 80025cc:	e000      	b.n	80025d0 <HAL_UART_IRQHandler+0x114>
      }
      else
      {
        huart->pTxBuffPtr += 1;
 80025ce:	3201      	adds	r2, #1
 80025d0:	6222      	str	r2, [r4, #32]
 80025d2:	e003      	b.n	80025dc <HAL_UART_IRQHandler+0x120>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80025d4:	1c51      	adds	r1, r2, #1
 80025d6:	6221      	str	r1, [r4, #32]
 80025d8:	7812      	ldrb	r2, [r2, #0]
 80025da:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0)
 80025dc:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80025de:	3a01      	subs	r2, #1
 80025e0:	b292      	uxth	r2, r2
 80025e2:	84e2      	strh	r2, [r4, #38]	; 0x26
 80025e4:	b93a      	cbnz	r2, 80025f6 <HAL_UART_IRQHandler+0x13a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80025e6:	68da      	ldr	r2, [r3, #12]
 80025e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025ec:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80025ee:	68da      	ldr	r2, [r3, #12]
 80025f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025f4:	60da      	str	r2, [r3, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
  {
    UART_Transmit_IT(huart);
  }

  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TC);
 80025f6:	6819      	ldr	r1, [r3, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC);
 80025f8:	68da      	ldr	r2, [r3, #12]
  /* UART in mode Transmitter end --------------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80025fa:	0649      	lsls	r1, r1, #25
 80025fc:	d510      	bpl.n	8002620 <HAL_UART_IRQHandler+0x164>
 80025fe:	0652      	lsls	r2, r2, #25
 8002600:	d50e      	bpl.n	8002620 <HAL_UART_IRQHandler+0x164>
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002602:	68da      	ldr	r2, [r3, #12]
  else
  {
    huart->State = HAL_UART_STATE_READY;
  }
  
  HAL_UART_TxCpltCallback(huart);
 8002604:	4620      	mov	r0, r4
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002606:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800260a:	60da      	str	r2, [r3, #12]
  
  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 800260c:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8002610:	2b32      	cmp	r3, #50	; 0x32
  {
    huart->State = HAL_UART_STATE_BUSY_RX;
 8002612:	bf0c      	ite	eq
 8002614:	2322      	moveq	r3, #34	; 0x22
  }
  else
  {
    huart->State = HAL_UART_STATE_READY;
 8002616:	2301      	movne	r3, #1
 8002618:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  }
  
  HAL_UART_TxCpltCallback(huart);
 800261c:	f7ff ff4c 	bl	80024b8 <HAL_UART_TxCpltCallback>
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
  {
    UART_EndTransmit_IT(huart);
  }  

  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002620:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002622:	b15b      	cbz	r3, 800263c <HAL_UART_IRQHandler+0x180>
  {
    /* Clear all the error flag at once */
    __HAL_UART_CLEAR_PEFLAG(huart);
 8002624:	6823      	ldr	r3, [r4, #0]
    
    /* Set the UART state ready to be able to start again the process */
    huart->State = HAL_UART_STATE_READY;
    
    HAL_UART_ErrorCallback(huart);
 8002626:	4620      	mov	r0, r4
  }  

  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
  {
    /* Clear all the error flag at once */
    __HAL_UART_CLEAR_PEFLAG(huart);
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	9201      	str	r2, [sp, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	9301      	str	r3, [sp, #4]
 8002630:	9b01      	ldr	r3, [sp, #4]
    
    /* Set the UART state ready to be able to start again the process */
    huart->State = HAL_UART_STATE_READY;
 8002632:	2301      	movs	r3, #1
 8002634:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    
    HAL_UART_ErrorCallback(huart);
 8002638:	f7ff ff3f 	bl	80024ba <HAL_UART_ErrorCallback>
  }  
}
 800263c:	b002      	add	sp, #8
 800263e:	bd10      	pop	{r4, pc}

08002640 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002640:	b084      	sub	sp, #16
 8002642:	a801      	add	r0, sp, #4
 8002644:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002648:	b004      	add	sp, #16
 800264a:	2000      	movs	r0, #0
 800264c:	4770      	bx	lr

0800264e <USB_EnableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 800264e:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8002652:	b29b      	uxth	r3, r3
 8002654:	f443 433d 	orr.w	r3, r3, #48384	; 0xbd00
 8002658:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 800265c:	2000      	movs	r0, #0
 800265e:	4770      	bx	lr

08002660 <USB_DisableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8002660:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8002664:	f423 5374 	bic.w	r3, r3, #15616	; 0x3d00
 8002668:	045b      	lsls	r3, r3, #17
 800266a:	0c5b      	lsrs	r3, r3, #17
 800266c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 8002670:	2000      	movs	r0, #0
 8002672:	4770      	bx	lr

08002674 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002674:	2000      	movs	r0, #0
 8002676:	4770      	bx	lr

08002678 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{    
 8002678:	b084      	sub	sp, #16
 800267a:	b510      	push	{r4, lr}
 800267c:	ac03      	add	r4, sp, #12
 800267e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  
  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
    
  return HAL_OK;
}
 8002682:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{    
  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8002686:	2301      	movs	r3, #1
 8002688:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 800268c:	2300      	movs	r3, #0
 800268e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
    
  return HAL_OK;
}
 8002692:	b004      	add	sp, #16
  
  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 
  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8002694:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  
  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002698:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
    
  return HAL_OK;
}
 800269c:	4618      	mov	r0, r3
 800269e:	4770      	bx	lr

080026a0 <USB_ActivateEndpoint>:
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  /* initialize Endpoint */
  switch (ep->type)
 80026a0:	78cb      	ldrb	r3, [r1, #3]
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80026a2:	b530      	push	{r4, r5, lr}
 80026a4:	780a      	ldrb	r2, [r1, #0]
  /* initialize Endpoint */
  switch (ep->type)
 80026a6:	2b03      	cmp	r3, #3
 80026a8:	d82b      	bhi.n	8002702 <USB_ActivateEndpoint+0x62>
 80026aa:	e8df f003 	tbb	[pc, r3]
 80026ae:	1f02      	.short	0x1f02
 80026b0:	150c      	.short	0x150c
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 80026b2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80026bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026c4:	e01b      	b.n	80026fe <USB_ActivateEndpoint+0x5e>
    break;
  case EP_TYPE_BULK:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 80026c6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80026ca:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80026ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026d2:	041b      	lsls	r3, r3, #16
 80026d4:	0c1b      	lsrs	r3, r3, #16
 80026d6:	e012      	b.n	80026fe <USB_ActivateEndpoint+0x5e>
    break;
  case EP_TYPE_INTR:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 80026d8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80026dc:	b29b      	uxth	r3, r3
 80026de:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80026e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026e6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80026ea:	e008      	b.n	80026fe <USB_ActivateEndpoint+0x5e>
    break;
  case EP_TYPE_ISOC:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 80026ec:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80026f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026fe:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
  default:
      break;
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002702:	780c      	ldrb	r4, [r1, #0]
 8002704:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002708:	f444 4200 	orr.w	r2, r4, #32768	; 0x8000
 800270c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002710:	051b      	lsls	r3, r3, #20
 8002712:	0d1b      	lsrs	r3, r3, #20
 8002714:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002718:	4313      	orrs	r3, r2
 800271a:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
  
  if (ep->doublebuffer == 0) 
 800271e:	7a8b      	ldrb	r3, [r1, #10]
 8002720:	780d      	ldrb	r5, [r1, #0]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d174      	bne.n	8002810 <USB_ActivateEndpoint+0x170>
  {
    if (ep->is_in)
 8002726:	784a      	ldrb	r2, [r1, #1]
 8002728:	888b      	ldrh	r3, [r1, #4]
 800272a:	b33a      	cbz	r2, 800277c <USB_ActivateEndpoint+0xdc>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800272c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002730:	085b      	lsrs	r3, r3, #1
 8002732:	b292      	uxth	r2, r2
 8002734:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800273e:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002742:	780a      	ldrb	r2, [r1, #0]
 8002744:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002748:	065b      	lsls	r3, r3, #25
 800274a:	d50b      	bpl.n	8002764 <USB_ActivateEndpoint+0xc4>
 800274c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002750:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002754:	051b      	lsls	r3, r3, #20
 8002756:	0d1b      	lsrs	r3, r3, #20
 8002758:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800275c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002760:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 8002764:	780a      	ldrb	r2, [r1, #0]
 8002766:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800276a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800276e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002772:	041b      	lsls	r3, r3, #16
 8002774:	0c1b      	lsrs	r3, r3, #16
 8002776:	f083 0320 	eor.w	r3, r3, #32
 800277a:	e0fb      	b.n	8002974 <USB_ActivateEndpoint+0x2d4>
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800277c:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
 8002780:	085b      	lsrs	r3, r3, #1
 8002782:	b2a4      	uxth	r4, r4
 8002784:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8002788:	3404      	adds	r4, #4
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 8002790:	f842 3014 	str.w	r3, [r2, r4, lsl #1]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002794:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
 8002798:	780b      	ldrb	r3, [r1, #0]
 800279a:	690d      	ldr	r5, [r1, #16]
 800279c:	b2a4      	uxth	r4, r4
 800279e:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 80027a2:	2d3e      	cmp	r5, #62	; 0x3e
 80027a4:	f104 0406 	add.w	r4, r4, #6
 80027a8:	d90b      	bls.n	80027c2 <USB_ActivateEndpoint+0x122>
 80027aa:	f3c5 134f 	ubfx	r3, r5, #5, #16
 80027ae:	06ed      	lsls	r5, r5, #27
 80027b0:	bf04      	itt	eq
 80027b2:	f103 33ff 	addeq.w	r3, r3, #4294967295
 80027b6:	b29b      	uxtheq	r3, r3
 80027b8:	ea6f 63c3 	mvn.w	r3, r3, lsl #27
 80027bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027c0:	e006      	b.n	80027d0 <USB_ActivateEndpoint+0x130>
 80027c2:	f3c5 034f 	ubfx	r3, r5, #1, #16
 80027c6:	07ed      	lsls	r5, r5, #31
 80027c8:	bf44      	itt	mi
 80027ca:	3301      	addmi	r3, #1
 80027cc:	b29b      	uxthmi	r3, r3
 80027ce:	029b      	lsls	r3, r3, #10
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	f842 3014 	str.w	r3, [r2, r4, lsl #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80027d6:	780a      	ldrb	r2, [r1, #0]
 80027d8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80027dc:	045c      	lsls	r4, r3, #17
 80027de:	d50b      	bpl.n	80027f8 <USB_ActivateEndpoint+0x158>
 80027e0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80027e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027e8:	051b      	lsls	r3, r3, #20
 80027ea:	0d1b      	lsrs	r3, r3, #20
 80027ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027f4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80027f8:	780a      	ldrb	r2, [r1, #0]
 80027fa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80027fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002806:	041b      	lsls	r3, r3, #16
 8002808:	0c1b      	lsrs	r3, r3, #16
 800280a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800280e:	e0b1      	b.n	8002974 <USB_ActivateEndpoint+0x2d4>
  }
  /*Double Buffer*/
  else
  {
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002810:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8002814:	f500 6480 	add.w	r4, r0, #1024	; 0x400
 8002818:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 800281c:	051b      	lsls	r3, r3, #20
 800281e:	0d1b      	lsrs	r3, r3, #20
 8002820:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8002824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002828:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 800282c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002830:	780a      	ldrb	r2, [r1, #0]
 8002832:	b29b      	uxth	r3, r3
 8002834:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002838:	88ca      	ldrh	r2, [r1, #6]
 800283a:	0852      	lsrs	r2, r2, #1
 800283c:	0052      	lsls	r2, r2, #1
 800283e:	f844 2013 	str.w	r2, [r4, r3, lsl #1]
 8002842:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002846:	780a      	ldrb	r2, [r1, #0]
 8002848:	b29b      	uxth	r3, r3
 800284a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800284e:	890a      	ldrh	r2, [r1, #8]
 8002850:	3304      	adds	r3, #4
 8002852:	0852      	lsrs	r2, r2, #1
 8002854:	0052      	lsls	r2, r2, #1
 8002856:	f844 2013 	str.w	r2, [r4, r3, lsl #1]
    
    if (ep->is_in==0)
 800285a:	784b      	ldrb	r3, [r1, #1]
 800285c:	780a      	ldrb	r2, [r1, #0]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d146      	bne.n	80028f0 <USB_ActivateEndpoint+0x250>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002862:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002866:	045b      	lsls	r3, r3, #17
 8002868:	d50b      	bpl.n	8002882 <USB_ActivateEndpoint+0x1e2>
 800286a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800286e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002872:	051b      	lsls	r3, r3, #20
 8002874:	0d1b      	lsrs	r3, r3, #20
 8002876:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800287a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800287e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002882:	780a      	ldrb	r2, [r1, #0]
 8002884:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002888:	065d      	lsls	r5, r3, #25
 800288a:	d50b      	bpl.n	80028a4 <USB_ActivateEndpoint+0x204>
 800288c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002890:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002894:	051b      	lsls	r3, r3, #20
 8002896:	0d1b      	lsrs	r3, r3, #20
 8002898:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800289c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80028a0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80028a4:	780a      	ldrb	r2, [r1, #0]
 80028a6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80028aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028ae:	051b      	lsls	r3, r3, #20
 80028b0:	0d1b      	lsrs	r3, r3, #20
 80028b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80028ba:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80028be:	780a      	ldrb	r2, [r1, #0]
 80028c0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80028c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028cc:	041b      	lsls	r3, r3, #16
 80028ce:	0c1b      	lsrs	r3, r3, #16
 80028d0:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80028d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028dc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80028e0:	780a      	ldrb	r2, [r1, #0]
 80028e2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80028e6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80028ea:	051b      	lsls	r3, r3, #20
 80028ec:	0d1b      	lsrs	r3, r3, #20
 80028ee:	e041      	b.n	8002974 <USB_ActivateEndpoint+0x2d4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80028f0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80028f4:	045c      	lsls	r4, r3, #17
 80028f6:	d50b      	bpl.n	8002910 <USB_ActivateEndpoint+0x270>
 80028f8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80028fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002900:	051b      	lsls	r3, r3, #20
 8002902:	0d1b      	lsrs	r3, r3, #20
 8002904:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800290c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002910:	780a      	ldrb	r2, [r1, #0]
 8002912:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002916:	065b      	lsls	r3, r3, #25
 8002918:	d50b      	bpl.n	8002932 <USB_ActivateEndpoint+0x292>
 800291a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800291e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002922:	051b      	lsls	r3, r3, #20
 8002924:	0d1b      	lsrs	r3, r3, #20
 8002926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800292a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800292e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8002932:	780a      	ldrb	r2, [r1, #0]
 8002934:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002938:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800293c:	051b      	lsls	r3, r3, #20
 800293e:	0d1b      	lsrs	r3, r3, #20
 8002940:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002948:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800294c:	780a      	ldrb	r2, [r1, #0]
 800294e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002952:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002956:	051b      	lsls	r3, r3, #20
 8002958:	0d1b      	lsrs	r3, r3, #20
 800295a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800295e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002962:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002966:	780a      	ldrb	r2, [r1, #0]
 8002968:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800296c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002970:	049b      	lsls	r3, r3, #18
 8002972:	0c9b      	lsrs	r3, r3, #18
 8002974:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800297c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
  
  return HAL_OK;
}
 8002980:	2000      	movs	r0, #0
 8002982:	bd30      	pop	{r4, r5, pc}

08002984 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002984:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0) 
 8002986:	7a8c      	ldrb	r4, [r1, #10]
 8002988:	784a      	ldrb	r2, [r1, #1]
 800298a:	780b      	ldrb	r3, [r1, #0]
 800298c:	bb1c      	cbnz	r4, 80029d6 <USB_DeactivateEndpoint+0x52>
  {
    if (ep->is_in)
 800298e:	b182      	cbz	r2, 80029b2 <USB_DeactivateEndpoint+0x2e>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002990:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002994:	0652      	lsls	r2, r2, #25
 8002996:	d55b      	bpl.n	8002a50 <USB_DeactivateEndpoint+0xcc>
 8002998:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800299c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80029a0:	0512      	lsls	r2, r2, #20
 80029a2:	0d12      	lsrs	r2, r2, #20
 80029a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029a8:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80029ac:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 80029b0:	e04e      	b.n	8002a50 <USB_DeactivateEndpoint+0xcc>
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80029b2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80029b6:	0454      	lsls	r4, r2, #17
 80029b8:	f140 808d 	bpl.w	8002ad6 <USB_DeactivateEndpoint+0x152>
 80029bc:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80029c0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80029c4:	0512      	lsls	r2, r2, #20
 80029c6:	0d12      	lsrs	r2, r2, #20
 80029c8:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80029cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80029d0:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 80029d4:	e07f      	b.n	8002ad6 <USB_DeactivateEndpoint+0x152>
    }
  }
  /*Double Buffer*/
  else
  { 
    if (ep->is_in==0)
 80029d6:	2a00      	cmp	r2, #0
 80029d8:	d142      	bne.n	8002a60 <USB_DeactivateEndpoint+0xdc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80029da:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80029de:	0452      	lsls	r2, r2, #17
 80029e0:	d50b      	bpl.n	80029fa <USB_DeactivateEndpoint+0x76>
 80029e2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80029e6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80029ea:	0512      	lsls	r2, r2, #20
 80029ec:	0d12      	lsrs	r2, r2, #20
 80029ee:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80029f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80029f6:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80029fa:	780a      	ldrb	r2, [r1, #0]
 80029fc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002a00:	065c      	lsls	r4, r3, #25
 8002a02:	d50b      	bpl.n	8002a1c <USB_DeactivateEndpoint+0x98>
 8002a04:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002a08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a0c:	051b      	lsls	r3, r3, #20
 8002a0e:	0d1b      	lsrs	r3, r3, #20
 8002a10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a14:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002a18:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8002a1c:	780a      	ldrb	r2, [r1, #0]
 8002a1e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002a22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a26:	051b      	lsls	r3, r3, #20
 8002a28:	0d1b      	lsrs	r3, r3, #20
 8002a2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a2e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002a32:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002a36:	780a      	ldrb	r2, [r1, #0]
 8002a38:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002a3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a40:	049b      	lsls	r3, r3, #18
 8002a42:	0c9b      	lsrs	r3, r3, #18
 8002a44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a4c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002a50:	780a      	ldrb	r2, [r1, #0]
 8002a52:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002a56:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002a5a:	051b      	lsls	r3, r3, #20
 8002a5c:	0d1b      	lsrs	r3, r3, #20
 8002a5e:	e041      	b.n	8002ae4 <USB_DeactivateEndpoint+0x160>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002a60:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002a64:	0452      	lsls	r2, r2, #17
 8002a66:	d50b      	bpl.n	8002a80 <USB_DeactivateEndpoint+0xfc>
 8002a68:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002a6c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002a70:	0512      	lsls	r2, r2, #20
 8002a72:	0d12      	lsrs	r2, r2, #20
 8002a74:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002a78:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a7c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002a80:	780a      	ldrb	r2, [r1, #0]
 8002a82:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002a86:	065b      	lsls	r3, r3, #25
 8002a88:	d50b      	bpl.n	8002aa2 <USB_DeactivateEndpoint+0x11e>
 8002a8a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002a8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a92:	051b      	lsls	r3, r3, #20
 8002a94:	0d1b      	lsrs	r3, r3, #20
 8002a96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a9a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002a9e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8002aa2:	780a      	ldrb	r2, [r1, #0]
 8002aa4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002aa8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002aac:	051b      	lsls	r3, r3, #20
 8002aae:	0d1b      	lsrs	r3, r3, #20
 8002ab0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ab8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002abc:	780a      	ldrb	r2, [r1, #0]
 8002abe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002ac2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002ac6:	051b      	lsls	r3, r3, #20
 8002ac8:	0d1b      	lsrs	r3, r3, #20
 8002aca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ace:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ad2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002ad6:	780a      	ldrb	r2, [r1, #0]
 8002ad8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002adc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ae0:	049b      	lsls	r3, r3, #18
 8002ae2:	0c9b      	lsrs	r3, r3, #18
 8002ae4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aec:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
  
  return HAL_OK;
}
 8002af0:	2000      	movs	r0, #0
 8002af2:	bd10      	pop	{r4, pc}

08002af4 <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
  if (ep->num == 0)
 8002af4:	780a      	ldrb	r2, [r1, #0]
 8002af6:	b97a      	cbnz	r2, 8002b18 <USB_EPSetStall+0x24>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 8002af8:	8803      	ldrh	r3, [r0, #0]
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b04:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002b08:	f083 0310 	eor.w	r3, r3, #16
 8002b0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b14:	8003      	strh	r3, [r0, #0]
 8002b16:	e01c      	b.n	8002b52 <USB_EPSetStall+0x5e>
  }
  else
  {
    if (ep->is_in)
 8002b18:	784b      	ldrb	r3, [r1, #1]
 8002b1a:	b153      	cbz	r3, 8002b32 <USB_EPSetStall+0x3e>
    {
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 8002b1c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002b20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b28:	041b      	lsls	r3, r3, #16
 8002b2a:	0c1b      	lsrs	r3, r3, #16
 8002b2c:	f083 0310 	eor.w	r3, r3, #16
 8002b30:	e009      	b.n	8002b46 <USB_EPSetStall+0x52>
    }
    else
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 8002b32:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002b36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b3e:	041b      	lsls	r3, r3, #16
 8002b40:	0c1b      	lsrs	r3, r3, #16
 8002b42:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002b46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b4e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
  return HAL_OK;
}
 8002b52:	2000      	movs	r0, #0
 8002b54:	4770      	bx	lr

08002b56 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in)
 8002b56:	784b      	ldrb	r3, [r1, #1]
 8002b58:	780a      	ldrb	r2, [r1, #0]
 8002b5a:	b1db      	cbz	r3, 8002b94 <USB_EPClearStall+0x3e>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002b5c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002b60:	065b      	lsls	r3, r3, #25
 8002b62:	d50b      	bpl.n	8002b7c <USB_EPClearStall+0x26>
 8002b64:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002b68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b6c:	051b      	lsls	r3, r3, #20
 8002b6e:	0d1b      	lsrs	r3, r3, #20
 8002b70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b74:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b78:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002b7c:	780a      	ldrb	r2, [r1, #0]
 8002b7e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002b82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b8a:	041b      	lsls	r3, r3, #16
 8002b8c:	0c1b      	lsrs	r3, r3, #16
 8002b8e:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8002b92:	e01a      	b.n	8002bca <USB_EPClearStall+0x74>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002b94:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002b98:	045b      	lsls	r3, r3, #17
 8002b9a:	d50b      	bpl.n	8002bb4 <USB_EPClearStall+0x5e>
 8002b9c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002ba0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ba4:	051b      	lsls	r3, r3, #20
 8002ba6:	0d1b      	lsrs	r3, r3, #20
 8002ba8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bb0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002bb4:	780a      	ldrb	r2, [r1, #0]
 8002bb6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002bba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bc2:	041b      	lsls	r3, r3, #16
 8002bc4:	0c1b      	lsrs	r3, r3, #16
 8002bc6:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002bca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bd2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }
  return HAL_OK;
}
 8002bd6:	2000      	movs	r0, #0
 8002bd8:	4770      	bx	lr

08002bda <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
  if(address == 0) 
 8002bda:	b911      	cbnz	r1, 8002be2 <USB_SetDevAddress+0x8>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 8002bdc:	2380      	movs	r3, #128	; 0x80
 8002bde:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }
  
  return HAL_OK;
}
 8002be2:	2000      	movs	r0, #0
 8002be4:	4770      	bx	lr

08002be6 <USB_DevConnect>:
 8002be6:	2000      	movs	r0, #0
 8002be8:	4770      	bx	lr

08002bea <USB_DevDisconnect>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002bea:	2000      	movs	r0, #0
 8002bec:	4770      	bx	lr

08002bee <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
  uint32_t tmpreg = 0;
  
  tmpreg = USBx->ISTR;
 8002bee:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8002bf2:	b280      	uxth	r0, r0
 8002bf4:	4770      	bx	lr

08002bf6 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002bf6:	2000      	movs	r0, #0
 8002bf8:	4770      	bx	lr

08002bfa <USB_WritePMA>:
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8002bfa:	3301      	adds	r3, #1
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002bfc:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8002c00:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8002c02:	105b      	asrs	r3, r3, #1
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002c04:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 8002c08:	2400      	movs	r4, #0
 8002c0a:	42a3      	cmp	r3, r4
 8002c0c:	d005      	beq.n	8002c1a <USB_WritePMA+0x20>
 8002c0e:	f831 0b02 	ldrh.w	r0, [r1], #2
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
 8002c12:	f822 0024 	strh.w	r0, [r2, r4, lsl #2]
 8002c16:	3401      	adds	r4, #1
 8002c18:	e7f7      	b.n	8002c0a <USB_WritePMA+0x10>
    pdwVal++;
    pbUsrBuf++;
  }
}
 8002c1a:	bd10      	pop	{r4, pc}

08002c1c <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
 8002c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c1e:	4604      	mov	r4, r0
  uint16_t pmabuffer = 0;
  uint32_t len = ep->xfer_len;
  
  /* IN endpoint */
  if (ep->is_in == 1)
 8002c20:	7848      	ldrb	r0, [r1, #1]
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
 8002c22:	460e      	mov	r6, r1
  uint16_t pmabuffer = 0;
  uint32_t len = ep->xfer_len;
  
  /* IN endpoint */
  if (ep->is_in == 1)
 8002c24:	2801      	cmp	r0, #1
 8002c26:	698b      	ldr	r3, [r1, #24]
 8002c28:	690a      	ldr	r2, [r1, #16]
 8002c2a:	7a8f      	ldrb	r7, [r1, #10]
 8002c2c:	d157      	bne.n	8002cde <USB_EPStartXfer+0xc2>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8002c2e:	461d      	mov	r5, r3
 8002c30:	4293      	cmp	r3, r2
    {
      len=ep->maxpacket;
      ep->xfer_len-=len; 
 8002c32:	bf83      	ittte	hi
 8002c34:	1a9d      	subhi	r5, r3, r2
 8002c36:	618d      	strhi	r5, [r1, #24]
 8002c38:	4615      	movhi	r5, r2
    }
    else
    {  
      len=ep->xfer_len;
      ep->xfer_len =0;
 8002c3a:	2300      	movls	r3, #0
 8002c3c:	bf98      	it	ls
 8002c3e:	618b      	strls	r3, [r1, #24]
 8002c40:	b2ab      	uxth	r3, r5
    }
    
    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0) 
 8002c42:	b97f      	cbnz	r7, 8002c64 <USB_EPStartXfer+0x48>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 8002c44:	888a      	ldrh	r2, [r1, #4]
 8002c46:	4620      	mov	r0, r4
 8002c48:	6949      	ldr	r1, [r1, #20]
 8002c4a:	f7ff ffd6 	bl	8002bfa <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002c4e:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8002c52:	7832      	ldrb	r2, [r6, #0]
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002c5a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8002c5e:	f8c3 5404 	str.w	r5, [r3, #1028]	; 0x404
 8002c62:	e030      	b.n	8002cc6 <USB_EPStartXfer+0xaa>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8002c64:	780a      	ldrb	r2, [r1, #0]
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
        pmabuffer = ep->pmaaddr0;
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 8002c66:	4620      	mov	r0, r4
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
    }
    else
    {
      /* Write the data to the USB endpoint */
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8002c68:	f834 1022 	ldrh.w	r1, [r4, r2, lsl #2]
 8002c6c:	00d2      	lsls	r2, r2, #3
 8002c6e:	f011 0f40 	tst.w	r1, #64	; 0x40
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002c72:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8002c76:	b289      	uxth	r1, r1
 8002c78:	440a      	add	r2, r1
 8002c7a:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8002c7e:	f8c2 5404 	str.w	r5, [r2, #1028]	; 0x404
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
        pmabuffer = ep->pmaaddr0;
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 8002c82:	6971      	ldr	r1, [r6, #20]
      /* Write the data to the USB endpoint */
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
        pmabuffer = ep->pmaaddr1;
 8002c84:	bf14      	ite	ne
 8002c86:	8932      	ldrhne	r2, [r6, #8]
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
        pmabuffer = ep->pmaaddr0;
 8002c88:	88f2      	ldrheq	r2, [r6, #6]
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 8002c8a:	f7ff ffb6 	bl	8002bfa <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8002c8e:	7873      	ldrb	r3, [r6, #1]
 8002c90:	7832      	ldrb	r2, [r6, #0]
 8002c92:	b953      	cbnz	r3, 8002caa <USB_EPStartXfer+0x8e>
 8002c94:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8002c98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c9c:	051b      	lsls	r3, r3, #20
 8002c9e:	0d1b      	lsrs	r3, r3, #20
 8002ca0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ca4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002ca8:	e00b      	b.n	8002cc2 <USB_EPStartXfer+0xa6>
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d10b      	bne.n	8002cc6 <USB_EPStartXfer+0xaa>
 8002cae:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8002cb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cb6:	051b      	lsls	r3, r3, #20
 8002cb8:	0d1b      	lsrs	r3, r3, #20
 8002cba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cc2:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
    }
    
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002cc6:	7832      	ldrb	r2, [r6, #0]
 8002cc8:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8002ccc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cd4:	041b      	lsls	r3, r3, #16
 8002cd6:	0c1b      	lsrs	r3, r3, #16
 8002cd8:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8002cdc:	e066      	b.n	8002dac <USB_EPStartXfer+0x190>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8002cde:	4293      	cmp	r3, r2
    {
      len=ep->maxpacket;
      ep->xfer_len-=len; 
 8002ce0:	bf8b      	itete	hi
 8002ce2:	1a9b      	subhi	r3, r3, r2
    }
    else
    {
      len=ep->xfer_len;
      ep->xfer_len =0;
 8002ce4:	2200      	movls	r2, #0
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
    {
      len=ep->maxpacket;
      ep->xfer_len-=len; 
 8002ce6:	618b      	strhi	r3, [r1, #24]
    }
    else
    {
      len=ep->xfer_len;
      ep->xfer_len =0;
 8002ce8:	618a      	strls	r2, [r1, #24]
 8002cea:	bf88      	it	hi
 8002cec:	4613      	movhi	r3, r2
 8002cee:	7809      	ldrb	r1, [r1, #0]
    }
    
    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0) 
 8002cf0:	b327      	cbz	r7, 8002d3c <USB_EPStartXfer+0x120>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002cf2:	bb00      	cbnz	r0, 8002d36 <USB_EPStartXfer+0x11a>
 8002cf4:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8002cf8:	2b3e      	cmp	r3, #62	; 0x3e
 8002cfa:	b292      	uxth	r2, r2
 8002cfc:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8002d00:	f101 0102 	add.w	r1, r1, #2
 8002d04:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 8002d08:	d90b      	bls.n	8002d22 <USB_EPStartXfer+0x106>
 8002d0a:	f3c3 124f 	ubfx	r2, r3, #5, #16
 8002d0e:	06dd      	lsls	r5, r3, #27
 8002d10:	bf04      	itt	eq
 8002d12:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8002d16:	b292      	uxtheq	r2, r2
 8002d18:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8002d1c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002d20:	e006      	b.n	8002d30 <USB_EPStartXfer+0x114>
 8002d22:	f3c3 024f 	ubfx	r2, r3, #1, #16
 8002d26:	07df      	lsls	r7, r3, #31
 8002d28:	bf44      	itt	mi
 8002d2a:	3201      	addmi	r2, #1
 8002d2c:	b292      	uxthmi	r2, r2
 8002d2e:	0292      	lsls	r2, r2, #10
 8002d30:	b292      	uxth	r2, r2
 8002d32:	f840 2011 	str.w	r2, [r0, r1, lsl #1]
 8002d36:	7872      	ldrb	r2, [r6, #1]
 8002d38:	7831      	ldrb	r1, [r6, #0]
 8002d3a:	bb0a      	cbnz	r2, 8002d80 <USB_EPStartXfer+0x164>
 8002d3c:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8002d40:	2b3e      	cmp	r3, #62	; 0x3e
 8002d42:	b292      	uxth	r2, r2
 8002d44:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8002d48:	f101 0106 	add.w	r1, r1, #6
 8002d4c:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 8002d50:	d90b      	bls.n	8002d6a <USB_EPStartXfer+0x14e>
 8002d52:	f3c3 124f 	ubfx	r2, r3, #5, #16
 8002d56:	06dd      	lsls	r5, r3, #27
 8002d58:	bf04      	itt	eq
 8002d5a:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8002d5e:	b292      	uxtheq	r2, r2
 8002d60:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8002d64:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002d68:	e006      	b.n	8002d78 <USB_EPStartXfer+0x15c>
 8002d6a:	f3c3 024f 	ubfx	r2, r3, #1, #16
 8002d6e:	07db      	lsls	r3, r3, #31
 8002d70:	bf44      	itt	mi
 8002d72:	3201      	addmi	r2, #1
 8002d74:	b292      	uxthmi	r2, r2
 8002d76:	0292      	lsls	r2, r2, #10
 8002d78:	b292      	uxth	r2, r2
 8002d7a:	f840 2011 	str.w	r2, [r0, r1, lsl #1]
 8002d7e:	e00a      	b.n	8002d96 <USB_EPStartXfer+0x17a>
 8002d80:	2a01      	cmp	r2, #1
 8002d82:	d108      	bne.n	8002d96 <USB_EPStartXfer+0x17a>
 8002d84:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8002d88:	b292      	uxth	r2, r2
 8002d8a:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8002d8e:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8002d92:	f8c1 3404 	str.w	r3, [r1, #1028]	; 0x404
    }
    
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002d96:	7832      	ldrb	r2, [r6, #0]
 8002d98:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8002d9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002da0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002da4:	041b      	lsls	r3, r3, #16
 8002da6:	0c1b      	lsrs	r3, r3, #16
 8002da8:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002dac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002db4:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
  }
  
  return HAL_OK;
}
 8002db8:	2000      	movs	r0, #0
 8002dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002dbc <USB_ReadPMA>:
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8002dbc:	3301      	adds	r3, #1
  uint32_t index = 0;
  uint32_t *pdwVal = NULL;
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002dbe:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8002dc2:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8002dc4:	105b      	asrs	r3, r3, #1
  uint32_t index = 0;
  uint32_t *pdwVal = NULL;
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002dc6:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 8002dca:	2400      	movs	r4, #0
 8002dcc:	42a3      	cmp	r3, r4
 8002dce:	d005      	beq.n	8002ddc <USB_ReadPMA+0x20>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8002dd0:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8002dd4:	f821 0014 	strh.w	r0, [r1, r4, lsl #1]
 8002dd8:	3401      	adds	r4, #1
 8002dda:	e7f7      	b.n	8002dcc <USB_ReadPMA+0x10>
    pbUsrBuf++;
  }
}
 8002ddc:	bd10      	pop	{r4, pc}
	...

08002de0 <USBD_HID_CDC_GetCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_CDC_GetCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_HID_CDC_CfgDesc);
 8002de0:	236b      	movs	r3, #107	; 0x6b
 8002de2:	8003      	strh	r3, [r0, #0]
  return USBD_HID_CDC_CfgDesc;
}
 8002de4:	4800      	ldr	r0, [pc, #0]	; (8002de8 <USBD_HID_CDC_GetCfgDesc+0x8>)
 8002de6:	4770      	bx	lr
 8002de8:	200000a4 	.word	0x200000a4

08002dec <USBD_HID_CDC_DataIn>:
  * @retval status
  */
static uint8_t  USBD_HID_CDC_DataIn (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
  USBD_HID_CDC_HandleTypeDef *h = (USBD_HID_CDC_HandleTypeDef *)pdev->pClassData;
 8002dec:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  /* Ensure that the FIFO is empty before a new transfer, this condition could 
  be caused by  a new transfer before the end of the previous transfer */
  if (h != NULL) {
 8002df0:	b143      	cbz	r3, 8002e04 <USBD_HID_CDC_DataIn+0x18>

	epnum |= 0x80;
	if (epnum == HID_EP0IN_ADDR) {
 8002df2:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8002df6:	2983      	cmp	r1, #131	; 0x83
 8002df8:	f04f 0000 	mov.w	r0, #0
		h->state = HID_IDLE;
 8002dfc:	bf0c      	ite	eq
 8002dfe:	7318      	strbeq	r0, [r3, #12]
	} else {
		h->CDCTxState = 0;
 8002e00:	6758      	strne	r0, [r3, #116]	; 0x74
 8002e02:	4770      	bx	lr
	}

	return USBD_OK;
  }

  return USBD_FAIL;
 8002e04:	2002      	movs	r0, #2
}
 8002e06:	4770      	bx	lr

08002e08 <USBD_HID_CDC_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_CDC_GetDeviceQualifierDesc (uint16_t *length)
{
  *length = sizeof (USBD_HID_CDC_DeviceQualifierDesc);
 8002e08:	230a      	movs	r3, #10
 8002e0a:	8003      	strh	r3, [r0, #0]
  return USBD_HID_CDC_DeviceQualifierDesc;
}
 8002e0c:	4800      	ldr	r0, [pc, #0]	; (8002e10 <USBD_HID_CDC_GetDeviceQualifierDesc+0x8>)
 8002e0e:	4770      	bx	lr
 8002e10:	20000110 	.word	0x20000110

08002e14 <USBD_HID_CDC_DataOut>:
  * @retval status
  */

static uint8_t  USBD_HID_CDC_DataOut (USBD_HandleTypeDef *pdev,
								uint8_t epnum)
{
 8002e14:	b538      	push	{r3, r4, r5, lr}
	USBD_HID_CDC_HandleTypeDef *h = (USBD_HID_CDC_HandleTypeDef *)pdev->pClassData;
 8002e16:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  * @retval status
  */

static uint8_t  USBD_HID_CDC_DataOut (USBD_HandleTypeDef *pdev,
								uint8_t epnum)
{
 8002e1a:	4605      	mov	r5, r0
 8002e1c:	460b      	mov	r3, r1
	USBD_HID_CDC_HandleTypeDef *h = (USBD_HID_CDC_HandleTypeDef *)pdev->pClassData;

    /* USB data will be immediately processed, this allow next USB traffic being
	NAKed till the end of the application Xfer */
	if(h != NULL && epnum != HID_EP1OUT_ADDR)
 8002e1e:	b17c      	cbz	r4, 8002e40 <USBD_HID_CDC_DataOut+0x2c>
 8002e20:	2902      	cmp	r1, #2
 8002e22:	d00d      	beq.n	8002e40 <USBD_HID_CDC_DataOut+0x2c>
	{
		h->CDCRxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8002e24:	f000 ff7b 	bl	8003d1e <USBD_LL_GetRxDataSize>
 8002e28:	4621      	mov	r1, r4
	    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(h->CDCRxBuffer, &h->CDCRxLength);
 8002e2a:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c

    /* USB data will be immediately processed, this allow next USB traffic being
	NAKed till the end of the application Xfer */
	if(h != NULL && epnum != HID_EP1OUT_ADDR)
	{
		h->CDCRxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8002e2e:	f841 0f6c 	str.w	r0, [r1, #108]!
	    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(h->CDCRxBuffer, &h->CDCRxLength);
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8002e36:	4798      	blx	r3
	    USBD_LL_PrepareReceive(pdev, CDC_EP1OUT_ADDR, h->CDCRxBuffer, CDC_EP1OUT_SIZE);
 8002e38:	2340      	movs	r3, #64	; 0x40
 8002e3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002e3c:	2101      	movs	r1, #1
 8002e3e:	e007      	b.n	8002e50 <USBD_HID_CDC_DataOut+0x3c>

	    return USBD_OK;
	}
	else
	{
		h->HIDRxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8002e40:	4619      	mov	r1, r3
 8002e42:	4628      	mov	r0, r5
 8002e44:	f000 ff6b 	bl	8003d1e <USBD_LL_GetRxDataSize>
	    USBD_LL_PrepareReceive(pdev, HID_EP1OUT_ADDR, h->HIDRxBuffer, HID_EP1OUT_SIZE);
 8002e48:	6922      	ldr	r2, [r4, #16]

	    return USBD_OK;
	}
	else
	{
		h->HIDRxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8002e4a:	6160      	str	r0, [r4, #20]
	    USBD_LL_PrepareReceive(pdev, HID_EP1OUT_ADDR, h->HIDRxBuffer, HID_EP1OUT_SIZE);
 8002e4c:	2340      	movs	r3, #64	; 0x40
 8002e4e:	2102      	movs	r1, #2
 8002e50:	4628      	mov	r0, r5
 8002e52:	f000 ff5d 	bl	8003d10 <USBD_LL_PrepareReceive>

	    return USBD_OK;
	}

    return USBD_FAIL;
}
 8002e56:	2000      	movs	r0, #0
 8002e58:	bd38      	pop	{r3, r4, r5, pc}
	...

08002e5c <USBD_HID_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8002e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e60:	4607      	mov	r7, r0
 8002e62:	b0c4      	sub	sp, #272	; 0x110
  uint16_t len = 0;
  uint8_t  *pbuf = NULL;

  USBD_HID_CDC_HandleTypeDef     *hhid = (USBD_HID_CDC_HandleTypeDef*) pdev->pClassData;
 8002e64:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
  

  if (req) {
 8002e68:	460c      	mov	r4, r1
 8002e6a:	b179      	cbz	r1, 8002e8c <USBD_HID_CDC_Setup+0x30>
	  uint8_t dbg[255];

	  uint8_t ll = sprintf(dbg,
 8002e6c:	784b      	ldrb	r3, [r1, #1]
 8002e6e:	780a      	ldrb	r2, [r1, #0]
 8002e70:	88c9      	ldrh	r1, [r1, #6]
 8002e72:	a804      	add	r0, sp, #16
 8002e74:	9102      	str	r1, [sp, #8]
 8002e76:	88a1      	ldrh	r1, [r4, #4]
 8002e78:	9101      	str	r1, [sp, #4]
 8002e7a:	8861      	ldrh	r1, [r4, #2]
 8002e7c:	9100      	str	r1, [sp, #0]
 8002e7e:	494b      	ldr	r1, [pc, #300]	; (8002fac <USBD_HID_CDC_Setup+0x150>)
 8002e80:	f001 f806 	bl	8003e90 <sprintf>
			  req->bRequest,
			  req->wValue,
			  req->wIndex,
			  req->wLength
			  );
	  utx (dbg, ll);
 8002e84:	b2c1      	uxtb	r1, r0
 8002e86:	a804      	add	r0, sp, #16
 8002e88:	f000 fc72 	bl	8003770 <utx>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002e8c:	7823      	ldrb	r3, [r4, #0]
 8002e8e:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 8002e92:	d052      	beq.n	8002f3a <USBD_HID_CDC_Setup+0xde>
 8002e94:	2d20      	cmp	r5, #32
 8002e96:	f040 8084 	bne.w	8002fa2 <USBD_HID_CDC_Setup+0x146>
 8002e9a:	f003 020f 	and.w	r2, r3, #15
  {


  case USB_REQ_TYPE_CLASS :
      if ((((req->bmRequest & 0x0f) == 1) && (req->wIndex == 2)) ||
 8002e9e:	2a01      	cmp	r2, #1
 8002ea0:	7860      	ldrb	r0, [r4, #1]
 8002ea2:	d101      	bne.n	8002ea8 <USBD_HID_CDC_Setup+0x4c>
 8002ea4:	88a2      	ldrh	r2, [r4, #4]
 8002ea6:	e004      	b.n	8002eb2 <USBD_HID_CDC_Setup+0x56>
 8002ea8:	2a02      	cmp	r2, #2
 8002eaa:	d121      	bne.n	8002ef0 <USBD_HID_CDC_Setup+0x94>
    	   (((req->bmRequest & 0x0f) == 2) && ((req->wIndex == HID_EP0IN_ADDR) || (req->wIndex == HID_EP1OUT_ADDR)))) {
 8002eac:	88a2      	ldrh	r2, [r4, #4]
 8002eae:	2a83      	cmp	r2, #131	; 0x83
 8002eb0:	d001      	beq.n	8002eb6 <USBD_HID_CDC_Setup+0x5a>
 8002eb2:	2a02      	cmp	r2, #2
 8002eb4:	d11c      	bne.n	8002ef0 <USBD_HID_CDC_Setup+0x94>

		switch (req->bRequest)
 8002eb6:	3802      	subs	r0, #2
 8002eb8:	2809      	cmp	r0, #9
 8002eba:	d813      	bhi.n	8002ee4 <USBD_HID_CDC_Setup+0x88>
 8002ebc:	e8df f000 	tbb	[pc, r0]
 8002ec0:	1212080f 	.word	0x1212080f
 8002ec4:	12121212 	.word	0x12121212
 8002ec8:	050b      	.short	0x050b
		{
		case HID_REQ_SET_PROTOCOL:
		  hhid->Protocol = (uint8_t)(req->wValue);
 8002eca:	78a3      	ldrb	r3, [r4, #2]
 8002ecc:	6033      	str	r3, [r6, #0]
 8002ece:	e068      	b.n	8002fa2 <USBD_HID_CDC_Setup+0x146>
		  break;

		case HID_REQ_GET_PROTOCOL:
		  USBD_CtlSendData (pdev,
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	4631      	mov	r1, r6
 8002ed4:	e01b      	b.n	8002f0e <USBD_HID_CDC_Setup+0xb2>
							(uint8_t *)&hhid->Protocol,
							1);
		  break;

		case HID_REQ_SET_IDLE:
		  hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8002ed6:	8863      	ldrh	r3, [r4, #2]
 8002ed8:	0a1b      	lsrs	r3, r3, #8
 8002eda:	6073      	str	r3, [r6, #4]
 8002edc:	e061      	b.n	8002fa2 <USBD_HID_CDC_Setup+0x146>
		  break;

		case HID_REQ_GET_IDLE:
		  USBD_CtlSendData (pdev,
 8002ede:	2201      	movs	r2, #1
 8002ee0:	1d31      	adds	r1, r6, #4
 8002ee2:	e014      	b.n	8002f0e <USBD_HID_CDC_Setup+0xb2>
							(uint8_t *)&hhid->IdleState,
							1);
		  break;

		default:
		  USBD_CtlError (pdev, req);
 8002ee4:	4621      	mov	r1, r4
 8002ee6:	4638      	mov	r0, r7
 8002ee8:	f000 fa4c 	bl	8003384 <USBD_CtlError>
		  return USBD_FAIL;
 8002eec:	2502      	movs	r5, #2
 8002eee:	e059      	b.n	8002fa4 <USBD_HID_CDC_Setup+0x148>
		}
    } else if (req->wLength)
 8002ef0:	88e5      	ldrh	r5, [r4, #6]
 8002ef2:	b1dd      	cbz	r5, 8002f2c <USBD_HID_CDC_Setup+0xd0>
    {
      if (req->bmRequest & 0x80)
 8002ef4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002ef8:	f106 0820 	add.w	r8, r6, #32
 8002efc:	d00b      	beq.n	8002f16 <USBD_HID_CDC_Setup+0xba>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002efe:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8002f02:	462a      	mov	r2, r5
 8002f04:	4641      	mov	r1, r8
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	4798      	blx	r3
                                                          (uint8_t *)hhid->CDCdata,
                                                          req->wLength);
          USBD_CtlSendData (pdev,
 8002f0a:	4641      	mov	r1, r8
 8002f0c:	88e2      	ldrh	r2, [r4, #6]
 8002f0e:	4638      	mov	r0, r7
 8002f10:	f000 fbeb 	bl	80036ea <USBD_CtlSendData>
 8002f14:	e045      	b.n	8002fa2 <USBD_HID_CDC_Setup+0x146>
                            (uint8_t *)hhid->CDCdata,
                            req->wLength);
      }
      else
      {
        hhid->CDCCmdOpCode = req->bRequest;
 8002f16:	f886 0060 	strb.w	r0, [r6, #96]	; 0x60
        hhid->CDCCmdLength = req->wLength;
 8002f1a:	88e3      	ldrh	r3, [r4, #6]

        USBD_CtlPrepareRx (pdev,
 8002f1c:	4641      	mov	r1, r8
                            req->wLength);
      }
      else
      {
        hhid->CDCCmdOpCode = req->bRequest;
        hhid->CDCCmdLength = req->wLength;
 8002f1e:	f886 3061 	strb.w	r3, [r6, #97]	; 0x61

        USBD_CtlPrepareRx (pdev,
 8002f22:	88e2      	ldrh	r2, [r4, #6]
 8002f24:	4638      	mov	r0, r7
 8002f26:	f000 fbf5 	bl	8003714 <USBD_CtlPrepareRx>
 8002f2a:	e03a      	b.n	8002fa2 <USBD_HID_CDC_Setup+0x146>
      }
      
    }
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002f2c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8002f30:	462a      	mov	r2, r5
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	4621      	mov	r1, r4
 8002f36:	4798      	blx	r3
 8002f38:	e034      	b.n	8002fa4 <USBD_HID_CDC_Setup+0x148>
                                                        0);
    }
    break;
    
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8002f3a:	7863      	ldrb	r3, [r4, #1]
 8002f3c:	2b0a      	cmp	r3, #10
 8002f3e:	d018      	beq.n	8002f72 <USBD_HID_CDC_Setup+0x116>
 8002f40:	2b0b      	cmp	r3, #11
 8002f42:	d025      	beq.n	8002f90 <USBD_HID_CDC_Setup+0x134>
 8002f44:	2b06      	cmp	r3, #6
 8002f46:	d12d      	bne.n	8002fa4 <USBD_HID_CDC_Setup+0x148>
    {
    case USB_REQ_GET_DESCRIPTOR: 
      if( req->wValue >> 8 == HID_REPORT_DESC)
 8002f48:	8863      	ldrh	r3, [r4, #2]
 8002f4a:	0a1b      	lsrs	r3, r3, #8
 8002f4c:	2b22      	cmp	r3, #34	; 0x22
 8002f4e:	d105      	bne.n	8002f5c <USBD_HID_CDC_Setup+0x100>
      {
        len = MIN(HID_BBOX_REPORT_DESC_SIZE, req->wLength);
 8002f50:	88e2      	ldrh	r2, [r4, #6]
        pbuf = USBD_HID_BBOX_ReportDesc;
 8002f52:	4917      	ldr	r1, [pc, #92]	; (8002fb0 <USBD_HID_CDC_Setup+0x154>)
    switch (req->bRequest)
    {
    case USB_REQ_GET_DESCRIPTOR: 
      if( req->wValue >> 8 == HID_REPORT_DESC)
      {
        len = MIN(HID_BBOX_REPORT_DESC_SIZE, req->wLength);
 8002f54:	2a56      	cmp	r2, #86	; 0x56
 8002f56:	bf28      	it	cs
 8002f58:	2256      	movcs	r2, #86	; 0x56
 8002f5a:	e015      	b.n	8002f88 <USBD_HID_CDC_Setup+0x12c>
        pbuf = USBD_HID_BBOX_ReportDesc;
      }
      else if( req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8002f5c:	2b21      	cmp	r3, #33	; 0x21
 8002f5e:	d105      	bne.n	8002f6c <USBD_HID_CDC_Setup+0x110>
      {
        pbuf = USBD_HID_CDC_Desc;
        len = MIN(USB_HID_DESC_SIZE, req->wLength);
 8002f60:	88e2      	ldrh	r2, [r4, #6]
        len = MIN(HID_BBOX_REPORT_DESC_SIZE, req->wLength);
        pbuf = USBD_HID_BBOX_ReportDesc;
      }
      else if( req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
      {
        pbuf = USBD_HID_CDC_Desc;
 8002f62:	4914      	ldr	r1, [pc, #80]	; (8002fb4 <USBD_HID_CDC_Setup+0x158>)
        len = MIN(USB_HID_DESC_SIZE, req->wLength);
 8002f64:	2a09      	cmp	r2, #9
 8002f66:	bf28      	it	cs
 8002f68:	2209      	movcs	r2, #9
 8002f6a:	e00d      	b.n	8002f88 <USBD_HID_CDC_Setup+0x12c>
  */
static uint8_t  USBD_HID_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
  uint16_t len = 0;
  uint8_t  *pbuf = NULL;
 8002f6c:	4629      	mov	r1, r5
  * @retval status
  */
static uint8_t  USBD_HID_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
  uint16_t len = 0;
 8002f6e:	462a      	mov	r2, r5
 8002f70:	e00a      	b.n	8002f88 <USBD_HID_CDC_Setup+0x12c>
                        len);
      
      break;
      
    case USB_REQ_GET_INTERFACE :
    	if ((uint8_t)(req->wValue) == HID_EP0IN_ADDR
 8002f72:	78a3      	ldrb	r3, [r4, #2]
    			|| (uint8_t)(req->wValue) == HID_EP1OUT_ADDR)
    	{
    		USBD_CtlSendData (pdev,
 8002f74:	2201      	movs	r2, #1
                        len);
      
      break;
      
    case USB_REQ_GET_INTERFACE :
    	if ((uint8_t)(req->wValue) == HID_EP0IN_ADDR
 8002f76:	2b83      	cmp	r3, #131	; 0x83
 8002f78:	d001      	beq.n	8002f7e <USBD_HID_CDC_Setup+0x122>
    			|| (uint8_t)(req->wValue) == HID_EP1OUT_ADDR)
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d102      	bne.n	8002f84 <USBD_HID_CDC_Setup+0x128>
    	{
    		USBD_CtlSendData (pdev,
 8002f7e:	f106 0108 	add.w	r1, r6, #8
 8002f82:	e001      	b.n	8002f88 <USBD_HID_CDC_Setup+0x12c>
                        (uint8_t *)&hhid->HIDAltSetting, 1);
    	} else {
    		USBD_CtlSendData (pdev,
 8002f84:	f106 011c 	add.w	r1, r6, #28
 8002f88:	4638      	mov	r0, r7
 8002f8a:	f000 fbae 	bl	80036ea <USBD_CtlSendData>
 8002f8e:	e009      	b.n	8002fa4 <USBD_HID_CDC_Setup+0x148>
    		            (uint8_t *)&hhid->CDCAltSetting, 1);
		}
      break;
      
    case USB_REQ_SET_INTERFACE :
    	if ((uint8_t)(req->wValue) == HID_EP0IN_ADDR
 8002f90:	78a3      	ldrb	r3, [r4, #2]
 8002f92:	2b83      	cmp	r3, #131	; 0x83
 8002f94:	d001      	beq.n	8002f9a <USBD_HID_CDC_Setup+0x13e>
    			|| (uint8_t)(req->wValue) == HID_EP1OUT_ADDR)
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d101      	bne.n	8002f9e <USBD_HID_CDC_Setup+0x142>
    	{
    		hhid->HIDAltSetting = (uint8_t)(req->wValue);
 8002f9a:	60b3      	str	r3, [r6, #8]
 8002f9c:	e002      	b.n	8002fa4 <USBD_HID_CDC_Setup+0x148>
    	} else {
    		hhid->CDCAltSetting = (uint8_t)(req->wValue);
 8002f9e:	61f3      	str	r3, [r6, #28]
 8002fa0:	e000      	b.n	8002fa4 <USBD_HID_CDC_Setup+0x148>
		}
      break;
    }
  }
  return USBD_OK;
 8002fa2:	2500      	movs	r5, #0
}
 8002fa4:	4628      	mov	r0, r5
 8002fa6:	b044      	add	sp, #272	; 0x110
 8002fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fac:	080088ea 	.word	0x080088ea
 8002fb0:	2000004c 	.word	0x2000004c
 8002fb4:	20000040 	.word	0x20000040

08002fb8 <USBD_HID_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_CDC_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 8002fb8:	b510      	push	{r4, lr}
 8002fba:	4604      	mov	r4, r0
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EP0IN_ADDR);
 8002fbc:	2183      	movs	r1, #131	; 0x83
 8002fbe:	f000 fe74 	bl	8003caa <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, HID_EP1OUT_ADDR);
 8002fc2:	2102      	movs	r1, #2
 8002fc4:	4620      	mov	r0, r4
 8002fc6:	f000 fe70 	bl	8003caa <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_EP0IN_ADDR);
 8002fca:	2182      	movs	r1, #130	; 0x82
 8002fcc:	4620      	mov	r0, r4
 8002fce:	f000 fe6c 	bl	8003caa <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_EP1OUT_ADDR);
 8002fd2:	2101      	movs	r1, #1
 8002fd4:	4620      	mov	r0, r4
 8002fd6:	f000 fe68 	bl	8003caa <USBD_LL_CloseEP>
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_EPCMD_ADDR);
 8002fda:	2181      	movs	r1, #129	; 0x81
 8002fdc:	4620      	mov	r0, r4
 8002fde:	f000 fe64 	bl	8003caa <USBD_LL_CloseEP>

  /* FRee allocated memory */
  if(pdev->pClassData != NULL)
 8002fe2:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8002fe6:	b153      	cbz	r3, 8002ffe <USBD_HID_CDC_DeInit+0x46>
  {
	((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8002fe8:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8002ff0:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8002ff4:	f000 fe9e 	bl	8003d34 <USBD_static_free>
    pdev->pClassData = NULL;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
  } 
  
  return USBD_OK;
}
 8002ffe:	2000      	movs	r0, #0
 8003000:	bd10      	pop	{r4, pc}

08003002 <USBD_HID_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_CDC_Init (USBD_HandleTypeDef *pdev,
                               uint8_t cfgidx)
{
 8003002:	b538      	push	{r3, r4, r5, lr}
 8003004:	4604      	mov	r4, r0
  uint8_t ret = 0;
  
  /* Open EP IN */
  USBD_LL_OpenEP(pdev,
 8003006:	230a      	movs	r3, #10
 8003008:	2203      	movs	r2, #3
 800300a:	2183      	movs	r1, #131	; 0x83
 800300c:	f000 fe43 	bl	8003c96 <USBD_LL_OpenEP>
                 HID_EP0IN_ADDR,
                 USBD_EP_TYPE_INTR,
                 HID_EP0IN_SIZE);
  
  /* Open EP OUT */
  USBD_LL_OpenEP(pdev,
 8003010:	2340      	movs	r3, #64	; 0x40
 8003012:	2203      	movs	r2, #3
 8003014:	2102      	movs	r1, #2
 8003016:	4620      	mov	r0, r4
 8003018:	f000 fe3d 	bl	8003c96 <USBD_LL_OpenEP>
                 HID_EP1OUT_ADDR,
                 USBD_EP_TYPE_INTR,
                 HID_EP1OUT_SIZE);

  /* Open EP IN */
  USBD_LL_OpenEP(pdev,
 800301c:	2340      	movs	r3, #64	; 0x40
 800301e:	2202      	movs	r2, #2
 8003020:	2182      	movs	r1, #130	; 0x82
 8003022:	4620      	mov	r0, r4
 8003024:	f000 fe37 	bl	8003c96 <USBD_LL_OpenEP>
                 CDC_EP0IN_ADDR,
                 USBD_EP_TYPE_BULK,
                 CDC_EP0IN_SIZE);

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev,
 8003028:	2340      	movs	r3, #64	; 0x40
 800302a:	2202      	movs	r2, #2
 800302c:	2101      	movs	r1, #1
 800302e:	4620      	mov	r0, r4
 8003030:	f000 fe31 	bl	8003c96 <USBD_LL_OpenEP>
                 CDC_EP1OUT_ADDR,
                 USBD_EP_TYPE_BULK,
                 CDC_EP1OUT_SIZE);

  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 8003034:	2308      	movs	r3, #8
 8003036:	2203      	movs	r2, #3
 8003038:	2181      	movs	r1, #129	; 0x81
 800303a:	4620      	mov	r0, r4
 800303c:	f000 fe2b 	bl	8003c96 <USBD_LL_OpenEP>
                   CDC_EPCMD_ADDR,
                   USBD_EP_TYPE_INTR,
                   CDC_CMD_PACKET_SIZE);

  pdev->pClassData = USBD_malloc(sizeof (USBD_HID_CDC_HandleTypeDef));
 8003040:	207c      	movs	r0, #124	; 0x7c
 8003042:	f000 fe73 	bl	8003d2c <USBD_static_malloc>
 8003046:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 800304a:	b1d0      	cbz	r0, 8003082 <USBD_HID_CDC_Init+0x80>
  else
  {
    ((USBD_HID_CDC_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800304c:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
  {
    ret = 1; 
  }
  else
  {
    ((USBD_HID_CDC_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8003050:	2500      	movs	r5, #0
 8003052:	7305      	strb	r5, [r0, #12]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4798      	blx	r3

    /* Init Xfer states */
    ((USBD_HID_CDC_HandleTypeDef *)pdev->pClassData)->CDCTxState = 0;
 8003058:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
    ((USBD_HID_CDC_HandleTypeDef *)pdev->pClassData)->CDCRxState = 0;

    ((USBD_HID_CDC_HandleTypeDef *)pdev->pClassData)->HIDRxState = 0;

    /* Prepare Out endpoint to receive next packet */
    USBD_LL_PrepareReceive(pdev,
 800305c:	2340      	movs	r3, #64	; 0x40

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();

    /* Init Xfer states */
    ((USBD_HID_CDC_HandleTypeDef *)pdev->pClassData)->CDCTxState = 0;
 800305e:	6755      	str	r5, [r2, #116]	; 0x74
    ((USBD_HID_CDC_HandleTypeDef *)pdev->pClassData)->CDCRxState = 0;

    ((USBD_HID_CDC_HandleTypeDef *)pdev->pClassData)->HIDRxState = 0;

    /* Prepare Out endpoint to receive next packet */
    USBD_LL_PrepareReceive(pdev,
 8003060:	2101      	movs	r1, #1
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();

    /* Init Xfer states */
    ((USBD_HID_CDC_HandleTypeDef *)pdev->pClassData)->CDCTxState = 0;
    ((USBD_HID_CDC_HandleTypeDef *)pdev->pClassData)->CDCRxState = 0;
 8003062:	6795      	str	r5, [r2, #120]	; 0x78

    ((USBD_HID_CDC_HandleTypeDef *)pdev->pClassData)->HIDRxState = 0;

    /* Prepare Out endpoint to receive next packet */
    USBD_LL_PrepareReceive(pdev,
 8003064:	4620      	mov	r0, r4

    /* Init Xfer states */
    ((USBD_HID_CDC_HandleTypeDef *)pdev->pClassData)->CDCTxState = 0;
    ((USBD_HID_CDC_HandleTypeDef *)pdev->pClassData)->CDCRxState = 0;

    ((USBD_HID_CDC_HandleTypeDef *)pdev->pClassData)->HIDRxState = 0;
 8003066:	6195      	str	r5, [r2, #24]

    /* Prepare Out endpoint to receive next packet */
    USBD_LL_PrepareReceive(pdev,
 8003068:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800306a:	f000 fe51 	bl	8003d10 <USBD_LL_PrepareReceive>
    		CDC_EP1OUT_ADDR,
    		((USBD_HID_CDC_HandleTypeDef *)pdev->pClassData)->CDCRxBuffer,
            CDC_EP1OUT_SIZE);

    USBD_LL_PrepareReceive(pdev,
 800306e:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 8003072:	2340      	movs	r3, #64	; 0x40
 8003074:	6912      	ldr	r2, [r2, #16]
 8003076:	2102      	movs	r1, #2
 8003078:	4620      	mov	r0, r4
 800307a:	f000 fe49 	bl	8003d10 <USBD_LL_PrepareReceive>
  * @retval status
  */
static uint8_t  USBD_HID_CDC_Init (USBD_HandleTypeDef *pdev,
                               uint8_t cfgidx)
{
  uint8_t ret = 0;
 800307e:	4628      	mov	r0, r5
 8003080:	bd38      	pop	{r3, r4, r5, pc}

  pdev->pClassData = USBD_malloc(sizeof (USBD_HID_CDC_HandleTypeDef));
  
  if(pdev->pClassData == NULL)
  {
    ret = 1; 
 8003082:	2001      	movs	r0, #1
        	((USBD_HID_CDC_HandleTypeDef *)pdev->pClassData)->HIDRxBuffer,
            HID_EP1OUT_SIZE);
  }

  return ret;
}
 8003084:	bd38      	pop	{r3, r4, r5, pc}

08003086 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport     (USBD_HandleTypeDef  *pdev,
                                 uint8_t *report,
                                 uint16_t len)
{
 8003086:	b538      	push	{r3, r4, r5, lr}
 8003088:	4613      	mov	r3, r2
  USBD_HID_CDC_HandleTypeDef     *hhid = (USBD_HID_CDC_HandleTypeDef*)pdev->pClassData;
  
  if (pdev->dev_state == USBD_STATE_CONFIGURED )
 800308a:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800308e:	2a03      	cmp	r2, #3
 8003090:	d10b      	bne.n	80030aa <USBD_HID_SendReport+0x24>
  */
uint8_t USBD_HID_SendReport     (USBD_HandleTypeDef  *pdev,
                                 uint8_t *report,
                                 uint16_t len)
{
  USBD_HID_CDC_HandleTypeDef     *hhid = (USBD_HID_CDC_HandleTypeDef*)pdev->pClassData;
 8003092:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  
  if (pdev->dev_state == USBD_STATE_CONFIGURED )
  {
    if(hhid->state == HID_IDLE)
 8003096:	7b2c      	ldrb	r4, [r5, #12]
 8003098:	b93c      	cbnz	r4, 80030aa <USBD_HID_SendReport+0x24>
    {
      hhid->state = HID_BUSY;
 800309a:	2201      	movs	r2, #1
 800309c:	732a      	strb	r2, [r5, #12]

      USBD_LL_Transmit (pdev, 
 800309e:	460a      	mov	r2, r1
 80030a0:	2183      	movs	r1, #131	; 0x83
 80030a2:	f000 fe2e 	bl	8003d02 <USBD_LL_Transmit>
                        HID_EP0IN_ADDR,
                        report,
                        len);
      return USBD_OK;
 80030a6:	4620      	mov	r0, r4
 80030a8:	bd38      	pop	{r3, r4, r5, pc}
    }
  }
  return USBD_FAIL;
 80030aa:	2002      	movs	r0, #2
}
 80030ac:	bd38      	pop	{r3, r4, r5, pc}

080030ae <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if(fops != NULL)
 80030ae:	b119      	cbz	r1, 80030b8 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 80030b0:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;
 80030b4:	2000      	movs	r0, #0
 80030b6:	4770      	bx	lr
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
 80030b8:	2002      	movs	r0, #2
    pdev->pUserData= fops;
    ret = USBD_OK;
  }

  return ret;
}
 80030ba:	4770      	bx	lr

080030bc <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_HID_CDC_HandleTypeDef   *h = (USBD_HID_CDC_HandleTypeDef*) pdev->pClassData;
 80030bc:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218

  h->CDCTxBuffer = pbuff;
  h->CDCTxLength = length;

  return USBD_OK;
}
 80030c0:	2000      	movs	r0, #0
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_HID_CDC_HandleTypeDef   *h = (USBD_HID_CDC_HandleTypeDef*) pdev->pClassData;

  h->CDCTxBuffer = pbuff;
 80030c2:	6699      	str	r1, [r3, #104]	; 0x68
  h->CDCTxLength = length;
 80030c4:	671a      	str	r2, [r3, #112]	; 0x70

  return USBD_OK;
}
 80030c6:	4770      	bx	lr

080030c8 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_HID_CDC_HandleTypeDef   *h = (USBD_HID_CDC_HandleTypeDef*) pdev->pClassData;

  h->CDCRxBuffer = pbuff;
 80030c8:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218

  return USBD_OK;
}
 80030cc:	2000      	movs	r0, #0
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_HID_CDC_HandleTypeDef   *h = (USBD_HID_CDC_HandleTypeDef*) pdev->pClassData;

  h->CDCRxBuffer = pbuff;
 80030ce:	6659      	str	r1, [r3, #100]	; 0x64

  return USBD_OK;
}
 80030d0:	4770      	bx	lr

080030d2 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_HID_CDC_HandleTypeDef   *h = (USBD_HID_CDC_HandleTypeDef*) pdev->pClassData;
 80030d2:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80030d6:	b508      	push	{r3, lr}
  USBD_HID_CDC_HandleTypeDef   *h = (USBD_HID_CDC_HandleTypeDef*) pdev->pClassData;

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 80030d8:	b132      	cbz	r2, 80030e8 <USBD_CDC_ReceivePacket+0x16>
  {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_EP1OUT_ADDR, h->CDCRxBuffer, VCOM_DATA_SIZE);
 80030da:	2340      	movs	r3, #64	; 0x40
 80030dc:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80030de:	2101      	movs	r1, #1
 80030e0:	f000 fe16 	bl	8003d10 <USBD_LL_PrepareReceive>

      return USBD_OK;
 80030e4:	2000      	movs	r0, #0
 80030e6:	bd08      	pop	{r3, pc}
  }

  return USBD_FAIL;
 80030e8:	2002      	movs	r0, #2
}
 80030ea:	bd08      	pop	{r3, pc}

080030ec <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80030ec:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80030ee:	b950      	cbnz	r0, 8003106 <USBD_Init+0x1a>
  {
    USBD_ErrLog("Invalid Device handle");
 80030f0:	480d      	ldr	r0, [pc, #52]	; (8003128 <USBD_Init+0x3c>)
 80030f2:	f000 fea1 	bl	8003e38 <printf>
 80030f6:	480d      	ldr	r0, [pc, #52]	; (800312c <USBD_Init+0x40>)
 80030f8:	f000 fe9e 	bl	8003e38 <printf>
 80030fc:	200a      	movs	r0, #10
 80030fe:	f000 feb3 	bl	8003e68 <putchar>
    return USBD_FAIL; 
 8003102:	2002      	movs	r0, #2
 8003104:	bd08      	pop	{r3, pc}
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8003106:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800310a:	b113      	cbz	r3, 8003112 <USBD_Init+0x26>
  {
    pdev->pClass = NULL;
 800310c:	2300      	movs	r3, #0
 800310e:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8003112:	b109      	cbz	r1, 8003118 <USBD_Init+0x2c>
  {
    pdev->pDesc = pdesc;
 8003114:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8003118:	2301      	movs	r3, #1
 800311a:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 800311e:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8003120:	f000 fd60 	bl	8003be4 <USBD_LL_Init>
  
  return USBD_OK; 
 8003124:	2000      	movs	r0, #0
}
 8003126:	bd08      	pop	{r3, pc}
 8003128:	0800894d 	.word	0x0800894d
 800312c:	08008955 	.word	0x08008955

08003130 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8003130:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8003132:	b119      	cbz	r1, 800313c <USBD_RegisterClass+0xc>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8003134:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 8003138:	2000      	movs	r0, #0
 800313a:	bd08      	pop	{r3, pc}
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
 800313c:	4805      	ldr	r0, [pc, #20]	; (8003154 <USBD_RegisterClass+0x24>)
 800313e:	f000 fe7b 	bl	8003e38 <printf>
 8003142:	4805      	ldr	r0, [pc, #20]	; (8003158 <USBD_RegisterClass+0x28>)
 8003144:	f000 fe78 	bl	8003e38 <printf>
 8003148:	200a      	movs	r0, #10
 800314a:	f000 fe8d 	bl	8003e68 <putchar>
    status = USBD_FAIL; 
 800314e:	2002      	movs	r0, #2
  }
  
  return status;
}
 8003150:	bd08      	pop	{r3, pc}
 8003152:	bf00      	nop
 8003154:	0800894d 	.word	0x0800894d
 8003158:	0800896b 	.word	0x0800896b

0800315c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800315c:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 800315e:	f000 fd93 	bl	8003c88 <USBD_LL_Start>
  
  return USBD_OK;  
}
 8003162:	2000      	movs	r0, #0
 8003164:	bd08      	pop	{r3, pc}

08003166 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003166:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8003168:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800316c:	b90b      	cbnz	r3, 8003172 <USBD_SetClassConfig+0xc>
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800316e:	2002      	movs	r0, #2
 8003170:	bd08      	pop	{r3, pc}
  
  if(pdev->pClass != NULL)
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4798      	blx	r3
 8003176:	2800      	cmp	r0, #0
 8003178:	d1f9      	bne.n	800316e <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 800317a:	bd08      	pop	{r3, pc}

0800317c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800317c:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 800317e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	4798      	blx	r3
  return USBD_OK;
}
 8003186:	2000      	movs	r0, #0
 8003188:	bd08      	pop	{r3, pc}

0800318a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800318a:	b538      	push	{r3, r4, r5, lr}
 800318c:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800318e:	f500 7502 	add.w	r5, r0, #520	; 0x208
 8003192:	4628      	mov	r0, r5
 8003194:	f000 f8e2 	bl	800335c <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8003198:	2301      	movs	r3, #1
 800319a:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 800319e:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
{

  USBD_ParseSetupRequest(&pdev->request, psetup);
  
  pdev->ep0_state = USBD_EP0_SETUP;
  pdev->ep0_data_len = pdev->request.wLength;
 80031a2:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 80031a6:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 80031aa:	f001 031f 	and.w	r3, r1, #31
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d00c      	beq.n	80031cc <USBD_LL_SetupStage+0x42>
 80031b2:	d306      	bcc.n	80031c2 <USBD_LL_SetupStage+0x38>
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d10e      	bne.n	80031d6 <USBD_LL_SetupStage+0x4c>
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
    break;
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 80031b8:	4629      	mov	r1, r5
 80031ba:	4620      	mov	r0, r4
 80031bc:	f000 fa16 	bl	80035ec <USBD_StdEPReq>
    break;
 80031c0:	e00e      	b.n	80031e0 <USBD_LL_SetupStage+0x56>
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 80031c2:	4629      	mov	r1, r5
 80031c4:	4620      	mov	r0, r4
 80031c6:	f000 f8e9 	bl	800339c <USBD_StdDevReq>
    break;
 80031ca:	e009      	b.n	80031e0 <USBD_LL_SetupStage+0x56>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 80031cc:	4629      	mov	r1, r5
 80031ce:	4620      	mov	r0, r4
 80031d0:	f000 f9f4 	bl	80035bc <USBD_StdItfReq>
    break;
 80031d4:	e004      	b.n	80031e0 <USBD_LL_SetupStage+0x56>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 80031d6:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80031da:	4620      	mov	r0, r4
 80031dc:	f000 fd6c 	bl	8003cb8 <USBD_LL_StallEP>
    break;
  }  
  return USBD_OK;  
}
 80031e0:	2000      	movs	r0, #0
 80031e2:	bd38      	pop	{r3, r4, r5, pc}

080031e4 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 80031e4:	b538      	push	{r3, r4, r5, lr}
 80031e6:	4604      	mov	r4, r0
 80031e8:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 80031ea:	bb09      	cbnz	r1, 8003230 <USBD_LL_DataOutStage+0x4c>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80031ec:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 80031f0:	2b03      	cmp	r3, #3
 80031f2:	d126      	bne.n	8003242 <USBD_LL_DataOutStage+0x5e>
    {
      if(pep->rem_length > pep->maxpacket)
 80031f4:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
 80031f8:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 80031fc:	4291      	cmp	r1, r2
 80031fe:	d90a      	bls.n	8003216 <USBD_LL_DataOutStage+0x32>
      {
        pep->rem_length -=  pep->maxpacket;
 8003200:	1a8b      	subs	r3, r1, r2
       
        USBD_CtlContinueRx (pdev, 
 8003202:	429a      	cmp	r2, r3
 8003204:	bf28      	it	cs
 8003206:	461a      	movcs	r2, r3
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
    {
      if(pep->rem_length > pep->maxpacket)
      {
        pep->rem_length -=  pep->maxpacket;
 8003208:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
       
        USBD_CtlContinueRx (pdev, 
 800320c:	b292      	uxth	r2, r2
 800320e:	4629      	mov	r1, r5
 8003210:	f000 fa8f 	bl	8003732 <USBD_CtlContinueRx>
 8003214:	e015      	b.n	8003242 <USBD_LL_DataOutStage+0x5e>
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8003216:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	b123      	cbz	r3, 8003228 <USBD_LL_DataOutStage+0x44>
 800321e:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003222:	2a03      	cmp	r2, #3
 8003224:	d100      	bne.n	8003228 <USBD_LL_DataOutStage+0x44>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
        {
          pdev->pClass->EP0_RxReady(pdev); 
 8003226:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8003228:	4620      	mov	r0, r4
 800322a:	f000 fa8a 	bl	8003742 <USBD_CtlSendStatus>
 800322e:	e008      	b.n	8003242 <USBD_LL_DataOutStage+0x5e>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8003230:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	b123      	cbz	r3, 8003242 <USBD_LL_DataOutStage+0x5e>
 8003238:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800323c:	2a03      	cmp	r2, #3
 800323e:	d100      	bne.n	8003242 <USBD_LL_DataOutStage+0x5e>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
 8003240:	4798      	blx	r3
  }  
  return USBD_OK;
}
 8003242:	2000      	movs	r0, #0
 8003244:	bd38      	pop	{r3, r4, r5, pc}

08003246 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8003246:	b570      	push	{r4, r5, r6, lr}
 8003248:	4613      	mov	r3, r2
 800324a:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 800324c:	460e      	mov	r6, r1
 800324e:	2900      	cmp	r1, #0
 8003250:	d13c      	bne.n	80032cc <USBD_LL_DataInStage+0x86>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8003252:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8003256:	2a02      	cmp	r2, #2
 8003258:	d130      	bne.n	80032bc <USBD_LL_DataInStage+0x76>
    {
      if(pep->rem_length > pep->maxpacket)
 800325a:	69c5      	ldr	r5, [r0, #28]
 800325c:	6a02      	ldr	r2, [r0, #32]
 800325e:	4295      	cmp	r5, r2
 8003260:	d907      	bls.n	8003272 <USBD_LL_DataInStage+0x2c>
      {
        pep->rem_length -=  pep->maxpacket;
 8003262:	1aaa      	subs	r2, r5, r2
 8003264:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 8003266:	4619      	mov	r1, r3
 8003268:	b292      	uxth	r2, r2
 800326a:	f000 fa4b 	bl	8003704 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800326e:	4633      	mov	r3, r6
 8003270:	e011      	b.n	8003296 <USBD_LL_DataInStage+0x50>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8003272:	6983      	ldr	r3, [r0, #24]
 8003274:	fbb3 f5f2 	udiv	r5, r3, r2
 8003278:	fb02 3515 	mls	r5, r2, r5, r3
 800327c:	b98d      	cbnz	r5, 80032a2 <USBD_LL_DataInStage+0x5c>
 800327e:	429a      	cmp	r2, r3
 8003280:	d80f      	bhi.n	80032a2 <USBD_LL_DataInStage+0x5c>
           (pep->total_length >= pep->maxpacket) &&
 8003282:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 8003286:	4293      	cmp	r3, r2
 8003288:	d20b      	bcs.n	80032a2 <USBD_LL_DataInStage+0x5c>
             (pep->total_length < pdev->ep0_data_len ))
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 800328a:	462a      	mov	r2, r5
 800328c:	f000 fa3a 	bl	8003704 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8003290:	462b      	mov	r3, r5
           (pep->total_length >= pep->maxpacket) &&
             (pep->total_length < pdev->ep0_data_len ))
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
 8003292:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8003296:	461a      	mov	r2, r3
 8003298:	4619      	mov	r1, r3
 800329a:	4620      	mov	r0, r4
 800329c:	f000 fd38 	bl	8003d10 <USBD_LL_PrepareReceive>
 80032a0:	e00c      	b.n	80032bc <USBD_LL_DataInStage+0x76>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80032a2:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	b12b      	cbz	r3, 80032b6 <USBD_LL_DataInStage+0x70>
 80032aa:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 80032ae:	2a03      	cmp	r2, #3
 80032b0:	d101      	bne.n	80032b6 <USBD_LL_DataInStage+0x70>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
          {
            pdev->pClass->EP0_TxSent(pdev); 
 80032b2:	4620      	mov	r0, r4
 80032b4:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 80032b6:	4620      	mov	r0, r4
 80032b8:	f000 fa4e 	bl	8003758 <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 80032bc:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d10c      	bne.n	80032de <USBD_LL_DataInStage+0x98>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 80032c4:	2300      	movs	r3, #0
 80032c6:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
 80032ca:	e008      	b.n	80032de <USBD_LL_DataInStage+0x98>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 80032cc:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	b123      	cbz	r3, 80032de <USBD_LL_DataInStage+0x98>
 80032d4:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80032d8:	2a03      	cmp	r2, #3
 80032da:	d100      	bne.n	80032de <USBD_LL_DataInStage+0x98>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
 80032dc:	4798      	blx	r3
  }  
  return USBD_OK;
}
 80032de:	2000      	movs	r0, #0
 80032e0:	bd70      	pop	{r4, r5, r6, pc}

080032e2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80032e2:	b538      	push	{r3, r4, r5, lr}
 80032e4:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 80032e6:	2200      	movs	r2, #0
 80032e8:	4611      	mov	r1, r2
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80032ea:	2540      	movs	r5, #64	; 0x40
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 80032ec:	2340      	movs	r3, #64	; 0x40
 80032ee:	f000 fcd2 	bl	8003c96 <USBD_LL_OpenEP>
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 80032f2:	462b      	mov	r3, r5
  USBD_LL_OpenEP(pdev,
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80032f4:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 80032f8:	2200      	movs	r2, #0
 80032fa:	2180      	movs	r1, #128	; 0x80
 80032fc:	4620      	mov	r0, r4
 80032fe:	f000 fcca 	bl	8003c96 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003302:	2301      	movs	r3, #1
 8003304:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8003308:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  USBD_LL_OpenEP(pdev,
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800330c:	6225      	str	r5, [r4, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  
  if (pdev->pClassData) 
 800330e:	b12b      	cbz	r3, 800331c <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8003310:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003314:	7921      	ldrb	r1, [r4, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	4620      	mov	r0, r4
 800331a:	4798      	blx	r3
 
  
  return USBD_OK;
}
 800331c:	2000      	movs	r0, #0
 800331e:	bd38      	pop	{r3, r4, r5, pc}

08003320 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8003320:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8003322:	2000      	movs	r0, #0
 8003324:	4770      	bx	lr

08003326 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8003326:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800332a:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800332e:	2304      	movs	r3, #4
 8003330:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8003334:	2000      	movs	r0, #0
 8003336:	4770      	bx	lr

08003338 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8003338:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 800333c:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8003340:	2000      	movs	r0, #0
 8003342:	4770      	bx	lr

08003344 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8003344:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8003346:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800334a:	2a03      	cmp	r2, #3
 800334c:	d104      	bne.n	8003358 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 800334e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003352:	69db      	ldr	r3, [r3, #28]
 8003354:	b103      	cbz	r3, 8003358 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8003356:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8003358:	2000      	movs	r0, #0
 800335a:	bd08      	pop	{r3, pc}

0800335c <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  req->bmRequest     = *(uint8_t *)  (pdata);
 800335c:	780b      	ldrb	r3, [r1, #0]
 800335e:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8003360:	784b      	ldrb	r3, [r1, #1]
 8003362:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8003364:	78ca      	ldrb	r2, [r1, #3]
 8003366:	788b      	ldrb	r3, [r1, #2]
 8003368:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800336c:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800336e:	794a      	ldrb	r2, [r1, #5]
 8003370:	790b      	ldrb	r3, [r1, #4]
 8003372:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003376:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8003378:	79ca      	ldrb	r2, [r1, #7]
 800337a:	798b      	ldrb	r3, [r1, #6]
 800337c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003380:	80c3      	strh	r3, [r0, #6]
 8003382:	4770      	bx	lr

08003384 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8003384:	b510      	push	{r4, lr}
 8003386:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 8003388:	2180      	movs	r1, #128	; 0x80
 800338a:	f000 fc95 	bl	8003cb8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 800338e:	4620      	mov	r0, r4
}
 8003390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
  USBD_LL_StallEP(pdev , 0);
 8003394:	2100      	movs	r1, #0
 8003396:	f000 bc8f 	b.w	8003cb8 <USBD_LL_StallEP>
	...

0800339c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800339c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  USBD_StatusTypeDef ret = USBD_OK;  
  
  switch (req->bRequest) 
 800339e:	784b      	ldrb	r3, [r1, #1]
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80033a0:	4604      	mov	r4, r0
 80033a2:	460d      	mov	r5, r1
  USBD_StatusTypeDef ret = USBD_OK;  
  
  switch (req->bRequest) 
 80033a4:	2b09      	cmp	r3, #9
 80033a6:	f200 80ff 	bhi.w	80035a8 <USBD_StdDevReq+0x20c>
 80033aa:	e8df f013 	tbh	[pc, r3, lsl #1]
 80033ae:	00d1      	.short	0x00d1
 80033b0:	00fd00e8 	.word	0x00fd00e8
 80033b4:	00fd00e4 	.word	0x00fd00e4
 80033b8:	000a007b 	.word	0x000a007b
 80033bc:	00c100fd 	.word	0x00c100fd
 80033c0:	0097      	.short	0x0097
{
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 80033c2:	8849      	ldrh	r1, [r1, #2]
 80033c4:	0a0b      	lsrs	r3, r1, #8
 80033c6:	3b01      	subs	r3, #1
 80033c8:	2b06      	cmp	r3, #6
 80033ca:	f200 80ed 	bhi.w	80035a8 <USBD_StdDevReq+0x20c>
 80033ce:	e8df f013 	tbh	[pc, r3, lsl #1]
 80033d2:	0007      	.short	0x0007
 80033d4:	0017000b 	.word	0x0017000b
 80033d8:	00eb00eb 	.word	0x00eb00eb
 80033dc:	004d0042 	.word	0x004d0042
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80033e0:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	e016      	b.n	8003416 <USBD_StdDevReq+0x7a>
    break;
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 80033e8:	7c02      	ldrb	r2, [r0, #16]
 80033ea:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80033ee:	b90a      	cbnz	r2, 80033f4 <USBD_StdDevReq+0x58>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80033f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f2:	e000      	b.n	80033f6 <USBD_StdDevReq+0x5a>
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80033f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f6:	f10d 0006 	add.w	r0, sp, #6
 80033fa:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80033fc:	2302      	movs	r3, #2
 80033fe:	e040      	b.n	8003482 <USBD_StdDevReq+0xe6>
    }
    break;
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8003400:	b2c9      	uxtb	r1, r1
 8003402:	2905      	cmp	r1, #5
 8003404:	d820      	bhi.n	8003448 <USBD_StdDevReq+0xac>
 8003406:	e8df f001 	tbb	[pc, r1]
 800340a:	0b03      	.short	0x0b03
 800340c:	1b17130f 	.word	0x1b17130f
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8003410:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f10d 0106 	add.w	r1, sp, #6
 800341a:	7c20      	ldrb	r0, [r4, #16]
 800341c:	4798      	blx	r3
 800341e:	e031      	b.n	8003484 <USBD_StdDevReq+0xe8>
      break;
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8003420:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	e7f6      	b.n	8003416 <USBD_StdDevReq+0x7a>
      break;
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8003428:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	e7f2      	b.n	8003416 <USBD_StdDevReq+0x7a>
      break;
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8003430:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	e7ee      	b.n	8003416 <USBD_StdDevReq+0x7a>
      break;
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8003438:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	e7ea      	b.n	8003416 <USBD_StdDevReq+0x7a>
      break;
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8003440:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	e7e6      	b.n	8003416 <USBD_StdDevReq+0x7a>
      break;
      
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
 8003448:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800344c:	f10d 0206 	add.w	r2, sp, #6
 8003450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003452:	4798      	blx	r3
 8003454:	e016      	b.n	8003484 <USBD_StdDevReq+0xe8>
#endif   
    }
    break;
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8003456:	7c03      	ldrb	r3, [r0, #16]
 8003458:	2b00      	cmp	r3, #0
 800345a:	f040 80a5 	bne.w	80035a8 <USBD_StdDevReq+0x20c>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800345e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003462:	f10d 0006 	add.w	r0, sp, #6
 8003466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003468:	4798      	blx	r3
 800346a:	e00b      	b.n	8003484 <USBD_StdDevReq+0xe8>
      USBD_CtlError(pdev , req);
      return;
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800346c:	7c03      	ldrb	r3, [r0, #16]
 800346e:	2b00      	cmp	r3, #0
 8003470:	f040 809a 	bne.w	80035a8 <USBD_StdDevReq+0x20c>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8003474:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003478:	f10d 0006 	add.w	r0, sp, #6
 800347c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347e:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003480:	2307      	movs	r3, #7
 8003482:	7043      	strb	r3, [r0, #1]
  default: 
     USBD_CtlError(pdev , req);
    return;
  }
  
  if((len != 0)&& (req->wLength != 0))
 8003484:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8003488:	2a00      	cmp	r2, #0
 800348a:	f000 8091 	beq.w	80035b0 <USBD_StdDevReq+0x214>
 800348e:	88eb      	ldrh	r3, [r5, #6]
 8003490:	2b00      	cmp	r3, #0
 8003492:	f000 808d 	beq.w	80035b0 <USBD_StdDevReq+0x214>
  {
    
    len = MIN(len , req->wLength);
 8003496:	429a      	cmp	r2, r3
 8003498:	bf28      	it	cs
 800349a:	461a      	movcs	r2, r3
    
    USBD_CtlSendData (pdev, 
 800349c:	4601      	mov	r1, r0
  }
  
  if((len != 0)&& (req->wLength != 0))
  {
    
    len = MIN(len , req->wLength);
 800349e:	f8ad 2006 	strh.w	r2, [sp, #6]
 80034a2:	e064      	b.n	800356e <USBD_StdDevReq+0x1d2>
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 80034a4:	888b      	ldrh	r3, [r1, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d17e      	bne.n	80035a8 <USBD_StdDevReq+0x20c>
 80034aa:	88cb      	ldrh	r3, [r1, #6]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d17b      	bne.n	80035a8 <USBD_StdDevReq+0x20c>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80034b0:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80034b4:	788e      	ldrb	r6, [r1, #2]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80034b6:	2b03      	cmp	r3, #3
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80034b8:	f006 067f 	and.w	r6, r6, #127	; 0x7f
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80034bc:	d074      	beq.n	80035a8 <USBD_StdDevReq+0x20c>
    {
      USBD_CtlError(pdev , req);
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 80034be:	f880 61fe 	strb.w	r6, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 80034c2:	4631      	mov	r1, r6
 80034c4:	f000 fc16 	bl	8003cf4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 80034c8:	4620      	mov	r0, r4
 80034ca:	f000 f93a 	bl	8003742 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 80034ce:	b10e      	cbz	r6, 80034d4 <USBD_StdDevReq+0x138>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 80034d0:	2302      	movs	r3, #2
 80034d2:	e000      	b.n	80034d6 <USBD_StdDevReq+0x13a>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80034d4:	2301      	movs	r3, #1
 80034d6:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 80034da:	e069      	b.n	80035b0 <USBD_StdDevReq+0x214>
                           USBD_SetupReqTypedef *req)
{
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 80034dc:	7889      	ldrb	r1, [r1, #2]
 80034de:	4e36      	ldr	r6, [pc, #216]	; (80035b8 <USBD_StdDevReq+0x21c>)
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80034e0:	2901      	cmp	r1, #1
                           USBD_SetupReqTypedef *req)
{
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 80034e2:	7031      	strb	r1, [r6, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80034e4:	d860      	bhi.n	80035a8 <USBD_StdDevReq+0x20c>
  {            
     USBD_CtlError(pdev , req);                              
  } 
  else 
  {
    switch (pdev->dev_state) 
 80034e6:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d002      	beq.n	80034f4 <USBD_StdDevReq+0x158>
 80034ee:	2b03      	cmp	r3, #3
 80034f0:	d008      	beq.n	8003504 <USBD_StdDevReq+0x168>
 80034f2:	e059      	b.n	80035a8 <USBD_StdDevReq+0x20c>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 80034f4:	2900      	cmp	r1, #0
 80034f6:	d053      	beq.n	80035a0 <USBD_StdDevReq+0x204>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 80034f8:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80034fa:	2303      	movs	r3, #3
    switch (pdev->dev_state) 
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 80034fc:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80034fe:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
 8003502:	e00f      	b.n	8003524 <USBD_StdDevReq+0x188>
         USBD_CtlSendStatus(pdev);
      }
      break;
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 8003504:	b931      	cbnz	r1, 8003514 <USBD_StdDevReq+0x178>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003506:	2302      	movs	r3, #2
 8003508:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 800350c:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 800350e:	f7ff fe35 	bl	800317c <USBD_ClrClassConfig>
 8003512:	e045      	b.n	80035a0 <USBD_StdDevReq+0x204>
        USBD_CtlSendStatus(pdev);
        
      } 
      else  if (cfgidx != pdev->dev_config) 
 8003514:	6841      	ldr	r1, [r0, #4]
 8003516:	2901      	cmp	r1, #1
 8003518:	d042      	beq.n	80035a0 <USBD_StdDevReq+0x204>
      {
        /* Clear old configuration */
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 800351a:	b2c9      	uxtb	r1, r1
 800351c:	f7ff fe2e 	bl	800317c <USBD_ClrClassConfig>
        
        /* set new configuration */
        pdev->dev_config = cfgidx;
 8003520:	7831      	ldrb	r1, [r6, #0]
 8003522:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8003524:	4620      	mov	r0, r4
 8003526:	f7ff fe1e 	bl	8003166 <USBD_SetClassConfig>
 800352a:	2802      	cmp	r0, #2
 800352c:	d138      	bne.n	80035a0 <USBD_StdDevReq+0x204>
 800352e:	e03b      	b.n	80035a8 <USBD_StdDevReq+0x20c>
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{

  if (req->wLength != 1) 
 8003530:	88ca      	ldrh	r2, [r1, #6]
 8003532:	2a01      	cmp	r2, #1
 8003534:	d138      	bne.n	80035a8 <USBD_StdDevReq+0x20c>
  {                   
     USBD_CtlError(pdev , req);
  }
  else 
  {
    switch (pdev->dev_state )  
 8003536:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800353a:	2b02      	cmp	r3, #2
 800353c:	d003      	beq.n	8003546 <USBD_StdDevReq+0x1aa>
 800353e:	2b03      	cmp	r3, #3
 8003540:	d132      	bne.n	80035a8 <USBD_StdDevReq+0x20c>
                        1);
      break;
      
    case USBD_STATE_CONFIGURED:   
      
      USBD_CtlSendData (pdev, 
 8003542:	1d01      	adds	r1, r0, #4
 8003544:	e013      	b.n	800356e <USBD_StdDevReq+0x1d2>
  else 
  {
    switch (pdev->dev_state )  
    {
    case USBD_STATE_ADDRESSED:                     
      pdev->dev_default_config = 0;
 8003546:	4601      	mov	r1, r0
 8003548:	2300      	movs	r3, #0
 800354a:	f841 3f08 	str.w	r3, [r1, #8]!
 800354e:	e00e      	b.n	800356e <USBD_StdDevReq+0x1d2>
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
  
    
  switch (pdev->dev_state) 
 8003550:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003554:	3b02      	subs	r3, #2
 8003556:	2b01      	cmp	r3, #1
 8003558:	d826      	bhi.n	80035a8 <USBD_StdDevReq+0x20c>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 800355a:	2301      	movs	r3, #1
 800355c:	60c3      	str	r3, [r0, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 800355e:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8003562:	b10b      	cbz	r3, 8003568 <USBD_StdDevReq+0x1cc>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8003564:	2303      	movs	r3, #3
 8003566:	60c3      	str	r3, [r0, #12]
    }
    
    USBD_CtlSendData (pdev, 
 8003568:	2202      	movs	r2, #2
 800356a:	f104 010c 	add.w	r1, r4, #12
 800356e:	4620      	mov	r0, r4
 8003570:	f000 f8bb 	bl	80036ea <USBD_CtlSendData>
 8003574:	e01c      	b.n	80035b0 <USBD_StdDevReq+0x214>
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003576:	884b      	ldrh	r3, [r1, #2]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d119      	bne.n	80035b0 <USBD_StdDevReq+0x214>
 800357c:	e008      	b.n	8003590 <USBD_StdDevReq+0x1f4>
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
  switch (pdev->dev_state)
 800357e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003582:	3b02      	subs	r3, #2
 8003584:	2b01      	cmp	r3, #1
 8003586:	d80f      	bhi.n	80035a8 <USBD_StdDevReq+0x20c>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8003588:	884b      	ldrh	r3, [r1, #2]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d110      	bne.n	80035b0 <USBD_StdDevReq+0x214>
    {
      pdev->dev_remote_wakeup = 0; 
 800358e:	2300      	movs	r3, #0
 8003590:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8003594:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003598:	4629      	mov	r1, r5
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	4620      	mov	r0, r4
 800359e:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 80035a0:	4620      	mov	r0, r4
 80035a2:	f000 f8ce 	bl	8003742 <USBD_CtlSendStatus>
 80035a6:	e003      	b.n	80035b0 <USBD_StdDevReq+0x214>
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
    break;
    
  default:  
    USBD_CtlError(pdev , req);
 80035a8:	4629      	mov	r1, r5
 80035aa:	4620      	mov	r0, r4
 80035ac:	f7ff feea 	bl	8003384 <USBD_CtlError>
    break;
  }
  
  return ret;
}
 80035b0:	2000      	movs	r0, #0
 80035b2:	b002      	add	sp, #8
 80035b4:	bd70      	pop	{r4, r5, r6, pc}
 80035b6:	bf00      	nop
 80035b8:	200006e8 	.word	0x200006e8

080035bc <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80035bc:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret = USBD_OK; 
  
  switch (pdev->dev_state) 
 80035be:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80035c2:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret = USBD_OK; 
  
  switch (pdev->dev_state) 
 80035c4:	2b03      	cmp	r3, #3
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80035c6:	460d      	mov	r5, r1
  USBD_StatusTypeDef ret = USBD_OK; 
  
  switch (pdev->dev_state) 
 80035c8:	d10c      	bne.n	80035e4 <USBD_StdItfReq+0x28>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 80035ca:	790b      	ldrb	r3, [r1, #4]
 80035cc:	2b05      	cmp	r3, #5
 80035ce:	d809      	bhi.n	80035e4 <USBD_StdItfReq+0x28>
    {
      pdev->pClass->Setup (pdev, req); 
 80035d0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 80035d8:	88eb      	ldrh	r3, [r5, #6]
 80035da:	b92b      	cbnz	r3, 80035e8 <USBD_StdItfReq+0x2c>
      {
         USBD_CtlSendStatus(pdev);
 80035dc:	4620      	mov	r0, r4
 80035de:	f000 f8b0 	bl	8003742 <USBD_CtlSendStatus>
 80035e2:	e001      	b.n	80035e8 <USBD_StdItfReq+0x2c>
       USBD_CtlError(pdev , req);
    }
    break;
    
  default:
     USBD_CtlError(pdev , req);
 80035e4:	f7ff fece 	bl	8003384 <USBD_CtlError>
    break;
  }
  return USBD_OK;
}
 80035e8:	2000      	movs	r0, #0
 80035ea:	bd38      	pop	{r3, r4, r5, pc}

080035ec <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80035ec:	b570      	push	{r4, r5, r6, lr}
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 80035ee:	780a      	ldrb	r2, [r1, #0]
{
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 80035f0:	888e      	ldrh	r6, [r1, #4]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 80035f2:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80035f6:	2a20      	cmp	r2, #32
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80035f8:	4604      	mov	r4, r0
 80035fa:	460d      	mov	r5, r1
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 80035fc:	b2f3      	uxtb	r3, r6
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 80035fe:	d104      	bne.n	800360a <USBD_StdEPReq+0x1e>
  {
    pdev->pClass->Setup (pdev, req);
 8003600:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	4798      	blx	r3
    
    return USBD_OK;
 8003608:	e051      	b.n	80036ae <USBD_StdEPReq+0xc2>
  }
  
  switch (req->bRequest) 
 800360a:	784a      	ldrb	r2, [r1, #1]
 800360c:	2a01      	cmp	r2, #1
 800360e:	d010      	beq.n	8003632 <USBD_StdEPReq+0x46>
 8003610:	d326      	bcc.n	8003660 <USBD_StdEPReq+0x74>
 8003612:	2a03      	cmp	r2, #3
 8003614:	d14b      	bne.n	80036ae <USBD_StdEPReq+0xc2>
  {
    
  case USB_REQ_SET_FEATURE :
    
    switch (pdev->dev_state) 
 8003616:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800361a:	2a02      	cmp	r2, #2
 800361c:	d027      	beq.n	800366e <USBD_StdEPReq+0x82>
 800361e:	2a03      	cmp	r2, #3
 8003620:	d143      	bne.n	80036aa <USBD_StdEPReq+0xbe>
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 8003622:	884a      	ldrh	r2, [r1, #2]
 8003624:	b992      	cbnz	r2, 800364c <USBD_StdEPReq+0x60>
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8003626:	065e      	lsls	r6, r3, #25
 8003628:	d010      	beq.n	800364c <USBD_StdEPReq+0x60>
        { 
          USBD_LL_StallEP(pdev , ep_addr);
 800362a:	4619      	mov	r1, r3
 800362c:	f000 fb44 	bl	8003cb8 <USBD_LL_StallEP>
 8003630:	e00c      	b.n	800364c <USBD_StdEPReq+0x60>
    }
    break;
    
  case USB_REQ_CLEAR_FEATURE :
    
    switch (pdev->dev_state) 
 8003632:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003636:	2a02      	cmp	r2, #2
 8003638:	d019      	beq.n	800366e <USBD_StdEPReq+0x82>
 800363a:	2a03      	cmp	r2, #3
 800363c:	d135      	bne.n	80036aa <USBD_StdEPReq+0xbe>
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 800363e:	884a      	ldrh	r2, [r1, #2]
 8003640:	bbaa      	cbnz	r2, 80036ae <USBD_StdEPReq+0xc2>
      {
        if ((ep_addr & 0x7F) != 0x00) 
 8003642:	0659      	lsls	r1, r3, #25
 8003644:	d008      	beq.n	8003658 <USBD_StdEPReq+0x6c>
        {        
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8003646:	4619      	mov	r1, r3
 8003648:	f000 fb3d 	bl	8003cc6 <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 800364c:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003650:	4629      	mov	r1, r5
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	4620      	mov	r0, r4
 8003656:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8003658:	4620      	mov	r0, r4
 800365a:	f000 f872 	bl	8003742 <USBD_CtlSendStatus>
 800365e:	e026      	b.n	80036ae <USBD_StdEPReq+0xc2>
      break;    
    }
    break;
    
  case USB_REQ_GET_STATUS:                  
    switch (pdev->dev_state) 
 8003660:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003664:	2a02      	cmp	r2, #2
 8003666:	d002      	beq.n	800366e <USBD_StdEPReq+0x82>
 8003668:	2a03      	cmp	r2, #3
 800366a:	d006      	beq.n	800367a <USBD_StdEPReq+0x8e>
 800366c:	e01d      	b.n	80036aa <USBD_StdEPReq+0xbe>
    {
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr & 0x7F) != 0x00) 
 800366e:	065a      	lsls	r2, r3, #25
 8003670:	d01d      	beq.n	80036ae <USBD_StdEPReq+0xc2>
      {
        USBD_LL_StallEP(pdev , ep_addr);
 8003672:	4619      	mov	r1, r3
 8003674:	f000 fb20 	bl	8003cb8 <USBD_LL_StallEP>
 8003678:	e019      	b.n	80036ae <USBD_StdEPReq+0xc2>
 800367a:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      }
      break;	
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800367e:	f016 0f80 	tst.w	r6, #128	; 0x80
 8003682:	eb00 1505 	add.w	r5, r0, r5, lsl #4
                                         &pdev->ep_out[ep_addr & 0x7F];
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8003686:	4619      	mov	r1, r3
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8003688:	bf14      	ite	ne
 800368a:	3514      	addne	r5, #20
 800368c:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
                                         &pdev->ep_out[ep_addr & 0x7F];
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8003690:	f000 fb20 	bl	8003cd4 <USBD_LL_IsStallEP>
 8003694:	b110      	cbz	r0, 800369c <USBD_StdEPReq+0xb0>
      {
        pep->status = 0x0001;     
 8003696:	2301      	movs	r3, #1
 8003698:	602b      	str	r3, [r5, #0]
 800369a:	e000      	b.n	800369e <USBD_StdEPReq+0xb2>
      }
      else
      {
        pep->status = 0x0000;  
 800369c:	6028      	str	r0, [r5, #0]
      }
      
      USBD_CtlSendData (pdev,
 800369e:	2202      	movs	r2, #2
 80036a0:	4629      	mov	r1, r5
 80036a2:	4620      	mov	r0, r4
 80036a4:	f000 f821 	bl	80036ea <USBD_CtlSendData>
                        (uint8_t *)&pep->status,
                        2);
      break;
 80036a8:	e001      	b.n	80036ae <USBD_StdEPReq+0xc2>
      
    default:                         
      USBD_CtlError(pdev , req);
 80036aa:	f7ff fe6b 	bl	8003384 <USBD_CtlError>
    
  default:
    break;
  }
  return ret;
}
 80036ae:	2000      	movs	r0, #0
 80036b0:	bd70      	pop	{r4, r5, r6, pc}

080036b2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80036b2:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 80036b4:	b1c0      	cbz	r0, 80036e8 <USBD_GetString+0x36>
 80036b6:	4605      	mov	r5, r0
 80036b8:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 80036ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	2c00      	cmp	r4, #0
 80036c2:	d1f9      	bne.n	80036b8 <USBD_GetString+0x6>
{
  uint8_t idx = 0;
  
  if (desc != NULL) 
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	3302      	adds	r3, #2
 80036c8:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 80036ca:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 80036cc:	2303      	movs	r3, #3
 80036ce:	704b      	strb	r3, [r1, #1]
 80036d0:	3801      	subs	r0, #1
 80036d2:	2302      	movs	r3, #2
    
    while (*desc != '\0') 
 80036d4:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80036d8:	b135      	cbz	r5, 80036e8 <USBD_GetString+0x36>
    {
      unicode[idx++] = *desc++;
 80036da:	1c5a      	adds	r2, r3, #1
 80036dc:	54cd      	strb	r5, [r1, r3]
 80036de:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0x00;
 80036e0:	3302      	adds	r3, #2
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	548c      	strb	r4, [r1, r2]
 80036e6:	e7f5      	b.n	80036d4 <USBD_GetString+0x22>
 80036e8:	bd30      	pop	{r4, r5, pc}

080036ea <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 80036ea:	4613      	mov	r3, r2
 80036ec:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 80036ee:	2202      	movs	r2, #2
 80036f0:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 80036f4:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 80036f6:	460a      	mov	r2, r1
                               uint16_t len)
{
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 80036f8:	61c3      	str	r3, [r0, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 80036fa:	2100      	movs	r1, #0
 80036fc:	f000 fb01 	bl	8003d02 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003700:	2000      	movs	r0, #0
 8003702:	bd10      	pop	{r4, pc}

08003704 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8003704:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8003706:	4613      	mov	r3, r2
 8003708:	460a      	mov	r2, r1
 800370a:	2100      	movs	r1, #0
 800370c:	f000 faf9 	bl	8003d02 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003710:	2000      	movs	r0, #0
 8003712:	bd08      	pop	{r3, pc}

08003714 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8003714:	4613      	mov	r3, r2
 8003716:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8003718:	2203      	movs	r2, #3
 800371a:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 800371e:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8003722:	460a      	mov	r2, r1
                                  uint16_t len)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 8003724:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8003728:	2100      	movs	r1, #0
 800372a:	f000 faf1 	bl	8003d10 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 800372e:	2000      	movs	r0, #0
 8003730:	bd10      	pop	{r4, pc}

08003732 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8003732:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 8003734:	4613      	mov	r3, r2
 8003736:	460a      	mov	r2, r1
 8003738:	2100      	movs	r1, #0
 800373a:	f000 fae9 	bl	8003d10 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 800373e:	2000      	movs	r0, #0
 8003740:	bd08      	pop	{r3, pc}

08003742 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8003742:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8003744:	2304      	movs	r3, #4
 8003746:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 800374a:	2300      	movs	r3, #0
 800374c:	461a      	mov	r2, r3
 800374e:	4619      	mov	r1, r3
 8003750:	f000 fad7 	bl	8003d02 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003754:	2000      	movs	r0, #0
 8003756:	bd08      	pop	{r3, pc}

08003758 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8003758:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 800375a:	2305      	movs	r3, #5
 800375c:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8003760:	2300      	movs	r3, #0
 8003762:	461a      	mov	r2, r3
 8003764:	4619      	mov	r1, r3
 8003766:	f000 fad3 	bl	8003d10 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 800376a:	2000      	movs	r0, #0
 800376c:	bd08      	pop	{r3, pc}

0800376e <HAL_UART_RxCpltCallback>:

}

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800376e:	4770      	bx	lr

08003770 <utx>:
	}
}

void utx(uint8_t *buf, uint32_t length) {

	HAL_UART_Transmit_IT(&huart1, buf, length);
 8003770:	b28a      	uxth	r2, r1
 8003772:	4601      	mov	r1, r0
 8003774:	4801      	ldr	r0, [pc, #4]	; (800377c <utx+0xc>)
 8003776:	f7fe be43 	b.w	8002400 <HAL_UART_Transmit_IT>
 800377a:	bf00      	nop
 800377c:	200007ac 	.word	0x200007ac

08003780 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8003780:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE BEGIN Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
  uint32_t ticks = 0;
 8003782:	2400      	movs	r4, #0

  while(1) 
  {
	  uint32_t c_tick = HAL_GetTick();

      if (c_tick >= ticks + 200) {
 8003784:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
  /* User can add his own implementation to report the HAL error return state */
  uint32_t ticks = 0;

  while(1) 
  {
	  uint32_t c_tick = HAL_GetTick();
 8003788:	f7fd fbee 	bl	8000f68 <HAL_GetTick>

      if (c_tick >= ticks + 200) {
 800378c:	42a8      	cmp	r0, r5
  /* User can add his own implementation to report the HAL error return state */
  uint32_t ticks = 0;

  while(1) 
  {
	  uint32_t c_tick = HAL_GetTick();
 800378e:	4604      	mov	r4, r0

      if (c_tick >= ticks + 200) {
 8003790:	d3fa      	bcc.n	8003788 <Error_Handler+0x8>
    	  ticks = c_tick;

    	  HAL_GPIO_TogglePin(GPIOE, LED_1_Pin);
 8003792:	2101      	movs	r1, #1
 8003794:	4801      	ldr	r0, [pc, #4]	; (800379c <Error_Handler+0x1c>)
 8003796:	f7fd fd5f 	bl	8001258 <HAL_GPIO_TogglePin>
 800379a:	e7f3      	b.n	8003784 <Error_Handler+0x4>
 800379c:	40011800 	.word	0x40011800

080037a0 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 80037a0:	b510      	push	{r4, lr}

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80037a2:	2301      	movs	r3, #1
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 80037a4:	b096      	sub	sp, #88	; 0x58

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80037a6:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80037a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037ac:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80037ae:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037b0:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80037b2:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037b4:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80037b6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80037ba:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037bc:	9413      	str	r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80037be:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037c0:	f7fe f93e 	bl	8001a40 <HAL_RCC_OscConfig>
 80037c4:	b108      	cbz	r0, 80037ca <SystemClock_Config+0x2a>
  {
    Error_Handler();
 80037c6:	f7ff ffdb 	bl	8003780 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037ca:	230f      	movs	r3, #15
 80037cc:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80037ce:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80037d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80037d4:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80037d6:	4621      	mov	r1, r4
 80037d8:	a801      	add	r0, sp, #4
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80037da:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80037dc:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80037de:	f7fe fbd7 	bl	8001f90 <HAL_RCC_ClockConfig>
 80037e2:	2800      	cmp	r0, #0
 80037e4:	d1ef      	bne.n	80037c6 <SystemClock_Config+0x26>
  {
    Error_Handler();
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80037e6:	2310      	movs	r3, #16
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80037e8:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037ea:	a806      	add	r0, sp, #24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80037ec:	9306      	str	r3, [sp, #24]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037ee:	f7fe fcb7 	bl	8002160 <HAL_RCCEx_PeriphCLKConfig>
 80037f2:	4604      	mov	r4, r0
 80037f4:	2800      	cmp	r0, #0
 80037f6:	d1e6      	bne.n	80037c6 <SystemClock_Config+0x26>
  {
    Error_Handler();
  }

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80037f8:	f7fe fc7c 	bl	80020f4 <HAL_RCC_GetHCLKFreq>
 80037fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003800:	fbb0 f0f3 	udiv	r0, r0, r3
 8003804:	f7fd fc16 	bl	8001034 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003808:	2004      	movs	r0, #4
 800380a:	f7fd fc29 	bl	8001060 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800380e:	4622      	mov	r2, r4
 8003810:	4621      	mov	r1, r4
 8003812:	f04f 30ff 	mov.w	r0, #4294967295
 8003816:	f7fd fbcd 	bl	8000fb4 <HAL_NVIC_SetPriority>
}
 800381a:	b016      	add	sp, #88	; 0x58
 800381c:	bd10      	pop	{r4, pc}
	...

08003820 <main>:
uint8_t *readptr = read_buffer;

/* USER CODE END 0 */

int main(void)
{
 8003820:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003824:	b089      	sub	sp, #36	; 0x24
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003826:	f7fd fb85 	bl	8000f34 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800382a:	f7ff ffb9 	bl	80037a0 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800382e:	4b4a      	ldr	r3, [pc, #296]	; (8003958 <main+0x138>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_2_Pin|LED_1_Pin, GPIO_PIN_RESET);
 8003830:	2105      	movs	r1, #5
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003832:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_2_Pin|LED_1_Pin, GPIO_PIN_RESET);
 8003834:	4849      	ldr	r0, [pc, #292]	; (800395c <main+0x13c>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003836:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800383a:	619a      	str	r2, [r3, #24]
 800383c:	699a      	ldr	r2, [r3, #24]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_2_Pin|LED_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_2_Pin LED_1_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin|LED_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800383e:	2501      	movs	r5, #1
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003840:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8003844:	9201      	str	r2, [sp, #4]
 8003846:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003848:	699a      	ldr	r2, [r3, #24]

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
 800384a:	4c45      	ldr	r4, [pc, #276]	; (8003960 <main+0x140>)

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800384c:	f042 0210 	orr.w	r2, r2, #16
 8003850:	619a      	str	r2, [r3, #24]
 8003852:	699a      	ldr	r2, [r3, #24]
/* USART1 init function */
static void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
 8003854:	f44f 36e1 	mov.w	r6, #115200	; 0x1c200

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003858:	f002 0210 	and.w	r2, r2, #16
 800385c:	9202      	str	r2, [sp, #8]
 800385e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003860:	699a      	ldr	r2, [r3, #24]
 8003862:	f042 0204 	orr.w	r2, r2, #4
 8003866:	619a      	str	r2, [r3, #24]
 8003868:	699b      	ldr	r3, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_2_Pin|LED_1_Pin, GPIO_PIN_RESET);
 800386a:	2200      	movs	r2, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800386c:	f003 0304 	and.w	r3, r3, #4
 8003870:	9303      	str	r3, [sp, #12]
 8003872:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_2_Pin|LED_1_Pin, GPIO_PIN_RESET);
 8003874:	f7fd fcec 	bl	8001250 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_2_Pin LED_1_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin|LED_1_Pin;
 8003878:	2305      	movs	r3, #5
 800387a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800387c:	a904      	add	r1, sp, #16
  HAL_GPIO_WritePin(GPIOE, LED_2_Pin|LED_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_2_Pin LED_1_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin|LED_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800387e:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003880:	4836      	ldr	r0, [pc, #216]	; (800395c <main+0x13c>)
  HAL_GPIO_WritePin(GPIOE, LED_2_Pin|LED_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_2_Pin LED_1_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin|LED_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003882:	9307      	str	r3, [sp, #28]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_2_Pin|LED_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_2_Pin LED_1_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin|LED_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003884:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003886:	f7fd fbfd 	bl	8001084 <HAL_GPIO_Init>
  SystemClock_Config();

  /* Initialize all configured peripherals */
  MX_GPIO_Init();

  HAL_GPIO_WritePin(GPIOE, LED_1_Pin, GPIO_PIN_SET);
 800388a:	462a      	mov	r2, r5
 800388c:	4629      	mov	r1, r5
 800388e:	4833      	ldr	r0, [pc, #204]	; (800395c <main+0x13c>)
 8003890:	f7fd fcde 	bl	8001250 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, LED_2_Pin, GPIO_PIN_SET);
 8003894:	462a      	mov	r2, r5
 8003896:	2104      	movs	r1, #4
 8003898:	4830      	ldr	r0, [pc, #192]	; (800395c <main+0x13c>)
 800389a:	f7fd fcd9 	bl	8001250 <HAL_GPIO_WritePin>
/* USART1 init function */
static void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
 800389e:	4b31      	ldr	r3, [pc, #196]	; (8003964 <main+0x144>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 80038a0:	220c      	movs	r2, #12
/* USART1 init function */
static void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
 80038a2:	e884 0048 	stmia.w	r4, {r3, r6}
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80038a6:	4620      	mov	r0, r4
static void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80038a8:	2300      	movs	r3, #0
 80038aa:	60a3      	str	r3, [r4, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80038ac:	60e3      	str	r3, [r4, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80038ae:	6123      	str	r3, [r4, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80038b0:	6162      	str	r2, [r4, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038b2:	61a3      	str	r3, [r4, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80038b4:	61e3      	str	r3, [r4, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80038b6:	f7fe fd77 	bl	80023a8 <HAL_UART_Init>
 80038ba:	4606      	mov	r6, r0
 80038bc:	b108      	cbz	r0, 80038c2 <main+0xa2>
  {
    Error_Handler();
 80038be:	f7ff ff5f 	bl	8003780 <Error_Handler>
  HAL_GPIO_WritePin(GPIOE, LED_1_Pin, GPIO_PIN_SET);
  HAL_GPIO_WritePin(GPIOE, LED_2_Pin, GPIO_PIN_SET);

  MX_USART1_UART_Init();

  HAL_GPIO_WritePin(GPIOE, LED_1_Pin, GPIO_PIN_RESET);
 80038c2:	4602      	mov	r2, r0
 80038c4:	4629      	mov	r1, r5
 80038c6:	4825      	ldr	r0, [pc, #148]	; (800395c <main+0x13c>)
 80038c8:	f7fd fcc2 	bl	8001250 <HAL_GPIO_WritePin>

  MX_USB_DEVICE_Init();
 80038cc:	f000 f8ea 	bl	8003aa4 <MX_USB_DEVICE_Init>

  HAL_GPIO_WritePin(GPIOE, LED_2_Pin, GPIO_PIN_RESET);
 80038d0:	4632      	mov	r2, r6
 80038d2:	2104      	movs	r1, #4
 80038d4:	4821      	ldr	r0, [pc, #132]	; (800395c <main+0x13c>)
 80038d6:	f7fd fcbb 	bl	8001250 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint32_t ticks = HAL_GetTick();
 80038da:	f7fd fb45 	bl	8000f68 <HAL_GetTick>
  while (1)
  {
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
	  if ((huart1.State & 0x20) == 0 ) {
 80038de:	4626      	mov	r6, r4
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint32_t ticks = HAL_GetTick();
 80038e0:	4680      	mov	r8, r0
		  readptr = read_buffer;
	      HAL_UART_Receive_IT(&huart1, read_buffer, sizeof(read_buffer));

  	  } else if ((huart1.State & 0x10) == 0) {

  		if (huart1.pRxBuffPtr > readptr) {
 80038e2:	4f21      	ldr	r7, [pc, #132]	; (8003968 <main+0x148>)
  		}
  	  }

	  uint32_t c_tick = HAL_GetTick();

	  report.id = 0x01;
 80038e4:	4d21      	ldr	r5, [pc, #132]	; (800396c <main+0x14c>)
  while (1)
  {
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
	  if ((huart1.State & 0x20) == 0 ) {
 80038e6:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80038ea:	069a      	lsls	r2, r3, #26
 80038ec:	d406      	bmi.n	80038fc <main+0xdc>

		  readptr = read_buffer;
 80038ee:	4920      	ldr	r1, [pc, #128]	; (8003970 <main+0x150>)
	      HAL_UART_Receive_IT(&huart1, read_buffer, sizeof(read_buffer));
 80038f0:	2280      	movs	r2, #128	; 0x80
 80038f2:	481b      	ldr	r0, [pc, #108]	; (8003960 <main+0x140>)
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
	  if ((huart1.State & 0x20) == 0 ) {

		  readptr = read_buffer;
 80038f4:	6039      	str	r1, [r7, #0]
	      HAL_UART_Receive_IT(&huart1, read_buffer, sizeof(read_buffer));
 80038f6:	f7fe fdad 	bl	8002454 <HAL_UART_Receive_IT>
 80038fa:	e00c      	b.n	8003916 <main+0xf6>

  	  } else if ((huart1.State & 0x10) == 0) {
 80038fc:	f896 3039 	ldrb.w	r3, [r6, #57]	; 0x39
 8003900:	06db      	lsls	r3, r3, #27
 8003902:	d408      	bmi.n	8003916 <main+0xf6>

  		if (huart1.pRxBuffPtr > readptr) {
 8003904:	6838      	ldr	r0, [r7, #0]
 8003906:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8003908:	4283      	cmp	r3, r0
 800390a:	d904      	bls.n	8003916 <main+0xf6>

  			// HAL_UART_Transmit_IT(&huart1, readptr, huart1.pRxBuffPtr > readptr);
  			utx(readptr, huart1.pRxBuffPtr > readptr);
 800390c:	2101      	movs	r1, #1
 800390e:	f7ff ff2f 	bl	8003770 <utx>
  			readptr = huart1.pRxBuffPtr;
 8003912:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8003914:	603b      	str	r3, [r7, #0]
  		}
  	  }

	  uint32_t c_tick = HAL_GetTick();
 8003916:	f7fd fb27 	bl	8000f68 <HAL_GetTick>

	  report.id = 0x01;
 800391a:	2301      	movs	r3, #1
 800391c:	702b      	strb	r3, [r5, #0]
	  report.buttons = (c_tick / 1000) & 0xff;
 800391e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003922:	fbb0 f3f3 	udiv	r3, r0, r3
 8003926:	706b      	strb	r3, [r5, #1]
	  report.d_pad = ((c_tick / 1000) >> 8) & 0xff;;
 8003928:	0a1b      	lsrs	r3, r3, #8
 800392a:	70eb      	strb	r3, [r5, #3]
	  report.gears = 0;
 800392c:	2300      	movs	r3, #0
 800392e:	70ab      	strb	r3, [r5, #2]
	  report.axis[0] = 0;
 8003930:	80ab      	strh	r3, [r5, #4]
	  report.axis[1] = 0;
 8003932:	80eb      	strh	r3, [r5, #6]
	  report.axis[2] = 0;
 8003934:	812b      	strh	r3, [r5, #8]

	  if (c_tick >= ticks + 500) {
 8003936:	f508 73fa 	add.w	r3, r8, #500	; 0x1f4
 800393a:	4298      	cmp	r0, r3
  			utx(readptr, huart1.pRxBuffPtr > readptr);
  			readptr = huart1.pRxBuffPtr;
  		}
  	  }

	  uint32_t c_tick = HAL_GetTick();
 800393c:	4681      	mov	r9, r0
	  report.gears = 0;
	  report.axis[0] = 0;
	  report.axis[1] = 0;
	  report.axis[2] = 0;

	  if (c_tick >= ticks + 500) {
 800393e:	d304      	bcc.n	800394a <main+0x12a>
		  ticks = c_tick;

		  HAL_GPIO_TogglePin(GPIOE, LED_2_Pin);
 8003940:	2104      	movs	r1, #4
 8003942:	4806      	ldr	r0, [pc, #24]	; (800395c <main+0x13c>)
 8003944:	f7fd fc88 	bl	8001258 <HAL_GPIO_TogglePin>
 8003948:	46c8      	mov	r8, r9
	  }

	  USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&report, sizeof(report));
 800394a:	220a      	movs	r2, #10
 800394c:	4907      	ldr	r1, [pc, #28]	; (800396c <main+0x14c>)
 800394e:	4809      	ldr	r0, [pc, #36]	; (8003974 <main+0x154>)
 8003950:	f7ff fb99 	bl	8003086 <USBD_HID_SendReport>
  }
 8003954:	e7c7      	b.n	80038e6 <main+0xc6>
 8003956:	bf00      	nop
 8003958:	40021000 	.word	0x40021000
 800395c:	40011800 	.word	0x40011800
 8003960:	200007ac 	.word	0x200007ac
 8003964:	40013800 	.word	0x40013800
 8003968:	2000011c 	.word	0x2000011c
 800396c:	200006ea 	.word	0x200006ea
 8003970:	200007ec 	.word	0x200007ec
 8003974:	2000086c 	.word	0x2000086c

08003978 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003978:	4b20      	ldr	r3, [pc, #128]	; (80039fc <HAL_MspInit+0x84>)

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800397a:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800397c:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800397e:	2003      	movs	r0, #3
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003980:	f042 0201 	orr.w	r2, r2, #1
 8003984:	619a      	str	r2, [r3, #24]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	f003 0301 	and.w	r3, r3, #1
 800398c:	9301      	str	r3, [sp, #4]
 800398e:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003990:	f7fd fafe 	bl	8000f90 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003994:	2200      	movs	r2, #0
 8003996:	4611      	mov	r1, r2
 8003998:	f06f 000b 	mvn.w	r0, #11
 800399c:	f7fd fb0a 	bl	8000fb4 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80039a0:	2200      	movs	r2, #0
 80039a2:	4611      	mov	r1, r2
 80039a4:	f06f 000a 	mvn.w	r0, #10
 80039a8:	f7fd fb04 	bl	8000fb4 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80039ac:	2200      	movs	r2, #0
 80039ae:	4611      	mov	r1, r2
 80039b0:	f06f 0009 	mvn.w	r0, #9
 80039b4:	f7fd fafe 	bl	8000fb4 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80039b8:	2200      	movs	r2, #0
 80039ba:	4611      	mov	r1, r2
 80039bc:	f06f 0004 	mvn.w	r0, #4
 80039c0:	f7fd faf8 	bl	8000fb4 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80039c4:	2200      	movs	r2, #0
 80039c6:	4611      	mov	r1, r2
 80039c8:	f06f 0003 	mvn.w	r0, #3
 80039cc:	f7fd faf2 	bl	8000fb4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80039d0:	2200      	movs	r2, #0
 80039d2:	4611      	mov	r1, r2
 80039d4:	f06f 0001 	mvn.w	r0, #1
 80039d8:	f7fd faec 	bl	8000fb4 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80039dc:	2200      	movs	r2, #0
 80039de:	4611      	mov	r1, r2
 80039e0:	f04f 30ff 	mov.w	r0, #4294967295
 80039e4:	f7fd fae6 	bl	8000fb4 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80039e8:	4a05      	ldr	r2, [pc, #20]	; (8003a00 <HAL_MspInit+0x88>)
 80039ea:	6853      	ldr	r3, [r2, #4]
 80039ec:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80039f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80039f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80039f6:	b003      	add	sp, #12
 80039f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80039fc:	40021000 	.word	0x40021000
 8003a00:	40010000 	.word	0x40010000

08003a04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a04:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8003a06:	6802      	ldr	r2, [r0, #0]
 8003a08:	4b16      	ldr	r3, [pc, #88]	; (8003a64 <HAL_UART_MspInit+0x60>)

  /* USER CODE END MspInit 1 */
}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a0a:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d127      	bne.n	8003a60 <HAL_UART_MspInit+0x5c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a10:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8003a14:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a16:	a902      	add	r1, sp, #8
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a1c:	619a      	str	r2, [r3, #24]
 8003a1e:	699b      	ldr	r3, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a20:	4811      	ldr	r0, [pc, #68]	; (8003a68 <HAL_UART_MspInit+0x64>)
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a26:	9301      	str	r3, [sp, #4]
 8003a28:	9b01      	ldr	r3, [sp, #4]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003a2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a2e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a30:	2302      	movs	r3, #2
 8003a32:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a34:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a36:	2400      	movs	r4, #0
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a38:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a3a:	f7fd fb23 	bl	8001084 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003a3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a42:	a902      	add	r1, sp, #8
 8003a44:	4808      	ldr	r0, [pc, #32]	; (8003a68 <HAL_UART_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003a46:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a48:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a4a:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a4c:	f7fd fb1a 	bl	8001084 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003a50:	2025      	movs	r0, #37	; 0x25
 8003a52:	4622      	mov	r2, r4
 8003a54:	4621      	mov	r1, r4
 8003a56:	f7fd faad 	bl	8000fb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003a5a:	2025      	movs	r0, #37	; 0x25
 8003a5c:	f7fd fade 	bl	800101c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003a60:	b006      	add	sp, #24
 8003a62:	bd10      	pop	{r4, pc}
 8003a64:	40013800 	.word	0x40013800
 8003a68:	40010800 	.word	0x40010800

08003a6c <NMI_Handler>:
 8003a6c:	4770      	bx	lr

08003a6e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8003a6e:	e7fe      	b.n	8003a6e <HardFault_Handler>

08003a70 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8003a70:	e7fe      	b.n	8003a70 <MemManage_Handler>

08003a72 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8003a72:	e7fe      	b.n	8003a72 <BusFault_Handler>

08003a74 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8003a74:	e7fe      	b.n	8003a74 <UsageFault_Handler>

08003a76 <SVC_Handler>:
 8003a76:	4770      	bx	lr

08003a78 <DebugMon_Handler>:
 8003a78:	4770      	bx	lr

08003a7a <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8003a7a:	4770      	bx	lr

08003a7c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003a7c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a7e:	f7fd fa6b 	bl	8000f58 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 8003a86:	f7fd baf8 	b.w	800107a <HAL_SYSTICK_IRQHandler>
	...

08003a8c <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003a8c:	4801      	ldr	r0, [pc, #4]	; (8003a94 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8003a8e:	f7fd bd0b 	b.w	80014a8 <HAL_PCD_IRQHandler>
 8003a92:	bf00      	nop
 8003a94:	20000b10 	.word	0x20000b10

08003a98 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003a98:	4801      	ldr	r0, [pc, #4]	; (8003aa0 <USART1_IRQHandler+0x8>)
 8003a9a:	f7fe bd0f 	b.w	80024bc <HAL_UART_IRQHandler>
 8003a9e:	bf00      	nop
 8003aa0:	200007ac 	.word	0x200007ac

08003aa4 <MX_USB_DEVICE_Init>:
/* USB Device Core handle declaration */
USBD_HandleTypeDef hUsbDeviceFS;

/* init function */				        
void MX_USB_DEVICE_Init(void)
{
 8003aa4:	b510      	push	{r4, lr}
  /* Init Device Library,Add Supported Class and Start the library*/
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8003aa6:	4c09      	ldr	r4, [pc, #36]	; (8003acc <MX_USB_DEVICE_Init+0x28>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	4909      	ldr	r1, [pc, #36]	; (8003ad0 <MX_USB_DEVICE_Init+0x2c>)
 8003aac:	4620      	mov	r0, r4
 8003aae:	f7ff fb1d 	bl	80030ec <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID_CDC);
 8003ab2:	4908      	ldr	r1, [pc, #32]	; (8003ad4 <MX_USB_DEVICE_Init+0x30>)
 8003ab4:	4620      	mov	r0, r4
 8003ab6:	f7ff fb3b 	bl	8003130 <USBD_RegisterClass>
  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 8003aba:	4620      	mov	r0, r4
 8003abc:	4906      	ldr	r1, [pc, #24]	; (8003ad8 <MX_USB_DEVICE_Init+0x34>)
 8003abe:	f7ff faf6 	bl	80030ae <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 8003ac2:	4620      	mov	r0, r4

}
 8003ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID_CDC);
  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);

  USBD_Start(&hUsbDeviceFS);
 8003ac8:	f7ff bb48 	b.w	800315c <USBD_Start>
 8003acc:	2000086c 	.word	0x2000086c
 8003ad0:	20000130 	.word	0x20000130
 8003ad4:	20000004 	.word	0x20000004
 8003ad8:	20000120 	.word	0x20000120

08003adc <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */ 
  return (USBD_OK);
  /* USER CODE END 4 */ 
}
 8003adc:	2000      	movs	r0, #0
 8003ade:	4770      	bx	lr

08003ae0 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8003ae0:	2000      	movs	r0, #0
 8003ae2:	4770      	bx	lr

08003ae4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS (uint8_t* Buf, uint32_t *Len)
{
 8003ae4:	b570      	push	{r4, r5, r6, lr}
 8003ae6:	4604      	mov	r4, r0
 8003ae8:	460e      	mov	r6, r1
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8003aea:	4d07      	ldr	r5, [pc, #28]	; (8003b08 <CDC_Receive_FS+0x24>)
 8003aec:	4601      	mov	r1, r0
 8003aee:	4628      	mov	r0, r5
 8003af0:	f7ff faea 	bl	80030c8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8003af4:	4628      	mov	r0, r5
 8003af6:	f7ff faec 	bl	80030d2 <USBD_CDC_ReceivePacket>

//  uint8_t msg[100];
//  uint8_t len = sprintf(msg, "buf=0x%x, len=0x%x\r\n", Buf, Len);
  utx(Buf, *Len);
 8003afa:	6831      	ldr	r1, [r6, #0]
 8003afc:	4620      	mov	r0, r4
 8003afe:	f7ff fe37 	bl	8003770 <utx>

  return (USBD_OK);
  /* USER CODE END 6 */ 
}
 8003b02:	2000      	movs	r0, #0
 8003b04:	bd70      	pop	{r4, r5, r6, pc}
 8003b06:	bf00      	nop
 8003b08:	2000086c 	.word	0x2000086c

08003b0c <CDC_Init_FS>:
  *         Initializes the CDC media low layer over the FS USB IP
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{ 
 8003b0c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 3 */ 
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8003b0e:	4c06      	ldr	r4, [pc, #24]	; (8003b28 <CDC_Init_FS+0x1c>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	4906      	ldr	r1, [pc, #24]	; (8003b2c <CDC_Init_FS+0x20>)
 8003b14:	4620      	mov	r0, r4
 8003b16:	f7ff fad1 	bl	80030bc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8003b1a:	4905      	ldr	r1, [pc, #20]	; (8003b30 <CDC_Init_FS+0x24>)
 8003b1c:	4620      	mov	r0, r4
 8003b1e:	f7ff fad3 	bl	80030c8 <USBD_CDC_SetRxBuffer>

  return (USBD_OK);
  /* USER CODE END 3 */ 
}
 8003b22:	2000      	movs	r0, #0
 8003b24:	bd10      	pop	{r4, pc}
 8003b26:	bf00      	nop
 8003b28:	2000086c 	.word	0x2000086c
 8003b2c:	20000ad0 	.word	0x20000ad0
 8003b30:	20000a90 	.word	0x20000a90

08003b34 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003b34:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8003b36:	4b0d      	ldr	r3, [pc, #52]	; (8003b6c <HAL_PCD_MspInit+0x38>)
 8003b38:	6802      	ldr	r2, [r0, #0]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d112      	bne.n	8003b64 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8003b3e:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8003b42:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003b44:	2014      	movs	r0, #20
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8003b46:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003b4a:	61da      	str	r2, [r3, #28]
 8003b4c:	69db      	ldr	r3, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003b4e:	2200      	movs	r2, #0
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8003b50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b54:	9301      	str	r3, [sp, #4]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003b56:	4611      	mov	r1, r2
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8003b58:	9b01      	ldr	r3, [sp, #4]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003b5a:	f7fd fa2b 	bl	8000fb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8003b5e:	2014      	movs	r0, #20
 8003b60:	f7fd fa5c 	bl	800101c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8003b64:	b003      	add	sp, #12
 8003b66:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b6a:	bf00      	nop
 8003b6c:	40005c00 	.word	0x40005c00

08003b70 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8003b70:	f500 717b 	add.w	r1, r0, #1004	; 0x3ec
 8003b74:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 8003b78:	f7ff bb07 	b.w	800318a <USBD_LL_SetupStage>

08003b7c <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8003b7c:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8003b80:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003b84:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 8003b88:	f7ff bb2c 	b.w	80031e4 <USBD_LL_DataOutStage>

08003b8c <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8003b8c:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8003b90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b92:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 8003b96:	f7ff bb56 	b.w	8003246 <USBD_LL_DataInStage>

08003b9a <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8003b9a:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 8003b9e:	f7ff bbd1 	b.w	8003344 <USBD_LL_SOF>

08003ba2 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8003ba2:	b510      	push	{r4, lr}
 8003ba4:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;    
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);  
 8003ba6:	2101      	movs	r1, #1
 8003ba8:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 8003bac:	f7ff fbb8 	bl	8003320 <USBD_LL_SetSpeed>
  
  /*Reset Device*/
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003bb0:	f8d4 041c 	ldr.w	r0, [r4, #1052]	; 0x41c
}
 8003bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);  
  
  /*Reset Device*/
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003bb8:	f7ff bb93 	b.w	80032e2 <USBD_LL_Reset>

08003bbc <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8003bbc:	b510      	push	{r4, lr}
 8003bbe:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8003bc0:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 8003bc4:	f7ff fbaf 	bl	8003326 <USBD_LL_Suspend>
  /*Enter in STOP mode */
  /* USER CODE BEGIN 2 */  
  if (hpcd->Init.low_power_enable)
 8003bc8:	69a3      	ldr	r3, [r4, #24]
 8003bca:	b123      	cbz	r3, 8003bd6 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003bcc:	4a02      	ldr	r2, [pc, #8]	; (8003bd8 <HAL_PCD_SuspendCallback+0x1c>)
 8003bce:	6913      	ldr	r3, [r2, #16]
 8003bd0:	f043 0306 	orr.w	r3, r3, #6
 8003bd4:	6113      	str	r3, [r2, #16]
 8003bd6:	bd10      	pop	{r4, pc}
 8003bd8:	e000ed00 	.word	0xe000ed00

08003bdc <HAL_PCD_ResumeCallback>:
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8003bdc:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 8003be0:	f7ff bbaa 	b.w	8003338 <USBD_LL_Resume>

08003be4 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
 8003be4:	b510      	push	{r4, lr}
 8003be6:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8003be8:	4a25      	ldr	r2, [pc, #148]	; (8003c80 <USBD_LL_Init+0x9c>)
  */
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
  /* Init USB_IP */
  /* Link The driver to the stack */
  hpcd_USB_FS.pData = pdev;
 8003bea:	4826      	ldr	r0, [pc, #152]	; (8003c84 <USBD_LL_Init+0xa0>)
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8003bec:	2308      	movs	r3, #8
 8003bee:	f04f 0c02 	mov.w	ip, #2
  */
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
  /* Init USB_IP */
  /* Link The driver to the stack */
  hpcd_USB_FS.pData = pdev;
 8003bf2:	f8c0 441c 	str.w	r4, [r0, #1052]	; 0x41c
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8003bf6:	e880 100c 	stmia.w	r0, {r2, r3, ip}
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
  /* Init USB_IP */
  /* Link The driver to the stack */
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;
 8003bfa:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	60c3      	str	r3, [r0, #12]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003c02:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8003c04:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8003c06:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003c08:	f7fd fb2a 	bl	8001260 <HAL_PCD_Init>
 8003c0c:	b108      	cbz	r0, 8003c12 <USBD_LL_Init+0x2e>
  {
    Error_Handler();
 8003c0e:	f7ff fdb7 	bl	8003780 <Error_Handler>
  }

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData, 0x00, PCD_SNG_BUF, 0x38);
 8003c12:	2200      	movs	r2, #0
 8003c14:	4611      	mov	r1, r2
 8003c16:	2338      	movs	r3, #56	; 0x38
 8003c18:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8003c1c:	f7fd fef8 	bl	8001a10 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData, 0x80, PCD_SNG_BUF, 0x78);
 8003c20:	2378      	movs	r3, #120	; 0x78
 8003c22:	2200      	movs	r2, #0
 8003c24:	2180      	movs	r1, #128	; 0x80
 8003c26:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8003c2a:	f7fd fef1 	bl	8001a10 <HAL_PCDEx_PMAConfig>

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData, CDC_EPCMD_ADDR,  PCD_SNG_BUF, 0xB8);
 8003c2e:	23b8      	movs	r3, #184	; 0xb8
 8003c30:	2200      	movs	r2, #0
 8003c32:	2181      	movs	r1, #129	; 0x81
 8003c34:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8003c38:	f7fd feea 	bl	8001a10 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData, CDC_EP0IN_ADDR,  PCD_SNG_BUF, 0xF8);
 8003c3c:	23f8      	movs	r3, #248	; 0xf8
 8003c3e:	2200      	movs	r2, #0
 8003c40:	2182      	movs	r1, #130	; 0x82
 8003c42:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8003c46:	f7fd fee3 	bl	8001a10 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData, HID_EP0IN_ADDR,  PCD_SNG_BUF, 0x138);
 8003c4a:	f44f 739c 	mov.w	r3, #312	; 0x138
 8003c4e:	2200      	movs	r2, #0
 8003c50:	2183      	movs	r1, #131	; 0x83
 8003c52:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8003c56:	f7fd fedb 	bl	8001a10 <HAL_PCDEx_PMAConfig>

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData, CDC_EP1OUT_ADDR, PCD_SNG_BUF, 0x178);
 8003c5a:	f44f 73bc 	mov.w	r3, #376	; 0x178
 8003c5e:	2200      	movs	r2, #0
 8003c60:	2101      	movs	r1, #1
 8003c62:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8003c66:	f7fd fed3 	bl	8001a10 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData, HID_EP1OUT_ADDR, PCD_SNG_BUF, 0x1B8);
 8003c6a:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 8003c6e:	2200      	movs	r2, #0
 8003c70:	2102      	movs	r1, #2
 8003c72:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8003c76:	f7fd fecb 	bl	8001a10 <HAL_PCDEx_PMAConfig>

  return USBD_OK;
}
 8003c7a:	2000      	movs	r0, #0
 8003c7c:	bd10      	pop	{r4, pc}
 8003c7e:	bf00      	nop
 8003c80:	40005c00 	.word	0x40005c00
 8003c84:	20000b10 	.word	0x20000b10

08003c88 <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8003c88:	b508      	push	{r3, lr}
  HAL_PCD_Start((PCD_HandleTypeDef*)pdev->pData);
 8003c8a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003c8e:	f7fd fb51 	bl	8001334 <HAL_PCD_Start>
  return USBD_OK;
}
 8003c92:	2000      	movs	r0, #0
 8003c94:	bd08      	pop	{r3, pc}

08003c96 <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef  USBD_LL_OpenEP  (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  ep_type,
                                      uint16_t ep_mps)
{
 8003c96:	b510      	push	{r4, lr}
 8003c98:	461c      	mov	r4, r3
  HAL_PCD_EP_Open((PCD_HandleTypeDef*) pdev->pData,
 8003c9a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	4622      	mov	r2, r4
 8003ca2:	f7fd fb72 	bl	800138a <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);
  
  return USBD_OK; 
}
 8003ca6:	2000      	movs	r0, #0
 8003ca8:	bd10      	pop	{r4, pc}

08003caa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_CloseEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8003caa:	b508      	push	{r3, lr}
  HAL_PCD_EP_Close((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8003cac:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003cb0:	f7fd fb8e 	bl	80013d0 <HAL_PCD_EP_Close>
  return USBD_OK;
}
 8003cb4:	2000      	movs	r0, #0
 8003cb6:	bd08      	pop	{r3, pc}

08003cb8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_StallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8003cb8:	b508      	push	{r3, lr}
  HAL_PCD_EP_SetStall((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8003cba:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003cbe:	f7fd fe5b 	bl	8001978 <HAL_PCD_EP_SetStall>
  return USBD_OK;
}
 8003cc2:	2000      	movs	r0, #0
 8003cc4:	bd08      	pop	{r3, pc}

08003cc6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_ClearStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8003cc6:	b508      	push	{r3, lr}
  HAL_PCD_EP_ClrStall((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8003cc8:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003ccc:	f7fd fe7d 	bl	80019ca <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
}
 8003cd0:	2000      	movs	r0, #0
 8003cd2:	bd08      	pop	{r3, pc}

08003cd4 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8003cd4:	060a      	lsls	r2, r1, #24
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8003cd6:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
  
  if((ep_addr & 0x80) == 0x80)
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8003cda:	bf45      	ittet	mi
 8003cdc:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8003ce0:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8003ce4:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8003ce8:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8003cec:	bf58      	it	pl
 8003cee:	f893 020a 	ldrbpl.w	r0, [r3, #522]	; 0x20a
  }
}
 8003cf2:	4770      	bx	lr

08003cf4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_SetUSBAddress (USBD_HandleTypeDef *pdev, uint8_t dev_addr)   
{
 8003cf4:	b508      	push	{r3, lr}
  HAL_PCD_SetAddress((PCD_HandleTypeDef*) pdev->pData, dev_addr);
 8003cf6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003cfa:	f7fd fb32 	bl	8001362 <HAL_PCD_SetAddress>
  return USBD_OK; 
}
 8003cfe:	2000      	movs	r0, #0
 8003d00:	bd08      	pop	{r3, pc}

08003d02 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef  USBD_LL_Transmit (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  *pbuf,
                                      uint16_t  size)
{
 8003d02:	b508      	push	{r3, lr}
  HAL_PCD_EP_Transmit((PCD_HandleTypeDef*) pdev->pData, ep_addr, pbuf, size);
 8003d04:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003d08:	f7fd fbae 	bl	8001468 <HAL_PCD_EP_Transmit>
  return USBD_OK;
}
 8003d0c:	2000      	movs	r0, #0
 8003d0e:	bd08      	pop	{r3, pc}

08003d10 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef  USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                           uint8_t  ep_addr,                                      
                                           uint8_t  *pbuf,
                                           uint16_t  size)
{
 8003d10:	b508      	push	{r3, lr}
  HAL_PCD_EP_Receive((PCD_HandleTypeDef*) pdev->pData, ep_addr, pbuf, size);
 8003d12:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003d16:	f7fd fb7c 	bl	8001412 <HAL_PCD_EP_Receive>
  return USBD_OK;
}
 8003d1a:	2000      	movs	r0, #0
 8003d1c:	bd08      	pop	{r3, pc}

08003d1e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize  (USBD_HandleTypeDef *pdev, uint8_t  ep_addr)  
{
 8003d1e:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8003d20:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003d24:	f7fd fb99 	bl	800145a <HAL_PCD_EP_GetRxCount>
}
 8003d28:	bd08      	pop	{r3, pc}
	...

08003d2c <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_HID_CDC_HandleTypeDef)/4+1)];//On 32-bit boundary
  return mem;
}
 8003d2c:	4800      	ldr	r0, [pc, #0]	; (8003d30 <USBD_static_malloc+0x4>)
 8003d2e:	4770      	bx	lr
 8003d30:	200006f4 	.word	0x200006f4

08003d34 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  *p pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8003d34:	4770      	bx	lr

08003d36 <HAL_PCDEx_SetConnectionState>:
* @param hpcd: PCD handle
* @param state: connection state (0 : disconnected / 1: connected) 
* @retval None
*/
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 8003d36:	4770      	bx	lr

08003d38 <USBD_FS_DeviceDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_DeviceDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8003d38:	2312      	movs	r3, #18
 8003d3a:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8003d3c:	4800      	ldr	r0, [pc, #0]	; (8003d40 <USBD_FS_DeviceDescriptor+0x8>)
 8003d3e:	4770      	bx	lr
 8003d40:	20000150 	.word	0x20000150

08003d44 <USBD_FS_LangIDStrDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_LangIDStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length =  sizeof(USBD_LangIDDesc);  
 8003d44:	2304      	movs	r3, #4
 8003d46:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8003d48:	4800      	ldr	r0, [pc, #0]	; (8003d4c <USBD_FS_LangIDStrDescriptor+0x8>)
 8003d4a:	4770      	bx	lr
 8003d4c:	2000014c 	.word	0x2000014c

08003d50 <USBD_FS_ManufacturerStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ManufacturerStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8003d50:	b510      	push	{r4, lr}
  USBD_GetString (USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8003d52:	4c04      	ldr	r4, [pc, #16]	; (8003d64 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8003d54:	460a      	mov	r2, r1
 8003d56:	4804      	ldr	r0, [pc, #16]	; (8003d68 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8003d58:	4621      	mov	r1, r4
 8003d5a:	f7ff fcaa 	bl	80036b2 <USBD_GetString>
  return USBD_StrDesc;
}
 8003d5e:	4620      	mov	r0, r4
 8003d60:	bd10      	pop	{r4, pc}
 8003d62:	bf00      	nop
 8003d64:	20000f30 	.word	0x20000f30
 8003d68:	08008980 	.word	0x08008980

08003d6c <USBD_FS_ProductStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ProductStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8003d6c:	b510      	push	{r4, lr}
  if(speed == 0)
  {   
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8003d6e:	4c04      	ldr	r4, [pc, #16]	; (8003d80 <USBD_FS_ProductStrDescriptor+0x14>)
 8003d70:	460a      	mov	r2, r1
 8003d72:	4804      	ldr	r0, [pc, #16]	; (8003d84 <USBD_FS_ProductStrDescriptor+0x18>)
 8003d74:	4621      	mov	r1, r4
 8003d76:	f7ff fc9c 	bl	80036b2 <USBD_GetString>
  else
  {
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);    
  }
  return USBD_StrDesc;
}
 8003d7a:	4620      	mov	r0, r4
 8003d7c:	bd10      	pop	{r4, pc}
 8003d7e:	bf00      	nop
 8003d80:	20000f30 	.word	0x20000f30
 8003d84:	08008993 	.word	0x08008993

08003d88 <USBD_FS_SerialStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_SerialStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8003d88:	b510      	push	{r4, lr}
  if(speed  == USBD_SPEED_HIGH)
  {    
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8003d8a:	4c04      	ldr	r4, [pc, #16]	; (8003d9c <USBD_FS_SerialStrDescriptor+0x14>)
 8003d8c:	460a      	mov	r2, r1
 8003d8e:	4804      	ldr	r0, [pc, #16]	; (8003da0 <USBD_FS_SerialStrDescriptor+0x18>)
 8003d90:	4621      	mov	r1, r4
 8003d92:	f7ff fc8e 	bl	80036b2 <USBD_GetString>
  else
  {
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);    
  }
  return USBD_StrDesc;
}
 8003d96:	4620      	mov	r0, r4
 8003d98:	bd10      	pop	{r4, pc}
 8003d9a:	bf00      	nop
 8003d9c:	20000f30 	.word	0x20000f30
 8003da0:	080089b0 	.word	0x080089b0

08003da4 <USBD_FS_ConfigStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ConfigStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8003da4:	b510      	push	{r4, lr}
  if(speed  == USBD_SPEED_HIGH)
  {  
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8003da6:	4c04      	ldr	r4, [pc, #16]	; (8003db8 <USBD_FS_ConfigStrDescriptor+0x14>)
 8003da8:	460a      	mov	r2, r1
 8003daa:	4804      	ldr	r0, [pc, #16]	; (8003dbc <USBD_FS_ConfigStrDescriptor+0x18>)
 8003dac:	4621      	mov	r1, r4
 8003dae:	f7ff fc80 	bl	80036b2 <USBD_GetString>
  else
  {
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length); 
  }
  return USBD_StrDesc;  
}
 8003db2:	4620      	mov	r0, r4
 8003db4:	bd10      	pop	{r4, pc}
 8003db6:	bf00      	nop
 8003db8:	20000f30 	.word	0x20000f30
 8003dbc:	080089bd 	.word	0x080089bd

08003dc0 <USBD_FS_InterfaceStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_InterfaceStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8003dc0:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8003dc2:	4c04      	ldr	r4, [pc, #16]	; (8003dd4 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8003dc4:	460a      	mov	r2, r1
 8003dc6:	4804      	ldr	r0, [pc, #16]	; (8003dd8 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8003dc8:	4621      	mov	r1, r4
 8003dca:	f7ff fc72 	bl	80036b2 <USBD_GetString>
  else
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;  
}
 8003dce:	4620      	mov	r0, r4
 8003dd0:	bd10      	pop	{r4, pc}
 8003dd2:	bf00      	nop
 8003dd4:	20000f30 	.word	0x20000f30
 8003dd8:	080089cf 	.word	0x080089cf

08003ddc <__libc_init_array>:
 8003ddc:	4b0e      	ldr	r3, [pc, #56]	; (8003e18 <__libc_init_array+0x3c>)
 8003dde:	b570      	push	{r4, r5, r6, lr}
 8003de0:	461e      	mov	r6, r3
 8003de2:	4c0e      	ldr	r4, [pc, #56]	; (8003e1c <__libc_init_array+0x40>)
 8003de4:	2500      	movs	r5, #0
 8003de6:	1ae4      	subs	r4, r4, r3
 8003de8:	10a4      	asrs	r4, r4, #2
 8003dea:	42a5      	cmp	r5, r4
 8003dec:	d004      	beq.n	8003df8 <__libc_init_array+0x1c>
 8003dee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003df2:	4798      	blx	r3
 8003df4:	3501      	adds	r5, #1
 8003df6:	e7f8      	b.n	8003dea <__libc_init_array+0xe>
 8003df8:	f004 fd56 	bl	80088a8 <_init>
 8003dfc:	4b08      	ldr	r3, [pc, #32]	; (8003e20 <__libc_init_array+0x44>)
 8003dfe:	4c09      	ldr	r4, [pc, #36]	; (8003e24 <__libc_init_array+0x48>)
 8003e00:	461e      	mov	r6, r3
 8003e02:	1ae4      	subs	r4, r4, r3
 8003e04:	10a4      	asrs	r4, r4, #2
 8003e06:	2500      	movs	r5, #0
 8003e08:	42a5      	cmp	r5, r4
 8003e0a:	d004      	beq.n	8003e16 <__libc_init_array+0x3a>
 8003e0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e10:	4798      	blx	r3
 8003e12:	3501      	adds	r5, #1
 8003e14:	e7f8      	b.n	8003e08 <__libc_init_array+0x2c>
 8003e16:	bd70      	pop	{r4, r5, r6, pc}
 8003e18:	08008bdc 	.word	0x08008bdc
 8003e1c:	08008bdc 	.word	0x08008bdc
 8003e20:	08008bdc 	.word	0x08008bdc
 8003e24:	08008be0 	.word	0x08008be0

08003e28 <memset>:
 8003e28:	4603      	mov	r3, r0
 8003e2a:	4402      	add	r2, r0
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d002      	beq.n	8003e36 <memset+0xe>
 8003e30:	f803 1b01 	strb.w	r1, [r3], #1
 8003e34:	e7fa      	b.n	8003e2c <memset+0x4>
 8003e36:	4770      	bx	lr

08003e38 <printf>:
 8003e38:	b40f      	push	{r0, r1, r2, r3}
 8003e3a:	4b0a      	ldr	r3, [pc, #40]	; (8003e64 <printf+0x2c>)
 8003e3c:	b513      	push	{r0, r1, r4, lr}
 8003e3e:	681c      	ldr	r4, [r3, #0]
 8003e40:	b124      	cbz	r4, 8003e4c <printf+0x14>
 8003e42:	69a3      	ldr	r3, [r4, #24]
 8003e44:	b913      	cbnz	r3, 8003e4c <printf+0x14>
 8003e46:	4620      	mov	r0, r4
 8003e48:	f002 ffb0 	bl	8006dac <__sinit>
 8003e4c:	ab05      	add	r3, sp, #20
 8003e4e:	9a04      	ldr	r2, [sp, #16]
 8003e50:	68a1      	ldr	r1, [r4, #8]
 8003e52:	4620      	mov	r0, r4
 8003e54:	9301      	str	r3, [sp, #4]
 8003e56:	f000 fff7 	bl	8004e48 <_vfprintf_r>
 8003e5a:	b002      	add	sp, #8
 8003e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e60:	b004      	add	sp, #16
 8003e62:	4770      	bx	lr
 8003e64:	20000254 	.word	0x20000254

08003e68 <putchar>:
 8003e68:	b538      	push	{r3, r4, r5, lr}
 8003e6a:	4b08      	ldr	r3, [pc, #32]	; (8003e8c <putchar+0x24>)
 8003e6c:	4605      	mov	r5, r0
 8003e6e:	681c      	ldr	r4, [r3, #0]
 8003e70:	b124      	cbz	r4, 8003e7c <putchar+0x14>
 8003e72:	69a3      	ldr	r3, [r4, #24]
 8003e74:	b913      	cbnz	r3, 8003e7c <putchar+0x14>
 8003e76:	4620      	mov	r0, r4
 8003e78:	f002 ff98 	bl	8006dac <__sinit>
 8003e7c:	68a2      	ldr	r2, [r4, #8]
 8003e7e:	4629      	mov	r1, r5
 8003e80:	4620      	mov	r0, r4
 8003e82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e86:	f003 bebf 	b.w	8007c08 <_putc_r>
 8003e8a:	bf00      	nop
 8003e8c:	20000254 	.word	0x20000254

08003e90 <sprintf>:
 8003e90:	b40e      	push	{r1, r2, r3}
 8003e92:	b500      	push	{lr}
 8003e94:	f44f 7102 	mov.w	r1, #520	; 0x208
 8003e98:	b09c      	sub	sp, #112	; 0x70
 8003e9a:	f8ad 1014 	strh.w	r1, [sp, #20]
 8003e9e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003ea2:	9104      	str	r1, [sp, #16]
 8003ea4:	9107      	str	r1, [sp, #28]
 8003ea6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003eaa:	ab1d      	add	r3, sp, #116	; 0x74
 8003eac:	9002      	str	r0, [sp, #8]
 8003eae:	9006      	str	r0, [sp, #24]
 8003eb0:	4808      	ldr	r0, [pc, #32]	; (8003ed4 <sprintf+0x44>)
 8003eb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8003eb6:	f8ad 1016 	strh.w	r1, [sp, #22]
 8003eba:	6800      	ldr	r0, [r0, #0]
 8003ebc:	a902      	add	r1, sp, #8
 8003ebe:	9301      	str	r3, [sp, #4]
 8003ec0:	f000 f80a 	bl	8003ed8 <_svfprintf_r>
 8003ec4:	9b02      	ldr	r3, [sp, #8]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	701a      	strb	r2, [r3, #0]
 8003eca:	b01c      	add	sp, #112	; 0x70
 8003ecc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ed0:	b003      	add	sp, #12
 8003ed2:	4770      	bx	lr
 8003ed4:	20000254 	.word	0x20000254

08003ed8 <_svfprintf_r>:
 8003ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003edc:	b0bd      	sub	sp, #244	; 0xf4
 8003ede:	468b      	mov	fp, r1
 8003ee0:	9209      	str	r2, [sp, #36]	; 0x24
 8003ee2:	461f      	mov	r7, r3
 8003ee4:	4681      	mov	r9, r0
 8003ee6:	f003 f90f 	bl	8007108 <_localeconv_r>
 8003eea:	6803      	ldr	r3, [r0, #0]
 8003eec:	4618      	mov	r0, r3
 8003eee:	9311      	str	r3, [sp, #68]	; 0x44
 8003ef0:	f7fc f99a 	bl	8000228 <strlen>
 8003ef4:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8003ef8:	900a      	str	r0, [sp, #40]	; 0x28
 8003efa:	0619      	lsls	r1, r3, #24
 8003efc:	d515      	bpl.n	8003f2a <_svfprintf_r+0x52>
 8003efe:	f8db 3010 	ldr.w	r3, [fp, #16]
 8003f02:	b993      	cbnz	r3, 8003f2a <_svfprintf_r+0x52>
 8003f04:	2140      	movs	r1, #64	; 0x40
 8003f06:	4648      	mov	r0, r9
 8003f08:	f003 f972 	bl	80071f0 <_malloc_r>
 8003f0c:	f8cb 0000 	str.w	r0, [fp]
 8003f10:	f8cb 0010 	str.w	r0, [fp, #16]
 8003f14:	b930      	cbnz	r0, 8003f24 <_svfprintf_r+0x4c>
 8003f16:	230c      	movs	r3, #12
 8003f18:	f8c9 3000 	str.w	r3, [r9]
 8003f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f20:	f000 bf8b 	b.w	8004e3a <_svfprintf_r+0xf62>
 8003f24:	2340      	movs	r3, #64	; 0x40
 8003f26:	f8cb 3014 	str.w	r3, [fp, #20]
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	ac2c      	add	r4, sp, #176	; 0xb0
 8003f2e:	941f      	str	r4, [sp, #124]	; 0x7c
 8003f30:	9321      	str	r3, [sp, #132]	; 0x84
 8003f32:	9320      	str	r3, [sp, #128]	; 0x80
 8003f34:	9308      	str	r3, [sp, #32]
 8003f36:	930c      	str	r3, [sp, #48]	; 0x30
 8003f38:	930d      	str	r3, [sp, #52]	; 0x34
 8003f3a:	9313      	str	r3, [sp, #76]	; 0x4c
 8003f3c:	9312      	str	r3, [sp, #72]	; 0x48
 8003f3e:	930e      	str	r3, [sp, #56]	; 0x38
 8003f40:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8003f42:	462b      	mov	r3, r5
 8003f44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f48:	b11a      	cbz	r2, 8003f52 <_svfprintf_r+0x7a>
 8003f4a:	2a25      	cmp	r2, #37	; 0x25
 8003f4c:	d001      	beq.n	8003f52 <_svfprintf_r+0x7a>
 8003f4e:	461d      	mov	r5, r3
 8003f50:	e7f7      	b.n	8003f42 <_svfprintf_r+0x6a>
 8003f52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f54:	1aee      	subs	r6, r5, r3
 8003f56:	d017      	beq.n	8003f88 <_svfprintf_r+0xb0>
 8003f58:	e884 0048 	stmia.w	r4, {r3, r6}
 8003f5c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003f5e:	4433      	add	r3, r6
 8003f60:	9321      	str	r3, [sp, #132]	; 0x84
 8003f62:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003f64:	3301      	adds	r3, #1
 8003f66:	2b07      	cmp	r3, #7
 8003f68:	9320      	str	r3, [sp, #128]	; 0x80
 8003f6a:	dc01      	bgt.n	8003f70 <_svfprintf_r+0x98>
 8003f6c:	3408      	adds	r4, #8
 8003f6e:	e008      	b.n	8003f82 <_svfprintf_r+0xaa>
 8003f70:	aa1f      	add	r2, sp, #124	; 0x7c
 8003f72:	4659      	mov	r1, fp
 8003f74:	4648      	mov	r0, r9
 8003f76:	f003 fed0 	bl	8007d1a <__ssprint_r>
 8003f7a:	2800      	cmp	r0, #0
 8003f7c:	f040 8622 	bne.w	8004bc4 <_svfprintf_r+0xcec>
 8003f80:	ac2c      	add	r4, sp, #176	; 0xb0
 8003f82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003f84:	4433      	add	r3, r6
 8003f86:	930e      	str	r3, [sp, #56]	; 0x38
 8003f88:	782b      	ldrb	r3, [r5, #0]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	f000 8613 	beq.w	8004bb6 <_svfprintf_r+0xcde>
 8003f90:	2200      	movs	r2, #0
 8003f92:	1c6b      	adds	r3, r5, #1
 8003f94:	4611      	mov	r1, r2
 8003f96:	4615      	mov	r5, r2
 8003f98:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8003f9c:	f04f 3aff 	mov.w	sl, #4294967295
 8003fa0:	920b      	str	r2, [sp, #44]	; 0x2c
 8003fa2:	200a      	movs	r0, #10
 8003fa4:	1c5e      	adds	r6, r3, #1
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	9609      	str	r6, [sp, #36]	; 0x24
 8003faa:	9306      	str	r3, [sp, #24]
 8003fac:	9b06      	ldr	r3, [sp, #24]
 8003fae:	3b20      	subs	r3, #32
 8003fb0:	2b58      	cmp	r3, #88	; 0x58
 8003fb2:	f200 8259 	bhi.w	8004468 <_svfprintf_r+0x590>
 8003fb6:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003fba:	005c      	.short	0x005c
 8003fbc:	02570257 	.word	0x02570257
 8003fc0:	0257006b 	.word	0x0257006b
 8003fc4:	02570257 	.word	0x02570257
 8003fc8:	02570257 	.word	0x02570257
 8003fcc:	006e0257 	.word	0x006e0257
 8003fd0:	02570059 	.word	0x02570059
 8003fd4:	007b0078 	.word	0x007b0078
 8003fd8:	009f0257 	.word	0x009f0257
 8003fdc:	00a200a2 	.word	0x00a200a2
 8003fe0:	00a200a2 	.word	0x00a200a2
 8003fe4:	00a200a2 	.word	0x00a200a2
 8003fe8:	00a200a2 	.word	0x00a200a2
 8003fec:	025700a2 	.word	0x025700a2
 8003ff0:	02570257 	.word	0x02570257
 8003ff4:	02570257 	.word	0x02570257
 8003ff8:	02570257 	.word	0x02570257
 8003ffc:	02570257 	.word	0x02570257
 8004000:	00d20257 	.word	0x00d20257
 8004004:	025700fe 	.word	0x025700fe
 8004008:	025700fe 	.word	0x025700fe
 800400c:	02570257 	.word	0x02570257
 8004010:	00b50257 	.word	0x00b50257
 8004014:	02570257 	.word	0x02570257
 8004018:	02570143 	.word	0x02570143
 800401c:	02570257 	.word	0x02570257
 8004020:	02570257 	.word	0x02570257
 8004024:	0257018a 	.word	0x0257018a
 8004028:	00660257 	.word	0x00660257
 800402c:	02570257 	.word	0x02570257
 8004030:	02570257 	.word	0x02570257
 8004034:	02570257 	.word	0x02570257
 8004038:	02570257 	.word	0x02570257
 800403c:	02570257 	.word	0x02570257
 8004040:	006100c9 	.word	0x006100c9
 8004044:	00fe00fe 	.word	0x00fe00fe
 8004048:	00b800fe 	.word	0x00b800fe
 800404c:	02570061 	.word	0x02570061
 8004050:	00bb0257 	.word	0x00bb0257
 8004054:	01250257 	.word	0x01250257
 8004058:	01600145 	.word	0x01600145
 800405c:	025700c6 	.word	0x025700c6
 8004060:	02570171 	.word	0x02570171
 8004064:	0257018c 	.word	0x0257018c
 8004068:	01a40257 	.word	0x01a40257
 800406c:	2201      	movs	r2, #1
 800406e:	212b      	movs	r1, #43	; 0x2b
 8004070:	e002      	b.n	8004078 <_svfprintf_r+0x1a0>
 8004072:	b909      	cbnz	r1, 8004078 <_svfprintf_r+0x1a0>
 8004074:	2201      	movs	r2, #1
 8004076:	2120      	movs	r1, #32
 8004078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800407a:	e793      	b.n	8003fa4 <_svfprintf_r+0xcc>
 800407c:	2a00      	cmp	r2, #0
 800407e:	d073      	beq.n	8004168 <_svfprintf_r+0x290>
 8004080:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8004084:	e070      	b.n	8004168 <_svfprintf_r+0x290>
 8004086:	b10a      	cbz	r2, 800408c <_svfprintf_r+0x1b4>
 8004088:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800408c:	4ba9      	ldr	r3, [pc, #676]	; (8004334 <_svfprintf_r+0x45c>)
 800408e:	e13c      	b.n	800430a <_svfprintf_r+0x432>
 8004090:	f045 0501 	orr.w	r5, r5, #1
 8004094:	e7f0      	b.n	8004078 <_svfprintf_r+0x1a0>
 8004096:	683e      	ldr	r6, [r7, #0]
 8004098:	1d3b      	adds	r3, r7, #4
 800409a:	2e00      	cmp	r6, #0
 800409c:	960b      	str	r6, [sp, #44]	; 0x2c
 800409e:	db01      	blt.n	80040a4 <_svfprintf_r+0x1cc>
 80040a0:	461f      	mov	r7, r3
 80040a2:	e7e9      	b.n	8004078 <_svfprintf_r+0x1a0>
 80040a4:	461f      	mov	r7, r3
 80040a6:	4276      	negs	r6, r6
 80040a8:	960b      	str	r6, [sp, #44]	; 0x2c
 80040aa:	f045 0504 	orr.w	r5, r5, #4
 80040ae:	e7e3      	b.n	8004078 <_svfprintf_r+0x1a0>
 80040b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040b2:	1c5e      	adds	r6, r3, #1
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	2b2a      	cmp	r3, #42	; 0x2a
 80040b8:	9306      	str	r3, [sp, #24]
 80040ba:	d001      	beq.n	80040c0 <_svfprintf_r+0x1e8>
 80040bc:	2300      	movs	r3, #0
 80040be:	e00a      	b.n	80040d6 <_svfprintf_r+0x1fe>
 80040c0:	f8d7 a000 	ldr.w	sl, [r7]
 80040c4:	1d3b      	adds	r3, r7, #4
 80040c6:	f1ba 0f00 	cmp.w	sl, #0
 80040ca:	461f      	mov	r7, r3
 80040cc:	9609      	str	r6, [sp, #36]	; 0x24
 80040ce:	dad3      	bge.n	8004078 <_svfprintf_r+0x1a0>
 80040d0:	f04f 3aff 	mov.w	sl, #4294967295
 80040d4:	e7d0      	b.n	8004078 <_svfprintf_r+0x1a0>
 80040d6:	9609      	str	r6, [sp, #36]	; 0x24
 80040d8:	9e06      	ldr	r6, [sp, #24]
 80040da:	3e30      	subs	r6, #48	; 0x30
 80040dc:	2e09      	cmp	r6, #9
 80040de:	d808      	bhi.n	80040f2 <_svfprintf_r+0x21a>
 80040e0:	fb00 6303 	mla	r3, r0, r3, r6
 80040e4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80040e6:	46b6      	mov	lr, r6
 80040e8:	f81e 6b01 	ldrb.w	r6, [lr], #1
 80040ec:	9606      	str	r6, [sp, #24]
 80040ee:	4676      	mov	r6, lr
 80040f0:	e7f1      	b.n	80040d6 <_svfprintf_r+0x1fe>
 80040f2:	ea43 7ae3 	orr.w	sl, r3, r3, asr #31
 80040f6:	e759      	b.n	8003fac <_svfprintf_r+0xd4>
 80040f8:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80040fc:	e7bc      	b.n	8004078 <_svfprintf_r+0x1a0>
 80040fe:	2300      	movs	r3, #0
 8004100:	930b      	str	r3, [sp, #44]	; 0x2c
 8004102:	9b06      	ldr	r3, [sp, #24]
 8004104:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004106:	3b30      	subs	r3, #48	; 0x30
 8004108:	fb00 3306 	mla	r3, r0, r6, r3
 800410c:	930b      	str	r3, [sp, #44]	; 0x2c
 800410e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004110:	461e      	mov	r6, r3
 8004112:	f816 3b01 	ldrb.w	r3, [r6], #1
 8004116:	9306      	str	r3, [sp, #24]
 8004118:	9b06      	ldr	r3, [sp, #24]
 800411a:	9609      	str	r6, [sp, #36]	; 0x24
 800411c:	3b30      	subs	r3, #48	; 0x30
 800411e:	2b09      	cmp	r3, #9
 8004120:	d9ef      	bls.n	8004102 <_svfprintf_r+0x22a>
 8004122:	e743      	b.n	8003fac <_svfprintf_r+0xd4>
 8004124:	f045 0508 	orr.w	r5, r5, #8
 8004128:	e7a6      	b.n	8004078 <_svfprintf_r+0x1a0>
 800412a:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 800412e:	e7a3      	b.n	8004078 <_svfprintf_r+0x1a0>
 8004130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	2b6c      	cmp	r3, #108	; 0x6c
 8004136:	d103      	bne.n	8004140 <_svfprintf_r+0x268>
 8004138:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800413a:	3301      	adds	r3, #1
 800413c:	9309      	str	r3, [sp, #36]	; 0x24
 800413e:	e002      	b.n	8004146 <_svfprintf_r+0x26e>
 8004140:	f045 0510 	orr.w	r5, r5, #16
 8004144:	e798      	b.n	8004078 <_svfprintf_r+0x1a0>
 8004146:	f045 0520 	orr.w	r5, r5, #32
 800414a:	e795      	b.n	8004078 <_svfprintf_r+0x1a0>
 800414c:	1d3b      	adds	r3, r7, #4
 800414e:	9307      	str	r3, [sp, #28]
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	2600      	movs	r6, #0
 8004154:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8004158:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 800415c:	e193      	b.n	8004486 <_svfprintf_r+0x5ae>
 800415e:	b10a      	cbz	r2, 8004164 <_svfprintf_r+0x28c>
 8004160:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8004164:	f045 0510 	orr.w	r5, r5, #16
 8004168:	06aa      	lsls	r2, r5, #26
 800416a:	d508      	bpl.n	800417e <_svfprintf_r+0x2a6>
 800416c:	3707      	adds	r7, #7
 800416e:	f027 0707 	bic.w	r7, r7, #7
 8004172:	f107 0308 	add.w	r3, r7, #8
 8004176:	9307      	str	r3, [sp, #28]
 8004178:	e9d7 6700 	ldrd	r6, r7, [r7]
 800417c:	e00e      	b.n	800419c <_svfprintf_r+0x2c4>
 800417e:	f015 0f10 	tst.w	r5, #16
 8004182:	f107 0304 	add.w	r3, r7, #4
 8004186:	d002      	beq.n	800418e <_svfprintf_r+0x2b6>
 8004188:	9307      	str	r3, [sp, #28]
 800418a:	683e      	ldr	r6, [r7, #0]
 800418c:	e005      	b.n	800419a <_svfprintf_r+0x2c2>
 800418e:	683e      	ldr	r6, [r7, #0]
 8004190:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004194:	9307      	str	r3, [sp, #28]
 8004196:	bf18      	it	ne
 8004198:	b236      	sxthne	r6, r6
 800419a:	17f7      	asrs	r7, r6, #31
 800419c:	2e00      	cmp	r6, #0
 800419e:	f177 0300 	sbcs.w	r3, r7, #0
 80041a2:	f280 80e2 	bge.w	800436a <_svfprintf_r+0x492>
 80041a6:	4276      	negs	r6, r6
 80041a8:	f04f 032d 	mov.w	r3, #45	; 0x2d
 80041ac:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 80041b0:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80041b4:	e0d9      	b.n	800436a <_svfprintf_r+0x492>
 80041b6:	b10a      	cbz	r2, 80041bc <_svfprintf_r+0x2e4>
 80041b8:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80041bc:	3707      	adds	r7, #7
 80041be:	f027 0707 	bic.w	r7, r7, #7
 80041c2:	f107 0308 	add.w	r3, r7, #8
 80041c6:	9307      	str	r3, [sp, #28]
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	f04f 32ff 	mov.w	r2, #4294967295
 80041ce:	930c      	str	r3, [sp, #48]	; 0x30
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80041d4:	930d      	str	r3, [sp, #52]	; 0x34
 80041d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80041d8:	4638      	mov	r0, r7
 80041da:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 80041de:	4631      	mov	r1, r6
 80041e0:	4b55      	ldr	r3, [pc, #340]	; (8004338 <_svfprintf_r+0x460>)
 80041e2:	f7fc fc7b 	bl	8000adc <__aeabi_dcmpun>
 80041e6:	2800      	cmp	r0, #0
 80041e8:	f040 84f6 	bne.w	8004bd8 <_svfprintf_r+0xd00>
 80041ec:	f04f 32ff 	mov.w	r2, #4294967295
 80041f0:	4b51      	ldr	r3, [pc, #324]	; (8004338 <_svfprintf_r+0x460>)
 80041f2:	4638      	mov	r0, r7
 80041f4:	4631      	mov	r1, r6
 80041f6:	f7fc fc53 	bl	8000aa0 <__aeabi_dcmple>
 80041fa:	2800      	cmp	r0, #0
 80041fc:	f040 84ec 	bne.w	8004bd8 <_svfprintf_r+0xd00>
 8004200:	f000 be04 	b.w	8004e0c <_svfprintf_r+0xf34>
 8004204:	b10a      	cbz	r2, 800420a <_svfprintf_r+0x332>
 8004206:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800420a:	f015 0f20 	tst.w	r5, #32
 800420e:	f107 0304 	add.w	r3, r7, #4
 8004212:	d007      	beq.n	8004224 <_svfprintf_r+0x34c>
 8004214:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004216:	683a      	ldr	r2, [r7, #0]
 8004218:	17ce      	asrs	r6, r1, #31
 800421a:	4608      	mov	r0, r1
 800421c:	4631      	mov	r1, r6
 800421e:	e9c2 0100 	strd	r0, r1, [r2]
 8004222:	e00b      	b.n	800423c <_svfprintf_r+0x364>
 8004224:	06e9      	lsls	r1, r5, #27
 8004226:	d406      	bmi.n	8004236 <_svfprintf_r+0x35e>
 8004228:	066a      	lsls	r2, r5, #25
 800422a:	d504      	bpl.n	8004236 <_svfprintf_r+0x35e>
 800422c:	683a      	ldr	r2, [r7, #0]
 800422e:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8004232:	8011      	strh	r1, [r2, #0]
 8004234:	e002      	b.n	800423c <_svfprintf_r+0x364>
 8004236:	683a      	ldr	r2, [r7, #0]
 8004238:	990e      	ldr	r1, [sp, #56]	; 0x38
 800423a:	6011      	str	r1, [r2, #0]
 800423c:	461f      	mov	r7, r3
 800423e:	e67f      	b.n	8003f40 <_svfprintf_r+0x68>
 8004240:	f045 0510 	orr.w	r5, r5, #16
 8004244:	f015 0320 	ands.w	r3, r5, #32
 8004248:	d009      	beq.n	800425e <_svfprintf_r+0x386>
 800424a:	3707      	adds	r7, #7
 800424c:	f027 0707 	bic.w	r7, r7, #7
 8004250:	f107 0308 	add.w	r3, r7, #8
 8004254:	9307      	str	r3, [sp, #28]
 8004256:	e9d7 6700 	ldrd	r6, r7, [r7]
 800425a:	2300      	movs	r3, #0
 800425c:	e081      	b.n	8004362 <_svfprintf_r+0x48a>
 800425e:	1d3a      	adds	r2, r7, #4
 8004260:	f015 0110 	ands.w	r1, r5, #16
 8004264:	9207      	str	r2, [sp, #28]
 8004266:	d105      	bne.n	8004274 <_svfprintf_r+0x39c>
 8004268:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 800426c:	d002      	beq.n	8004274 <_svfprintf_r+0x39c>
 800426e:	883e      	ldrh	r6, [r7, #0]
 8004270:	2700      	movs	r7, #0
 8004272:	e7f2      	b.n	800425a <_svfprintf_r+0x382>
 8004274:	683e      	ldr	r6, [r7, #0]
 8004276:	2700      	movs	r7, #0
 8004278:	e073      	b.n	8004362 <_svfprintf_r+0x48a>
 800427a:	1d3b      	adds	r3, r7, #4
 800427c:	9307      	str	r3, [sp, #28]
 800427e:	2330      	movs	r3, #48	; 0x30
 8004280:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8004284:	4b2d      	ldr	r3, [pc, #180]	; (800433c <_svfprintf_r+0x464>)
 8004286:	2278      	movs	r2, #120	; 0x78
 8004288:	683e      	ldr	r6, [r7, #0]
 800428a:	9313      	str	r3, [sp, #76]	; 0x4c
 800428c:	2700      	movs	r7, #0
 800428e:	f045 0502 	orr.w	r5, r5, #2
 8004292:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8004296:	2302      	movs	r3, #2
 8004298:	9206      	str	r2, [sp, #24]
 800429a:	e062      	b.n	8004362 <_svfprintf_r+0x48a>
 800429c:	2600      	movs	r6, #0
 800429e:	1d3b      	adds	r3, r7, #4
 80042a0:	45b2      	cmp	sl, r6
 80042a2:	9307      	str	r3, [sp, #28]
 80042a4:	f8d7 8000 	ldr.w	r8, [r7]
 80042a8:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 80042ac:	db0a      	blt.n	80042c4 <_svfprintf_r+0x3ec>
 80042ae:	4652      	mov	r2, sl
 80042b0:	4631      	mov	r1, r6
 80042b2:	4640      	mov	r0, r8
 80042b4:	f003 f9b8 	bl	8007628 <memchr>
 80042b8:	2800      	cmp	r0, #0
 80042ba:	f000 80ea 	beq.w	8004492 <_svfprintf_r+0x5ba>
 80042be:	ebc8 0a00 	rsb	sl, r8, r0
 80042c2:	e0e7      	b.n	8004494 <_svfprintf_r+0x5bc>
 80042c4:	4640      	mov	r0, r8
 80042c6:	f7fb ffaf 	bl	8000228 <strlen>
 80042ca:	4682      	mov	sl, r0
 80042cc:	e0e2      	b.n	8004494 <_svfprintf_r+0x5bc>
 80042ce:	f045 0510 	orr.w	r5, r5, #16
 80042d2:	06ae      	lsls	r6, r5, #26
 80042d4:	d508      	bpl.n	80042e8 <_svfprintf_r+0x410>
 80042d6:	3707      	adds	r7, #7
 80042d8:	f027 0707 	bic.w	r7, r7, #7
 80042dc:	f107 0308 	add.w	r3, r7, #8
 80042e0:	9307      	str	r3, [sp, #28]
 80042e2:	e9d7 6700 	ldrd	r6, r7, [r7]
 80042e6:	e00a      	b.n	80042fe <_svfprintf_r+0x426>
 80042e8:	1d3b      	adds	r3, r7, #4
 80042ea:	f015 0f10 	tst.w	r5, #16
 80042ee:	9307      	str	r3, [sp, #28]
 80042f0:	d103      	bne.n	80042fa <_svfprintf_r+0x422>
 80042f2:	0668      	lsls	r0, r5, #25
 80042f4:	d501      	bpl.n	80042fa <_svfprintf_r+0x422>
 80042f6:	883e      	ldrh	r6, [r7, #0]
 80042f8:	e000      	b.n	80042fc <_svfprintf_r+0x424>
 80042fa:	683e      	ldr	r6, [r7, #0]
 80042fc:	2700      	movs	r7, #0
 80042fe:	2301      	movs	r3, #1
 8004300:	e02f      	b.n	8004362 <_svfprintf_r+0x48a>
 8004302:	b10a      	cbz	r2, 8004308 <_svfprintf_r+0x430>
 8004304:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8004308:	4b0c      	ldr	r3, [pc, #48]	; (800433c <_svfprintf_r+0x464>)
 800430a:	06a9      	lsls	r1, r5, #26
 800430c:	9313      	str	r3, [sp, #76]	; 0x4c
 800430e:	d508      	bpl.n	8004322 <_svfprintf_r+0x44a>
 8004310:	3707      	adds	r7, #7
 8004312:	f027 0707 	bic.w	r7, r7, #7
 8004316:	f107 0308 	add.w	r3, r7, #8
 800431a:	9307      	str	r3, [sp, #28]
 800431c:	e9d7 6700 	ldrd	r6, r7, [r7]
 8004320:	e010      	b.n	8004344 <_svfprintf_r+0x46c>
 8004322:	1d3b      	adds	r3, r7, #4
 8004324:	f015 0f10 	tst.w	r5, #16
 8004328:	9307      	str	r3, [sp, #28]
 800432a:	d109      	bne.n	8004340 <_svfprintf_r+0x468>
 800432c:	066a      	lsls	r2, r5, #25
 800432e:	d507      	bpl.n	8004340 <_svfprintf_r+0x468>
 8004330:	883e      	ldrh	r6, [r7, #0]
 8004332:	e006      	b.n	8004342 <_svfprintf_r+0x46a>
 8004334:	08008a04 	.word	0x08008a04
 8004338:	7fefffff 	.word	0x7fefffff
 800433c:	08008a15 	.word	0x08008a15
 8004340:	683e      	ldr	r6, [r7, #0]
 8004342:	2700      	movs	r7, #0
 8004344:	07eb      	lsls	r3, r5, #31
 8004346:	d50b      	bpl.n	8004360 <_svfprintf_r+0x488>
 8004348:	ea56 0307 	orrs.w	r3, r6, r7
 800434c:	d008      	beq.n	8004360 <_svfprintf_r+0x488>
 800434e:	2330      	movs	r3, #48	; 0x30
 8004350:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8004354:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8004358:	f045 0502 	orr.w	r5, r5, #2
 800435c:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 8004360:	2302      	movs	r3, #2
 8004362:	2200      	movs	r2, #0
 8004364:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8004368:	e000      	b.n	800436c <_svfprintf_r+0x494>
 800436a:	2301      	movs	r3, #1
 800436c:	f1ba 0f00 	cmp.w	sl, #0
 8004370:	f2c0 855d 	blt.w	8004e2e <_svfprintf_r+0xf56>
 8004374:	ea56 0207 	orrs.w	r2, r6, r7
 8004378:	f025 0180 	bic.w	r1, r5, #128	; 0x80
 800437c:	d103      	bne.n	8004386 <_svfprintf_r+0x4ae>
 800437e:	f1ba 0f00 	cmp.w	sl, #0
 8004382:	d05f      	beq.n	8004444 <_svfprintf_r+0x56c>
 8004384:	e006      	b.n	8004394 <_svfprintf_r+0x4bc>
 8004386:	460d      	mov	r5, r1
 8004388:	2b01      	cmp	r3, #1
 800438a:	d025      	beq.n	80043d8 <_svfprintf_r+0x500>
 800438c:	2b02      	cmp	r3, #2
 800438e:	d046      	beq.n	800441e <_svfprintf_r+0x546>
 8004390:	4629      	mov	r1, r5
 8004392:	e007      	b.n	80043a4 <_svfprintf_r+0x4cc>
 8004394:	460d      	mov	r5, r1
 8004396:	2b01      	cmp	r3, #1
 8004398:	d022      	beq.n	80043e0 <_svfprintf_r+0x508>
 800439a:	2b02      	cmp	r3, #2
 800439c:	d03d      	beq.n	800441a <_svfprintf_r+0x542>
 800439e:	4629      	mov	r1, r5
 80043a0:	2600      	movs	r6, #0
 80043a2:	2700      	movs	r7, #0
 80043a4:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 80043a8:	08f2      	lsrs	r2, r6, #3
 80043aa:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 80043ae:	08f8      	lsrs	r0, r7, #3
 80043b0:	f006 0307 	and.w	r3, r6, #7
 80043b4:	4607      	mov	r7, r0
 80043b6:	4616      	mov	r6, r2
 80043b8:	3330      	adds	r3, #48	; 0x30
 80043ba:	ea56 0207 	orrs.w	r2, r6, r7
 80043be:	f808 3d01 	strb.w	r3, [r8, #-1]!
 80043c2:	d1f1      	bne.n	80043a8 <_svfprintf_r+0x4d0>
 80043c4:	07e8      	lsls	r0, r5, #31
 80043c6:	d548      	bpl.n	800445a <_svfprintf_r+0x582>
 80043c8:	2b30      	cmp	r3, #48	; 0x30
 80043ca:	d046      	beq.n	800445a <_svfprintf_r+0x582>
 80043cc:	2330      	movs	r3, #48	; 0x30
 80043ce:	f808 3c01 	strb.w	r3, [r8, #-1]
 80043d2:	f108 38ff 	add.w	r8, r8, #4294967295
 80043d6:	e040      	b.n	800445a <_svfprintf_r+0x582>
 80043d8:	2f00      	cmp	r7, #0
 80043da:	bf08      	it	eq
 80043dc:	2e0a      	cmpeq	r6, #10
 80043de:	d205      	bcs.n	80043ec <_svfprintf_r+0x514>
 80043e0:	3630      	adds	r6, #48	; 0x30
 80043e2:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 80043e6:	f808 6d41 	strb.w	r6, [r8, #-65]!
 80043ea:	e029      	b.n	8004440 <_svfprintf_r+0x568>
 80043ec:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 80043f0:	4630      	mov	r0, r6
 80043f2:	4639      	mov	r1, r7
 80043f4:	220a      	movs	r2, #10
 80043f6:	2300      	movs	r3, #0
 80043f8:	f7fc fbae 	bl	8000b58 <__aeabi_uldivmod>
 80043fc:	3230      	adds	r2, #48	; 0x30
 80043fe:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8004402:	2300      	movs	r3, #0
 8004404:	4630      	mov	r0, r6
 8004406:	4639      	mov	r1, r7
 8004408:	220a      	movs	r2, #10
 800440a:	f7fc fba5 	bl	8000b58 <__aeabi_uldivmod>
 800440e:	4606      	mov	r6, r0
 8004410:	460f      	mov	r7, r1
 8004412:	ea56 0307 	orrs.w	r3, r6, r7
 8004416:	d1eb      	bne.n	80043f0 <_svfprintf_r+0x518>
 8004418:	e012      	b.n	8004440 <_svfprintf_r+0x568>
 800441a:	2600      	movs	r6, #0
 800441c:	2700      	movs	r7, #0
 800441e:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8004422:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004424:	f006 030f 	and.w	r3, r6, #15
 8004428:	5cd3      	ldrb	r3, [r2, r3]
 800442a:	093a      	lsrs	r2, r7, #4
 800442c:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8004430:	0933      	lsrs	r3, r6, #4
 8004432:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8004436:	461e      	mov	r6, r3
 8004438:	4617      	mov	r7, r2
 800443a:	ea56 0307 	orrs.w	r3, r6, r7
 800443e:	d1f0      	bne.n	8004422 <_svfprintf_r+0x54a>
 8004440:	4629      	mov	r1, r5
 8004442:	e00a      	b.n	800445a <_svfprintf_r+0x582>
 8004444:	b93b      	cbnz	r3, 8004456 <_svfprintf_r+0x57e>
 8004446:	07ea      	lsls	r2, r5, #31
 8004448:	d505      	bpl.n	8004456 <_svfprintf_r+0x57e>
 800444a:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 800444e:	2330      	movs	r3, #48	; 0x30
 8004450:	f808 3d41 	strb.w	r3, [r8, #-65]!
 8004454:	e001      	b.n	800445a <_svfprintf_r+0x582>
 8004456:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800445a:	ab2c      	add	r3, sp, #176	; 0xb0
 800445c:	4656      	mov	r6, sl
 800445e:	460d      	mov	r5, r1
 8004460:	ebc8 0a03 	rsb	sl, r8, r3
 8004464:	2700      	movs	r7, #0
 8004466:	e016      	b.n	8004496 <_svfprintf_r+0x5be>
 8004468:	b10a      	cbz	r2, 800446e <_svfprintf_r+0x596>
 800446a:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800446e:	9b06      	ldr	r3, [sp, #24]
 8004470:	2b00      	cmp	r3, #0
 8004472:	f000 83a0 	beq.w	8004bb6 <_svfprintf_r+0xcde>
 8004476:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800447a:	2600      	movs	r6, #0
 800447c:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8004480:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8004484:	9707      	str	r7, [sp, #28]
 8004486:	f04f 0a01 	mov.w	sl, #1
 800448a:	4637      	mov	r7, r6
 800448c:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8004490:	e001      	b.n	8004496 <_svfprintf_r+0x5be>
 8004492:	4606      	mov	r6, r0
 8004494:	4637      	mov	r7, r6
 8004496:	4556      	cmp	r6, sl
 8004498:	4633      	mov	r3, r6
 800449a:	bfb8      	it	lt
 800449c:	4653      	movlt	r3, sl
 800449e:	930f      	str	r3, [sp, #60]	; 0x3c
 80044a0:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 80044a4:	b113      	cbz	r3, 80044ac <_svfprintf_r+0x5d4>
 80044a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80044a8:	3301      	adds	r3, #1
 80044aa:	930f      	str	r3, [sp, #60]	; 0x3c
 80044ac:	f015 0302 	ands.w	r3, r5, #2
 80044b0:	9314      	str	r3, [sp, #80]	; 0x50
 80044b2:	bf1e      	ittt	ne
 80044b4:	9b0f      	ldrne	r3, [sp, #60]	; 0x3c
 80044b6:	3302      	addne	r3, #2
 80044b8:	930f      	strne	r3, [sp, #60]	; 0x3c
 80044ba:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 80044be:	9315      	str	r3, [sp, #84]	; 0x54
 80044c0:	d139      	bne.n	8004536 <_svfprintf_r+0x65e>
 80044c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80044c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80044c6:	1a9b      	subs	r3, r3, r2
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	9310      	str	r3, [sp, #64]	; 0x40
 80044cc:	dd33      	ble.n	8004536 <_svfprintf_r+0x65e>
 80044ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80044d0:	2b10      	cmp	r3, #16
 80044d2:	4ba3      	ldr	r3, [pc, #652]	; (8004760 <_svfprintf_r+0x888>)
 80044d4:	6023      	str	r3, [r4, #0]
 80044d6:	dd18      	ble.n	800450a <_svfprintf_r+0x632>
 80044d8:	2310      	movs	r3, #16
 80044da:	6063      	str	r3, [r4, #4]
 80044dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80044de:	3310      	adds	r3, #16
 80044e0:	9321      	str	r3, [sp, #132]	; 0x84
 80044e2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80044e4:	3301      	adds	r3, #1
 80044e6:	2b07      	cmp	r3, #7
 80044e8:	9320      	str	r3, [sp, #128]	; 0x80
 80044ea:	dc01      	bgt.n	80044f0 <_svfprintf_r+0x618>
 80044ec:	3408      	adds	r4, #8
 80044ee:	e008      	b.n	8004502 <_svfprintf_r+0x62a>
 80044f0:	aa1f      	add	r2, sp, #124	; 0x7c
 80044f2:	4659      	mov	r1, fp
 80044f4:	4648      	mov	r0, r9
 80044f6:	f003 fc10 	bl	8007d1a <__ssprint_r>
 80044fa:	2800      	cmp	r0, #0
 80044fc:	f040 8362 	bne.w	8004bc4 <_svfprintf_r+0xcec>
 8004500:	ac2c      	add	r4, sp, #176	; 0xb0
 8004502:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004504:	3b10      	subs	r3, #16
 8004506:	9310      	str	r3, [sp, #64]	; 0x40
 8004508:	e7e1      	b.n	80044ce <_svfprintf_r+0x5f6>
 800450a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800450c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800450e:	6063      	str	r3, [r4, #4]
 8004510:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004512:	4413      	add	r3, r2
 8004514:	9321      	str	r3, [sp, #132]	; 0x84
 8004516:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004518:	3301      	adds	r3, #1
 800451a:	2b07      	cmp	r3, #7
 800451c:	9320      	str	r3, [sp, #128]	; 0x80
 800451e:	dc01      	bgt.n	8004524 <_svfprintf_r+0x64c>
 8004520:	3408      	adds	r4, #8
 8004522:	e008      	b.n	8004536 <_svfprintf_r+0x65e>
 8004524:	aa1f      	add	r2, sp, #124	; 0x7c
 8004526:	4659      	mov	r1, fp
 8004528:	4648      	mov	r0, r9
 800452a:	f003 fbf6 	bl	8007d1a <__ssprint_r>
 800452e:	2800      	cmp	r0, #0
 8004530:	f040 8348 	bne.w	8004bc4 <_svfprintf_r+0xcec>
 8004534:	ac2c      	add	r4, sp, #176	; 0xb0
 8004536:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 800453a:	b1bb      	cbz	r3, 800456c <_svfprintf_r+0x694>
 800453c:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 8004540:	6023      	str	r3, [r4, #0]
 8004542:	2301      	movs	r3, #1
 8004544:	6063      	str	r3, [r4, #4]
 8004546:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004548:	3301      	adds	r3, #1
 800454a:	9321      	str	r3, [sp, #132]	; 0x84
 800454c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800454e:	3301      	adds	r3, #1
 8004550:	2b07      	cmp	r3, #7
 8004552:	9320      	str	r3, [sp, #128]	; 0x80
 8004554:	dc01      	bgt.n	800455a <_svfprintf_r+0x682>
 8004556:	3408      	adds	r4, #8
 8004558:	e008      	b.n	800456c <_svfprintf_r+0x694>
 800455a:	aa1f      	add	r2, sp, #124	; 0x7c
 800455c:	4659      	mov	r1, fp
 800455e:	4648      	mov	r0, r9
 8004560:	f003 fbdb 	bl	8007d1a <__ssprint_r>
 8004564:	2800      	cmp	r0, #0
 8004566:	f040 832d 	bne.w	8004bc4 <_svfprintf_r+0xcec>
 800456a:	ac2c      	add	r4, sp, #176	; 0xb0
 800456c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800456e:	b1b3      	cbz	r3, 800459e <_svfprintf_r+0x6c6>
 8004570:	ab18      	add	r3, sp, #96	; 0x60
 8004572:	6023      	str	r3, [r4, #0]
 8004574:	2302      	movs	r3, #2
 8004576:	6063      	str	r3, [r4, #4]
 8004578:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800457a:	3302      	adds	r3, #2
 800457c:	9321      	str	r3, [sp, #132]	; 0x84
 800457e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004580:	3301      	adds	r3, #1
 8004582:	2b07      	cmp	r3, #7
 8004584:	9320      	str	r3, [sp, #128]	; 0x80
 8004586:	dc01      	bgt.n	800458c <_svfprintf_r+0x6b4>
 8004588:	3408      	adds	r4, #8
 800458a:	e008      	b.n	800459e <_svfprintf_r+0x6c6>
 800458c:	aa1f      	add	r2, sp, #124	; 0x7c
 800458e:	4659      	mov	r1, fp
 8004590:	4648      	mov	r0, r9
 8004592:	f003 fbc2 	bl	8007d1a <__ssprint_r>
 8004596:	2800      	cmp	r0, #0
 8004598:	f040 8314 	bne.w	8004bc4 <_svfprintf_r+0xcec>
 800459c:	ac2c      	add	r4, sp, #176	; 0xb0
 800459e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80045a0:	2b80      	cmp	r3, #128	; 0x80
 80045a2:	d139      	bne.n	8004618 <_svfprintf_r+0x740>
 80045a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80045a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80045a8:	1a9b      	subs	r3, r3, r2
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	9310      	str	r3, [sp, #64]	; 0x40
 80045ae:	dd33      	ble.n	8004618 <_svfprintf_r+0x740>
 80045b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80045b2:	2b10      	cmp	r3, #16
 80045b4:	4b6b      	ldr	r3, [pc, #428]	; (8004764 <_svfprintf_r+0x88c>)
 80045b6:	6023      	str	r3, [r4, #0]
 80045b8:	dd18      	ble.n	80045ec <_svfprintf_r+0x714>
 80045ba:	2310      	movs	r3, #16
 80045bc:	6063      	str	r3, [r4, #4]
 80045be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80045c0:	3310      	adds	r3, #16
 80045c2:	9321      	str	r3, [sp, #132]	; 0x84
 80045c4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80045c6:	3301      	adds	r3, #1
 80045c8:	2b07      	cmp	r3, #7
 80045ca:	9320      	str	r3, [sp, #128]	; 0x80
 80045cc:	dc01      	bgt.n	80045d2 <_svfprintf_r+0x6fa>
 80045ce:	3408      	adds	r4, #8
 80045d0:	e008      	b.n	80045e4 <_svfprintf_r+0x70c>
 80045d2:	aa1f      	add	r2, sp, #124	; 0x7c
 80045d4:	4659      	mov	r1, fp
 80045d6:	4648      	mov	r0, r9
 80045d8:	f003 fb9f 	bl	8007d1a <__ssprint_r>
 80045dc:	2800      	cmp	r0, #0
 80045de:	f040 82f1 	bne.w	8004bc4 <_svfprintf_r+0xcec>
 80045e2:	ac2c      	add	r4, sp, #176	; 0xb0
 80045e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80045e6:	3b10      	subs	r3, #16
 80045e8:	9310      	str	r3, [sp, #64]	; 0x40
 80045ea:	e7e1      	b.n	80045b0 <_svfprintf_r+0x6d8>
 80045ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80045ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80045f0:	6063      	str	r3, [r4, #4]
 80045f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80045f4:	4413      	add	r3, r2
 80045f6:	9321      	str	r3, [sp, #132]	; 0x84
 80045f8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80045fa:	3301      	adds	r3, #1
 80045fc:	2b07      	cmp	r3, #7
 80045fe:	9320      	str	r3, [sp, #128]	; 0x80
 8004600:	dc01      	bgt.n	8004606 <_svfprintf_r+0x72e>
 8004602:	3408      	adds	r4, #8
 8004604:	e008      	b.n	8004618 <_svfprintf_r+0x740>
 8004606:	aa1f      	add	r2, sp, #124	; 0x7c
 8004608:	4659      	mov	r1, fp
 800460a:	4648      	mov	r0, r9
 800460c:	f003 fb85 	bl	8007d1a <__ssprint_r>
 8004610:	2800      	cmp	r0, #0
 8004612:	f040 82d7 	bne.w	8004bc4 <_svfprintf_r+0xcec>
 8004616:	ac2c      	add	r4, sp, #176	; 0xb0
 8004618:	ebca 0606 	rsb	r6, sl, r6
 800461c:	2e00      	cmp	r6, #0
 800461e:	dd2e      	ble.n	800467e <_svfprintf_r+0x7a6>
 8004620:	4b50      	ldr	r3, [pc, #320]	; (8004764 <_svfprintf_r+0x88c>)
 8004622:	2e10      	cmp	r6, #16
 8004624:	6023      	str	r3, [r4, #0]
 8004626:	dd16      	ble.n	8004656 <_svfprintf_r+0x77e>
 8004628:	2310      	movs	r3, #16
 800462a:	6063      	str	r3, [r4, #4]
 800462c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800462e:	3310      	adds	r3, #16
 8004630:	9321      	str	r3, [sp, #132]	; 0x84
 8004632:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004634:	3301      	adds	r3, #1
 8004636:	2b07      	cmp	r3, #7
 8004638:	9320      	str	r3, [sp, #128]	; 0x80
 800463a:	dc01      	bgt.n	8004640 <_svfprintf_r+0x768>
 800463c:	3408      	adds	r4, #8
 800463e:	e008      	b.n	8004652 <_svfprintf_r+0x77a>
 8004640:	aa1f      	add	r2, sp, #124	; 0x7c
 8004642:	4659      	mov	r1, fp
 8004644:	4648      	mov	r0, r9
 8004646:	f003 fb68 	bl	8007d1a <__ssprint_r>
 800464a:	2800      	cmp	r0, #0
 800464c:	f040 82ba 	bne.w	8004bc4 <_svfprintf_r+0xcec>
 8004650:	ac2c      	add	r4, sp, #176	; 0xb0
 8004652:	3e10      	subs	r6, #16
 8004654:	e7e4      	b.n	8004620 <_svfprintf_r+0x748>
 8004656:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004658:	9821      	ldr	r0, [sp, #132]	; 0x84
 800465a:	3301      	adds	r3, #1
 800465c:	6066      	str	r6, [r4, #4]
 800465e:	2b07      	cmp	r3, #7
 8004660:	4406      	add	r6, r0
 8004662:	9621      	str	r6, [sp, #132]	; 0x84
 8004664:	9320      	str	r3, [sp, #128]	; 0x80
 8004666:	dc01      	bgt.n	800466c <_svfprintf_r+0x794>
 8004668:	3408      	adds	r4, #8
 800466a:	e008      	b.n	800467e <_svfprintf_r+0x7a6>
 800466c:	aa1f      	add	r2, sp, #124	; 0x7c
 800466e:	4659      	mov	r1, fp
 8004670:	4648      	mov	r0, r9
 8004672:	f003 fb52 	bl	8007d1a <__ssprint_r>
 8004676:	2800      	cmp	r0, #0
 8004678:	f040 82a4 	bne.w	8004bc4 <_svfprintf_r+0xcec>
 800467c:	ac2c      	add	r4, sp, #176	; 0xb0
 800467e:	05eb      	lsls	r3, r5, #23
 8004680:	d414      	bmi.n	80046ac <_svfprintf_r+0x7d4>
 8004682:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004684:	e884 0500 	stmia.w	r4, {r8, sl}
 8004688:	4453      	add	r3, sl
 800468a:	9321      	str	r3, [sp, #132]	; 0x84
 800468c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800468e:	3301      	adds	r3, #1
 8004690:	2b07      	cmp	r3, #7
 8004692:	9320      	str	r3, [sp, #128]	; 0x80
 8004694:	f340 8245 	ble.w	8004b22 <_svfprintf_r+0xc4a>
 8004698:	aa1f      	add	r2, sp, #124	; 0x7c
 800469a:	4659      	mov	r1, fp
 800469c:	4648      	mov	r0, r9
 800469e:	f003 fb3c 	bl	8007d1a <__ssprint_r>
 80046a2:	2800      	cmp	r0, #0
 80046a4:	f040 828e 	bne.w	8004bc4 <_svfprintf_r+0xcec>
 80046a8:	ac2c      	add	r4, sp, #176	; 0xb0
 80046aa:	e23b      	b.n	8004b24 <_svfprintf_r+0xc4c>
 80046ac:	9b06      	ldr	r3, [sp, #24]
 80046ae:	2b65      	cmp	r3, #101	; 0x65
 80046b0:	f340 81ae 	ble.w	8004a10 <_svfprintf_r+0xb38>
 80046b4:	2200      	movs	r2, #0
 80046b6:	2300      	movs	r3, #0
 80046b8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80046ba:	990d      	ldr	r1, [sp, #52]	; 0x34
 80046bc:	f7fc f9dc 	bl	8000a78 <__aeabi_dcmpeq>
 80046c0:	2800      	cmp	r0, #0
 80046c2:	d05e      	beq.n	8004782 <_svfprintf_r+0x8aa>
 80046c4:	4b28      	ldr	r3, [pc, #160]	; (8004768 <_svfprintf_r+0x890>)
 80046c6:	6023      	str	r3, [r4, #0]
 80046c8:	2301      	movs	r3, #1
 80046ca:	6063      	str	r3, [r4, #4]
 80046cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80046ce:	3301      	adds	r3, #1
 80046d0:	9321      	str	r3, [sp, #132]	; 0x84
 80046d2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80046d4:	3301      	adds	r3, #1
 80046d6:	2b07      	cmp	r3, #7
 80046d8:	9320      	str	r3, [sp, #128]	; 0x80
 80046da:	dc01      	bgt.n	80046e0 <_svfprintf_r+0x808>
 80046dc:	3408      	adds	r4, #8
 80046de:	e008      	b.n	80046f2 <_svfprintf_r+0x81a>
 80046e0:	aa1f      	add	r2, sp, #124	; 0x7c
 80046e2:	4659      	mov	r1, fp
 80046e4:	4648      	mov	r0, r9
 80046e6:	f003 fb18 	bl	8007d1a <__ssprint_r>
 80046ea:	2800      	cmp	r0, #0
 80046ec:	f040 826a 	bne.w	8004bc4 <_svfprintf_r+0xcec>
 80046f0:	ac2c      	add	r4, sp, #176	; 0xb0
 80046f2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80046f4:	9a08      	ldr	r2, [sp, #32]
 80046f6:	4293      	cmp	r3, r2
 80046f8:	db02      	blt.n	8004700 <_svfprintf_r+0x828>
 80046fa:	07ee      	lsls	r6, r5, #31
 80046fc:	f140 8212 	bpl.w	8004b24 <_svfprintf_r+0xc4c>
 8004700:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004702:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004704:	6023      	str	r3, [r4, #0]
 8004706:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004708:	6063      	str	r3, [r4, #4]
 800470a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800470c:	4413      	add	r3, r2
 800470e:	9321      	str	r3, [sp, #132]	; 0x84
 8004710:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004712:	3301      	adds	r3, #1
 8004714:	2b07      	cmp	r3, #7
 8004716:	9320      	str	r3, [sp, #128]	; 0x80
 8004718:	dc01      	bgt.n	800471e <_svfprintf_r+0x846>
 800471a:	3408      	adds	r4, #8
 800471c:	e008      	b.n	8004730 <_svfprintf_r+0x858>
 800471e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004720:	4659      	mov	r1, fp
 8004722:	4648      	mov	r0, r9
 8004724:	f003 faf9 	bl	8007d1a <__ssprint_r>
 8004728:	2800      	cmp	r0, #0
 800472a:	f040 824b 	bne.w	8004bc4 <_svfprintf_r+0xcec>
 800472e:	ac2c      	add	r4, sp, #176	; 0xb0
 8004730:	9b08      	ldr	r3, [sp, #32]
 8004732:	1e5e      	subs	r6, r3, #1
 8004734:	2e00      	cmp	r6, #0
 8004736:	f340 81f5 	ble.w	8004b24 <_svfprintf_r+0xc4c>
 800473a:	4f0a      	ldr	r7, [pc, #40]	; (8004764 <_svfprintf_r+0x88c>)
 800473c:	f04f 0810 	mov.w	r8, #16
 8004740:	2e10      	cmp	r6, #16
 8004742:	f340 8159 	ble.w	80049f8 <_svfprintf_r+0xb20>
 8004746:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004748:	e884 0180 	stmia.w	r4, {r7, r8}
 800474c:	3310      	adds	r3, #16
 800474e:	9321      	str	r3, [sp, #132]	; 0x84
 8004750:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004752:	3301      	adds	r3, #1
 8004754:	2b07      	cmp	r3, #7
 8004756:	9320      	str	r3, [sp, #128]	; 0x80
 8004758:	dc08      	bgt.n	800476c <_svfprintf_r+0x894>
 800475a:	3408      	adds	r4, #8
 800475c:	e00f      	b.n	800477e <_svfprintf_r+0x8a6>
 800475e:	bf00      	nop
 8004760:	08008a28 	.word	0x08008a28
 8004764:	080089e4 	.word	0x080089e4
 8004768:	08008a26 	.word	0x08008a26
 800476c:	aa1f      	add	r2, sp, #124	; 0x7c
 800476e:	4659      	mov	r1, fp
 8004770:	4648      	mov	r0, r9
 8004772:	f003 fad2 	bl	8007d1a <__ssprint_r>
 8004776:	2800      	cmp	r0, #0
 8004778:	f040 8224 	bne.w	8004bc4 <_svfprintf_r+0xcec>
 800477c:	ac2c      	add	r4, sp, #176	; 0xb0
 800477e:	3e10      	subs	r6, #16
 8004780:	e7de      	b.n	8004740 <_svfprintf_r+0x868>
 8004782:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004784:	2b00      	cmp	r3, #0
 8004786:	dc7c      	bgt.n	8004882 <_svfprintf_r+0x9aa>
 8004788:	4b9f      	ldr	r3, [pc, #636]	; (8004a08 <_svfprintf_r+0xb30>)
 800478a:	6023      	str	r3, [r4, #0]
 800478c:	2301      	movs	r3, #1
 800478e:	6063      	str	r3, [r4, #4]
 8004790:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004792:	3301      	adds	r3, #1
 8004794:	9321      	str	r3, [sp, #132]	; 0x84
 8004796:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004798:	3301      	adds	r3, #1
 800479a:	2b07      	cmp	r3, #7
 800479c:	9320      	str	r3, [sp, #128]	; 0x80
 800479e:	dc01      	bgt.n	80047a4 <_svfprintf_r+0x8cc>
 80047a0:	3408      	adds	r4, #8
 80047a2:	e008      	b.n	80047b6 <_svfprintf_r+0x8de>
 80047a4:	aa1f      	add	r2, sp, #124	; 0x7c
 80047a6:	4659      	mov	r1, fp
 80047a8:	4648      	mov	r0, r9
 80047aa:	f003 fab6 	bl	8007d1a <__ssprint_r>
 80047ae:	2800      	cmp	r0, #0
 80047b0:	f040 8208 	bne.w	8004bc4 <_svfprintf_r+0xcec>
 80047b4:	ac2c      	add	r4, sp, #176	; 0xb0
 80047b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80047b8:	b923      	cbnz	r3, 80047c4 <_svfprintf_r+0x8ec>
 80047ba:	9b08      	ldr	r3, [sp, #32]
 80047bc:	b913      	cbnz	r3, 80047c4 <_svfprintf_r+0x8ec>
 80047be:	07e8      	lsls	r0, r5, #31
 80047c0:	f140 81b0 	bpl.w	8004b24 <_svfprintf_r+0xc4c>
 80047c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80047c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80047c8:	6023      	str	r3, [r4, #0]
 80047ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047cc:	6063      	str	r3, [r4, #4]
 80047ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80047d0:	4413      	add	r3, r2
 80047d2:	9321      	str	r3, [sp, #132]	; 0x84
 80047d4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80047d6:	3301      	adds	r3, #1
 80047d8:	2b07      	cmp	r3, #7
 80047da:	9320      	str	r3, [sp, #128]	; 0x80
 80047dc:	dc02      	bgt.n	80047e4 <_svfprintf_r+0x90c>
 80047de:	f104 0308 	add.w	r3, r4, #8
 80047e2:	e008      	b.n	80047f6 <_svfprintf_r+0x91e>
 80047e4:	aa1f      	add	r2, sp, #124	; 0x7c
 80047e6:	4659      	mov	r1, fp
 80047e8:	4648      	mov	r0, r9
 80047ea:	f003 fa96 	bl	8007d1a <__ssprint_r>
 80047ee:	2800      	cmp	r0, #0
 80047f0:	f040 81e8 	bne.w	8004bc4 <_svfprintf_r+0xcec>
 80047f4:	ab2c      	add	r3, sp, #176	; 0xb0
 80047f6:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80047f8:	4276      	negs	r6, r6
 80047fa:	2e00      	cmp	r6, #0
 80047fc:	dd30      	ble.n	8004860 <_svfprintf_r+0x988>
 80047fe:	4f83      	ldr	r7, [pc, #524]	; (8004a0c <_svfprintf_r+0xb34>)
 8004800:	2410      	movs	r4, #16
 8004802:	2e10      	cmp	r6, #16
 8004804:	dd16      	ble.n	8004834 <_svfprintf_r+0x95c>
 8004806:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004808:	601f      	str	r7, [r3, #0]
 800480a:	3210      	adds	r2, #16
 800480c:	9221      	str	r2, [sp, #132]	; 0x84
 800480e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004810:	605c      	str	r4, [r3, #4]
 8004812:	3201      	adds	r2, #1
 8004814:	2a07      	cmp	r2, #7
 8004816:	9220      	str	r2, [sp, #128]	; 0x80
 8004818:	dc01      	bgt.n	800481e <_svfprintf_r+0x946>
 800481a:	3308      	adds	r3, #8
 800481c:	e008      	b.n	8004830 <_svfprintf_r+0x958>
 800481e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004820:	4659      	mov	r1, fp
 8004822:	4648      	mov	r0, r9
 8004824:	f003 fa79 	bl	8007d1a <__ssprint_r>
 8004828:	2800      	cmp	r0, #0
 800482a:	f040 81cb 	bne.w	8004bc4 <_svfprintf_r+0xcec>
 800482e:	ab2c      	add	r3, sp, #176	; 0xb0
 8004830:	3e10      	subs	r6, #16
 8004832:	e7e6      	b.n	8004802 <_svfprintf_r+0x92a>
 8004834:	4a75      	ldr	r2, [pc, #468]	; (8004a0c <_svfprintf_r+0xb34>)
 8004836:	e883 0044 	stmia.w	r3, {r2, r6}
 800483a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800483c:	4416      	add	r6, r2
 800483e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004840:	9621      	str	r6, [sp, #132]	; 0x84
 8004842:	3201      	adds	r2, #1
 8004844:	2a07      	cmp	r2, #7
 8004846:	9220      	str	r2, [sp, #128]	; 0x80
 8004848:	dc01      	bgt.n	800484e <_svfprintf_r+0x976>
 800484a:	3308      	adds	r3, #8
 800484c:	e008      	b.n	8004860 <_svfprintf_r+0x988>
 800484e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004850:	4659      	mov	r1, fp
 8004852:	4648      	mov	r0, r9
 8004854:	f003 fa61 	bl	8007d1a <__ssprint_r>
 8004858:	2800      	cmp	r0, #0
 800485a:	f040 81b3 	bne.w	8004bc4 <_svfprintf_r+0xcec>
 800485e:	ab2c      	add	r3, sp, #176	; 0xb0
 8004860:	9a08      	ldr	r2, [sp, #32]
 8004862:	9908      	ldr	r1, [sp, #32]
 8004864:	605a      	str	r2, [r3, #4]
 8004866:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004868:	f8c3 8000 	str.w	r8, [r3]
 800486c:	440a      	add	r2, r1
 800486e:	9221      	str	r2, [sp, #132]	; 0x84
 8004870:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004872:	3201      	adds	r2, #1
 8004874:	2a07      	cmp	r2, #7
 8004876:	9220      	str	r2, [sp, #128]	; 0x80
 8004878:	f73f af0e 	bgt.w	8004698 <_svfprintf_r+0x7c0>
 800487c:	f103 0408 	add.w	r4, r3, #8
 8004880:	e150      	b.n	8004b24 <_svfprintf_r+0xc4c>
 8004882:	9b08      	ldr	r3, [sp, #32]
 8004884:	42bb      	cmp	r3, r7
 8004886:	bfa8      	it	ge
 8004888:	463b      	movge	r3, r7
 800488a:	2b00      	cmp	r3, #0
 800488c:	461e      	mov	r6, r3
 800488e:	dd15      	ble.n	80048bc <_svfprintf_r+0x9e4>
 8004890:	6063      	str	r3, [r4, #4]
 8004892:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004894:	f8c4 8000 	str.w	r8, [r4]
 8004898:	4433      	add	r3, r6
 800489a:	9321      	str	r3, [sp, #132]	; 0x84
 800489c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800489e:	3301      	adds	r3, #1
 80048a0:	2b07      	cmp	r3, #7
 80048a2:	9320      	str	r3, [sp, #128]	; 0x80
 80048a4:	dc01      	bgt.n	80048aa <_svfprintf_r+0x9d2>
 80048a6:	3408      	adds	r4, #8
 80048a8:	e008      	b.n	80048bc <_svfprintf_r+0x9e4>
 80048aa:	aa1f      	add	r2, sp, #124	; 0x7c
 80048ac:	4659      	mov	r1, fp
 80048ae:	4648      	mov	r0, r9
 80048b0:	f003 fa33 	bl	8007d1a <__ssprint_r>
 80048b4:	2800      	cmp	r0, #0
 80048b6:	f040 8185 	bne.w	8004bc4 <_svfprintf_r+0xcec>
 80048ba:	ac2c      	add	r4, sp, #176	; 0xb0
 80048bc:	2e00      	cmp	r6, #0
 80048be:	bfb4      	ite	lt
 80048c0:	463e      	movlt	r6, r7
 80048c2:	1bbe      	subge	r6, r7, r6
 80048c4:	2e00      	cmp	r6, #0
 80048c6:	dd30      	ble.n	800492a <_svfprintf_r+0xa52>
 80048c8:	f04f 0a10 	mov.w	sl, #16
 80048cc:	4b4f      	ldr	r3, [pc, #316]	; (8004a0c <_svfprintf_r+0xb34>)
 80048ce:	2e10      	cmp	r6, #16
 80048d0:	6023      	str	r3, [r4, #0]
 80048d2:	dd16      	ble.n	8004902 <_svfprintf_r+0xa2a>
 80048d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80048d6:	f8c4 a004 	str.w	sl, [r4, #4]
 80048da:	3310      	adds	r3, #16
 80048dc:	9321      	str	r3, [sp, #132]	; 0x84
 80048de:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80048e0:	3301      	adds	r3, #1
 80048e2:	2b07      	cmp	r3, #7
 80048e4:	9320      	str	r3, [sp, #128]	; 0x80
 80048e6:	dc01      	bgt.n	80048ec <_svfprintf_r+0xa14>
 80048e8:	3408      	adds	r4, #8
 80048ea:	e008      	b.n	80048fe <_svfprintf_r+0xa26>
 80048ec:	aa1f      	add	r2, sp, #124	; 0x7c
 80048ee:	4659      	mov	r1, fp
 80048f0:	4648      	mov	r0, r9
 80048f2:	f003 fa12 	bl	8007d1a <__ssprint_r>
 80048f6:	2800      	cmp	r0, #0
 80048f8:	f040 8164 	bne.w	8004bc4 <_svfprintf_r+0xcec>
 80048fc:	ac2c      	add	r4, sp, #176	; 0xb0
 80048fe:	3e10      	subs	r6, #16
 8004900:	e7e4      	b.n	80048cc <_svfprintf_r+0x9f4>
 8004902:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004904:	6066      	str	r6, [r4, #4]
 8004906:	441e      	add	r6, r3
 8004908:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800490a:	9621      	str	r6, [sp, #132]	; 0x84
 800490c:	3301      	adds	r3, #1
 800490e:	2b07      	cmp	r3, #7
 8004910:	9320      	str	r3, [sp, #128]	; 0x80
 8004912:	dc01      	bgt.n	8004918 <_svfprintf_r+0xa40>
 8004914:	3408      	adds	r4, #8
 8004916:	e008      	b.n	800492a <_svfprintf_r+0xa52>
 8004918:	aa1f      	add	r2, sp, #124	; 0x7c
 800491a:	4659      	mov	r1, fp
 800491c:	4648      	mov	r0, r9
 800491e:	f003 f9fc 	bl	8007d1a <__ssprint_r>
 8004922:	2800      	cmp	r0, #0
 8004924:	f040 814e 	bne.w	8004bc4 <_svfprintf_r+0xcec>
 8004928:	ac2c      	add	r4, sp, #176	; 0xb0
 800492a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800492c:	9a08      	ldr	r2, [sp, #32]
 800492e:	4447      	add	r7, r8
 8004930:	4293      	cmp	r3, r2
 8004932:	db01      	blt.n	8004938 <_svfprintf_r+0xa60>
 8004934:	07e9      	lsls	r1, r5, #31
 8004936:	d517      	bpl.n	8004968 <_svfprintf_r+0xa90>
 8004938:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800493a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800493c:	6023      	str	r3, [r4, #0]
 800493e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004940:	6063      	str	r3, [r4, #4]
 8004942:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004944:	4413      	add	r3, r2
 8004946:	9321      	str	r3, [sp, #132]	; 0x84
 8004948:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800494a:	3301      	adds	r3, #1
 800494c:	2b07      	cmp	r3, #7
 800494e:	9320      	str	r3, [sp, #128]	; 0x80
 8004950:	dc01      	bgt.n	8004956 <_svfprintf_r+0xa7e>
 8004952:	3408      	adds	r4, #8
 8004954:	e008      	b.n	8004968 <_svfprintf_r+0xa90>
 8004956:	aa1f      	add	r2, sp, #124	; 0x7c
 8004958:	4659      	mov	r1, fp
 800495a:	4648      	mov	r0, r9
 800495c:	f003 f9dd 	bl	8007d1a <__ssprint_r>
 8004960:	2800      	cmp	r0, #0
 8004962:	f040 812f 	bne.w	8004bc4 <_svfprintf_r+0xcec>
 8004966:	ac2c      	add	r4, sp, #176	; 0xb0
 8004968:	9b08      	ldr	r3, [sp, #32]
 800496a:	9a08      	ldr	r2, [sp, #32]
 800496c:	eb08 0603 	add.w	r6, r8, r3
 8004970:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004972:	1bf6      	subs	r6, r6, r7
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	429e      	cmp	r6, r3
 8004978:	bfa8      	it	ge
 800497a:	461e      	movge	r6, r3
 800497c:	2e00      	cmp	r6, #0
 800497e:	dd14      	ble.n	80049aa <_svfprintf_r+0xad2>
 8004980:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004982:	6027      	str	r7, [r4, #0]
 8004984:	4433      	add	r3, r6
 8004986:	9321      	str	r3, [sp, #132]	; 0x84
 8004988:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800498a:	6066      	str	r6, [r4, #4]
 800498c:	3301      	adds	r3, #1
 800498e:	2b07      	cmp	r3, #7
 8004990:	9320      	str	r3, [sp, #128]	; 0x80
 8004992:	dc01      	bgt.n	8004998 <_svfprintf_r+0xac0>
 8004994:	3408      	adds	r4, #8
 8004996:	e008      	b.n	80049aa <_svfprintf_r+0xad2>
 8004998:	aa1f      	add	r2, sp, #124	; 0x7c
 800499a:	4659      	mov	r1, fp
 800499c:	4648      	mov	r0, r9
 800499e:	f003 f9bc 	bl	8007d1a <__ssprint_r>
 80049a2:	2800      	cmp	r0, #0
 80049a4:	f040 810e 	bne.w	8004bc4 <_svfprintf_r+0xcec>
 80049a8:	ac2c      	add	r4, sp, #176	; 0xb0
 80049aa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80049ac:	9a08      	ldr	r2, [sp, #32]
 80049ae:	2e00      	cmp	r6, #0
 80049b0:	eba2 0303 	sub.w	r3, r2, r3
 80049b4:	bfb4      	ite	lt
 80049b6:	461e      	movlt	r6, r3
 80049b8:	1b9e      	subge	r6, r3, r6
 80049ba:	2e00      	cmp	r6, #0
 80049bc:	f340 80b2 	ble.w	8004b24 <_svfprintf_r+0xc4c>
 80049c0:	4f12      	ldr	r7, [pc, #72]	; (8004a0c <_svfprintf_r+0xb34>)
 80049c2:	f04f 0810 	mov.w	r8, #16
 80049c6:	2e10      	cmp	r6, #16
 80049c8:	dd16      	ble.n	80049f8 <_svfprintf_r+0xb20>
 80049ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80049cc:	e884 0180 	stmia.w	r4, {r7, r8}
 80049d0:	3310      	adds	r3, #16
 80049d2:	9321      	str	r3, [sp, #132]	; 0x84
 80049d4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80049d6:	3301      	adds	r3, #1
 80049d8:	2b07      	cmp	r3, #7
 80049da:	9320      	str	r3, [sp, #128]	; 0x80
 80049dc:	dc01      	bgt.n	80049e2 <_svfprintf_r+0xb0a>
 80049de:	3408      	adds	r4, #8
 80049e0:	e008      	b.n	80049f4 <_svfprintf_r+0xb1c>
 80049e2:	aa1f      	add	r2, sp, #124	; 0x7c
 80049e4:	4659      	mov	r1, fp
 80049e6:	4648      	mov	r0, r9
 80049e8:	f003 f997 	bl	8007d1a <__ssprint_r>
 80049ec:	2800      	cmp	r0, #0
 80049ee:	f040 80e9 	bne.w	8004bc4 <_svfprintf_r+0xcec>
 80049f2:	ac2c      	add	r4, sp, #176	; 0xb0
 80049f4:	3e10      	subs	r6, #16
 80049f6:	e7e6      	b.n	80049c6 <_svfprintf_r+0xaee>
 80049f8:	4b04      	ldr	r3, [pc, #16]	; (8004a0c <_svfprintf_r+0xb34>)
 80049fa:	e884 0048 	stmia.w	r4, {r3, r6}
 80049fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004a00:	441e      	add	r6, r3
 8004a02:	9621      	str	r6, [sp, #132]	; 0x84
 8004a04:	e642      	b.n	800468c <_svfprintf_r+0x7b4>
 8004a06:	bf00      	nop
 8004a08:	08008a26 	.word	0x08008a26
 8004a0c:	080089e4 	.word	0x080089e4
 8004a10:	9b08      	ldr	r3, [sp, #32]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	dc01      	bgt.n	8004a1a <_svfprintf_r+0xb42>
 8004a16:	07ea      	lsls	r2, r5, #31
 8004a18:	d573      	bpl.n	8004b02 <_svfprintf_r+0xc2a>
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	6063      	str	r3, [r4, #4]
 8004a1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004a20:	f8c4 8000 	str.w	r8, [r4]
 8004a24:	3301      	adds	r3, #1
 8004a26:	9321      	str	r3, [sp, #132]	; 0x84
 8004a28:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	2b07      	cmp	r3, #7
 8004a2e:	9320      	str	r3, [sp, #128]	; 0x80
 8004a30:	dc01      	bgt.n	8004a36 <_svfprintf_r+0xb5e>
 8004a32:	3408      	adds	r4, #8
 8004a34:	e008      	b.n	8004a48 <_svfprintf_r+0xb70>
 8004a36:	aa1f      	add	r2, sp, #124	; 0x7c
 8004a38:	4659      	mov	r1, fp
 8004a3a:	4648      	mov	r0, r9
 8004a3c:	f003 f96d 	bl	8007d1a <__ssprint_r>
 8004a40:	2800      	cmp	r0, #0
 8004a42:	f040 80bf 	bne.w	8004bc4 <_svfprintf_r+0xcec>
 8004a46:	ac2c      	add	r4, sp, #176	; 0xb0
 8004a48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004a4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a4c:	6023      	str	r3, [r4, #0]
 8004a4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a50:	6063      	str	r3, [r4, #4]
 8004a52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004a54:	4413      	add	r3, r2
 8004a56:	9321      	str	r3, [sp, #132]	; 0x84
 8004a58:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	2b07      	cmp	r3, #7
 8004a5e:	9320      	str	r3, [sp, #128]	; 0x80
 8004a60:	dc01      	bgt.n	8004a66 <_svfprintf_r+0xb8e>
 8004a62:	3408      	adds	r4, #8
 8004a64:	e008      	b.n	8004a78 <_svfprintf_r+0xba0>
 8004a66:	aa1f      	add	r2, sp, #124	; 0x7c
 8004a68:	4659      	mov	r1, fp
 8004a6a:	4648      	mov	r0, r9
 8004a6c:	f003 f955 	bl	8007d1a <__ssprint_r>
 8004a70:	2800      	cmp	r0, #0
 8004a72:	f040 80a7 	bne.w	8004bc4 <_svfprintf_r+0xcec>
 8004a76:	ac2c      	add	r4, sp, #176	; 0xb0
 8004a78:	2300      	movs	r3, #0
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004a7e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004a80:	f7fb fffa 	bl	8000a78 <__aeabi_dcmpeq>
 8004a84:	9b08      	ldr	r3, [sp, #32]
 8004a86:	1e5e      	subs	r6, r3, #1
 8004a88:	b9b8      	cbnz	r0, 8004aba <_svfprintf_r+0xbe2>
 8004a8a:	f108 0301 	add.w	r3, r8, #1
 8004a8e:	e884 0048 	stmia.w	r4, {r3, r6}
 8004a92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004a94:	9a08      	ldr	r2, [sp, #32]
 8004a96:	3b01      	subs	r3, #1
 8004a98:	4413      	add	r3, r2
 8004a9a:	9321      	str	r3, [sp, #132]	; 0x84
 8004a9c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	2b07      	cmp	r3, #7
 8004aa2:	9320      	str	r3, [sp, #128]	; 0x80
 8004aa4:	dd34      	ble.n	8004b10 <_svfprintf_r+0xc38>
 8004aa6:	aa1f      	add	r2, sp, #124	; 0x7c
 8004aa8:	4659      	mov	r1, fp
 8004aaa:	4648      	mov	r0, r9
 8004aac:	f003 f935 	bl	8007d1a <__ssprint_r>
 8004ab0:	2800      	cmp	r0, #0
 8004ab2:	f040 8087 	bne.w	8004bc4 <_svfprintf_r+0xcec>
 8004ab6:	ac2c      	add	r4, sp, #176	; 0xb0
 8004ab8:	e02b      	b.n	8004b12 <_svfprintf_r+0xc3a>
 8004aba:	2e00      	cmp	r6, #0
 8004abc:	dd29      	ble.n	8004b12 <_svfprintf_r+0xc3a>
 8004abe:	4f8f      	ldr	r7, [pc, #572]	; (8004cfc <_svfprintf_r+0xe24>)
 8004ac0:	f04f 0810 	mov.w	r8, #16
 8004ac4:	2e10      	cmp	r6, #16
 8004ac6:	dd15      	ble.n	8004af4 <_svfprintf_r+0xc1c>
 8004ac8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004aca:	e884 0180 	stmia.w	r4, {r7, r8}
 8004ace:	3310      	adds	r3, #16
 8004ad0:	9321      	str	r3, [sp, #132]	; 0x84
 8004ad2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004ad4:	3301      	adds	r3, #1
 8004ad6:	2b07      	cmp	r3, #7
 8004ad8:	9320      	str	r3, [sp, #128]	; 0x80
 8004ada:	dc01      	bgt.n	8004ae0 <_svfprintf_r+0xc08>
 8004adc:	3408      	adds	r4, #8
 8004ade:	e007      	b.n	8004af0 <_svfprintf_r+0xc18>
 8004ae0:	aa1f      	add	r2, sp, #124	; 0x7c
 8004ae2:	4659      	mov	r1, fp
 8004ae4:	4648      	mov	r0, r9
 8004ae6:	f003 f918 	bl	8007d1a <__ssprint_r>
 8004aea:	2800      	cmp	r0, #0
 8004aec:	d16a      	bne.n	8004bc4 <_svfprintf_r+0xcec>
 8004aee:	ac2c      	add	r4, sp, #176	; 0xb0
 8004af0:	3e10      	subs	r6, #16
 8004af2:	e7e7      	b.n	8004ac4 <_svfprintf_r+0xbec>
 8004af4:	4b81      	ldr	r3, [pc, #516]	; (8004cfc <_svfprintf_r+0xe24>)
 8004af6:	e884 0048 	stmia.w	r4, {r3, r6}
 8004afa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004afc:	441e      	add	r6, r3
 8004afe:	9621      	str	r6, [sp, #132]	; 0x84
 8004b00:	e7cc      	b.n	8004a9c <_svfprintf_r+0xbc4>
 8004b02:	2301      	movs	r3, #1
 8004b04:	6063      	str	r3, [r4, #4]
 8004b06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b08:	f8c4 8000 	str.w	r8, [r4]
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	e7c4      	b.n	8004a9a <_svfprintf_r+0xbc2>
 8004b10:	3408      	adds	r4, #8
 8004b12:	ab1b      	add	r3, sp, #108	; 0x6c
 8004b14:	6023      	str	r3, [r4, #0]
 8004b16:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004b18:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004b1a:	6063      	str	r3, [r4, #4]
 8004b1c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b1e:	4413      	add	r3, r2
 8004b20:	e5b3      	b.n	800468a <_svfprintf_r+0x7b2>
 8004b22:	3408      	adds	r4, #8
 8004b24:	076b      	lsls	r3, r5, #29
 8004b26:	d40b      	bmi.n	8004b40 <_svfprintf_r+0xc68>
 8004b28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004b2c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004b2e:	428a      	cmp	r2, r1
 8004b30:	bfac      	ite	ge
 8004b32:	189b      	addge	r3, r3, r2
 8004b34:	185b      	addlt	r3, r3, r1
 8004b36:	930e      	str	r3, [sp, #56]	; 0x38
 8004b38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d035      	beq.n	8004baa <_svfprintf_r+0xcd2>
 8004b3e:	e02e      	b.n	8004b9e <_svfprintf_r+0xcc6>
 8004b40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b42:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004b44:	1a9d      	subs	r5, r3, r2
 8004b46:	2d00      	cmp	r5, #0
 8004b48:	ddee      	ble.n	8004b28 <_svfprintf_r+0xc50>
 8004b4a:	2610      	movs	r6, #16
 8004b4c:	4b6c      	ldr	r3, [pc, #432]	; (8004d00 <_svfprintf_r+0xe28>)
 8004b4e:	2d10      	cmp	r5, #16
 8004b50:	6023      	str	r3, [r4, #0]
 8004b52:	dd13      	ble.n	8004b7c <_svfprintf_r+0xca4>
 8004b54:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b56:	6066      	str	r6, [r4, #4]
 8004b58:	3310      	adds	r3, #16
 8004b5a:	9321      	str	r3, [sp, #132]	; 0x84
 8004b5c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004b5e:	3301      	adds	r3, #1
 8004b60:	2b07      	cmp	r3, #7
 8004b62:	9320      	str	r3, [sp, #128]	; 0x80
 8004b64:	dc01      	bgt.n	8004b6a <_svfprintf_r+0xc92>
 8004b66:	3408      	adds	r4, #8
 8004b68:	e006      	b.n	8004b78 <_svfprintf_r+0xca0>
 8004b6a:	aa1f      	add	r2, sp, #124	; 0x7c
 8004b6c:	4659      	mov	r1, fp
 8004b6e:	4648      	mov	r0, r9
 8004b70:	f003 f8d3 	bl	8007d1a <__ssprint_r>
 8004b74:	bb30      	cbnz	r0, 8004bc4 <_svfprintf_r+0xcec>
 8004b76:	ac2c      	add	r4, sp, #176	; 0xb0
 8004b78:	3d10      	subs	r5, #16
 8004b7a:	e7e7      	b.n	8004b4c <_svfprintf_r+0xc74>
 8004b7c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b7e:	6065      	str	r5, [r4, #4]
 8004b80:	441d      	add	r5, r3
 8004b82:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004b84:	9521      	str	r5, [sp, #132]	; 0x84
 8004b86:	3301      	adds	r3, #1
 8004b88:	2b07      	cmp	r3, #7
 8004b8a:	9320      	str	r3, [sp, #128]	; 0x80
 8004b8c:	ddcc      	ble.n	8004b28 <_svfprintf_r+0xc50>
 8004b8e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004b90:	4659      	mov	r1, fp
 8004b92:	4648      	mov	r0, r9
 8004b94:	f003 f8c1 	bl	8007d1a <__ssprint_r>
 8004b98:	2800      	cmp	r0, #0
 8004b9a:	d0c5      	beq.n	8004b28 <_svfprintf_r+0xc50>
 8004b9c:	e012      	b.n	8004bc4 <_svfprintf_r+0xcec>
 8004b9e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004ba0:	4659      	mov	r1, fp
 8004ba2:	4648      	mov	r0, r9
 8004ba4:	f003 f8b9 	bl	8007d1a <__ssprint_r>
 8004ba8:	b960      	cbnz	r0, 8004bc4 <_svfprintf_r+0xcec>
 8004baa:	2300      	movs	r3, #0
 8004bac:	9320      	str	r3, [sp, #128]	; 0x80
 8004bae:	9f07      	ldr	r7, [sp, #28]
 8004bb0:	ac2c      	add	r4, sp, #176	; 0xb0
 8004bb2:	f7ff b9c5 	b.w	8003f40 <_svfprintf_r+0x68>
 8004bb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004bb8:	b123      	cbz	r3, 8004bc4 <_svfprintf_r+0xcec>
 8004bba:	aa1f      	add	r2, sp, #124	; 0x7c
 8004bbc:	4659      	mov	r1, fp
 8004bbe:	4648      	mov	r0, r9
 8004bc0:	f003 f8ab 	bl	8007d1a <__ssprint_r>
 8004bc4:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8004bc8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004bcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004bce:	bf18      	it	ne
 8004bd0:	f04f 33ff 	movne.w	r3, #4294967295
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	e130      	b.n	8004e3a <_svfprintf_r+0xf62>
 8004bd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004bda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004bdc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004bde:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004be0:	f7fb ff7c 	bl	8000adc <__aeabi_dcmpun>
 8004be4:	b160      	cbz	r0, 8004c00 <_svfprintf_r+0xd28>
 8004be6:	4b47      	ldr	r3, [pc, #284]	; (8004d04 <_svfprintf_r+0xe2c>)
 8004be8:	4a47      	ldr	r2, [pc, #284]	; (8004d08 <_svfprintf_r+0xe30>)
 8004bea:	9906      	ldr	r1, [sp, #24]
 8004bec:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8004bf0:	2947      	cmp	r1, #71	; 0x47
 8004bf2:	bfcc      	ite	gt
 8004bf4:	4690      	movgt	r8, r2
 8004bf6:	4698      	movle	r8, r3
 8004bf8:	f04f 0a03 	mov.w	sl, #3
 8004bfc:	2600      	movs	r6, #0
 8004bfe:	e449      	b.n	8004494 <_svfprintf_r+0x5bc>
 8004c00:	f1ba 3fff 	cmp.w	sl, #4294967295
 8004c04:	d00a      	beq.n	8004c1c <_svfprintf_r+0xd44>
 8004c06:	9b06      	ldr	r3, [sp, #24]
 8004c08:	f023 0320 	bic.w	r3, r3, #32
 8004c0c:	2b47      	cmp	r3, #71	; 0x47
 8004c0e:	d107      	bne.n	8004c20 <_svfprintf_r+0xd48>
 8004c10:	f1ba 0f00 	cmp.w	sl, #0
 8004c14:	bf08      	it	eq
 8004c16:	f04f 0a01 	moveq.w	sl, #1
 8004c1a:	e001      	b.n	8004c20 <_svfprintf_r+0xd48>
 8004c1c:	f04f 0a06 	mov.w	sl, #6
 8004c20:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8004c24:	9315      	str	r3, [sp, #84]	; 0x54
 8004c26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c28:	1e1f      	subs	r7, r3, #0
 8004c2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004c2c:	bfa8      	it	ge
 8004c2e:	9710      	strge	r7, [sp, #64]	; 0x40
 8004c30:	930f      	str	r3, [sp, #60]	; 0x3c
 8004c32:	bfbd      	ittte	lt
 8004c34:	463b      	movlt	r3, r7
 8004c36:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004c3a:	9310      	strlt	r3, [sp, #64]	; 0x40
 8004c3c:	2300      	movge	r3, #0
 8004c3e:	bfb8      	it	lt
 8004c40:	232d      	movlt	r3, #45	; 0x2d
 8004c42:	9314      	str	r3, [sp, #80]	; 0x50
 8004c44:	9b06      	ldr	r3, [sp, #24]
 8004c46:	f023 0720 	bic.w	r7, r3, #32
 8004c4a:	2f46      	cmp	r7, #70	; 0x46
 8004c4c:	d004      	beq.n	8004c58 <_svfprintf_r+0xd80>
 8004c4e:	2f45      	cmp	r7, #69	; 0x45
 8004c50:	d105      	bne.n	8004c5e <_svfprintf_r+0xd86>
 8004c52:	f10a 0601 	add.w	r6, sl, #1
 8004c56:	e003      	b.n	8004c60 <_svfprintf_r+0xd88>
 8004c58:	4656      	mov	r6, sl
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e001      	b.n	8004c62 <_svfprintf_r+0xd8a>
 8004c5e:	4656      	mov	r6, sl
 8004c60:	2302      	movs	r3, #2
 8004c62:	aa1d      	add	r2, sp, #116	; 0x74
 8004c64:	9204      	str	r2, [sp, #16]
 8004c66:	aa1a      	add	r2, sp, #104	; 0x68
 8004c68:	9203      	str	r2, [sp, #12]
 8004c6a:	aa19      	add	r2, sp, #100	; 0x64
 8004c6c:	9202      	str	r2, [sp, #8]
 8004c6e:	e88d 0048 	stmia.w	sp, {r3, r6}
 8004c72:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004c74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004c76:	4648      	mov	r0, r9
 8004c78:	f001 fa06 	bl	8006088 <_dtoa_r>
 8004c7c:	2f47      	cmp	r7, #71	; 0x47
 8004c7e:	4680      	mov	r8, r0
 8004c80:	d102      	bne.n	8004c88 <_svfprintf_r+0xdb0>
 8004c82:	07eb      	lsls	r3, r5, #31
 8004c84:	f140 80cf 	bpl.w	8004e26 <_svfprintf_r+0xf4e>
 8004c88:	eb08 0306 	add.w	r3, r8, r6
 8004c8c:	2f46      	cmp	r7, #70	; 0x46
 8004c8e:	9308      	str	r3, [sp, #32]
 8004c90:	d111      	bne.n	8004cb6 <_svfprintf_r+0xdde>
 8004c92:	f898 3000 	ldrb.w	r3, [r8]
 8004c96:	2b30      	cmp	r3, #48	; 0x30
 8004c98:	d109      	bne.n	8004cae <_svfprintf_r+0xdd6>
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004ca0:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004ca2:	f7fb fee9 	bl	8000a78 <__aeabi_dcmpeq>
 8004ca6:	b910      	cbnz	r0, 8004cae <_svfprintf_r+0xdd6>
 8004ca8:	f1c6 0601 	rsb	r6, r6, #1
 8004cac:	9619      	str	r6, [sp, #100]	; 0x64
 8004cae:	9a08      	ldr	r2, [sp, #32]
 8004cb0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004cb2:	441a      	add	r2, r3
 8004cb4:	9208      	str	r2, [sp, #32]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	2300      	movs	r3, #0
 8004cba:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004cbc:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004cbe:	f7fb fedb 	bl	8000a78 <__aeabi_dcmpeq>
 8004cc2:	b908      	cbnz	r0, 8004cc8 <_svfprintf_r+0xdf0>
 8004cc4:	2230      	movs	r2, #48	; 0x30
 8004cc6:	e002      	b.n	8004cce <_svfprintf_r+0xdf6>
 8004cc8:	9b08      	ldr	r3, [sp, #32]
 8004cca:	931d      	str	r3, [sp, #116]	; 0x74
 8004ccc:	e007      	b.n	8004cde <_svfprintf_r+0xe06>
 8004cce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004cd0:	9908      	ldr	r1, [sp, #32]
 8004cd2:	4299      	cmp	r1, r3
 8004cd4:	d903      	bls.n	8004cde <_svfprintf_r+0xe06>
 8004cd6:	1c59      	adds	r1, r3, #1
 8004cd8:	911d      	str	r1, [sp, #116]	; 0x74
 8004cda:	701a      	strb	r2, [r3, #0]
 8004cdc:	e7f7      	b.n	8004cce <_svfprintf_r+0xdf6>
 8004cde:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004ce0:	2f47      	cmp	r7, #71	; 0x47
 8004ce2:	ebc8 0303 	rsb	r3, r8, r3
 8004ce6:	9308      	str	r3, [sp, #32]
 8004ce8:	d110      	bne.n	8004d0c <_svfprintf_r+0xe34>
 8004cea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004cec:	1cdf      	adds	r7, r3, #3
 8004cee:	db01      	blt.n	8004cf4 <_svfprintf_r+0xe1c>
 8004cf0:	459a      	cmp	sl, r3
 8004cf2:	da6a      	bge.n	8004dca <_svfprintf_r+0xef2>
 8004cf4:	9b06      	ldr	r3, [sp, #24]
 8004cf6:	3b02      	subs	r3, #2
 8004cf8:	9306      	str	r3, [sp, #24]
 8004cfa:	e00a      	b.n	8004d12 <_svfprintf_r+0xe3a>
 8004cfc:	080089e4 	.word	0x080089e4
 8004d00:	08008a28 	.word	0x08008a28
 8004d04:	080089fc 	.word	0x080089fc
 8004d08:	08008a00 	.word	0x08008a00
 8004d0c:	9b06      	ldr	r3, [sp, #24]
 8004d0e:	2b65      	cmp	r3, #101	; 0x65
 8004d10:	dc44      	bgt.n	8004d9c <_svfprintf_r+0xec4>
 8004d12:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004d14:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	9319      	str	r3, [sp, #100]	; 0x64
 8004d1e:	bfb8      	it	lt
 8004d20:	425b      	neglt	r3, r3
 8004d22:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
 8004d26:	bfb4      	ite	lt
 8004d28:	222d      	movlt	r2, #45	; 0x2d
 8004d2a:	222b      	movge	r2, #43	; 0x2b
 8004d2c:	2b09      	cmp	r3, #9
 8004d2e:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8004d32:	dd1d      	ble.n	8004d70 <_svfprintf_r+0xe98>
 8004d34:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8004d38:	200a      	movs	r0, #10
 8004d3a:	fb93 f1f0 	sdiv	r1, r3, r0
 8004d3e:	fb00 3311 	mls	r3, r0, r1, r3
 8004d42:	2909      	cmp	r1, #9
 8004d44:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8004d48:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	dcf4      	bgt.n	8004d3a <_svfprintf_r+0xe62>
 8004d50:	3330      	adds	r3, #48	; 0x30
 8004d52:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004d56:	1e51      	subs	r1, r2, #1
 8004d58:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 8004d5c:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 8004d60:	4281      	cmp	r1, r0
 8004d62:	461a      	mov	r2, r3
 8004d64:	d20b      	bcs.n	8004d7e <_svfprintf_r+0xea6>
 8004d66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d6a:	f803 2b01 	strb.w	r2, [r3], #1
 8004d6e:	e7f7      	b.n	8004d60 <_svfprintf_r+0xe88>
 8004d70:	2230      	movs	r2, #48	; 0x30
 8004d72:	4413      	add	r3, r2
 8004d74:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8004d78:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8004d7c:	aa1c      	add	r2, sp, #112	; 0x70
 8004d7e:	ab1b      	add	r3, sp, #108	; 0x6c
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	9a08      	ldr	r2, [sp, #32]
 8004d84:	9312      	str	r3, [sp, #72]	; 0x48
 8004d86:	2a01      	cmp	r2, #1
 8004d88:	eb03 0a02 	add.w	sl, r3, r2
 8004d8c:	dc02      	bgt.n	8004d94 <_svfprintf_r+0xebc>
 8004d8e:	f015 0701 	ands.w	r7, r5, #1
 8004d92:	d032      	beq.n	8004dfa <_svfprintf_r+0xf22>
 8004d94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d96:	2700      	movs	r7, #0
 8004d98:	449a      	add	sl, r3
 8004d9a:	e02e      	b.n	8004dfa <_svfprintf_r+0xf22>
 8004d9c:	9b06      	ldr	r3, [sp, #24]
 8004d9e:	2b66      	cmp	r3, #102	; 0x66
 8004da0:	d113      	bne.n	8004dca <_svfprintf_r+0xef2>
 8004da2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	dd07      	ble.n	8004db8 <_svfprintf_r+0xee0>
 8004da8:	f1ba 0f00 	cmp.w	sl, #0
 8004dac:	d101      	bne.n	8004db2 <_svfprintf_r+0xeda>
 8004dae:	07ee      	lsls	r6, r5, #31
 8004db0:	d521      	bpl.n	8004df6 <_svfprintf_r+0xf1e>
 8004db2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004db4:	4413      	add	r3, r2
 8004db6:	e006      	b.n	8004dc6 <_svfprintf_r+0xeee>
 8004db8:	f1ba 0f00 	cmp.w	sl, #0
 8004dbc:	d101      	bne.n	8004dc2 <_svfprintf_r+0xeea>
 8004dbe:	07ed      	lsls	r5, r5, #31
 8004dc0:	d514      	bpl.n	8004dec <_svfprintf_r+0xf14>
 8004dc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	4453      	add	r3, sl
 8004dc8:	e015      	b.n	8004df6 <_svfprintf_r+0xf1e>
 8004dca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004dcc:	9a08      	ldr	r2, [sp, #32]
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	db03      	blt.n	8004dda <_svfprintf_r+0xf02>
 8004dd2:	07e8      	lsls	r0, r5, #31
 8004dd4:	d50d      	bpl.n	8004df2 <_svfprintf_r+0xf1a>
 8004dd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004dd8:	e006      	b.n	8004de8 <_svfprintf_r+0xf10>
 8004dda:	9a08      	ldr	r2, [sp, #32]
 8004ddc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	440a      	add	r2, r1
 8004de2:	dc05      	bgt.n	8004df0 <_svfprintf_r+0xf18>
 8004de4:	f1c3 0301 	rsb	r3, r3, #1
 8004de8:	4413      	add	r3, r2
 8004dea:	e002      	b.n	8004df2 <_svfprintf_r+0xf1a>
 8004dec:	2301      	movs	r3, #1
 8004dee:	e002      	b.n	8004df6 <_svfprintf_r+0xf1e>
 8004df0:	4613      	mov	r3, r2
 8004df2:	2267      	movs	r2, #103	; 0x67
 8004df4:	9206      	str	r2, [sp, #24]
 8004df6:	469a      	mov	sl, r3
 8004df8:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8004dfa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004dfc:	b113      	cbz	r3, 8004e04 <_svfprintf_r+0xf2c>
 8004dfe:	232d      	movs	r3, #45	; 0x2d
 8004e00:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8004e04:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8004e06:	2600      	movs	r6, #0
 8004e08:	f7ff bb45 	b.w	8004496 <_svfprintf_r+0x5be>
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	2300      	movs	r3, #0
 8004e10:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004e12:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004e14:	f7fb fe3a 	bl	8000a8c <__aeabi_dcmplt>
 8004e18:	b110      	cbz	r0, 8004e20 <_svfprintf_r+0xf48>
 8004e1a:	232d      	movs	r3, #45	; 0x2d
 8004e1c:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8004e20:	4b07      	ldr	r3, [pc, #28]	; (8004e40 <_svfprintf_r+0xf68>)
 8004e22:	4a08      	ldr	r2, [pc, #32]	; (8004e44 <_svfprintf_r+0xf6c>)
 8004e24:	e6e1      	b.n	8004bea <_svfprintf_r+0xd12>
 8004e26:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004e28:	1a1b      	subs	r3, r3, r0
 8004e2a:	9308      	str	r3, [sp, #32]
 8004e2c:	e75d      	b.n	8004cea <_svfprintf_r+0xe12>
 8004e2e:	ea56 0207 	orrs.w	r2, r6, r7
 8004e32:	f47f aaa9 	bne.w	8004388 <_svfprintf_r+0x4b0>
 8004e36:	f7ff baae 	b.w	8004396 <_svfprintf_r+0x4be>
 8004e3a:	b03d      	add	sp, #244	; 0xf4
 8004e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e40:	080089f4 	.word	0x080089f4
 8004e44:	080089f8 	.word	0x080089f8

08004e48 <_vfprintf_r>:
 8004e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e4c:	b0bd      	sub	sp, #244	; 0xf4
 8004e4e:	468b      	mov	fp, r1
 8004e50:	9209      	str	r2, [sp, #36]	; 0x24
 8004e52:	461c      	mov	r4, r3
 8004e54:	461f      	mov	r7, r3
 8004e56:	4681      	mov	r9, r0
 8004e58:	f002 f956 	bl	8007108 <_localeconv_r>
 8004e5c:	6803      	ldr	r3, [r0, #0]
 8004e5e:	4618      	mov	r0, r3
 8004e60:	9311      	str	r3, [sp, #68]	; 0x44
 8004e62:	f7fb f9e1 	bl	8000228 <strlen>
 8004e66:	900a      	str	r0, [sp, #40]	; 0x28
 8004e68:	f1b9 0f00 	cmp.w	r9, #0
 8004e6c:	d005      	beq.n	8004e7a <_vfprintf_r+0x32>
 8004e6e:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8004e72:	b913      	cbnz	r3, 8004e7a <_vfprintf_r+0x32>
 8004e74:	4648      	mov	r0, r9
 8004e76:	f001 ff99 	bl	8006dac <__sinit>
 8004e7a:	4b96      	ldr	r3, [pc, #600]	; (80050d4 <_vfprintf_r+0x28c>)
 8004e7c:	459b      	cmp	fp, r3
 8004e7e:	d102      	bne.n	8004e86 <_vfprintf_r+0x3e>
 8004e80:	f8d9 b004 	ldr.w	fp, [r9, #4]
 8004e84:	e00a      	b.n	8004e9c <_vfprintf_r+0x54>
 8004e86:	4b94      	ldr	r3, [pc, #592]	; (80050d8 <_vfprintf_r+0x290>)
 8004e88:	459b      	cmp	fp, r3
 8004e8a:	d102      	bne.n	8004e92 <_vfprintf_r+0x4a>
 8004e8c:	f8d9 b008 	ldr.w	fp, [r9, #8]
 8004e90:	e004      	b.n	8004e9c <_vfprintf_r+0x54>
 8004e92:	4b92      	ldr	r3, [pc, #584]	; (80050dc <_vfprintf_r+0x294>)
 8004e94:	459b      	cmp	fp, r3
 8004e96:	bf08      	it	eq
 8004e98:	f8d9 b00c 	ldreq.w	fp, [r9, #12]
 8004e9c:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 8004ea0:	0498      	lsls	r0, r3, #18
 8004ea2:	d409      	bmi.n	8004eb8 <_vfprintf_r+0x70>
 8004ea4:	f8db 2064 	ldr.w	r2, [fp, #100]	; 0x64
 8004ea8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004eac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004eb0:	f8ab 300c 	strh.w	r3, [fp, #12]
 8004eb4:	f8cb 2064 	str.w	r2, [fp, #100]	; 0x64
 8004eb8:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8004ebc:	0719      	lsls	r1, r3, #28
 8004ebe:	d509      	bpl.n	8004ed4 <_vfprintf_r+0x8c>
 8004ec0:	f8db 3010 	ldr.w	r3, [fp, #16]
 8004ec4:	b133      	cbz	r3, 8004ed4 <_vfprintf_r+0x8c>
 8004ec6:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8004eca:	f003 031a 	and.w	r3, r3, #26
 8004ece:	2b0a      	cmp	r3, #10
 8004ed0:	d116      	bne.n	8004f00 <_vfprintf_r+0xb8>
 8004ed2:	e009      	b.n	8004ee8 <_vfprintf_r+0xa0>
 8004ed4:	4659      	mov	r1, fp
 8004ed6:	4648      	mov	r0, r9
 8004ed8:	f000 ffda 	bl	8005e90 <__swsetup_r>
 8004edc:	2800      	cmp	r0, #0
 8004ede:	d0f2      	beq.n	8004ec6 <_vfprintf_r+0x7e>
 8004ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ee4:	f000 bf97 	b.w	8005e16 <_vfprintf_r+0xfce>
 8004ee8:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	db07      	blt.n	8004f00 <_vfprintf_r+0xb8>
 8004ef0:	4623      	mov	r3, r4
 8004ef2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ef4:	4659      	mov	r1, fp
 8004ef6:	4648      	mov	r0, r9
 8004ef8:	f000 ff94 	bl	8005e24 <__sbprintf>
 8004efc:	f000 bf8b 	b.w	8005e16 <_vfprintf_r+0xfce>
 8004f00:	2300      	movs	r3, #0
 8004f02:	ac2c      	add	r4, sp, #176	; 0xb0
 8004f04:	941f      	str	r4, [sp, #124]	; 0x7c
 8004f06:	9321      	str	r3, [sp, #132]	; 0x84
 8004f08:	9320      	str	r3, [sp, #128]	; 0x80
 8004f0a:	9308      	str	r3, [sp, #32]
 8004f0c:	930c      	str	r3, [sp, #48]	; 0x30
 8004f0e:	930d      	str	r3, [sp, #52]	; 0x34
 8004f10:	9313      	str	r3, [sp, #76]	; 0x4c
 8004f12:	9312      	str	r3, [sp, #72]	; 0x48
 8004f14:	930e      	str	r3, [sp, #56]	; 0x38
 8004f16:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004f18:	462b      	mov	r3, r5
 8004f1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f1e:	b11a      	cbz	r2, 8004f28 <_vfprintf_r+0xe0>
 8004f20:	2a25      	cmp	r2, #37	; 0x25
 8004f22:	d001      	beq.n	8004f28 <_vfprintf_r+0xe0>
 8004f24:	461d      	mov	r5, r3
 8004f26:	e7f7      	b.n	8004f18 <_vfprintf_r+0xd0>
 8004f28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f2a:	1aee      	subs	r6, r5, r3
 8004f2c:	d017      	beq.n	8004f5e <_vfprintf_r+0x116>
 8004f2e:	e884 0048 	stmia.w	r4, {r3, r6}
 8004f32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f34:	4433      	add	r3, r6
 8004f36:	9321      	str	r3, [sp, #132]	; 0x84
 8004f38:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	2b07      	cmp	r3, #7
 8004f3e:	9320      	str	r3, [sp, #128]	; 0x80
 8004f40:	dc01      	bgt.n	8004f46 <_vfprintf_r+0xfe>
 8004f42:	3408      	adds	r4, #8
 8004f44:	e008      	b.n	8004f58 <_vfprintf_r+0x110>
 8004f46:	aa1f      	add	r2, sp, #124	; 0x7c
 8004f48:	4659      	mov	r1, fp
 8004f4a:	4648      	mov	r0, r9
 8004f4c:	f002 ff64 	bl	8007e18 <__sprint_r>
 8004f50:	2800      	cmp	r0, #0
 8004f52:	f040 8627 	bne.w	8005ba4 <_vfprintf_r+0xd5c>
 8004f56:	ac2c      	add	r4, sp, #176	; 0xb0
 8004f58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f5a:	4433      	add	r3, r6
 8004f5c:	930e      	str	r3, [sp, #56]	; 0x38
 8004f5e:	782b      	ldrb	r3, [r5, #0]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f000 8618 	beq.w	8005b96 <_vfprintf_r+0xd4e>
 8004f66:	2200      	movs	r2, #0
 8004f68:	1c6b      	adds	r3, r5, #1
 8004f6a:	4611      	mov	r1, r2
 8004f6c:	4615      	mov	r5, r2
 8004f6e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8004f72:	f04f 3aff 	mov.w	sl, #4294967295
 8004f76:	920b      	str	r2, [sp, #44]	; 0x2c
 8004f78:	200a      	movs	r0, #10
 8004f7a:	1c5e      	adds	r6, r3, #1
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	9609      	str	r6, [sp, #36]	; 0x24
 8004f80:	9306      	str	r3, [sp, #24]
 8004f82:	9b06      	ldr	r3, [sp, #24]
 8004f84:	3b20      	subs	r3, #32
 8004f86:	2b58      	cmp	r3, #88	; 0x58
 8004f88:	f200 825b 	bhi.w	8005442 <_vfprintf_r+0x5fa>
 8004f8c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004f90:	0259005c 	.word	0x0259005c
 8004f94:	006b0259 	.word	0x006b0259
 8004f98:	02590259 	.word	0x02590259
 8004f9c:	02590259 	.word	0x02590259
 8004fa0:	02590259 	.word	0x02590259
 8004fa4:	0059006e 	.word	0x0059006e
 8004fa8:	00780259 	.word	0x00780259
 8004fac:	0259007b 	.word	0x0259007b
 8004fb0:	00aa009f 	.word	0x00aa009f
 8004fb4:	00aa00aa 	.word	0x00aa00aa
 8004fb8:	00aa00aa 	.word	0x00aa00aa
 8004fbc:	00aa00aa 	.word	0x00aa00aa
 8004fc0:	00aa00aa 	.word	0x00aa00aa
 8004fc4:	02590259 	.word	0x02590259
 8004fc8:	02590259 	.word	0x02590259
 8004fcc:	02590259 	.word	0x02590259
 8004fd0:	02590259 	.word	0x02590259
 8004fd4:	02590259 	.word	0x02590259
 8004fd8:	010600da 	.word	0x010600da
 8004fdc:	01060259 	.word	0x01060259
 8004fe0:	02590259 	.word	0x02590259
 8004fe4:	02590259 	.word	0x02590259
 8004fe8:	025900bd 	.word	0x025900bd
 8004fec:	014b0259 	.word	0x014b0259
 8004ff0:	02590259 	.word	0x02590259
 8004ff4:	02590259 	.word	0x02590259
 8004ff8:	01920259 	.word	0x01920259
 8004ffc:	02590259 	.word	0x02590259
 8005000:	02590066 	.word	0x02590066
 8005004:	02590259 	.word	0x02590259
 8005008:	02590259 	.word	0x02590259
 800500c:	02590259 	.word	0x02590259
 8005010:	02590259 	.word	0x02590259
 8005014:	00d10259 	.word	0x00d10259
 8005018:	01060061 	.word	0x01060061
 800501c:	01060106 	.word	0x01060106
 8005020:	006100c0 	.word	0x006100c0
 8005024:	02590259 	.word	0x02590259
 8005028:	025900c3 	.word	0x025900c3
 800502c:	014d012d 	.word	0x014d012d
 8005030:	00ce0168 	.word	0x00ce0168
 8005034:	01790259 	.word	0x01790259
 8005038:	01940259 	.word	0x01940259
 800503c:	02590259 	.word	0x02590259
 8005040:	01ac      	.short	0x01ac
 8005042:	2201      	movs	r2, #1
 8005044:	212b      	movs	r1, #43	; 0x2b
 8005046:	e002      	b.n	800504e <_vfprintf_r+0x206>
 8005048:	b909      	cbnz	r1, 800504e <_vfprintf_r+0x206>
 800504a:	2201      	movs	r2, #1
 800504c:	2120      	movs	r1, #32
 800504e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005050:	e793      	b.n	8004f7a <_vfprintf_r+0x132>
 8005052:	2a00      	cmp	r2, #0
 8005054:	d07b      	beq.n	800514e <_vfprintf_r+0x306>
 8005056:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800505a:	e078      	b.n	800514e <_vfprintf_r+0x306>
 800505c:	b10a      	cbz	r2, 8005062 <_vfprintf_r+0x21a>
 800505e:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8005062:	4b1f      	ldr	r3, [pc, #124]	; (80050e0 <_vfprintf_r+0x298>)
 8005064:	e144      	b.n	80052f0 <_vfprintf_r+0x4a8>
 8005066:	f045 0501 	orr.w	r5, r5, #1
 800506a:	e7f0      	b.n	800504e <_vfprintf_r+0x206>
 800506c:	683e      	ldr	r6, [r7, #0]
 800506e:	1d3b      	adds	r3, r7, #4
 8005070:	2e00      	cmp	r6, #0
 8005072:	960b      	str	r6, [sp, #44]	; 0x2c
 8005074:	db01      	blt.n	800507a <_vfprintf_r+0x232>
 8005076:	461f      	mov	r7, r3
 8005078:	e7e9      	b.n	800504e <_vfprintf_r+0x206>
 800507a:	461f      	mov	r7, r3
 800507c:	4276      	negs	r6, r6
 800507e:	960b      	str	r6, [sp, #44]	; 0x2c
 8005080:	f045 0504 	orr.w	r5, r5, #4
 8005084:	e7e3      	b.n	800504e <_vfprintf_r+0x206>
 8005086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005088:	1c5e      	adds	r6, r3, #1
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	2b2a      	cmp	r3, #42	; 0x2a
 800508e:	9306      	str	r3, [sp, #24]
 8005090:	d001      	beq.n	8005096 <_vfprintf_r+0x24e>
 8005092:	2300      	movs	r3, #0
 8005094:	e00a      	b.n	80050ac <_vfprintf_r+0x264>
 8005096:	f8d7 a000 	ldr.w	sl, [r7]
 800509a:	1d3b      	adds	r3, r7, #4
 800509c:	f1ba 0f00 	cmp.w	sl, #0
 80050a0:	461f      	mov	r7, r3
 80050a2:	9609      	str	r6, [sp, #36]	; 0x24
 80050a4:	dad3      	bge.n	800504e <_vfprintf_r+0x206>
 80050a6:	f04f 3aff 	mov.w	sl, #4294967295
 80050aa:	e7d0      	b.n	800504e <_vfprintf_r+0x206>
 80050ac:	9609      	str	r6, [sp, #36]	; 0x24
 80050ae:	9e06      	ldr	r6, [sp, #24]
 80050b0:	3e30      	subs	r6, #48	; 0x30
 80050b2:	2e09      	cmp	r6, #9
 80050b4:	d808      	bhi.n	80050c8 <_vfprintf_r+0x280>
 80050b6:	fb00 6303 	mla	r3, r0, r3, r6
 80050ba:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80050bc:	46b6      	mov	lr, r6
 80050be:	f81e 6b01 	ldrb.w	r6, [lr], #1
 80050c2:	9606      	str	r6, [sp, #24]
 80050c4:	4676      	mov	r6, lr
 80050c6:	e7f1      	b.n	80050ac <_vfprintf_r+0x264>
 80050c8:	ea43 7ae3 	orr.w	sl, r3, r3, asr #31
 80050cc:	e759      	b.n	8004f82 <_vfprintf_r+0x13a>
 80050ce:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80050d2:	e7bc      	b.n	800504e <_vfprintf_r+0x206>
 80050d4:	08008a68 	.word	0x08008a68
 80050d8:	08008a88 	.word	0x08008a88
 80050dc:	08008aa8 	.word	0x08008aa8
 80050e0:	08008a04 	.word	0x08008a04
 80050e4:	2300      	movs	r3, #0
 80050e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80050e8:	9b06      	ldr	r3, [sp, #24]
 80050ea:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80050ec:	3b30      	subs	r3, #48	; 0x30
 80050ee:	fb00 3306 	mla	r3, r0, r6, r3
 80050f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80050f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050f6:	461e      	mov	r6, r3
 80050f8:	f816 3b01 	ldrb.w	r3, [r6], #1
 80050fc:	9306      	str	r3, [sp, #24]
 80050fe:	9b06      	ldr	r3, [sp, #24]
 8005100:	9609      	str	r6, [sp, #36]	; 0x24
 8005102:	3b30      	subs	r3, #48	; 0x30
 8005104:	2b09      	cmp	r3, #9
 8005106:	d9ef      	bls.n	80050e8 <_vfprintf_r+0x2a0>
 8005108:	e73b      	b.n	8004f82 <_vfprintf_r+0x13a>
 800510a:	f045 0508 	orr.w	r5, r5, #8
 800510e:	e79e      	b.n	800504e <_vfprintf_r+0x206>
 8005110:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8005114:	e79b      	b.n	800504e <_vfprintf_r+0x206>
 8005116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	2b6c      	cmp	r3, #108	; 0x6c
 800511c:	d103      	bne.n	8005126 <_vfprintf_r+0x2de>
 800511e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005120:	3301      	adds	r3, #1
 8005122:	9309      	str	r3, [sp, #36]	; 0x24
 8005124:	e002      	b.n	800512c <_vfprintf_r+0x2e4>
 8005126:	f045 0510 	orr.w	r5, r5, #16
 800512a:	e790      	b.n	800504e <_vfprintf_r+0x206>
 800512c:	f045 0520 	orr.w	r5, r5, #32
 8005130:	e78d      	b.n	800504e <_vfprintf_r+0x206>
 8005132:	1d3b      	adds	r3, r7, #4
 8005134:	9307      	str	r3, [sp, #28]
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	2600      	movs	r6, #0
 800513a:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 800513e:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8005142:	e18d      	b.n	8005460 <_vfprintf_r+0x618>
 8005144:	b10a      	cbz	r2, 800514a <_vfprintf_r+0x302>
 8005146:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800514a:	f045 0510 	orr.w	r5, r5, #16
 800514e:	06aa      	lsls	r2, r5, #26
 8005150:	d508      	bpl.n	8005164 <_vfprintf_r+0x31c>
 8005152:	3707      	adds	r7, #7
 8005154:	f027 0707 	bic.w	r7, r7, #7
 8005158:	f107 0308 	add.w	r3, r7, #8
 800515c:	9307      	str	r3, [sp, #28]
 800515e:	e9d7 6700 	ldrd	r6, r7, [r7]
 8005162:	e00e      	b.n	8005182 <_vfprintf_r+0x33a>
 8005164:	f015 0f10 	tst.w	r5, #16
 8005168:	f107 0304 	add.w	r3, r7, #4
 800516c:	d002      	beq.n	8005174 <_vfprintf_r+0x32c>
 800516e:	9307      	str	r3, [sp, #28]
 8005170:	683e      	ldr	r6, [r7, #0]
 8005172:	e005      	b.n	8005180 <_vfprintf_r+0x338>
 8005174:	683e      	ldr	r6, [r7, #0]
 8005176:	f015 0f40 	tst.w	r5, #64	; 0x40
 800517a:	9307      	str	r3, [sp, #28]
 800517c:	bf18      	it	ne
 800517e:	b236      	sxthne	r6, r6
 8005180:	17f7      	asrs	r7, r6, #31
 8005182:	2e00      	cmp	r6, #0
 8005184:	f177 0300 	sbcs.w	r3, r7, #0
 8005188:	f280 80dc 	bge.w	8005344 <_vfprintf_r+0x4fc>
 800518c:	4276      	negs	r6, r6
 800518e:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8005192:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8005196:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800519a:	e0d3      	b.n	8005344 <_vfprintf_r+0x4fc>
 800519c:	b10a      	cbz	r2, 80051a2 <_vfprintf_r+0x35a>
 800519e:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80051a2:	3707      	adds	r7, #7
 80051a4:	f027 0707 	bic.w	r7, r7, #7
 80051a8:	f107 0308 	add.w	r3, r7, #8
 80051ac:	9307      	str	r3, [sp, #28]
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	f04f 32ff 	mov.w	r2, #4294967295
 80051b4:	930c      	str	r3, [sp, #48]	; 0x30
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80051ba:	930d      	str	r3, [sp, #52]	; 0x34
 80051bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80051be:	4638      	mov	r0, r7
 80051c0:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 80051c4:	4631      	mov	r1, r6
 80051c6:	4ba9      	ldr	r3, [pc, #676]	; (800546c <_vfprintf_r+0x624>)
 80051c8:	f7fb fc88 	bl	8000adc <__aeabi_dcmpun>
 80051cc:	2800      	cmp	r0, #0
 80051ce:	f040 84f0 	bne.w	8005bb2 <_vfprintf_r+0xd6a>
 80051d2:	f04f 32ff 	mov.w	r2, #4294967295
 80051d6:	4ba5      	ldr	r3, [pc, #660]	; (800546c <_vfprintf_r+0x624>)
 80051d8:	4638      	mov	r0, r7
 80051da:	4631      	mov	r1, r6
 80051dc:	f7fb fc60 	bl	8000aa0 <__aeabi_dcmple>
 80051e0:	2800      	cmp	r0, #0
 80051e2:	f040 84e6 	bne.w	8005bb2 <_vfprintf_r+0xd6a>
 80051e6:	f000 bdff 	b.w	8005de8 <_vfprintf_r+0xfa0>
 80051ea:	b10a      	cbz	r2, 80051f0 <_vfprintf_r+0x3a8>
 80051ec:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80051f0:	f015 0f20 	tst.w	r5, #32
 80051f4:	f107 0304 	add.w	r3, r7, #4
 80051f8:	d007      	beq.n	800520a <_vfprintf_r+0x3c2>
 80051fa:	990e      	ldr	r1, [sp, #56]	; 0x38
 80051fc:	683a      	ldr	r2, [r7, #0]
 80051fe:	17ce      	asrs	r6, r1, #31
 8005200:	4608      	mov	r0, r1
 8005202:	4631      	mov	r1, r6
 8005204:	e9c2 0100 	strd	r0, r1, [r2]
 8005208:	e00b      	b.n	8005222 <_vfprintf_r+0x3da>
 800520a:	06e9      	lsls	r1, r5, #27
 800520c:	d406      	bmi.n	800521c <_vfprintf_r+0x3d4>
 800520e:	066a      	lsls	r2, r5, #25
 8005210:	d504      	bpl.n	800521c <_vfprintf_r+0x3d4>
 8005212:	683a      	ldr	r2, [r7, #0]
 8005214:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8005218:	8011      	strh	r1, [r2, #0]
 800521a:	e002      	b.n	8005222 <_vfprintf_r+0x3da>
 800521c:	683a      	ldr	r2, [r7, #0]
 800521e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005220:	6011      	str	r1, [r2, #0]
 8005222:	461f      	mov	r7, r3
 8005224:	e677      	b.n	8004f16 <_vfprintf_r+0xce>
 8005226:	f045 0510 	orr.w	r5, r5, #16
 800522a:	f015 0320 	ands.w	r3, r5, #32
 800522e:	d009      	beq.n	8005244 <_vfprintf_r+0x3fc>
 8005230:	3707      	adds	r7, #7
 8005232:	f027 0707 	bic.w	r7, r7, #7
 8005236:	f107 0308 	add.w	r3, r7, #8
 800523a:	9307      	str	r3, [sp, #28]
 800523c:	e9d7 6700 	ldrd	r6, r7, [r7]
 8005240:	2300      	movs	r3, #0
 8005242:	e07b      	b.n	800533c <_vfprintf_r+0x4f4>
 8005244:	1d3a      	adds	r2, r7, #4
 8005246:	f015 0110 	ands.w	r1, r5, #16
 800524a:	9207      	str	r2, [sp, #28]
 800524c:	d105      	bne.n	800525a <_vfprintf_r+0x412>
 800524e:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8005252:	d002      	beq.n	800525a <_vfprintf_r+0x412>
 8005254:	883e      	ldrh	r6, [r7, #0]
 8005256:	2700      	movs	r7, #0
 8005258:	e7f2      	b.n	8005240 <_vfprintf_r+0x3f8>
 800525a:	683e      	ldr	r6, [r7, #0]
 800525c:	2700      	movs	r7, #0
 800525e:	e06d      	b.n	800533c <_vfprintf_r+0x4f4>
 8005260:	1d3b      	adds	r3, r7, #4
 8005262:	9307      	str	r3, [sp, #28]
 8005264:	2330      	movs	r3, #48	; 0x30
 8005266:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800526a:	4b81      	ldr	r3, [pc, #516]	; (8005470 <_vfprintf_r+0x628>)
 800526c:	2278      	movs	r2, #120	; 0x78
 800526e:	683e      	ldr	r6, [r7, #0]
 8005270:	9313      	str	r3, [sp, #76]	; 0x4c
 8005272:	2700      	movs	r7, #0
 8005274:	f045 0502 	orr.w	r5, r5, #2
 8005278:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 800527c:	2302      	movs	r3, #2
 800527e:	9206      	str	r2, [sp, #24]
 8005280:	e05c      	b.n	800533c <_vfprintf_r+0x4f4>
 8005282:	2600      	movs	r6, #0
 8005284:	1d3b      	adds	r3, r7, #4
 8005286:	45b2      	cmp	sl, r6
 8005288:	9307      	str	r3, [sp, #28]
 800528a:	f8d7 8000 	ldr.w	r8, [r7]
 800528e:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8005292:	db0a      	blt.n	80052aa <_vfprintf_r+0x462>
 8005294:	4652      	mov	r2, sl
 8005296:	4631      	mov	r1, r6
 8005298:	4640      	mov	r0, r8
 800529a:	f002 f9c5 	bl	8007628 <memchr>
 800529e:	2800      	cmp	r0, #0
 80052a0:	f000 80e8 	beq.w	8005474 <_vfprintf_r+0x62c>
 80052a4:	ebc8 0a00 	rsb	sl, r8, r0
 80052a8:	e0e5      	b.n	8005476 <_vfprintf_r+0x62e>
 80052aa:	4640      	mov	r0, r8
 80052ac:	f7fa ffbc 	bl	8000228 <strlen>
 80052b0:	4682      	mov	sl, r0
 80052b2:	e0e0      	b.n	8005476 <_vfprintf_r+0x62e>
 80052b4:	f045 0510 	orr.w	r5, r5, #16
 80052b8:	06ae      	lsls	r6, r5, #26
 80052ba:	d508      	bpl.n	80052ce <_vfprintf_r+0x486>
 80052bc:	3707      	adds	r7, #7
 80052be:	f027 0707 	bic.w	r7, r7, #7
 80052c2:	f107 0308 	add.w	r3, r7, #8
 80052c6:	9307      	str	r3, [sp, #28]
 80052c8:	e9d7 6700 	ldrd	r6, r7, [r7]
 80052cc:	e00a      	b.n	80052e4 <_vfprintf_r+0x49c>
 80052ce:	1d3b      	adds	r3, r7, #4
 80052d0:	f015 0f10 	tst.w	r5, #16
 80052d4:	9307      	str	r3, [sp, #28]
 80052d6:	d103      	bne.n	80052e0 <_vfprintf_r+0x498>
 80052d8:	0668      	lsls	r0, r5, #25
 80052da:	d501      	bpl.n	80052e0 <_vfprintf_r+0x498>
 80052dc:	883e      	ldrh	r6, [r7, #0]
 80052de:	e000      	b.n	80052e2 <_vfprintf_r+0x49a>
 80052e0:	683e      	ldr	r6, [r7, #0]
 80052e2:	2700      	movs	r7, #0
 80052e4:	2301      	movs	r3, #1
 80052e6:	e029      	b.n	800533c <_vfprintf_r+0x4f4>
 80052e8:	b10a      	cbz	r2, 80052ee <_vfprintf_r+0x4a6>
 80052ea:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80052ee:	4b60      	ldr	r3, [pc, #384]	; (8005470 <_vfprintf_r+0x628>)
 80052f0:	06a9      	lsls	r1, r5, #26
 80052f2:	9313      	str	r3, [sp, #76]	; 0x4c
 80052f4:	d508      	bpl.n	8005308 <_vfprintf_r+0x4c0>
 80052f6:	3707      	adds	r7, #7
 80052f8:	f027 0707 	bic.w	r7, r7, #7
 80052fc:	f107 0308 	add.w	r3, r7, #8
 8005300:	9307      	str	r3, [sp, #28]
 8005302:	e9d7 6700 	ldrd	r6, r7, [r7]
 8005306:	e00a      	b.n	800531e <_vfprintf_r+0x4d6>
 8005308:	1d3b      	adds	r3, r7, #4
 800530a:	f015 0f10 	tst.w	r5, #16
 800530e:	9307      	str	r3, [sp, #28]
 8005310:	d103      	bne.n	800531a <_vfprintf_r+0x4d2>
 8005312:	066a      	lsls	r2, r5, #25
 8005314:	d501      	bpl.n	800531a <_vfprintf_r+0x4d2>
 8005316:	883e      	ldrh	r6, [r7, #0]
 8005318:	e000      	b.n	800531c <_vfprintf_r+0x4d4>
 800531a:	683e      	ldr	r6, [r7, #0]
 800531c:	2700      	movs	r7, #0
 800531e:	07eb      	lsls	r3, r5, #31
 8005320:	d50b      	bpl.n	800533a <_vfprintf_r+0x4f2>
 8005322:	ea56 0307 	orrs.w	r3, r6, r7
 8005326:	d008      	beq.n	800533a <_vfprintf_r+0x4f2>
 8005328:	2330      	movs	r3, #48	; 0x30
 800532a:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800532e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8005332:	f045 0502 	orr.w	r5, r5, #2
 8005336:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 800533a:	2302      	movs	r3, #2
 800533c:	2200      	movs	r2, #0
 800533e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8005342:	e000      	b.n	8005346 <_vfprintf_r+0x4fe>
 8005344:	2301      	movs	r3, #1
 8005346:	f1ba 0f00 	cmp.w	sl, #0
 800534a:	f2c0 855e 	blt.w	8005e0a <_vfprintf_r+0xfc2>
 800534e:	ea56 0207 	orrs.w	r2, r6, r7
 8005352:	f025 0180 	bic.w	r1, r5, #128	; 0x80
 8005356:	d103      	bne.n	8005360 <_vfprintf_r+0x518>
 8005358:	f1ba 0f00 	cmp.w	sl, #0
 800535c:	d05f      	beq.n	800541e <_vfprintf_r+0x5d6>
 800535e:	e006      	b.n	800536e <_vfprintf_r+0x526>
 8005360:	460d      	mov	r5, r1
 8005362:	2b01      	cmp	r3, #1
 8005364:	d025      	beq.n	80053b2 <_vfprintf_r+0x56a>
 8005366:	2b02      	cmp	r3, #2
 8005368:	d046      	beq.n	80053f8 <_vfprintf_r+0x5b0>
 800536a:	4629      	mov	r1, r5
 800536c:	e007      	b.n	800537e <_vfprintf_r+0x536>
 800536e:	460d      	mov	r5, r1
 8005370:	2b01      	cmp	r3, #1
 8005372:	d022      	beq.n	80053ba <_vfprintf_r+0x572>
 8005374:	2b02      	cmp	r3, #2
 8005376:	d03d      	beq.n	80053f4 <_vfprintf_r+0x5ac>
 8005378:	4629      	mov	r1, r5
 800537a:	2600      	movs	r6, #0
 800537c:	2700      	movs	r7, #0
 800537e:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8005382:	08f2      	lsrs	r2, r6, #3
 8005384:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 8005388:	08f8      	lsrs	r0, r7, #3
 800538a:	f006 0307 	and.w	r3, r6, #7
 800538e:	4607      	mov	r7, r0
 8005390:	4616      	mov	r6, r2
 8005392:	3330      	adds	r3, #48	; 0x30
 8005394:	ea56 0207 	orrs.w	r2, r6, r7
 8005398:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800539c:	d1f1      	bne.n	8005382 <_vfprintf_r+0x53a>
 800539e:	07e8      	lsls	r0, r5, #31
 80053a0:	d548      	bpl.n	8005434 <_vfprintf_r+0x5ec>
 80053a2:	2b30      	cmp	r3, #48	; 0x30
 80053a4:	d046      	beq.n	8005434 <_vfprintf_r+0x5ec>
 80053a6:	2330      	movs	r3, #48	; 0x30
 80053a8:	f808 3c01 	strb.w	r3, [r8, #-1]
 80053ac:	f108 38ff 	add.w	r8, r8, #4294967295
 80053b0:	e040      	b.n	8005434 <_vfprintf_r+0x5ec>
 80053b2:	2f00      	cmp	r7, #0
 80053b4:	bf08      	it	eq
 80053b6:	2e0a      	cmpeq	r6, #10
 80053b8:	d205      	bcs.n	80053c6 <_vfprintf_r+0x57e>
 80053ba:	3630      	adds	r6, #48	; 0x30
 80053bc:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 80053c0:	f808 6d41 	strb.w	r6, [r8, #-65]!
 80053c4:	e029      	b.n	800541a <_vfprintf_r+0x5d2>
 80053c6:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 80053ca:	4630      	mov	r0, r6
 80053cc:	4639      	mov	r1, r7
 80053ce:	220a      	movs	r2, #10
 80053d0:	2300      	movs	r3, #0
 80053d2:	f7fb fbc1 	bl	8000b58 <__aeabi_uldivmod>
 80053d6:	3230      	adds	r2, #48	; 0x30
 80053d8:	f808 2d01 	strb.w	r2, [r8, #-1]!
 80053dc:	2300      	movs	r3, #0
 80053de:	4630      	mov	r0, r6
 80053e0:	4639      	mov	r1, r7
 80053e2:	220a      	movs	r2, #10
 80053e4:	f7fb fbb8 	bl	8000b58 <__aeabi_uldivmod>
 80053e8:	4606      	mov	r6, r0
 80053ea:	460f      	mov	r7, r1
 80053ec:	ea56 0307 	orrs.w	r3, r6, r7
 80053f0:	d1eb      	bne.n	80053ca <_vfprintf_r+0x582>
 80053f2:	e012      	b.n	800541a <_vfprintf_r+0x5d2>
 80053f4:	2600      	movs	r6, #0
 80053f6:	2700      	movs	r7, #0
 80053f8:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 80053fc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80053fe:	f006 030f 	and.w	r3, r6, #15
 8005402:	5cd3      	ldrb	r3, [r2, r3]
 8005404:	093a      	lsrs	r2, r7, #4
 8005406:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800540a:	0933      	lsrs	r3, r6, #4
 800540c:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8005410:	461e      	mov	r6, r3
 8005412:	4617      	mov	r7, r2
 8005414:	ea56 0307 	orrs.w	r3, r6, r7
 8005418:	d1f0      	bne.n	80053fc <_vfprintf_r+0x5b4>
 800541a:	4629      	mov	r1, r5
 800541c:	e00a      	b.n	8005434 <_vfprintf_r+0x5ec>
 800541e:	b93b      	cbnz	r3, 8005430 <_vfprintf_r+0x5e8>
 8005420:	07ea      	lsls	r2, r5, #31
 8005422:	d505      	bpl.n	8005430 <_vfprintf_r+0x5e8>
 8005424:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8005428:	2330      	movs	r3, #48	; 0x30
 800542a:	f808 3d41 	strb.w	r3, [r8, #-65]!
 800542e:	e001      	b.n	8005434 <_vfprintf_r+0x5ec>
 8005430:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8005434:	ab2c      	add	r3, sp, #176	; 0xb0
 8005436:	4656      	mov	r6, sl
 8005438:	460d      	mov	r5, r1
 800543a:	ebc8 0a03 	rsb	sl, r8, r3
 800543e:	2700      	movs	r7, #0
 8005440:	e01a      	b.n	8005478 <_vfprintf_r+0x630>
 8005442:	b10a      	cbz	r2, 8005448 <_vfprintf_r+0x600>
 8005444:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8005448:	9b06      	ldr	r3, [sp, #24]
 800544a:	2b00      	cmp	r3, #0
 800544c:	f000 83a3 	beq.w	8005b96 <_vfprintf_r+0xd4e>
 8005450:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8005454:	2600      	movs	r6, #0
 8005456:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 800545a:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 800545e:	9707      	str	r7, [sp, #28]
 8005460:	f04f 0a01 	mov.w	sl, #1
 8005464:	4637      	mov	r7, r6
 8005466:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 800546a:	e005      	b.n	8005478 <_vfprintf_r+0x630>
 800546c:	7fefffff 	.word	0x7fefffff
 8005470:	08008a15 	.word	0x08008a15
 8005474:	4606      	mov	r6, r0
 8005476:	4637      	mov	r7, r6
 8005478:	4556      	cmp	r6, sl
 800547a:	4633      	mov	r3, r6
 800547c:	bfb8      	it	lt
 800547e:	4653      	movlt	r3, sl
 8005480:	930f      	str	r3, [sp, #60]	; 0x3c
 8005482:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8005486:	b113      	cbz	r3, 800548e <_vfprintf_r+0x646>
 8005488:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800548a:	3301      	adds	r3, #1
 800548c:	930f      	str	r3, [sp, #60]	; 0x3c
 800548e:	f015 0302 	ands.w	r3, r5, #2
 8005492:	9314      	str	r3, [sp, #80]	; 0x50
 8005494:	bf1e      	ittt	ne
 8005496:	9b0f      	ldrne	r3, [sp, #60]	; 0x3c
 8005498:	3302      	addne	r3, #2
 800549a:	930f      	strne	r3, [sp, #60]	; 0x3c
 800549c:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 80054a0:	9315      	str	r3, [sp, #84]	; 0x54
 80054a2:	d139      	bne.n	8005518 <_vfprintf_r+0x6d0>
 80054a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80054a8:	1a9b      	subs	r3, r3, r2
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	9310      	str	r3, [sp, #64]	; 0x40
 80054ae:	dd33      	ble.n	8005518 <_vfprintf_r+0x6d0>
 80054b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80054b2:	2b10      	cmp	r3, #16
 80054b4:	4ba2      	ldr	r3, [pc, #648]	; (8005740 <_vfprintf_r+0x8f8>)
 80054b6:	6023      	str	r3, [r4, #0]
 80054b8:	dd18      	ble.n	80054ec <_vfprintf_r+0x6a4>
 80054ba:	2310      	movs	r3, #16
 80054bc:	6063      	str	r3, [r4, #4]
 80054be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80054c0:	3310      	adds	r3, #16
 80054c2:	9321      	str	r3, [sp, #132]	; 0x84
 80054c4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80054c6:	3301      	adds	r3, #1
 80054c8:	2b07      	cmp	r3, #7
 80054ca:	9320      	str	r3, [sp, #128]	; 0x80
 80054cc:	dc01      	bgt.n	80054d2 <_vfprintf_r+0x68a>
 80054ce:	3408      	adds	r4, #8
 80054d0:	e008      	b.n	80054e4 <_vfprintf_r+0x69c>
 80054d2:	aa1f      	add	r2, sp, #124	; 0x7c
 80054d4:	4659      	mov	r1, fp
 80054d6:	4648      	mov	r0, r9
 80054d8:	f002 fc9e 	bl	8007e18 <__sprint_r>
 80054dc:	2800      	cmp	r0, #0
 80054de:	f040 8361 	bne.w	8005ba4 <_vfprintf_r+0xd5c>
 80054e2:	ac2c      	add	r4, sp, #176	; 0xb0
 80054e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80054e6:	3b10      	subs	r3, #16
 80054e8:	9310      	str	r3, [sp, #64]	; 0x40
 80054ea:	e7e1      	b.n	80054b0 <_vfprintf_r+0x668>
 80054ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80054ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80054f0:	6063      	str	r3, [r4, #4]
 80054f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80054f4:	4413      	add	r3, r2
 80054f6:	9321      	str	r3, [sp, #132]	; 0x84
 80054f8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80054fa:	3301      	adds	r3, #1
 80054fc:	2b07      	cmp	r3, #7
 80054fe:	9320      	str	r3, [sp, #128]	; 0x80
 8005500:	dc01      	bgt.n	8005506 <_vfprintf_r+0x6be>
 8005502:	3408      	adds	r4, #8
 8005504:	e008      	b.n	8005518 <_vfprintf_r+0x6d0>
 8005506:	aa1f      	add	r2, sp, #124	; 0x7c
 8005508:	4659      	mov	r1, fp
 800550a:	4648      	mov	r0, r9
 800550c:	f002 fc84 	bl	8007e18 <__sprint_r>
 8005510:	2800      	cmp	r0, #0
 8005512:	f040 8347 	bne.w	8005ba4 <_vfprintf_r+0xd5c>
 8005516:	ac2c      	add	r4, sp, #176	; 0xb0
 8005518:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 800551c:	b1bb      	cbz	r3, 800554e <_vfprintf_r+0x706>
 800551e:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 8005522:	6023      	str	r3, [r4, #0]
 8005524:	2301      	movs	r3, #1
 8005526:	6063      	str	r3, [r4, #4]
 8005528:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800552a:	3301      	adds	r3, #1
 800552c:	9321      	str	r3, [sp, #132]	; 0x84
 800552e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005530:	3301      	adds	r3, #1
 8005532:	2b07      	cmp	r3, #7
 8005534:	9320      	str	r3, [sp, #128]	; 0x80
 8005536:	dc01      	bgt.n	800553c <_vfprintf_r+0x6f4>
 8005538:	3408      	adds	r4, #8
 800553a:	e008      	b.n	800554e <_vfprintf_r+0x706>
 800553c:	aa1f      	add	r2, sp, #124	; 0x7c
 800553e:	4659      	mov	r1, fp
 8005540:	4648      	mov	r0, r9
 8005542:	f002 fc69 	bl	8007e18 <__sprint_r>
 8005546:	2800      	cmp	r0, #0
 8005548:	f040 832c 	bne.w	8005ba4 <_vfprintf_r+0xd5c>
 800554c:	ac2c      	add	r4, sp, #176	; 0xb0
 800554e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005550:	b1b3      	cbz	r3, 8005580 <_vfprintf_r+0x738>
 8005552:	ab18      	add	r3, sp, #96	; 0x60
 8005554:	6023      	str	r3, [r4, #0]
 8005556:	2302      	movs	r3, #2
 8005558:	6063      	str	r3, [r4, #4]
 800555a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800555c:	3302      	adds	r3, #2
 800555e:	9321      	str	r3, [sp, #132]	; 0x84
 8005560:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005562:	3301      	adds	r3, #1
 8005564:	2b07      	cmp	r3, #7
 8005566:	9320      	str	r3, [sp, #128]	; 0x80
 8005568:	dc01      	bgt.n	800556e <_vfprintf_r+0x726>
 800556a:	3408      	adds	r4, #8
 800556c:	e008      	b.n	8005580 <_vfprintf_r+0x738>
 800556e:	aa1f      	add	r2, sp, #124	; 0x7c
 8005570:	4659      	mov	r1, fp
 8005572:	4648      	mov	r0, r9
 8005574:	f002 fc50 	bl	8007e18 <__sprint_r>
 8005578:	2800      	cmp	r0, #0
 800557a:	f040 8313 	bne.w	8005ba4 <_vfprintf_r+0xd5c>
 800557e:	ac2c      	add	r4, sp, #176	; 0xb0
 8005580:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005582:	2b80      	cmp	r3, #128	; 0x80
 8005584:	d139      	bne.n	80055fa <_vfprintf_r+0x7b2>
 8005586:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005588:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800558a:	1a9b      	subs	r3, r3, r2
 800558c:	2b00      	cmp	r3, #0
 800558e:	9310      	str	r3, [sp, #64]	; 0x40
 8005590:	dd33      	ble.n	80055fa <_vfprintf_r+0x7b2>
 8005592:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005594:	2b10      	cmp	r3, #16
 8005596:	4b6b      	ldr	r3, [pc, #428]	; (8005744 <_vfprintf_r+0x8fc>)
 8005598:	6023      	str	r3, [r4, #0]
 800559a:	dd18      	ble.n	80055ce <_vfprintf_r+0x786>
 800559c:	2310      	movs	r3, #16
 800559e:	6063      	str	r3, [r4, #4]
 80055a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80055a2:	3310      	adds	r3, #16
 80055a4:	9321      	str	r3, [sp, #132]	; 0x84
 80055a6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80055a8:	3301      	adds	r3, #1
 80055aa:	2b07      	cmp	r3, #7
 80055ac:	9320      	str	r3, [sp, #128]	; 0x80
 80055ae:	dc01      	bgt.n	80055b4 <_vfprintf_r+0x76c>
 80055b0:	3408      	adds	r4, #8
 80055b2:	e008      	b.n	80055c6 <_vfprintf_r+0x77e>
 80055b4:	aa1f      	add	r2, sp, #124	; 0x7c
 80055b6:	4659      	mov	r1, fp
 80055b8:	4648      	mov	r0, r9
 80055ba:	f002 fc2d 	bl	8007e18 <__sprint_r>
 80055be:	2800      	cmp	r0, #0
 80055c0:	f040 82f0 	bne.w	8005ba4 <_vfprintf_r+0xd5c>
 80055c4:	ac2c      	add	r4, sp, #176	; 0xb0
 80055c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80055c8:	3b10      	subs	r3, #16
 80055ca:	9310      	str	r3, [sp, #64]	; 0x40
 80055cc:	e7e1      	b.n	8005592 <_vfprintf_r+0x74a>
 80055ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80055d0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80055d2:	6063      	str	r3, [r4, #4]
 80055d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80055d6:	4413      	add	r3, r2
 80055d8:	9321      	str	r3, [sp, #132]	; 0x84
 80055da:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80055dc:	3301      	adds	r3, #1
 80055de:	2b07      	cmp	r3, #7
 80055e0:	9320      	str	r3, [sp, #128]	; 0x80
 80055e2:	dc01      	bgt.n	80055e8 <_vfprintf_r+0x7a0>
 80055e4:	3408      	adds	r4, #8
 80055e6:	e008      	b.n	80055fa <_vfprintf_r+0x7b2>
 80055e8:	aa1f      	add	r2, sp, #124	; 0x7c
 80055ea:	4659      	mov	r1, fp
 80055ec:	4648      	mov	r0, r9
 80055ee:	f002 fc13 	bl	8007e18 <__sprint_r>
 80055f2:	2800      	cmp	r0, #0
 80055f4:	f040 82d6 	bne.w	8005ba4 <_vfprintf_r+0xd5c>
 80055f8:	ac2c      	add	r4, sp, #176	; 0xb0
 80055fa:	ebca 0606 	rsb	r6, sl, r6
 80055fe:	2e00      	cmp	r6, #0
 8005600:	dd2e      	ble.n	8005660 <_vfprintf_r+0x818>
 8005602:	4b50      	ldr	r3, [pc, #320]	; (8005744 <_vfprintf_r+0x8fc>)
 8005604:	2e10      	cmp	r6, #16
 8005606:	6023      	str	r3, [r4, #0]
 8005608:	dd16      	ble.n	8005638 <_vfprintf_r+0x7f0>
 800560a:	2310      	movs	r3, #16
 800560c:	6063      	str	r3, [r4, #4]
 800560e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005610:	3310      	adds	r3, #16
 8005612:	9321      	str	r3, [sp, #132]	; 0x84
 8005614:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005616:	3301      	adds	r3, #1
 8005618:	2b07      	cmp	r3, #7
 800561a:	9320      	str	r3, [sp, #128]	; 0x80
 800561c:	dc01      	bgt.n	8005622 <_vfprintf_r+0x7da>
 800561e:	3408      	adds	r4, #8
 8005620:	e008      	b.n	8005634 <_vfprintf_r+0x7ec>
 8005622:	aa1f      	add	r2, sp, #124	; 0x7c
 8005624:	4659      	mov	r1, fp
 8005626:	4648      	mov	r0, r9
 8005628:	f002 fbf6 	bl	8007e18 <__sprint_r>
 800562c:	2800      	cmp	r0, #0
 800562e:	f040 82b9 	bne.w	8005ba4 <_vfprintf_r+0xd5c>
 8005632:	ac2c      	add	r4, sp, #176	; 0xb0
 8005634:	3e10      	subs	r6, #16
 8005636:	e7e4      	b.n	8005602 <_vfprintf_r+0x7ba>
 8005638:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800563a:	9821      	ldr	r0, [sp, #132]	; 0x84
 800563c:	3301      	adds	r3, #1
 800563e:	6066      	str	r6, [r4, #4]
 8005640:	2b07      	cmp	r3, #7
 8005642:	4406      	add	r6, r0
 8005644:	9621      	str	r6, [sp, #132]	; 0x84
 8005646:	9320      	str	r3, [sp, #128]	; 0x80
 8005648:	dc01      	bgt.n	800564e <_vfprintf_r+0x806>
 800564a:	3408      	adds	r4, #8
 800564c:	e008      	b.n	8005660 <_vfprintf_r+0x818>
 800564e:	aa1f      	add	r2, sp, #124	; 0x7c
 8005650:	4659      	mov	r1, fp
 8005652:	4648      	mov	r0, r9
 8005654:	f002 fbe0 	bl	8007e18 <__sprint_r>
 8005658:	2800      	cmp	r0, #0
 800565a:	f040 82a3 	bne.w	8005ba4 <_vfprintf_r+0xd5c>
 800565e:	ac2c      	add	r4, sp, #176	; 0xb0
 8005660:	05eb      	lsls	r3, r5, #23
 8005662:	d414      	bmi.n	800568e <_vfprintf_r+0x846>
 8005664:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005666:	e884 0500 	stmia.w	r4, {r8, sl}
 800566a:	4453      	add	r3, sl
 800566c:	9321      	str	r3, [sp, #132]	; 0x84
 800566e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005670:	3301      	adds	r3, #1
 8005672:	2b07      	cmp	r3, #7
 8005674:	9320      	str	r3, [sp, #128]	; 0x80
 8005676:	f340 8244 	ble.w	8005b02 <_vfprintf_r+0xcba>
 800567a:	aa1f      	add	r2, sp, #124	; 0x7c
 800567c:	4659      	mov	r1, fp
 800567e:	4648      	mov	r0, r9
 8005680:	f002 fbca 	bl	8007e18 <__sprint_r>
 8005684:	2800      	cmp	r0, #0
 8005686:	f040 828d 	bne.w	8005ba4 <_vfprintf_r+0xd5c>
 800568a:	ac2c      	add	r4, sp, #176	; 0xb0
 800568c:	e23a      	b.n	8005b04 <_vfprintf_r+0xcbc>
 800568e:	9b06      	ldr	r3, [sp, #24]
 8005690:	2b65      	cmp	r3, #101	; 0x65
 8005692:	f340 81ad 	ble.w	80059f0 <_vfprintf_r+0xba8>
 8005696:	2200      	movs	r2, #0
 8005698:	2300      	movs	r3, #0
 800569a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800569c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800569e:	f7fb f9eb 	bl	8000a78 <__aeabi_dcmpeq>
 80056a2:	2800      	cmp	r0, #0
 80056a4:	d05d      	beq.n	8005762 <_vfprintf_r+0x91a>
 80056a6:	4b28      	ldr	r3, [pc, #160]	; (8005748 <_vfprintf_r+0x900>)
 80056a8:	6023      	str	r3, [r4, #0]
 80056aa:	2301      	movs	r3, #1
 80056ac:	6063      	str	r3, [r4, #4]
 80056ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80056b0:	3301      	adds	r3, #1
 80056b2:	9321      	str	r3, [sp, #132]	; 0x84
 80056b4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80056b6:	3301      	adds	r3, #1
 80056b8:	2b07      	cmp	r3, #7
 80056ba:	9320      	str	r3, [sp, #128]	; 0x80
 80056bc:	dc01      	bgt.n	80056c2 <_vfprintf_r+0x87a>
 80056be:	3408      	adds	r4, #8
 80056c0:	e008      	b.n	80056d4 <_vfprintf_r+0x88c>
 80056c2:	aa1f      	add	r2, sp, #124	; 0x7c
 80056c4:	4659      	mov	r1, fp
 80056c6:	4648      	mov	r0, r9
 80056c8:	f002 fba6 	bl	8007e18 <__sprint_r>
 80056cc:	2800      	cmp	r0, #0
 80056ce:	f040 8269 	bne.w	8005ba4 <_vfprintf_r+0xd5c>
 80056d2:	ac2c      	add	r4, sp, #176	; 0xb0
 80056d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80056d6:	9a08      	ldr	r2, [sp, #32]
 80056d8:	4293      	cmp	r3, r2
 80056da:	db02      	blt.n	80056e2 <_vfprintf_r+0x89a>
 80056dc:	07ef      	lsls	r7, r5, #31
 80056de:	f140 8211 	bpl.w	8005b04 <_vfprintf_r+0xcbc>
 80056e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80056e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80056e6:	6023      	str	r3, [r4, #0]
 80056e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056ea:	6063      	str	r3, [r4, #4]
 80056ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80056ee:	4413      	add	r3, r2
 80056f0:	9321      	str	r3, [sp, #132]	; 0x84
 80056f2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80056f4:	3301      	adds	r3, #1
 80056f6:	2b07      	cmp	r3, #7
 80056f8:	9320      	str	r3, [sp, #128]	; 0x80
 80056fa:	dc01      	bgt.n	8005700 <_vfprintf_r+0x8b8>
 80056fc:	3408      	adds	r4, #8
 80056fe:	e008      	b.n	8005712 <_vfprintf_r+0x8ca>
 8005700:	aa1f      	add	r2, sp, #124	; 0x7c
 8005702:	4659      	mov	r1, fp
 8005704:	4648      	mov	r0, r9
 8005706:	f002 fb87 	bl	8007e18 <__sprint_r>
 800570a:	2800      	cmp	r0, #0
 800570c:	f040 824a 	bne.w	8005ba4 <_vfprintf_r+0xd5c>
 8005710:	ac2c      	add	r4, sp, #176	; 0xb0
 8005712:	9b08      	ldr	r3, [sp, #32]
 8005714:	1e5e      	subs	r6, r3, #1
 8005716:	2e00      	cmp	r6, #0
 8005718:	f340 81f4 	ble.w	8005b04 <_vfprintf_r+0xcbc>
 800571c:	4f09      	ldr	r7, [pc, #36]	; (8005744 <_vfprintf_r+0x8fc>)
 800571e:	f04f 0810 	mov.w	r8, #16
 8005722:	2e10      	cmp	r6, #16
 8005724:	f340 8158 	ble.w	80059d8 <_vfprintf_r+0xb90>
 8005728:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800572a:	e884 0180 	stmia.w	r4, {r7, r8}
 800572e:	3310      	adds	r3, #16
 8005730:	9321      	str	r3, [sp, #132]	; 0x84
 8005732:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005734:	3301      	adds	r3, #1
 8005736:	2b07      	cmp	r3, #7
 8005738:	9320      	str	r3, [sp, #128]	; 0x80
 800573a:	dc07      	bgt.n	800574c <_vfprintf_r+0x904>
 800573c:	3408      	adds	r4, #8
 800573e:	e00e      	b.n	800575e <_vfprintf_r+0x916>
 8005740:	08008a38 	.word	0x08008a38
 8005744:	08008a48 	.word	0x08008a48
 8005748:	08008a26 	.word	0x08008a26
 800574c:	aa1f      	add	r2, sp, #124	; 0x7c
 800574e:	4659      	mov	r1, fp
 8005750:	4648      	mov	r0, r9
 8005752:	f002 fb61 	bl	8007e18 <__sprint_r>
 8005756:	2800      	cmp	r0, #0
 8005758:	f040 8224 	bne.w	8005ba4 <_vfprintf_r+0xd5c>
 800575c:	ac2c      	add	r4, sp, #176	; 0xb0
 800575e:	3e10      	subs	r6, #16
 8005760:	e7df      	b.n	8005722 <_vfprintf_r+0x8da>
 8005762:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005764:	2b00      	cmp	r3, #0
 8005766:	dc7c      	bgt.n	8005862 <_vfprintf_r+0xa1a>
 8005768:	4b9f      	ldr	r3, [pc, #636]	; (80059e8 <_vfprintf_r+0xba0>)
 800576a:	6023      	str	r3, [r4, #0]
 800576c:	2301      	movs	r3, #1
 800576e:	6063      	str	r3, [r4, #4]
 8005770:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005772:	3301      	adds	r3, #1
 8005774:	9321      	str	r3, [sp, #132]	; 0x84
 8005776:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005778:	3301      	adds	r3, #1
 800577a:	2b07      	cmp	r3, #7
 800577c:	9320      	str	r3, [sp, #128]	; 0x80
 800577e:	dc01      	bgt.n	8005784 <_vfprintf_r+0x93c>
 8005780:	3408      	adds	r4, #8
 8005782:	e008      	b.n	8005796 <_vfprintf_r+0x94e>
 8005784:	aa1f      	add	r2, sp, #124	; 0x7c
 8005786:	4659      	mov	r1, fp
 8005788:	4648      	mov	r0, r9
 800578a:	f002 fb45 	bl	8007e18 <__sprint_r>
 800578e:	2800      	cmp	r0, #0
 8005790:	f040 8208 	bne.w	8005ba4 <_vfprintf_r+0xd5c>
 8005794:	ac2c      	add	r4, sp, #176	; 0xb0
 8005796:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005798:	b923      	cbnz	r3, 80057a4 <_vfprintf_r+0x95c>
 800579a:	9b08      	ldr	r3, [sp, #32]
 800579c:	b913      	cbnz	r3, 80057a4 <_vfprintf_r+0x95c>
 800579e:	07ee      	lsls	r6, r5, #31
 80057a0:	f140 81b0 	bpl.w	8005b04 <_vfprintf_r+0xcbc>
 80057a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80057a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057a8:	6023      	str	r3, [r4, #0]
 80057aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057ac:	6063      	str	r3, [r4, #4]
 80057ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80057b0:	4413      	add	r3, r2
 80057b2:	9321      	str	r3, [sp, #132]	; 0x84
 80057b4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80057b6:	3301      	adds	r3, #1
 80057b8:	2b07      	cmp	r3, #7
 80057ba:	9320      	str	r3, [sp, #128]	; 0x80
 80057bc:	dc02      	bgt.n	80057c4 <_vfprintf_r+0x97c>
 80057be:	f104 0308 	add.w	r3, r4, #8
 80057c2:	e008      	b.n	80057d6 <_vfprintf_r+0x98e>
 80057c4:	aa1f      	add	r2, sp, #124	; 0x7c
 80057c6:	4659      	mov	r1, fp
 80057c8:	4648      	mov	r0, r9
 80057ca:	f002 fb25 	bl	8007e18 <__sprint_r>
 80057ce:	2800      	cmp	r0, #0
 80057d0:	f040 81e8 	bne.w	8005ba4 <_vfprintf_r+0xd5c>
 80057d4:	ab2c      	add	r3, sp, #176	; 0xb0
 80057d6:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80057d8:	4276      	negs	r6, r6
 80057da:	2e00      	cmp	r6, #0
 80057dc:	dd30      	ble.n	8005840 <_vfprintf_r+0x9f8>
 80057de:	4f83      	ldr	r7, [pc, #524]	; (80059ec <_vfprintf_r+0xba4>)
 80057e0:	2410      	movs	r4, #16
 80057e2:	2e10      	cmp	r6, #16
 80057e4:	dd16      	ble.n	8005814 <_vfprintf_r+0x9cc>
 80057e6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80057e8:	601f      	str	r7, [r3, #0]
 80057ea:	3210      	adds	r2, #16
 80057ec:	9221      	str	r2, [sp, #132]	; 0x84
 80057ee:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80057f0:	605c      	str	r4, [r3, #4]
 80057f2:	3201      	adds	r2, #1
 80057f4:	2a07      	cmp	r2, #7
 80057f6:	9220      	str	r2, [sp, #128]	; 0x80
 80057f8:	dc01      	bgt.n	80057fe <_vfprintf_r+0x9b6>
 80057fa:	3308      	adds	r3, #8
 80057fc:	e008      	b.n	8005810 <_vfprintf_r+0x9c8>
 80057fe:	aa1f      	add	r2, sp, #124	; 0x7c
 8005800:	4659      	mov	r1, fp
 8005802:	4648      	mov	r0, r9
 8005804:	f002 fb08 	bl	8007e18 <__sprint_r>
 8005808:	2800      	cmp	r0, #0
 800580a:	f040 81cb 	bne.w	8005ba4 <_vfprintf_r+0xd5c>
 800580e:	ab2c      	add	r3, sp, #176	; 0xb0
 8005810:	3e10      	subs	r6, #16
 8005812:	e7e6      	b.n	80057e2 <_vfprintf_r+0x99a>
 8005814:	4a75      	ldr	r2, [pc, #468]	; (80059ec <_vfprintf_r+0xba4>)
 8005816:	e883 0044 	stmia.w	r3, {r2, r6}
 800581a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800581c:	4416      	add	r6, r2
 800581e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005820:	9621      	str	r6, [sp, #132]	; 0x84
 8005822:	3201      	adds	r2, #1
 8005824:	2a07      	cmp	r2, #7
 8005826:	9220      	str	r2, [sp, #128]	; 0x80
 8005828:	dc01      	bgt.n	800582e <_vfprintf_r+0x9e6>
 800582a:	3308      	adds	r3, #8
 800582c:	e008      	b.n	8005840 <_vfprintf_r+0x9f8>
 800582e:	aa1f      	add	r2, sp, #124	; 0x7c
 8005830:	4659      	mov	r1, fp
 8005832:	4648      	mov	r0, r9
 8005834:	f002 faf0 	bl	8007e18 <__sprint_r>
 8005838:	2800      	cmp	r0, #0
 800583a:	f040 81b3 	bne.w	8005ba4 <_vfprintf_r+0xd5c>
 800583e:	ab2c      	add	r3, sp, #176	; 0xb0
 8005840:	9a08      	ldr	r2, [sp, #32]
 8005842:	9908      	ldr	r1, [sp, #32]
 8005844:	605a      	str	r2, [r3, #4]
 8005846:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005848:	f8c3 8000 	str.w	r8, [r3]
 800584c:	440a      	add	r2, r1
 800584e:	9221      	str	r2, [sp, #132]	; 0x84
 8005850:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005852:	3201      	adds	r2, #1
 8005854:	2a07      	cmp	r2, #7
 8005856:	9220      	str	r2, [sp, #128]	; 0x80
 8005858:	f73f af0f 	bgt.w	800567a <_vfprintf_r+0x832>
 800585c:	f103 0408 	add.w	r4, r3, #8
 8005860:	e150      	b.n	8005b04 <_vfprintf_r+0xcbc>
 8005862:	9b08      	ldr	r3, [sp, #32]
 8005864:	42bb      	cmp	r3, r7
 8005866:	bfa8      	it	ge
 8005868:	463b      	movge	r3, r7
 800586a:	2b00      	cmp	r3, #0
 800586c:	461e      	mov	r6, r3
 800586e:	dd15      	ble.n	800589c <_vfprintf_r+0xa54>
 8005870:	6063      	str	r3, [r4, #4]
 8005872:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005874:	f8c4 8000 	str.w	r8, [r4]
 8005878:	4433      	add	r3, r6
 800587a:	9321      	str	r3, [sp, #132]	; 0x84
 800587c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800587e:	3301      	adds	r3, #1
 8005880:	2b07      	cmp	r3, #7
 8005882:	9320      	str	r3, [sp, #128]	; 0x80
 8005884:	dc01      	bgt.n	800588a <_vfprintf_r+0xa42>
 8005886:	3408      	adds	r4, #8
 8005888:	e008      	b.n	800589c <_vfprintf_r+0xa54>
 800588a:	aa1f      	add	r2, sp, #124	; 0x7c
 800588c:	4659      	mov	r1, fp
 800588e:	4648      	mov	r0, r9
 8005890:	f002 fac2 	bl	8007e18 <__sprint_r>
 8005894:	2800      	cmp	r0, #0
 8005896:	f040 8185 	bne.w	8005ba4 <_vfprintf_r+0xd5c>
 800589a:	ac2c      	add	r4, sp, #176	; 0xb0
 800589c:	2e00      	cmp	r6, #0
 800589e:	bfb4      	ite	lt
 80058a0:	463e      	movlt	r6, r7
 80058a2:	1bbe      	subge	r6, r7, r6
 80058a4:	2e00      	cmp	r6, #0
 80058a6:	dd30      	ble.n	800590a <_vfprintf_r+0xac2>
 80058a8:	f04f 0a10 	mov.w	sl, #16
 80058ac:	4b4f      	ldr	r3, [pc, #316]	; (80059ec <_vfprintf_r+0xba4>)
 80058ae:	2e10      	cmp	r6, #16
 80058b0:	6023      	str	r3, [r4, #0]
 80058b2:	dd16      	ble.n	80058e2 <_vfprintf_r+0xa9a>
 80058b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80058b6:	f8c4 a004 	str.w	sl, [r4, #4]
 80058ba:	3310      	adds	r3, #16
 80058bc:	9321      	str	r3, [sp, #132]	; 0x84
 80058be:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80058c0:	3301      	adds	r3, #1
 80058c2:	2b07      	cmp	r3, #7
 80058c4:	9320      	str	r3, [sp, #128]	; 0x80
 80058c6:	dc01      	bgt.n	80058cc <_vfprintf_r+0xa84>
 80058c8:	3408      	adds	r4, #8
 80058ca:	e008      	b.n	80058de <_vfprintf_r+0xa96>
 80058cc:	aa1f      	add	r2, sp, #124	; 0x7c
 80058ce:	4659      	mov	r1, fp
 80058d0:	4648      	mov	r0, r9
 80058d2:	f002 faa1 	bl	8007e18 <__sprint_r>
 80058d6:	2800      	cmp	r0, #0
 80058d8:	f040 8164 	bne.w	8005ba4 <_vfprintf_r+0xd5c>
 80058dc:	ac2c      	add	r4, sp, #176	; 0xb0
 80058de:	3e10      	subs	r6, #16
 80058e0:	e7e4      	b.n	80058ac <_vfprintf_r+0xa64>
 80058e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80058e4:	6066      	str	r6, [r4, #4]
 80058e6:	441e      	add	r6, r3
 80058e8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80058ea:	9621      	str	r6, [sp, #132]	; 0x84
 80058ec:	3301      	adds	r3, #1
 80058ee:	2b07      	cmp	r3, #7
 80058f0:	9320      	str	r3, [sp, #128]	; 0x80
 80058f2:	dc01      	bgt.n	80058f8 <_vfprintf_r+0xab0>
 80058f4:	3408      	adds	r4, #8
 80058f6:	e008      	b.n	800590a <_vfprintf_r+0xac2>
 80058f8:	aa1f      	add	r2, sp, #124	; 0x7c
 80058fa:	4659      	mov	r1, fp
 80058fc:	4648      	mov	r0, r9
 80058fe:	f002 fa8b 	bl	8007e18 <__sprint_r>
 8005902:	2800      	cmp	r0, #0
 8005904:	f040 814e 	bne.w	8005ba4 <_vfprintf_r+0xd5c>
 8005908:	ac2c      	add	r4, sp, #176	; 0xb0
 800590a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800590c:	9a08      	ldr	r2, [sp, #32]
 800590e:	4447      	add	r7, r8
 8005910:	4293      	cmp	r3, r2
 8005912:	db01      	blt.n	8005918 <_vfprintf_r+0xad0>
 8005914:	07e8      	lsls	r0, r5, #31
 8005916:	d517      	bpl.n	8005948 <_vfprintf_r+0xb00>
 8005918:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800591a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800591c:	6023      	str	r3, [r4, #0]
 800591e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005920:	6063      	str	r3, [r4, #4]
 8005922:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005924:	4413      	add	r3, r2
 8005926:	9321      	str	r3, [sp, #132]	; 0x84
 8005928:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800592a:	3301      	adds	r3, #1
 800592c:	2b07      	cmp	r3, #7
 800592e:	9320      	str	r3, [sp, #128]	; 0x80
 8005930:	dc01      	bgt.n	8005936 <_vfprintf_r+0xaee>
 8005932:	3408      	adds	r4, #8
 8005934:	e008      	b.n	8005948 <_vfprintf_r+0xb00>
 8005936:	aa1f      	add	r2, sp, #124	; 0x7c
 8005938:	4659      	mov	r1, fp
 800593a:	4648      	mov	r0, r9
 800593c:	f002 fa6c 	bl	8007e18 <__sprint_r>
 8005940:	2800      	cmp	r0, #0
 8005942:	f040 812f 	bne.w	8005ba4 <_vfprintf_r+0xd5c>
 8005946:	ac2c      	add	r4, sp, #176	; 0xb0
 8005948:	9b08      	ldr	r3, [sp, #32]
 800594a:	9a08      	ldr	r2, [sp, #32]
 800594c:	eb08 0603 	add.w	r6, r8, r3
 8005950:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005952:	1bf6      	subs	r6, r6, r7
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	429e      	cmp	r6, r3
 8005958:	bfa8      	it	ge
 800595a:	461e      	movge	r6, r3
 800595c:	2e00      	cmp	r6, #0
 800595e:	dd14      	ble.n	800598a <_vfprintf_r+0xb42>
 8005960:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005962:	6027      	str	r7, [r4, #0]
 8005964:	4433      	add	r3, r6
 8005966:	9321      	str	r3, [sp, #132]	; 0x84
 8005968:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800596a:	6066      	str	r6, [r4, #4]
 800596c:	3301      	adds	r3, #1
 800596e:	2b07      	cmp	r3, #7
 8005970:	9320      	str	r3, [sp, #128]	; 0x80
 8005972:	dc01      	bgt.n	8005978 <_vfprintf_r+0xb30>
 8005974:	3408      	adds	r4, #8
 8005976:	e008      	b.n	800598a <_vfprintf_r+0xb42>
 8005978:	aa1f      	add	r2, sp, #124	; 0x7c
 800597a:	4659      	mov	r1, fp
 800597c:	4648      	mov	r0, r9
 800597e:	f002 fa4b 	bl	8007e18 <__sprint_r>
 8005982:	2800      	cmp	r0, #0
 8005984:	f040 810e 	bne.w	8005ba4 <_vfprintf_r+0xd5c>
 8005988:	ac2c      	add	r4, sp, #176	; 0xb0
 800598a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800598c:	9a08      	ldr	r2, [sp, #32]
 800598e:	2e00      	cmp	r6, #0
 8005990:	eba2 0303 	sub.w	r3, r2, r3
 8005994:	bfb4      	ite	lt
 8005996:	461e      	movlt	r6, r3
 8005998:	1b9e      	subge	r6, r3, r6
 800599a:	2e00      	cmp	r6, #0
 800599c:	f340 80b2 	ble.w	8005b04 <_vfprintf_r+0xcbc>
 80059a0:	4f12      	ldr	r7, [pc, #72]	; (80059ec <_vfprintf_r+0xba4>)
 80059a2:	f04f 0810 	mov.w	r8, #16
 80059a6:	2e10      	cmp	r6, #16
 80059a8:	dd16      	ble.n	80059d8 <_vfprintf_r+0xb90>
 80059aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059ac:	e884 0180 	stmia.w	r4, {r7, r8}
 80059b0:	3310      	adds	r3, #16
 80059b2:	9321      	str	r3, [sp, #132]	; 0x84
 80059b4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80059b6:	3301      	adds	r3, #1
 80059b8:	2b07      	cmp	r3, #7
 80059ba:	9320      	str	r3, [sp, #128]	; 0x80
 80059bc:	dc01      	bgt.n	80059c2 <_vfprintf_r+0xb7a>
 80059be:	3408      	adds	r4, #8
 80059c0:	e008      	b.n	80059d4 <_vfprintf_r+0xb8c>
 80059c2:	aa1f      	add	r2, sp, #124	; 0x7c
 80059c4:	4659      	mov	r1, fp
 80059c6:	4648      	mov	r0, r9
 80059c8:	f002 fa26 	bl	8007e18 <__sprint_r>
 80059cc:	2800      	cmp	r0, #0
 80059ce:	f040 80e9 	bne.w	8005ba4 <_vfprintf_r+0xd5c>
 80059d2:	ac2c      	add	r4, sp, #176	; 0xb0
 80059d4:	3e10      	subs	r6, #16
 80059d6:	e7e6      	b.n	80059a6 <_vfprintf_r+0xb5e>
 80059d8:	4b04      	ldr	r3, [pc, #16]	; (80059ec <_vfprintf_r+0xba4>)
 80059da:	e884 0048 	stmia.w	r4, {r3, r6}
 80059de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059e0:	441e      	add	r6, r3
 80059e2:	9621      	str	r6, [sp, #132]	; 0x84
 80059e4:	e643      	b.n	800566e <_vfprintf_r+0x826>
 80059e6:	bf00      	nop
 80059e8:	08008a26 	.word	0x08008a26
 80059ec:	08008a48 	.word	0x08008a48
 80059f0:	9b08      	ldr	r3, [sp, #32]
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	dc01      	bgt.n	80059fa <_vfprintf_r+0xbb2>
 80059f6:	07e9      	lsls	r1, r5, #31
 80059f8:	d573      	bpl.n	8005ae2 <_vfprintf_r+0xc9a>
 80059fa:	2301      	movs	r3, #1
 80059fc:	6063      	str	r3, [r4, #4]
 80059fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a00:	f8c4 8000 	str.w	r8, [r4]
 8005a04:	3301      	adds	r3, #1
 8005a06:	9321      	str	r3, [sp, #132]	; 0x84
 8005a08:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	2b07      	cmp	r3, #7
 8005a0e:	9320      	str	r3, [sp, #128]	; 0x80
 8005a10:	dc01      	bgt.n	8005a16 <_vfprintf_r+0xbce>
 8005a12:	3408      	adds	r4, #8
 8005a14:	e008      	b.n	8005a28 <_vfprintf_r+0xbe0>
 8005a16:	aa1f      	add	r2, sp, #124	; 0x7c
 8005a18:	4659      	mov	r1, fp
 8005a1a:	4648      	mov	r0, r9
 8005a1c:	f002 f9fc 	bl	8007e18 <__sprint_r>
 8005a20:	2800      	cmp	r0, #0
 8005a22:	f040 80bf 	bne.w	8005ba4 <_vfprintf_r+0xd5c>
 8005a26:	ac2c      	add	r4, sp, #176	; 0xb0
 8005a28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005a2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a2c:	6023      	str	r3, [r4, #0]
 8005a2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a30:	6063      	str	r3, [r4, #4]
 8005a32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a34:	4413      	add	r3, r2
 8005a36:	9321      	str	r3, [sp, #132]	; 0x84
 8005a38:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	2b07      	cmp	r3, #7
 8005a3e:	9320      	str	r3, [sp, #128]	; 0x80
 8005a40:	dc01      	bgt.n	8005a46 <_vfprintf_r+0xbfe>
 8005a42:	3408      	adds	r4, #8
 8005a44:	e008      	b.n	8005a58 <_vfprintf_r+0xc10>
 8005a46:	aa1f      	add	r2, sp, #124	; 0x7c
 8005a48:	4659      	mov	r1, fp
 8005a4a:	4648      	mov	r0, r9
 8005a4c:	f002 f9e4 	bl	8007e18 <__sprint_r>
 8005a50:	2800      	cmp	r0, #0
 8005a52:	f040 80a7 	bne.w	8005ba4 <_vfprintf_r+0xd5c>
 8005a56:	ac2c      	add	r4, sp, #176	; 0xb0
 8005a58:	2300      	movs	r3, #0
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005a5e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005a60:	f7fb f80a 	bl	8000a78 <__aeabi_dcmpeq>
 8005a64:	9b08      	ldr	r3, [sp, #32]
 8005a66:	1e5e      	subs	r6, r3, #1
 8005a68:	b9b8      	cbnz	r0, 8005a9a <_vfprintf_r+0xc52>
 8005a6a:	f108 0301 	add.w	r3, r8, #1
 8005a6e:	e884 0048 	stmia.w	r4, {r3, r6}
 8005a72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a74:	9a08      	ldr	r2, [sp, #32]
 8005a76:	3b01      	subs	r3, #1
 8005a78:	4413      	add	r3, r2
 8005a7a:	9321      	str	r3, [sp, #132]	; 0x84
 8005a7c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005a7e:	3301      	adds	r3, #1
 8005a80:	2b07      	cmp	r3, #7
 8005a82:	9320      	str	r3, [sp, #128]	; 0x80
 8005a84:	dd34      	ble.n	8005af0 <_vfprintf_r+0xca8>
 8005a86:	aa1f      	add	r2, sp, #124	; 0x7c
 8005a88:	4659      	mov	r1, fp
 8005a8a:	4648      	mov	r0, r9
 8005a8c:	f002 f9c4 	bl	8007e18 <__sprint_r>
 8005a90:	2800      	cmp	r0, #0
 8005a92:	f040 8087 	bne.w	8005ba4 <_vfprintf_r+0xd5c>
 8005a96:	ac2c      	add	r4, sp, #176	; 0xb0
 8005a98:	e02b      	b.n	8005af2 <_vfprintf_r+0xcaa>
 8005a9a:	2e00      	cmp	r6, #0
 8005a9c:	dd29      	ble.n	8005af2 <_vfprintf_r+0xcaa>
 8005a9e:	4f8e      	ldr	r7, [pc, #568]	; (8005cd8 <_vfprintf_r+0xe90>)
 8005aa0:	f04f 0810 	mov.w	r8, #16
 8005aa4:	2e10      	cmp	r6, #16
 8005aa6:	dd15      	ble.n	8005ad4 <_vfprintf_r+0xc8c>
 8005aa8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005aaa:	e884 0180 	stmia.w	r4, {r7, r8}
 8005aae:	3310      	adds	r3, #16
 8005ab0:	9321      	str	r3, [sp, #132]	; 0x84
 8005ab2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	2b07      	cmp	r3, #7
 8005ab8:	9320      	str	r3, [sp, #128]	; 0x80
 8005aba:	dc01      	bgt.n	8005ac0 <_vfprintf_r+0xc78>
 8005abc:	3408      	adds	r4, #8
 8005abe:	e007      	b.n	8005ad0 <_vfprintf_r+0xc88>
 8005ac0:	aa1f      	add	r2, sp, #124	; 0x7c
 8005ac2:	4659      	mov	r1, fp
 8005ac4:	4648      	mov	r0, r9
 8005ac6:	f002 f9a7 	bl	8007e18 <__sprint_r>
 8005aca:	2800      	cmp	r0, #0
 8005acc:	d16a      	bne.n	8005ba4 <_vfprintf_r+0xd5c>
 8005ace:	ac2c      	add	r4, sp, #176	; 0xb0
 8005ad0:	3e10      	subs	r6, #16
 8005ad2:	e7e7      	b.n	8005aa4 <_vfprintf_r+0xc5c>
 8005ad4:	4b80      	ldr	r3, [pc, #512]	; (8005cd8 <_vfprintf_r+0xe90>)
 8005ad6:	e884 0048 	stmia.w	r4, {r3, r6}
 8005ada:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005adc:	441e      	add	r6, r3
 8005ade:	9621      	str	r6, [sp, #132]	; 0x84
 8005ae0:	e7cc      	b.n	8005a7c <_vfprintf_r+0xc34>
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	6063      	str	r3, [r4, #4]
 8005ae6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ae8:	f8c4 8000 	str.w	r8, [r4]
 8005aec:	3301      	adds	r3, #1
 8005aee:	e7c4      	b.n	8005a7a <_vfprintf_r+0xc32>
 8005af0:	3408      	adds	r4, #8
 8005af2:	ab1b      	add	r3, sp, #108	; 0x6c
 8005af4:	6023      	str	r3, [r4, #0]
 8005af6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005af8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005afa:	6063      	str	r3, [r4, #4]
 8005afc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005afe:	4413      	add	r3, r2
 8005b00:	e5b4      	b.n	800566c <_vfprintf_r+0x824>
 8005b02:	3408      	adds	r4, #8
 8005b04:	076a      	lsls	r2, r5, #29
 8005b06:	d40b      	bmi.n	8005b20 <_vfprintf_r+0xcd8>
 8005b08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b0a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005b0c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005b0e:	428a      	cmp	r2, r1
 8005b10:	bfac      	ite	ge
 8005b12:	189b      	addge	r3, r3, r2
 8005b14:	185b      	addlt	r3, r3, r1
 8005b16:	930e      	str	r3, [sp, #56]	; 0x38
 8005b18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d035      	beq.n	8005b8a <_vfprintf_r+0xd42>
 8005b1e:	e02e      	b.n	8005b7e <_vfprintf_r+0xd36>
 8005b20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b22:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005b24:	1a9d      	subs	r5, r3, r2
 8005b26:	2d00      	cmp	r5, #0
 8005b28:	ddee      	ble.n	8005b08 <_vfprintf_r+0xcc0>
 8005b2a:	2610      	movs	r6, #16
 8005b2c:	4b6b      	ldr	r3, [pc, #428]	; (8005cdc <_vfprintf_r+0xe94>)
 8005b2e:	2d10      	cmp	r5, #16
 8005b30:	6023      	str	r3, [r4, #0]
 8005b32:	dd13      	ble.n	8005b5c <_vfprintf_r+0xd14>
 8005b34:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b36:	6066      	str	r6, [r4, #4]
 8005b38:	3310      	adds	r3, #16
 8005b3a:	9321      	str	r3, [sp, #132]	; 0x84
 8005b3c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005b3e:	3301      	adds	r3, #1
 8005b40:	2b07      	cmp	r3, #7
 8005b42:	9320      	str	r3, [sp, #128]	; 0x80
 8005b44:	dc01      	bgt.n	8005b4a <_vfprintf_r+0xd02>
 8005b46:	3408      	adds	r4, #8
 8005b48:	e006      	b.n	8005b58 <_vfprintf_r+0xd10>
 8005b4a:	aa1f      	add	r2, sp, #124	; 0x7c
 8005b4c:	4659      	mov	r1, fp
 8005b4e:	4648      	mov	r0, r9
 8005b50:	f002 f962 	bl	8007e18 <__sprint_r>
 8005b54:	bb30      	cbnz	r0, 8005ba4 <_vfprintf_r+0xd5c>
 8005b56:	ac2c      	add	r4, sp, #176	; 0xb0
 8005b58:	3d10      	subs	r5, #16
 8005b5a:	e7e7      	b.n	8005b2c <_vfprintf_r+0xce4>
 8005b5c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b5e:	6065      	str	r5, [r4, #4]
 8005b60:	441d      	add	r5, r3
 8005b62:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005b64:	9521      	str	r5, [sp, #132]	; 0x84
 8005b66:	3301      	adds	r3, #1
 8005b68:	2b07      	cmp	r3, #7
 8005b6a:	9320      	str	r3, [sp, #128]	; 0x80
 8005b6c:	ddcc      	ble.n	8005b08 <_vfprintf_r+0xcc0>
 8005b6e:	aa1f      	add	r2, sp, #124	; 0x7c
 8005b70:	4659      	mov	r1, fp
 8005b72:	4648      	mov	r0, r9
 8005b74:	f002 f950 	bl	8007e18 <__sprint_r>
 8005b78:	2800      	cmp	r0, #0
 8005b7a:	d0c5      	beq.n	8005b08 <_vfprintf_r+0xcc0>
 8005b7c:	e012      	b.n	8005ba4 <_vfprintf_r+0xd5c>
 8005b7e:	aa1f      	add	r2, sp, #124	; 0x7c
 8005b80:	4659      	mov	r1, fp
 8005b82:	4648      	mov	r0, r9
 8005b84:	f002 f948 	bl	8007e18 <__sprint_r>
 8005b88:	b960      	cbnz	r0, 8005ba4 <_vfprintf_r+0xd5c>
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	9320      	str	r3, [sp, #128]	; 0x80
 8005b8e:	9f07      	ldr	r7, [sp, #28]
 8005b90:	ac2c      	add	r4, sp, #176	; 0xb0
 8005b92:	f7ff b9c0 	b.w	8004f16 <_vfprintf_r+0xce>
 8005b96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b98:	b123      	cbz	r3, 8005ba4 <_vfprintf_r+0xd5c>
 8005b9a:	aa1f      	add	r2, sp, #124	; 0x7c
 8005b9c:	4659      	mov	r1, fp
 8005b9e:	4648      	mov	r0, r9
 8005ba0:	f002 f93a 	bl	8007e18 <__sprint_r>
 8005ba4:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8005ba8:	065b      	lsls	r3, r3, #25
 8005baa:	f53f a999 	bmi.w	8004ee0 <_vfprintf_r+0x98>
 8005bae:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005bb0:	e131      	b.n	8005e16 <_vfprintf_r+0xfce>
 8005bb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005bb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005bb6:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005bb8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005bba:	f7fa ff8f 	bl	8000adc <__aeabi_dcmpun>
 8005bbe:	b160      	cbz	r0, 8005bda <_vfprintf_r+0xd92>
 8005bc0:	4b47      	ldr	r3, [pc, #284]	; (8005ce0 <_vfprintf_r+0xe98>)
 8005bc2:	4a48      	ldr	r2, [pc, #288]	; (8005ce4 <_vfprintf_r+0xe9c>)
 8005bc4:	9906      	ldr	r1, [sp, #24]
 8005bc6:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8005bca:	2947      	cmp	r1, #71	; 0x47
 8005bcc:	bfcc      	ite	gt
 8005bce:	4690      	movgt	r8, r2
 8005bd0:	4698      	movle	r8, r3
 8005bd2:	f04f 0a03 	mov.w	sl, #3
 8005bd6:	2600      	movs	r6, #0
 8005bd8:	e44d      	b.n	8005476 <_vfprintf_r+0x62e>
 8005bda:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005bde:	d00a      	beq.n	8005bf6 <_vfprintf_r+0xdae>
 8005be0:	9b06      	ldr	r3, [sp, #24]
 8005be2:	f023 0320 	bic.w	r3, r3, #32
 8005be6:	2b47      	cmp	r3, #71	; 0x47
 8005be8:	d107      	bne.n	8005bfa <_vfprintf_r+0xdb2>
 8005bea:	f1ba 0f00 	cmp.w	sl, #0
 8005bee:	bf08      	it	eq
 8005bf0:	f04f 0a01 	moveq.w	sl, #1
 8005bf4:	e001      	b.n	8005bfa <_vfprintf_r+0xdb2>
 8005bf6:	f04f 0a06 	mov.w	sl, #6
 8005bfa:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8005bfe:	9315      	str	r3, [sp, #84]	; 0x54
 8005c00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c02:	1e1f      	subs	r7, r3, #0
 8005c04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c06:	bfa8      	it	ge
 8005c08:	9710      	strge	r7, [sp, #64]	; 0x40
 8005c0a:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c0c:	bfbd      	ittte	lt
 8005c0e:	463b      	movlt	r3, r7
 8005c10:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005c14:	9310      	strlt	r3, [sp, #64]	; 0x40
 8005c16:	2300      	movge	r3, #0
 8005c18:	bfb8      	it	lt
 8005c1a:	232d      	movlt	r3, #45	; 0x2d
 8005c1c:	9314      	str	r3, [sp, #80]	; 0x50
 8005c1e:	9b06      	ldr	r3, [sp, #24]
 8005c20:	f023 0720 	bic.w	r7, r3, #32
 8005c24:	2f46      	cmp	r7, #70	; 0x46
 8005c26:	d004      	beq.n	8005c32 <_vfprintf_r+0xdea>
 8005c28:	2f45      	cmp	r7, #69	; 0x45
 8005c2a:	d105      	bne.n	8005c38 <_vfprintf_r+0xdf0>
 8005c2c:	f10a 0601 	add.w	r6, sl, #1
 8005c30:	e003      	b.n	8005c3a <_vfprintf_r+0xdf2>
 8005c32:	4656      	mov	r6, sl
 8005c34:	2303      	movs	r3, #3
 8005c36:	e001      	b.n	8005c3c <_vfprintf_r+0xdf4>
 8005c38:	4656      	mov	r6, sl
 8005c3a:	2302      	movs	r3, #2
 8005c3c:	aa1d      	add	r2, sp, #116	; 0x74
 8005c3e:	9204      	str	r2, [sp, #16]
 8005c40:	aa1a      	add	r2, sp, #104	; 0x68
 8005c42:	9203      	str	r2, [sp, #12]
 8005c44:	aa19      	add	r2, sp, #100	; 0x64
 8005c46:	9202      	str	r2, [sp, #8]
 8005c48:	e88d 0048 	stmia.w	sp, {r3, r6}
 8005c4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005c4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005c50:	4648      	mov	r0, r9
 8005c52:	f000 fa19 	bl	8006088 <_dtoa_r>
 8005c56:	2f47      	cmp	r7, #71	; 0x47
 8005c58:	4680      	mov	r8, r0
 8005c5a:	d102      	bne.n	8005c62 <_vfprintf_r+0xe1a>
 8005c5c:	07eb      	lsls	r3, r5, #31
 8005c5e:	f140 80d0 	bpl.w	8005e02 <_vfprintf_r+0xfba>
 8005c62:	eb08 0306 	add.w	r3, r8, r6
 8005c66:	2f46      	cmp	r7, #70	; 0x46
 8005c68:	9308      	str	r3, [sp, #32]
 8005c6a:	d111      	bne.n	8005c90 <_vfprintf_r+0xe48>
 8005c6c:	f898 3000 	ldrb.w	r3, [r8]
 8005c70:	2b30      	cmp	r3, #48	; 0x30
 8005c72:	d109      	bne.n	8005c88 <_vfprintf_r+0xe40>
 8005c74:	2200      	movs	r2, #0
 8005c76:	2300      	movs	r3, #0
 8005c78:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005c7a:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005c7c:	f7fa fefc 	bl	8000a78 <__aeabi_dcmpeq>
 8005c80:	b910      	cbnz	r0, 8005c88 <_vfprintf_r+0xe40>
 8005c82:	f1c6 0601 	rsb	r6, r6, #1
 8005c86:	9619      	str	r6, [sp, #100]	; 0x64
 8005c88:	9a08      	ldr	r2, [sp, #32]
 8005c8a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005c8c:	441a      	add	r2, r3
 8005c8e:	9208      	str	r2, [sp, #32]
 8005c90:	2200      	movs	r2, #0
 8005c92:	2300      	movs	r3, #0
 8005c94:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005c96:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005c98:	f7fa feee 	bl	8000a78 <__aeabi_dcmpeq>
 8005c9c:	b908      	cbnz	r0, 8005ca2 <_vfprintf_r+0xe5a>
 8005c9e:	2230      	movs	r2, #48	; 0x30
 8005ca0:	e002      	b.n	8005ca8 <_vfprintf_r+0xe60>
 8005ca2:	9b08      	ldr	r3, [sp, #32]
 8005ca4:	931d      	str	r3, [sp, #116]	; 0x74
 8005ca6:	e007      	b.n	8005cb8 <_vfprintf_r+0xe70>
 8005ca8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005caa:	9908      	ldr	r1, [sp, #32]
 8005cac:	4299      	cmp	r1, r3
 8005cae:	d903      	bls.n	8005cb8 <_vfprintf_r+0xe70>
 8005cb0:	1c59      	adds	r1, r3, #1
 8005cb2:	911d      	str	r1, [sp, #116]	; 0x74
 8005cb4:	701a      	strb	r2, [r3, #0]
 8005cb6:	e7f7      	b.n	8005ca8 <_vfprintf_r+0xe60>
 8005cb8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005cba:	2f47      	cmp	r7, #71	; 0x47
 8005cbc:	ebc8 0303 	rsb	r3, r8, r3
 8005cc0:	9308      	str	r3, [sp, #32]
 8005cc2:	d111      	bne.n	8005ce8 <_vfprintf_r+0xea0>
 8005cc4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005cc6:	1cdf      	adds	r7, r3, #3
 8005cc8:	db01      	blt.n	8005cce <_vfprintf_r+0xe86>
 8005cca:	459a      	cmp	sl, r3
 8005ccc:	da6b      	bge.n	8005da6 <_vfprintf_r+0xf5e>
 8005cce:	9b06      	ldr	r3, [sp, #24]
 8005cd0:	3b02      	subs	r3, #2
 8005cd2:	9306      	str	r3, [sp, #24]
 8005cd4:	e00b      	b.n	8005cee <_vfprintf_r+0xea6>
 8005cd6:	bf00      	nop
 8005cd8:	08008a48 	.word	0x08008a48
 8005cdc:	08008a38 	.word	0x08008a38
 8005ce0:	080089fc 	.word	0x080089fc
 8005ce4:	08008a00 	.word	0x08008a00
 8005ce8:	9b06      	ldr	r3, [sp, #24]
 8005cea:	2b65      	cmp	r3, #101	; 0x65
 8005cec:	dc44      	bgt.n	8005d78 <_vfprintf_r+0xf30>
 8005cee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005cf0:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	9319      	str	r3, [sp, #100]	; 0x64
 8005cfa:	bfb8      	it	lt
 8005cfc:	425b      	neglt	r3, r3
 8005cfe:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
 8005d02:	bfb4      	ite	lt
 8005d04:	222d      	movlt	r2, #45	; 0x2d
 8005d06:	222b      	movge	r2, #43	; 0x2b
 8005d08:	2b09      	cmp	r3, #9
 8005d0a:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8005d0e:	dd1d      	ble.n	8005d4c <_vfprintf_r+0xf04>
 8005d10:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8005d14:	200a      	movs	r0, #10
 8005d16:	fb93 f1f0 	sdiv	r1, r3, r0
 8005d1a:	fb00 3311 	mls	r3, r0, r1, r3
 8005d1e:	2909      	cmp	r1, #9
 8005d20:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8005d24:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8005d28:	460b      	mov	r3, r1
 8005d2a:	dcf4      	bgt.n	8005d16 <_vfprintf_r+0xece>
 8005d2c:	3330      	adds	r3, #48	; 0x30
 8005d2e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005d32:	1e51      	subs	r1, r2, #1
 8005d34:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 8005d38:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 8005d3c:	4281      	cmp	r1, r0
 8005d3e:	461a      	mov	r2, r3
 8005d40:	d20b      	bcs.n	8005d5a <_vfprintf_r+0xf12>
 8005d42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d46:	f803 2b01 	strb.w	r2, [r3], #1
 8005d4a:	e7f7      	b.n	8005d3c <_vfprintf_r+0xef4>
 8005d4c:	2230      	movs	r2, #48	; 0x30
 8005d4e:	4413      	add	r3, r2
 8005d50:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8005d54:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8005d58:	aa1c      	add	r2, sp, #112	; 0x70
 8005d5a:	ab1b      	add	r3, sp, #108	; 0x6c
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	9a08      	ldr	r2, [sp, #32]
 8005d60:	9312      	str	r3, [sp, #72]	; 0x48
 8005d62:	2a01      	cmp	r2, #1
 8005d64:	eb03 0a02 	add.w	sl, r3, r2
 8005d68:	dc02      	bgt.n	8005d70 <_vfprintf_r+0xf28>
 8005d6a:	f015 0701 	ands.w	r7, r5, #1
 8005d6e:	d032      	beq.n	8005dd6 <_vfprintf_r+0xf8e>
 8005d70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d72:	2700      	movs	r7, #0
 8005d74:	449a      	add	sl, r3
 8005d76:	e02e      	b.n	8005dd6 <_vfprintf_r+0xf8e>
 8005d78:	9b06      	ldr	r3, [sp, #24]
 8005d7a:	2b66      	cmp	r3, #102	; 0x66
 8005d7c:	d113      	bne.n	8005da6 <_vfprintf_r+0xf5e>
 8005d7e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	dd07      	ble.n	8005d94 <_vfprintf_r+0xf4c>
 8005d84:	f1ba 0f00 	cmp.w	sl, #0
 8005d88:	d101      	bne.n	8005d8e <_vfprintf_r+0xf46>
 8005d8a:	07ee      	lsls	r6, r5, #31
 8005d8c:	d521      	bpl.n	8005dd2 <_vfprintf_r+0xf8a>
 8005d8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d90:	4413      	add	r3, r2
 8005d92:	e006      	b.n	8005da2 <_vfprintf_r+0xf5a>
 8005d94:	f1ba 0f00 	cmp.w	sl, #0
 8005d98:	d101      	bne.n	8005d9e <_vfprintf_r+0xf56>
 8005d9a:	07ed      	lsls	r5, r5, #31
 8005d9c:	d514      	bpl.n	8005dc8 <_vfprintf_r+0xf80>
 8005d9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005da0:	3301      	adds	r3, #1
 8005da2:	4453      	add	r3, sl
 8005da4:	e015      	b.n	8005dd2 <_vfprintf_r+0xf8a>
 8005da6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005da8:	9a08      	ldr	r2, [sp, #32]
 8005daa:	4293      	cmp	r3, r2
 8005dac:	db03      	blt.n	8005db6 <_vfprintf_r+0xf6e>
 8005dae:	07e8      	lsls	r0, r5, #31
 8005db0:	d50d      	bpl.n	8005dce <_vfprintf_r+0xf86>
 8005db2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005db4:	e006      	b.n	8005dc4 <_vfprintf_r+0xf7c>
 8005db6:	9a08      	ldr	r2, [sp, #32]
 8005db8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	440a      	add	r2, r1
 8005dbe:	dc05      	bgt.n	8005dcc <_vfprintf_r+0xf84>
 8005dc0:	f1c3 0301 	rsb	r3, r3, #1
 8005dc4:	4413      	add	r3, r2
 8005dc6:	e002      	b.n	8005dce <_vfprintf_r+0xf86>
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e002      	b.n	8005dd2 <_vfprintf_r+0xf8a>
 8005dcc:	4613      	mov	r3, r2
 8005dce:	2267      	movs	r2, #103	; 0x67
 8005dd0:	9206      	str	r2, [sp, #24]
 8005dd2:	469a      	mov	sl, r3
 8005dd4:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8005dd6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005dd8:	b113      	cbz	r3, 8005de0 <_vfprintf_r+0xf98>
 8005dda:	232d      	movs	r3, #45	; 0x2d
 8005ddc:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8005de0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8005de2:	2600      	movs	r6, #0
 8005de4:	f7ff bb48 	b.w	8005478 <_vfprintf_r+0x630>
 8005de8:	2200      	movs	r2, #0
 8005dea:	2300      	movs	r3, #0
 8005dec:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005dee:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005df0:	f7fa fe4c 	bl	8000a8c <__aeabi_dcmplt>
 8005df4:	b110      	cbz	r0, 8005dfc <_vfprintf_r+0xfb4>
 8005df6:	232d      	movs	r3, #45	; 0x2d
 8005df8:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8005dfc:	4b07      	ldr	r3, [pc, #28]	; (8005e1c <_vfprintf_r+0xfd4>)
 8005dfe:	4a08      	ldr	r2, [pc, #32]	; (8005e20 <_vfprintf_r+0xfd8>)
 8005e00:	e6e0      	b.n	8005bc4 <_vfprintf_r+0xd7c>
 8005e02:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005e04:	1a1b      	subs	r3, r3, r0
 8005e06:	9308      	str	r3, [sp, #32]
 8005e08:	e75c      	b.n	8005cc4 <_vfprintf_r+0xe7c>
 8005e0a:	ea56 0207 	orrs.w	r2, r6, r7
 8005e0e:	f47f aaa8 	bne.w	8005362 <_vfprintf_r+0x51a>
 8005e12:	f7ff baad 	b.w	8005370 <_vfprintf_r+0x528>
 8005e16:	b03d      	add	sp, #244	; 0xf4
 8005e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e1c:	080089f4 	.word	0x080089f4
 8005e20:	080089f8 	.word	0x080089f8

08005e24 <__sbprintf>:
 8005e24:	b570      	push	{r4, r5, r6, lr}
 8005e26:	460c      	mov	r4, r1
 8005e28:	8989      	ldrh	r1, [r1, #12]
 8005e2a:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 8005e2e:	f021 0102 	bic.w	r1, r1, #2
 8005e32:	f8ad 100c 	strh.w	r1, [sp, #12]
 8005e36:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8005e38:	4606      	mov	r6, r0
 8005e3a:	9119      	str	r1, [sp, #100]	; 0x64
 8005e3c:	89e1      	ldrh	r1, [r4, #14]
 8005e3e:	f8ad 100e 	strh.w	r1, [sp, #14]
 8005e42:	6a21      	ldr	r1, [r4, #32]
 8005e44:	9108      	str	r1, [sp, #32]
 8005e46:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005e48:	910a      	str	r1, [sp, #40]	; 0x28
 8005e4a:	a91a      	add	r1, sp, #104	; 0x68
 8005e4c:	9100      	str	r1, [sp, #0]
 8005e4e:	9104      	str	r1, [sp, #16]
 8005e50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005e54:	9102      	str	r1, [sp, #8]
 8005e56:	9105      	str	r1, [sp, #20]
 8005e58:	2100      	movs	r1, #0
 8005e5a:	9106      	str	r1, [sp, #24]
 8005e5c:	4669      	mov	r1, sp
 8005e5e:	f7fe fff3 	bl	8004e48 <_vfprintf_r>
 8005e62:	1e05      	subs	r5, r0, #0
 8005e64:	db07      	blt.n	8005e76 <__sbprintf+0x52>
 8005e66:	4669      	mov	r1, sp
 8005e68:	4630      	mov	r0, r6
 8005e6a:	f000 ff35 	bl	8006cd8 <_fflush_r>
 8005e6e:	2800      	cmp	r0, #0
 8005e70:	bf18      	it	ne
 8005e72:	f04f 35ff 	movne.w	r5, #4294967295
 8005e76:	4628      	mov	r0, r5
 8005e78:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8005e7c:	065b      	lsls	r3, r3, #25
 8005e7e:	bf42      	ittt	mi
 8005e80:	89a3      	ldrhmi	r3, [r4, #12]
 8005e82:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8005e86:	81a3      	strhmi	r3, [r4, #12]
 8005e88:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
 8005e8c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005e90 <__swsetup_r>:
 8005e90:	4b32      	ldr	r3, [pc, #200]	; (8005f5c <__swsetup_r+0xcc>)
 8005e92:	b570      	push	{r4, r5, r6, lr}
 8005e94:	681d      	ldr	r5, [r3, #0]
 8005e96:	4606      	mov	r6, r0
 8005e98:	460c      	mov	r4, r1
 8005e9a:	b125      	cbz	r5, 8005ea6 <__swsetup_r+0x16>
 8005e9c:	69ab      	ldr	r3, [r5, #24]
 8005e9e:	b913      	cbnz	r3, 8005ea6 <__swsetup_r+0x16>
 8005ea0:	4628      	mov	r0, r5
 8005ea2:	f000 ff83 	bl	8006dac <__sinit>
 8005ea6:	4b2e      	ldr	r3, [pc, #184]	; (8005f60 <__swsetup_r+0xd0>)
 8005ea8:	429c      	cmp	r4, r3
 8005eaa:	d101      	bne.n	8005eb0 <__swsetup_r+0x20>
 8005eac:	686c      	ldr	r4, [r5, #4]
 8005eae:	e008      	b.n	8005ec2 <__swsetup_r+0x32>
 8005eb0:	4b2c      	ldr	r3, [pc, #176]	; (8005f64 <__swsetup_r+0xd4>)
 8005eb2:	429c      	cmp	r4, r3
 8005eb4:	d101      	bne.n	8005eba <__swsetup_r+0x2a>
 8005eb6:	68ac      	ldr	r4, [r5, #8]
 8005eb8:	e003      	b.n	8005ec2 <__swsetup_r+0x32>
 8005eba:	4b2b      	ldr	r3, [pc, #172]	; (8005f68 <__swsetup_r+0xd8>)
 8005ebc:	429c      	cmp	r4, r3
 8005ebe:	bf08      	it	eq
 8005ec0:	68ec      	ldreq	r4, [r5, #12]
 8005ec2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ec6:	b29a      	uxth	r2, r3
 8005ec8:	0715      	lsls	r5, r2, #28
 8005eca:	d41d      	bmi.n	8005f08 <__swsetup_r+0x78>
 8005ecc:	06d0      	lsls	r0, r2, #27
 8005ece:	d402      	bmi.n	8005ed6 <__swsetup_r+0x46>
 8005ed0:	2209      	movs	r2, #9
 8005ed2:	6032      	str	r2, [r6, #0]
 8005ed4:	e03a      	b.n	8005f4c <__swsetup_r+0xbc>
 8005ed6:	0751      	lsls	r1, r2, #29
 8005ed8:	d512      	bpl.n	8005f00 <__swsetup_r+0x70>
 8005eda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005edc:	b141      	cbz	r1, 8005ef0 <__swsetup_r+0x60>
 8005ede:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ee2:	4299      	cmp	r1, r3
 8005ee4:	d002      	beq.n	8005eec <__swsetup_r+0x5c>
 8005ee6:	4630      	mov	r0, r6
 8005ee8:	f001 f828 	bl	8006f3c <_free_r>
 8005eec:	2300      	movs	r3, #0
 8005eee:	6363      	str	r3, [r4, #52]	; 0x34
 8005ef0:	89a3      	ldrh	r3, [r4, #12]
 8005ef2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005ef6:	81a3      	strh	r3, [r4, #12]
 8005ef8:	2300      	movs	r3, #0
 8005efa:	6063      	str	r3, [r4, #4]
 8005efc:	6923      	ldr	r3, [r4, #16]
 8005efe:	6023      	str	r3, [r4, #0]
 8005f00:	89a3      	ldrh	r3, [r4, #12]
 8005f02:	f043 0308 	orr.w	r3, r3, #8
 8005f06:	81a3      	strh	r3, [r4, #12]
 8005f08:	6923      	ldr	r3, [r4, #16]
 8005f0a:	b94b      	cbnz	r3, 8005f20 <__swsetup_r+0x90>
 8005f0c:	89a3      	ldrh	r3, [r4, #12]
 8005f0e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005f12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f16:	d003      	beq.n	8005f20 <__swsetup_r+0x90>
 8005f18:	4621      	mov	r1, r4
 8005f1a:	4630      	mov	r0, r6
 8005f1c:	f001 f924 	bl	8007168 <__smakebuf_r>
 8005f20:	89a2      	ldrh	r2, [r4, #12]
 8005f22:	f012 0301 	ands.w	r3, r2, #1
 8005f26:	d005      	beq.n	8005f34 <__swsetup_r+0xa4>
 8005f28:	2300      	movs	r3, #0
 8005f2a:	60a3      	str	r3, [r4, #8]
 8005f2c:	6963      	ldr	r3, [r4, #20]
 8005f2e:	425b      	negs	r3, r3
 8005f30:	61a3      	str	r3, [r4, #24]
 8005f32:	e003      	b.n	8005f3c <__swsetup_r+0xac>
 8005f34:	0792      	lsls	r2, r2, #30
 8005f36:	bf58      	it	pl
 8005f38:	6963      	ldrpl	r3, [r4, #20]
 8005f3a:	60a3      	str	r3, [r4, #8]
 8005f3c:	6923      	ldr	r3, [r4, #16]
 8005f3e:	b95b      	cbnz	r3, 8005f58 <__swsetup_r+0xc8>
 8005f40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f44:	f003 0080 	and.w	r0, r3, #128	; 0x80
 8005f48:	b280      	uxth	r0, r0
 8005f4a:	b130      	cbz	r0, 8005f5a <__swsetup_r+0xca>
 8005f4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f50:	81a3      	strh	r3, [r4, #12]
 8005f52:	f04f 30ff 	mov.w	r0, #4294967295
 8005f56:	bd70      	pop	{r4, r5, r6, pc}
 8005f58:	2000      	movs	r0, #0
 8005f5a:	bd70      	pop	{r4, r5, r6, pc}
 8005f5c:	20000254 	.word	0x20000254
 8005f60:	08008a68 	.word	0x08008a68
 8005f64:	08008a88 	.word	0x08008a88
 8005f68:	08008aa8 	.word	0x08008aa8

08005f6c <quorem>:
 8005f6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f70:	6903      	ldr	r3, [r0, #16]
 8005f72:	690c      	ldr	r4, [r1, #16]
 8005f74:	4680      	mov	r8, r0
 8005f76:	429c      	cmp	r4, r3
 8005f78:	dc7f      	bgt.n	800607a <quorem+0x10e>
 8005f7a:	3c01      	subs	r4, #1
 8005f7c:	f101 0714 	add.w	r7, r1, #20
 8005f80:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8005f84:	f100 0614 	add.w	r6, r0, #20
 8005f88:	eb06 030e 	add.w	r3, r6, lr
 8005f8c:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005f90:	9301      	str	r3, [sp, #4]
 8005f92:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 8005f96:	3501      	adds	r5, #1
 8005f98:	fbb3 f5f5 	udiv	r5, r3, r5
 8005f9c:	eb07 090e 	add.w	r9, r7, lr
 8005fa0:	b3c5      	cbz	r5, 8006014 <quorem+0xa8>
 8005fa2:	f04f 0a00 	mov.w	sl, #0
 8005fa6:	4638      	mov	r0, r7
 8005fa8:	46b4      	mov	ip, r6
 8005faa:	46d3      	mov	fp, sl
 8005fac:	f850 3b04 	ldr.w	r3, [r0], #4
 8005fb0:	b29a      	uxth	r2, r3
 8005fb2:	fb05 a202 	mla	r2, r5, r2, sl
 8005fb6:	0c1b      	lsrs	r3, r3, #16
 8005fb8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005fbc:	fb05 a303 	mla	r3, r5, r3, sl
 8005fc0:	b292      	uxth	r2, r2
 8005fc2:	ebc2 0b0b 	rsb	fp, r2, fp
 8005fc6:	f8bc 2000 	ldrh.w	r2, [ip]
 8005fca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005fce:	445a      	add	r2, fp
 8005fd0:	fa1f fb83 	uxth.w	fp, r3
 8005fd4:	f8dc 3000 	ldr.w	r3, [ip]
 8005fd8:	4581      	cmp	r9, r0
 8005fda:	ebcb 4313 	rsb	r3, fp, r3, lsr #16
 8005fde:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8005fe2:	b292      	uxth	r2, r2
 8005fe4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005fe8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005fec:	f84c 2b04 	str.w	r2, [ip], #4
 8005ff0:	d2dc      	bcs.n	8005fac <quorem+0x40>
 8005ff2:	f856 300e 	ldr.w	r3, [r6, lr]
 8005ff6:	b96b      	cbnz	r3, 8006014 <quorem+0xa8>
 8005ff8:	9b01      	ldr	r3, [sp, #4]
 8005ffa:	3b04      	subs	r3, #4
 8005ffc:	429e      	cmp	r6, r3
 8005ffe:	461a      	mov	r2, r3
 8006000:	d302      	bcc.n	8006008 <quorem+0x9c>
 8006002:	f8c8 4010 	str.w	r4, [r8, #16]
 8006006:	e005      	b.n	8006014 <quorem+0xa8>
 8006008:	6812      	ldr	r2, [r2, #0]
 800600a:	3b04      	subs	r3, #4
 800600c:	2a00      	cmp	r2, #0
 800600e:	d1f8      	bne.n	8006002 <quorem+0x96>
 8006010:	3c01      	subs	r4, #1
 8006012:	e7f3      	b.n	8005ffc <quorem+0x90>
 8006014:	4640      	mov	r0, r8
 8006016:	f001 fd2e 	bl	8007a76 <__mcmp>
 800601a:	2800      	cmp	r0, #0
 800601c:	db2b      	blt.n	8006076 <quorem+0x10a>
 800601e:	4630      	mov	r0, r6
 8006020:	3501      	adds	r5, #1
 8006022:	f04f 0e00 	mov.w	lr, #0
 8006026:	f857 2b04 	ldr.w	r2, [r7], #4
 800602a:	6803      	ldr	r3, [r0, #0]
 800602c:	b291      	uxth	r1, r2
 800602e:	ebc1 0e0e 	rsb	lr, r1, lr
 8006032:	0c12      	lsrs	r2, r2, #16
 8006034:	b299      	uxth	r1, r3
 8006036:	4471      	add	r1, lr
 8006038:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
 800603c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006040:	b289      	uxth	r1, r1
 8006042:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006046:	45b9      	cmp	r9, r7
 8006048:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800604c:	f840 3b04 	str.w	r3, [r0], #4
 8006050:	d2e9      	bcs.n	8006026 <quorem+0xba>
 8006052:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006056:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800605a:	b962      	cbnz	r2, 8006076 <quorem+0x10a>
 800605c:	3b04      	subs	r3, #4
 800605e:	429e      	cmp	r6, r3
 8006060:	461a      	mov	r2, r3
 8006062:	d302      	bcc.n	800606a <quorem+0xfe>
 8006064:	f8c8 4010 	str.w	r4, [r8, #16]
 8006068:	e005      	b.n	8006076 <quorem+0x10a>
 800606a:	6812      	ldr	r2, [r2, #0]
 800606c:	3b04      	subs	r3, #4
 800606e:	2a00      	cmp	r2, #0
 8006070:	d1f8      	bne.n	8006064 <quorem+0xf8>
 8006072:	3c01      	subs	r4, #1
 8006074:	e7f3      	b.n	800605e <quorem+0xf2>
 8006076:	4628      	mov	r0, r5
 8006078:	e000      	b.n	800607c <quorem+0x110>
 800607a:	2000      	movs	r0, #0
 800607c:	b003      	add	sp, #12
 800607e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006082:	0000      	movs	r0, r0
 8006084:	0000      	movs	r0, r0
	...

08006088 <_dtoa_r>:
 8006088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800608c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800608e:	b095      	sub	sp, #84	; 0x54
 8006090:	4682      	mov	sl, r0
 8006092:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8006094:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006098:	b945      	cbnz	r5, 80060ac <_dtoa_r+0x24>
 800609a:	2010      	movs	r0, #16
 800609c:	f001 f8a0 	bl	80071e0 <malloc>
 80060a0:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 80060a4:	6045      	str	r5, [r0, #4]
 80060a6:	6085      	str	r5, [r0, #8]
 80060a8:	6005      	str	r5, [r0, #0]
 80060aa:	60c5      	str	r5, [r0, #12]
 80060ac:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 80060b0:	6819      	ldr	r1, [r3, #0]
 80060b2:	b159      	cbz	r1, 80060cc <_dtoa_r+0x44>
 80060b4:	685a      	ldr	r2, [r3, #4]
 80060b6:	2301      	movs	r3, #1
 80060b8:	4093      	lsls	r3, r2
 80060ba:	604a      	str	r2, [r1, #4]
 80060bc:	608b      	str	r3, [r1, #8]
 80060be:	4650      	mov	r0, sl
 80060c0:	f001 fb02 	bl	80076c8 <_Bfree>
 80060c4:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 80060c8:	2200      	movs	r2, #0
 80060ca:	601a      	str	r2, [r3, #0]
 80060cc:	9b03      	ldr	r3, [sp, #12]
 80060ce:	4aa0      	ldr	r2, [pc, #640]	; (8006350 <_dtoa_r+0x2c8>)
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	bfbd      	ittte	lt
 80060d4:	2301      	movlt	r3, #1
 80060d6:	6023      	strlt	r3, [r4, #0]
 80060d8:	9b03      	ldrlt	r3, [sp, #12]
 80060da:	2300      	movge	r3, #0
 80060dc:	bfbc      	itt	lt
 80060de:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80060e2:	9303      	strlt	r3, [sp, #12]
 80060e4:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80060e8:	bfa8      	it	ge
 80060ea:	6023      	strge	r3, [r4, #0]
 80060ec:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80060f0:	0d1b      	lsrs	r3, r3, #20
 80060f2:	051b      	lsls	r3, r3, #20
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d11d      	bne.n	8006134 <_dtoa_r+0xac>
 80060f8:	f242 730f 	movw	r3, #9999	; 0x270f
 80060fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80060fe:	6013      	str	r3, [r2, #0]
 8006100:	9b02      	ldr	r3, [sp, #8]
 8006102:	b943      	cbnz	r3, 8006116 <_dtoa_r+0x8e>
 8006104:	4a93      	ldr	r2, [pc, #588]	; (8006354 <_dtoa_r+0x2cc>)
 8006106:	4b94      	ldr	r3, [pc, #592]	; (8006358 <_dtoa_r+0x2d0>)
 8006108:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800610c:	2800      	cmp	r0, #0
 800610e:	bf14      	ite	ne
 8006110:	4618      	movne	r0, r3
 8006112:	4610      	moveq	r0, r2
 8006114:	e000      	b.n	8006118 <_dtoa_r+0x90>
 8006116:	4890      	ldr	r0, [pc, #576]	; (8006358 <_dtoa_r+0x2d0>)
 8006118:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800611a:	2b00      	cmp	r3, #0
 800611c:	f000 8546 	beq.w	8006bac <_dtoa_r+0xb24>
 8006120:	78c3      	ldrb	r3, [r0, #3]
 8006122:	b113      	cbz	r3, 800612a <_dtoa_r+0xa2>
 8006124:	f100 0308 	add.w	r3, r0, #8
 8006128:	e000      	b.n	800612c <_dtoa_r+0xa4>
 800612a:	1cc3      	adds	r3, r0, #3
 800612c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800612e:	6013      	str	r3, [r2, #0]
 8006130:	f000 bd3c 	b.w	8006bac <_dtoa_r+0xb24>
 8006134:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006138:	2200      	movs	r2, #0
 800613a:	2300      	movs	r3, #0
 800613c:	4620      	mov	r0, r4
 800613e:	4629      	mov	r1, r5
 8006140:	f7fa fc9a 	bl	8000a78 <__aeabi_dcmpeq>
 8006144:	4607      	mov	r7, r0
 8006146:	b158      	cbz	r0, 8006160 <_dtoa_r+0xd8>
 8006148:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800614a:	2301      	movs	r3, #1
 800614c:	6013      	str	r3, [r2, #0]
 800614e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006150:	2b00      	cmp	r3, #0
 8006152:	f000 851e 	beq.w	8006b92 <_dtoa_r+0xb0a>
 8006156:	4881      	ldr	r0, [pc, #516]	; (800635c <_dtoa_r+0x2d4>)
 8006158:	6018      	str	r0, [r3, #0]
 800615a:	3801      	subs	r0, #1
 800615c:	f000 bd26 	b.w	8006bac <_dtoa_r+0xb24>
 8006160:	ab12      	add	r3, sp, #72	; 0x48
 8006162:	9301      	str	r3, [sp, #4]
 8006164:	ab13      	add	r3, sp, #76	; 0x4c
 8006166:	9300      	str	r3, [sp, #0]
 8006168:	4622      	mov	r2, r4
 800616a:	462b      	mov	r3, r5
 800616c:	4650      	mov	r0, sl
 800616e:	f001 fcfd 	bl	8007b6c <__d2b>
 8006172:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8006176:	9004      	str	r0, [sp, #16]
 8006178:	b156      	cbz	r6, 8006190 <_dtoa_r+0x108>
 800617a:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800617e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006182:	4620      	mov	r0, r4
 8006184:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006188:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 800618c:	9711      	str	r7, [sp, #68]	; 0x44
 800618e:	e01d      	b.n	80061cc <_dtoa_r+0x144>
 8006190:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006192:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8006194:	441e      	add	r6, r3
 8006196:	f206 4332 	addw	r3, r6, #1074	; 0x432
 800619a:	2b20      	cmp	r3, #32
 800619c:	dd0a      	ble.n	80061b4 <_dtoa_r+0x12c>
 800619e:	9a02      	ldr	r2, [sp, #8]
 80061a0:	f206 4012 	addw	r0, r6, #1042	; 0x412
 80061a4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80061a8:	fa22 f000 	lsr.w	r0, r2, r0
 80061ac:	fa08 f303 	lsl.w	r3, r8, r3
 80061b0:	4318      	orrs	r0, r3
 80061b2:	e004      	b.n	80061be <_dtoa_r+0x136>
 80061b4:	f1c3 0020 	rsb	r0, r3, #32
 80061b8:	9b02      	ldr	r3, [sp, #8]
 80061ba:	fa03 f000 	lsl.w	r0, r3, r0
 80061be:	f7fa f97d 	bl	80004bc <__aeabi_ui2d>
 80061c2:	2301      	movs	r3, #1
 80061c4:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80061c8:	3e01      	subs	r6, #1
 80061ca:	9311      	str	r3, [sp, #68]	; 0x44
 80061cc:	2200      	movs	r2, #0
 80061ce:	4b64      	ldr	r3, [pc, #400]	; (8006360 <_dtoa_r+0x2d8>)
 80061d0:	f7fa f836 	bl	8000240 <__aeabi_dsub>
 80061d4:	a358      	add	r3, pc, #352	; (adr r3, 8006338 <_dtoa_r+0x2b0>)
 80061d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061da:	f7fa f9e5 	bl	80005a8 <__aeabi_dmul>
 80061de:	a358      	add	r3, pc, #352	; (adr r3, 8006340 <_dtoa_r+0x2b8>)
 80061e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e4:	f7fa f82e 	bl	8000244 <__adddf3>
 80061e8:	4604      	mov	r4, r0
 80061ea:	4630      	mov	r0, r6
 80061ec:	460d      	mov	r5, r1
 80061ee:	f7fa f975 	bl	80004dc <__aeabi_i2d>
 80061f2:	a355      	add	r3, pc, #340	; (adr r3, 8006348 <_dtoa_r+0x2c0>)
 80061f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f8:	f7fa f9d6 	bl	80005a8 <__aeabi_dmul>
 80061fc:	4602      	mov	r2, r0
 80061fe:	460b      	mov	r3, r1
 8006200:	4620      	mov	r0, r4
 8006202:	4629      	mov	r1, r5
 8006204:	f7fa f81e 	bl	8000244 <__adddf3>
 8006208:	4604      	mov	r4, r0
 800620a:	460d      	mov	r5, r1
 800620c:	f7fa fc7c 	bl	8000b08 <__aeabi_d2iz>
 8006210:	2200      	movs	r2, #0
 8006212:	4683      	mov	fp, r0
 8006214:	2300      	movs	r3, #0
 8006216:	4620      	mov	r0, r4
 8006218:	4629      	mov	r1, r5
 800621a:	f7fa fc37 	bl	8000a8c <__aeabi_dcmplt>
 800621e:	b158      	cbz	r0, 8006238 <_dtoa_r+0x1b0>
 8006220:	4658      	mov	r0, fp
 8006222:	f7fa f95b 	bl	80004dc <__aeabi_i2d>
 8006226:	4602      	mov	r2, r0
 8006228:	460b      	mov	r3, r1
 800622a:	4620      	mov	r0, r4
 800622c:	4629      	mov	r1, r5
 800622e:	f7fa fc23 	bl	8000a78 <__aeabi_dcmpeq>
 8006232:	b908      	cbnz	r0, 8006238 <_dtoa_r+0x1b0>
 8006234:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006238:	f1bb 0f16 	cmp.w	fp, #22
 800623c:	d80d      	bhi.n	800625a <_dtoa_r+0x1d2>
 800623e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006242:	4948      	ldr	r1, [pc, #288]	; (8006364 <_dtoa_r+0x2dc>)
 8006244:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8006248:	e9d1 0100 	ldrd	r0, r1, [r1]
 800624c:	f7fa fc3c 	bl	8000ac8 <__aeabi_dcmpgt>
 8006250:	b130      	cbz	r0, 8006260 <_dtoa_r+0x1d8>
 8006252:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006256:	2300      	movs	r3, #0
 8006258:	e000      	b.n	800625c <_dtoa_r+0x1d4>
 800625a:	2301      	movs	r3, #1
 800625c:	9310      	str	r3, [sp, #64]	; 0x40
 800625e:	e000      	b.n	8006262 <_dtoa_r+0x1da>
 8006260:	9010      	str	r0, [sp, #64]	; 0x40
 8006262:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006264:	1b9e      	subs	r6, r3, r6
 8006266:	1e73      	subs	r3, r6, #1
 8006268:	9307      	str	r3, [sp, #28]
 800626a:	bf43      	ittte	mi
 800626c:	f1c3 0800 	rsbmi	r8, r3, #0
 8006270:	2300      	movmi	r3, #0
 8006272:	9307      	strmi	r3, [sp, #28]
 8006274:	f04f 0800 	movpl.w	r8, #0
 8006278:	f1bb 0f00 	cmp.w	fp, #0
 800627c:	db06      	blt.n	800628c <_dtoa_r+0x204>
 800627e:	9b07      	ldr	r3, [sp, #28]
 8006280:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006284:	445b      	add	r3, fp
 8006286:	9307      	str	r3, [sp, #28]
 8006288:	2700      	movs	r7, #0
 800628a:	e005      	b.n	8006298 <_dtoa_r+0x210>
 800628c:	2300      	movs	r3, #0
 800628e:	ebcb 0808 	rsb	r8, fp, r8
 8006292:	f1cb 0700 	rsb	r7, fp, #0
 8006296:	930b      	str	r3, [sp, #44]	; 0x2c
 8006298:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800629a:	2b09      	cmp	r3, #9
 800629c:	d828      	bhi.n	80062f0 <_dtoa_r+0x268>
 800629e:	2b05      	cmp	r3, #5
 80062a0:	bfc4      	itt	gt
 80062a2:	3b04      	subgt	r3, #4
 80062a4:	931e      	strgt	r3, [sp, #120]	; 0x78
 80062a6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80062a8:	bfc8      	it	gt
 80062aa:	2500      	movgt	r5, #0
 80062ac:	f1a3 0302 	sub.w	r3, r3, #2
 80062b0:	bfd8      	it	le
 80062b2:	2501      	movle	r5, #1
 80062b4:	2b03      	cmp	r3, #3
 80062b6:	d820      	bhi.n	80062fa <_dtoa_r+0x272>
 80062b8:	e8df f003 	tbb	[pc, r3]
 80062bc:	04020e06 	.word	0x04020e06
 80062c0:	2301      	movs	r3, #1
 80062c2:	e002      	b.n	80062ca <_dtoa_r+0x242>
 80062c4:	2301      	movs	r3, #1
 80062c6:	e008      	b.n	80062da <_dtoa_r+0x252>
 80062c8:	2300      	movs	r3, #0
 80062ca:	930a      	str	r3, [sp, #40]	; 0x28
 80062cc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	dd1d      	ble.n	800630e <_dtoa_r+0x286>
 80062d2:	4699      	mov	r9, r3
 80062d4:	9305      	str	r3, [sp, #20]
 80062d6:	e021      	b.n	800631c <_dtoa_r+0x294>
 80062d8:	2300      	movs	r3, #0
 80062da:	930a      	str	r3, [sp, #40]	; 0x28
 80062dc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80062de:	eb0b 0903 	add.w	r9, fp, r3
 80062e2:	f109 0301 	add.w	r3, r9, #1
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	9305      	str	r3, [sp, #20]
 80062ea:	bfb8      	it	lt
 80062ec:	2301      	movlt	r3, #1
 80062ee:	e015      	b.n	800631c <_dtoa_r+0x294>
 80062f0:	2501      	movs	r5, #1
 80062f2:	2300      	movs	r3, #0
 80062f4:	931e      	str	r3, [sp, #120]	; 0x78
 80062f6:	950a      	str	r5, [sp, #40]	; 0x28
 80062f8:	e001      	b.n	80062fe <_dtoa_r+0x276>
 80062fa:	2301      	movs	r3, #1
 80062fc:	930a      	str	r3, [sp, #40]	; 0x28
 80062fe:	f04f 39ff 	mov.w	r9, #4294967295
 8006302:	2200      	movs	r2, #0
 8006304:	f8cd 9014 	str.w	r9, [sp, #20]
 8006308:	2312      	movs	r3, #18
 800630a:	921f      	str	r2, [sp, #124]	; 0x7c
 800630c:	e006      	b.n	800631c <_dtoa_r+0x294>
 800630e:	f04f 0901 	mov.w	r9, #1
 8006312:	464b      	mov	r3, r9
 8006314:	f8cd 9014 	str.w	r9, [sp, #20]
 8006318:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
 800631c:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
 8006320:	2200      	movs	r2, #0
 8006322:	6062      	str	r2, [r4, #4]
 8006324:	2104      	movs	r1, #4
 8006326:	f101 0214 	add.w	r2, r1, #20
 800632a:	429a      	cmp	r2, r3
 800632c:	d81c      	bhi.n	8006368 <_dtoa_r+0x2e0>
 800632e:	6862      	ldr	r2, [r4, #4]
 8006330:	0049      	lsls	r1, r1, #1
 8006332:	3201      	adds	r2, #1
 8006334:	6062      	str	r2, [r4, #4]
 8006336:	e7f6      	b.n	8006326 <_dtoa_r+0x29e>
 8006338:	636f4361 	.word	0x636f4361
 800633c:	3fd287a7 	.word	0x3fd287a7
 8006340:	8b60c8b3 	.word	0x8b60c8b3
 8006344:	3fc68a28 	.word	0x3fc68a28
 8006348:	509f79fb 	.word	0x509f79fb
 800634c:	3fd34413 	.word	0x3fd34413
 8006350:	7ff00000 	.word	0x7ff00000
 8006354:	08008a58 	.word	0x08008a58
 8006358:	08008a61 	.word	0x08008a61
 800635c:	08008a27 	.word	0x08008a27
 8006360:	3ff80000 	.word	0x3ff80000
 8006364:	08008ad8 	.word	0x08008ad8
 8006368:	6861      	ldr	r1, [r4, #4]
 800636a:	4650      	mov	r0, sl
 800636c:	f001 f977 	bl	800765e <_Balloc>
 8006370:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8006374:	6020      	str	r0, [r4, #0]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	9306      	str	r3, [sp, #24]
 800637a:	9b05      	ldr	r3, [sp, #20]
 800637c:	2b0e      	cmp	r3, #14
 800637e:	f200 815b 	bhi.w	8006638 <_dtoa_r+0x5b0>
 8006382:	2d00      	cmp	r5, #0
 8006384:	f000 8158 	beq.w	8006638 <_dtoa_r+0x5b0>
 8006388:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 800638c:	f1bb 0f00 	cmp.w	fp, #0
 8006390:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
 8006394:	dd30      	ble.n	80063f8 <_dtoa_r+0x370>
 8006396:	4a9f      	ldr	r2, [pc, #636]	; (8006614 <_dtoa_r+0x58c>)
 8006398:	f00b 030f 	and.w	r3, fp, #15
 800639c:	ea4f 152b 	mov.w	r5, fp, asr #4
 80063a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80063a4:	06e8      	lsls	r0, r5, #27
 80063a6:	cb18      	ldmia	r3, {r3, r4}
 80063a8:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80063ac:	d50c      	bpl.n	80063c8 <_dtoa_r+0x340>
 80063ae:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80063b2:	4b99      	ldr	r3, [pc, #612]	; (8006618 <_dtoa_r+0x590>)
 80063b4:	f005 050f 	and.w	r5, r5, #15
 80063b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80063bc:	f7fa fa1e 	bl	80007fc <__aeabi_ddiv>
 80063c0:	2403      	movs	r4, #3
 80063c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063c6:	e000      	b.n	80063ca <_dtoa_r+0x342>
 80063c8:	2402      	movs	r4, #2
 80063ca:	4e93      	ldr	r6, [pc, #588]	; (8006618 <_dtoa_r+0x590>)
 80063cc:	b16d      	cbz	r5, 80063ea <_dtoa_r+0x362>
 80063ce:	07e9      	lsls	r1, r5, #31
 80063d0:	d508      	bpl.n	80063e4 <_dtoa_r+0x35c>
 80063d2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80063d6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80063da:	f7fa f8e5 	bl	80005a8 <__aeabi_dmul>
 80063de:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80063e2:	3401      	adds	r4, #1
 80063e4:	106d      	asrs	r5, r5, #1
 80063e6:	3608      	adds	r6, #8
 80063e8:	e7f0      	b.n	80063cc <_dtoa_r+0x344>
 80063ea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80063ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063f2:	f7fa fa03 	bl	80007fc <__aeabi_ddiv>
 80063f6:	e020      	b.n	800643a <_dtoa_r+0x3b2>
 80063f8:	f1cb 0500 	rsb	r5, fp, #0
 80063fc:	b305      	cbz	r5, 8006440 <_dtoa_r+0x3b8>
 80063fe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006402:	4b84      	ldr	r3, [pc, #528]	; (8006614 <_dtoa_r+0x58c>)
 8006404:	f005 020f 	and.w	r2, r5, #15
 8006408:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800640c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006410:	f7fa f8ca 	bl	80005a8 <__aeabi_dmul>
 8006414:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006418:	4e7f      	ldr	r6, [pc, #508]	; (8006618 <_dtoa_r+0x590>)
 800641a:	112d      	asrs	r5, r5, #4
 800641c:	2300      	movs	r3, #0
 800641e:	2402      	movs	r4, #2
 8006420:	b155      	cbz	r5, 8006438 <_dtoa_r+0x3b0>
 8006422:	07ea      	lsls	r2, r5, #31
 8006424:	d505      	bpl.n	8006432 <_dtoa_r+0x3aa>
 8006426:	e9d6 2300 	ldrd	r2, r3, [r6]
 800642a:	f7fa f8bd 	bl	80005a8 <__aeabi_dmul>
 800642e:	3401      	adds	r4, #1
 8006430:	2301      	movs	r3, #1
 8006432:	106d      	asrs	r5, r5, #1
 8006434:	3608      	adds	r6, #8
 8006436:	e7f3      	b.n	8006420 <_dtoa_r+0x398>
 8006438:	b11b      	cbz	r3, 8006442 <_dtoa_r+0x3ba>
 800643a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800643e:	e000      	b.n	8006442 <_dtoa_r+0x3ba>
 8006440:	2402      	movs	r4, #2
 8006442:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006444:	b1e3      	cbz	r3, 8006480 <_dtoa_r+0x3f8>
 8006446:	e9dd 5602 	ldrd	r5, r6, [sp, #8]
 800644a:	2200      	movs	r2, #0
 800644c:	4b73      	ldr	r3, [pc, #460]	; (800661c <_dtoa_r+0x594>)
 800644e:	4628      	mov	r0, r5
 8006450:	4631      	mov	r1, r6
 8006452:	f7fa fb1b 	bl	8000a8c <__aeabi_dcmplt>
 8006456:	b198      	cbz	r0, 8006480 <_dtoa_r+0x3f8>
 8006458:	9b05      	ldr	r3, [sp, #20]
 800645a:	b18b      	cbz	r3, 8006480 <_dtoa_r+0x3f8>
 800645c:	f1b9 0f00 	cmp.w	r9, #0
 8006460:	f340 80e6 	ble.w	8006630 <_dtoa_r+0x5a8>
 8006464:	f10b 33ff 	add.w	r3, fp, #4294967295
 8006468:	9308      	str	r3, [sp, #32]
 800646a:	4631      	mov	r1, r6
 800646c:	2200      	movs	r2, #0
 800646e:	4b6c      	ldr	r3, [pc, #432]	; (8006620 <_dtoa_r+0x598>)
 8006470:	4628      	mov	r0, r5
 8006472:	f7fa f899 	bl	80005a8 <__aeabi_dmul>
 8006476:	3401      	adds	r4, #1
 8006478:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800647c:	464e      	mov	r6, r9
 800647e:	e002      	b.n	8006486 <_dtoa_r+0x3fe>
 8006480:	9e05      	ldr	r6, [sp, #20]
 8006482:	f8cd b020 	str.w	fp, [sp, #32]
 8006486:	4620      	mov	r0, r4
 8006488:	f7fa f828 	bl	80004dc <__aeabi_i2d>
 800648c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006490:	f7fa f88a 	bl	80005a8 <__aeabi_dmul>
 8006494:	4b63      	ldr	r3, [pc, #396]	; (8006624 <_dtoa_r+0x59c>)
 8006496:	2200      	movs	r2, #0
 8006498:	f7f9 fed4 	bl	8000244 <__adddf3>
 800649c:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80064a0:	4604      	mov	r4, r0
 80064a2:	930c      	str	r3, [sp, #48]	; 0x30
 80064a4:	461d      	mov	r5, r3
 80064a6:	b9d6      	cbnz	r6, 80064de <_dtoa_r+0x456>
 80064a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064ac:	2200      	movs	r2, #0
 80064ae:	4b5e      	ldr	r3, [pc, #376]	; (8006628 <_dtoa_r+0x5a0>)
 80064b0:	f7f9 fec6 	bl	8000240 <__aeabi_dsub>
 80064b4:	4622      	mov	r2, r4
 80064b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80064b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064bc:	f7fa fb04 	bl	8000ac8 <__aeabi_dcmpgt>
 80064c0:	2800      	cmp	r0, #0
 80064c2:	f040 823f 	bne.w	8006944 <_dtoa_r+0x8bc>
 80064c6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80064c8:	4622      	mov	r2, r4
 80064ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80064ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064d2:	f7fa fadb 	bl	8000a8c <__aeabi_dcmplt>
 80064d6:	2800      	cmp	r0, #0
 80064d8:	f040 822b 	bne.w	8006932 <_dtoa_r+0x8aa>
 80064dc:	e0a8      	b.n	8006630 <_dtoa_r+0x5a8>
 80064de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064e0:	4b4c      	ldr	r3, [pc, #304]	; (8006614 <_dtoa_r+0x58c>)
 80064e2:	1e71      	subs	r1, r6, #1
 80064e4:	2a00      	cmp	r2, #0
 80064e6:	d049      	beq.n	800657c <_dtoa_r+0x4f4>
 80064e8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80064ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f0:	2000      	movs	r0, #0
 80064f2:	494e      	ldr	r1, [pc, #312]	; (800662c <_dtoa_r+0x5a4>)
 80064f4:	f7fa f982 	bl	80007fc <__aeabi_ddiv>
 80064f8:	4622      	mov	r2, r4
 80064fa:	462b      	mov	r3, r5
 80064fc:	f7f9 fea0 	bl	8000240 <__aeabi_dsub>
 8006500:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006504:	9c06      	ldr	r4, [sp, #24]
 8006506:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800650a:	f7fa fafd 	bl	8000b08 <__aeabi_d2iz>
 800650e:	4605      	mov	r5, r0
 8006510:	f7f9 ffe4 	bl	80004dc <__aeabi_i2d>
 8006514:	4602      	mov	r2, r0
 8006516:	460b      	mov	r3, r1
 8006518:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800651c:	f7f9 fe90 	bl	8000240 <__aeabi_dsub>
 8006520:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006524:	3530      	adds	r5, #48	; 0x30
 8006526:	f804 5b01 	strb.w	r5, [r4], #1
 800652a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800652e:	f7fa faad 	bl	8000a8c <__aeabi_dcmplt>
 8006532:	2800      	cmp	r0, #0
 8006534:	f040 831d 	bne.w	8006b72 <_dtoa_r+0xaea>
 8006538:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800653c:	2000      	movs	r0, #0
 800653e:	4937      	ldr	r1, [pc, #220]	; (800661c <_dtoa_r+0x594>)
 8006540:	f7f9 fe7e 	bl	8000240 <__aeabi_dsub>
 8006544:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006548:	f7fa faa0 	bl	8000a8c <__aeabi_dcmplt>
 800654c:	2800      	cmp	r0, #0
 800654e:	f040 80d1 	bne.w	80066f4 <_dtoa_r+0x66c>
 8006552:	9b06      	ldr	r3, [sp, #24]
 8006554:	1ae3      	subs	r3, r4, r3
 8006556:	42b3      	cmp	r3, r6
 8006558:	da6a      	bge.n	8006630 <_dtoa_r+0x5a8>
 800655a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800655e:	2200      	movs	r2, #0
 8006560:	4b2f      	ldr	r3, [pc, #188]	; (8006620 <_dtoa_r+0x598>)
 8006562:	f7fa f821 	bl	80005a8 <__aeabi_dmul>
 8006566:	2200      	movs	r2, #0
 8006568:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800656c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006570:	4b2b      	ldr	r3, [pc, #172]	; (8006620 <_dtoa_r+0x598>)
 8006572:	f7fa f819 	bl	80005a8 <__aeabi_dmul>
 8006576:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800657a:	e7c4      	b.n	8006506 <_dtoa_r+0x47e>
 800657c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8006580:	4622      	mov	r2, r4
 8006582:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006586:	462b      	mov	r3, r5
 8006588:	f7fa f80e 	bl	80005a8 <__aeabi_dmul>
 800658c:	9b06      	ldr	r3, [sp, #24]
 800658e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006592:	461d      	mov	r5, r3
 8006594:	199c      	adds	r4, r3, r6
 8006596:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800659a:	f7fa fab5 	bl	8000b08 <__aeabi_d2iz>
 800659e:	4606      	mov	r6, r0
 80065a0:	f7f9 ff9c 	bl	80004dc <__aeabi_i2d>
 80065a4:	4602      	mov	r2, r0
 80065a6:	460b      	mov	r3, r1
 80065a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065ac:	f7f9 fe48 	bl	8000240 <__aeabi_dsub>
 80065b0:	3630      	adds	r6, #48	; 0x30
 80065b2:	f805 6b01 	strb.w	r6, [r5], #1
 80065b6:	42ac      	cmp	r4, r5
 80065b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065bc:	f04f 0200 	mov.w	r2, #0
 80065c0:	d122      	bne.n	8006608 <_dtoa_r+0x580>
 80065c2:	4b1a      	ldr	r3, [pc, #104]	; (800662c <_dtoa_r+0x5a4>)
 80065c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80065c8:	f7f9 fe3c 	bl	8000244 <__adddf3>
 80065cc:	4602      	mov	r2, r0
 80065ce:	460b      	mov	r3, r1
 80065d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065d4:	f7fa fa78 	bl	8000ac8 <__aeabi_dcmpgt>
 80065d8:	2800      	cmp	r0, #0
 80065da:	f040 808b 	bne.w	80066f4 <_dtoa_r+0x66c>
 80065de:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80065e2:	2000      	movs	r0, #0
 80065e4:	4911      	ldr	r1, [pc, #68]	; (800662c <_dtoa_r+0x5a4>)
 80065e6:	f7f9 fe2b 	bl	8000240 <__aeabi_dsub>
 80065ea:	4602      	mov	r2, r0
 80065ec:	460b      	mov	r3, r1
 80065ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065f2:	f7fa fa4b 	bl	8000a8c <__aeabi_dcmplt>
 80065f6:	b1d8      	cbz	r0, 8006630 <_dtoa_r+0x5a8>
 80065f8:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 80065fc:	1e62      	subs	r2, r4, #1
 80065fe:	2b30      	cmp	r3, #48	; 0x30
 8006600:	f040 82b7 	bne.w	8006b72 <_dtoa_r+0xaea>
 8006604:	4614      	mov	r4, r2
 8006606:	e7f7      	b.n	80065f8 <_dtoa_r+0x570>
 8006608:	4b05      	ldr	r3, [pc, #20]	; (8006620 <_dtoa_r+0x598>)
 800660a:	f7f9 ffcd 	bl	80005a8 <__aeabi_dmul>
 800660e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006612:	e7c0      	b.n	8006596 <_dtoa_r+0x50e>
 8006614:	08008ad8 	.word	0x08008ad8
 8006618:	08008ba0 	.word	0x08008ba0
 800661c:	3ff00000 	.word	0x3ff00000
 8006620:	40240000 	.word	0x40240000
 8006624:	401c0000 	.word	0x401c0000
 8006628:	40140000 	.word	0x40140000
 800662c:	3fe00000 	.word	0x3fe00000
 8006630:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
 8006634:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006638:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800663a:	2b00      	cmp	r3, #0
 800663c:	db7c      	blt.n	8006738 <_dtoa_r+0x6b0>
 800663e:	f1bb 0f0e 	cmp.w	fp, #14
 8006642:	dc79      	bgt.n	8006738 <_dtoa_r+0x6b0>
 8006644:	4bab      	ldr	r3, [pc, #684]	; (80068f4 <_dtoa_r+0x86c>)
 8006646:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800664a:	e9d3 6700 	ldrd	r6, r7, [r3]
 800664e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006650:	2b00      	cmp	r3, #0
 8006652:	da14      	bge.n	800667e <_dtoa_r+0x5f6>
 8006654:	9b05      	ldr	r3, [sp, #20]
 8006656:	2b00      	cmp	r3, #0
 8006658:	dc11      	bgt.n	800667e <_dtoa_r+0x5f6>
 800665a:	f040 816c 	bne.w	8006936 <_dtoa_r+0x8ae>
 800665e:	2200      	movs	r2, #0
 8006660:	4ba5      	ldr	r3, [pc, #660]	; (80068f8 <_dtoa_r+0x870>)
 8006662:	4630      	mov	r0, r6
 8006664:	4639      	mov	r1, r7
 8006666:	f7f9 ff9f 	bl	80005a8 <__aeabi_dmul>
 800666a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800666e:	f7fa fa21 	bl	8000ab4 <__aeabi_dcmpge>
 8006672:	9d05      	ldr	r5, [sp, #20]
 8006674:	462e      	mov	r6, r5
 8006676:	2800      	cmp	r0, #0
 8006678:	f040 815f 	bne.w	800693a <_dtoa_r+0x8b2>
 800667c:	e165      	b.n	800694a <_dtoa_r+0x8c2>
 800667e:	9c06      	ldr	r4, [sp, #24]
 8006680:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006684:	4632      	mov	r2, r6
 8006686:	463b      	mov	r3, r7
 8006688:	4640      	mov	r0, r8
 800668a:	4649      	mov	r1, r9
 800668c:	f7fa f8b6 	bl	80007fc <__aeabi_ddiv>
 8006690:	f7fa fa3a 	bl	8000b08 <__aeabi_d2iz>
 8006694:	4605      	mov	r5, r0
 8006696:	f7f9 ff21 	bl	80004dc <__aeabi_i2d>
 800669a:	4632      	mov	r2, r6
 800669c:	463b      	mov	r3, r7
 800669e:	f7f9 ff83 	bl	80005a8 <__aeabi_dmul>
 80066a2:	460b      	mov	r3, r1
 80066a4:	4602      	mov	r2, r0
 80066a6:	4649      	mov	r1, r9
 80066a8:	4640      	mov	r0, r8
 80066aa:	f7f9 fdc9 	bl	8000240 <__aeabi_dsub>
 80066ae:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 80066b2:	9b06      	ldr	r3, [sp, #24]
 80066b4:	f804 eb01 	strb.w	lr, [r4], #1
 80066b8:	ebc3 0e04 	rsb	lr, r3, r4
 80066bc:	9b05      	ldr	r3, [sp, #20]
 80066be:	4573      	cmp	r3, lr
 80066c0:	d12d      	bne.n	800671e <_dtoa_r+0x696>
 80066c2:	4602      	mov	r2, r0
 80066c4:	460b      	mov	r3, r1
 80066c6:	f7f9 fdbd 	bl	8000244 <__adddf3>
 80066ca:	4680      	mov	r8, r0
 80066cc:	4689      	mov	r9, r1
 80066ce:	4602      	mov	r2, r0
 80066d0:	460b      	mov	r3, r1
 80066d2:	4630      	mov	r0, r6
 80066d4:	4639      	mov	r1, r7
 80066d6:	f7fa f9d9 	bl	8000a8c <__aeabi_dcmplt>
 80066da:	b978      	cbnz	r0, 80066fc <_dtoa_r+0x674>
 80066dc:	4642      	mov	r2, r8
 80066de:	464b      	mov	r3, r9
 80066e0:	4630      	mov	r0, r6
 80066e2:	4639      	mov	r1, r7
 80066e4:	f7fa f9c8 	bl	8000a78 <__aeabi_dcmpeq>
 80066e8:	2800      	cmp	r0, #0
 80066ea:	f000 8244 	beq.w	8006b76 <_dtoa_r+0xaee>
 80066ee:	07eb      	lsls	r3, r5, #31
 80066f0:	d404      	bmi.n	80066fc <_dtoa_r+0x674>
 80066f2:	e240      	b.n	8006b76 <_dtoa_r+0xaee>
 80066f4:	f8dd b020 	ldr.w	fp, [sp, #32]
 80066f8:	e000      	b.n	80066fc <_dtoa_r+0x674>
 80066fa:	461c      	mov	r4, r3
 80066fc:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8006700:	1e63      	subs	r3, r4, #1
 8006702:	2a39      	cmp	r2, #57	; 0x39
 8006704:	d107      	bne.n	8006716 <_dtoa_r+0x68e>
 8006706:	9a06      	ldr	r2, [sp, #24]
 8006708:	429a      	cmp	r2, r3
 800670a:	d1f6      	bne.n	80066fa <_dtoa_r+0x672>
 800670c:	9906      	ldr	r1, [sp, #24]
 800670e:	2230      	movs	r2, #48	; 0x30
 8006710:	f10b 0b01 	add.w	fp, fp, #1
 8006714:	700a      	strb	r2, [r1, #0]
 8006716:	781a      	ldrb	r2, [r3, #0]
 8006718:	3201      	adds	r2, #1
 800671a:	701a      	strb	r2, [r3, #0]
 800671c:	e22b      	b.n	8006b76 <_dtoa_r+0xaee>
 800671e:	2200      	movs	r2, #0
 8006720:	4b76      	ldr	r3, [pc, #472]	; (80068fc <_dtoa_r+0x874>)
 8006722:	f7f9 ff41 	bl	80005a8 <__aeabi_dmul>
 8006726:	2200      	movs	r2, #0
 8006728:	2300      	movs	r3, #0
 800672a:	4680      	mov	r8, r0
 800672c:	4689      	mov	r9, r1
 800672e:	f7fa f9a3 	bl	8000a78 <__aeabi_dcmpeq>
 8006732:	2800      	cmp	r0, #0
 8006734:	d0a6      	beq.n	8006684 <_dtoa_r+0x5fc>
 8006736:	e21e      	b.n	8006b76 <_dtoa_r+0xaee>
 8006738:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800673a:	2a00      	cmp	r2, #0
 800673c:	d02b      	beq.n	8006796 <_dtoa_r+0x70e>
 800673e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006740:	2a01      	cmp	r2, #1
 8006742:	dc0a      	bgt.n	800675a <_dtoa_r+0x6d2>
 8006744:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006746:	b112      	cbz	r2, 800674e <_dtoa_r+0x6c6>
 8006748:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800674c:	e002      	b.n	8006754 <_dtoa_r+0x6cc>
 800674e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006750:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006754:	463d      	mov	r5, r7
 8006756:	4644      	mov	r4, r8
 8006758:	e013      	b.n	8006782 <_dtoa_r+0x6fa>
 800675a:	9b05      	ldr	r3, [sp, #20]
 800675c:	1e5d      	subs	r5, r3, #1
 800675e:	42af      	cmp	r7, r5
 8006760:	bfbf      	itttt	lt
 8006762:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8006764:	1bea      	sublt	r2, r5, r7
 8006766:	189b      	addlt	r3, r3, r2
 8006768:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800676a:	9b05      	ldr	r3, [sp, #20]
 800676c:	bfb6      	itet	lt
 800676e:	462f      	movlt	r7, r5
 8006770:	1b7d      	subge	r5, r7, r5
 8006772:	2500      	movlt	r5, #0
 8006774:	2b00      	cmp	r3, #0
 8006776:	bfa7      	ittee	ge
 8006778:	4644      	movge	r4, r8
 800677a:	9b05      	ldrge	r3, [sp, #20]
 800677c:	ebc3 0408 	rsblt	r4, r3, r8
 8006780:	2300      	movlt	r3, #0
 8006782:	9a07      	ldr	r2, [sp, #28]
 8006784:	2101      	movs	r1, #1
 8006786:	441a      	add	r2, r3
 8006788:	4650      	mov	r0, sl
 800678a:	4498      	add	r8, r3
 800678c:	9207      	str	r2, [sp, #28]
 800678e:	f001 f83a 	bl	8007806 <__i2b>
 8006792:	4606      	mov	r6, r0
 8006794:	e002      	b.n	800679c <_dtoa_r+0x714>
 8006796:	463d      	mov	r5, r7
 8006798:	4644      	mov	r4, r8
 800679a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800679c:	b15c      	cbz	r4, 80067b6 <_dtoa_r+0x72e>
 800679e:	9b07      	ldr	r3, [sp, #28]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	dd08      	ble.n	80067b6 <_dtoa_r+0x72e>
 80067a4:	42a3      	cmp	r3, r4
 80067a6:	bfa8      	it	ge
 80067a8:	4623      	movge	r3, r4
 80067aa:	9a07      	ldr	r2, [sp, #28]
 80067ac:	ebc3 0808 	rsb	r8, r3, r8
 80067b0:	1ae4      	subs	r4, r4, r3
 80067b2:	1ad3      	subs	r3, r2, r3
 80067b4:	9307      	str	r3, [sp, #28]
 80067b6:	2f00      	cmp	r7, #0
 80067b8:	dd1d      	ble.n	80067f6 <_dtoa_r+0x76e>
 80067ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067bc:	b1ab      	cbz	r3, 80067ea <_dtoa_r+0x762>
 80067be:	b18d      	cbz	r5, 80067e4 <_dtoa_r+0x75c>
 80067c0:	4631      	mov	r1, r6
 80067c2:	462a      	mov	r2, r5
 80067c4:	4650      	mov	r0, sl
 80067c6:	f001 f8b7 	bl	8007938 <__pow5mult>
 80067ca:	9a04      	ldr	r2, [sp, #16]
 80067cc:	4601      	mov	r1, r0
 80067ce:	4606      	mov	r6, r0
 80067d0:	4650      	mov	r0, sl
 80067d2:	f001 f821 	bl	8007818 <__multiply>
 80067d6:	9904      	ldr	r1, [sp, #16]
 80067d8:	9008      	str	r0, [sp, #32]
 80067da:	4650      	mov	r0, sl
 80067dc:	f000 ff74 	bl	80076c8 <_Bfree>
 80067e0:	9b08      	ldr	r3, [sp, #32]
 80067e2:	9304      	str	r3, [sp, #16]
 80067e4:	1b7a      	subs	r2, r7, r5
 80067e6:	d006      	beq.n	80067f6 <_dtoa_r+0x76e>
 80067e8:	e000      	b.n	80067ec <_dtoa_r+0x764>
 80067ea:	463a      	mov	r2, r7
 80067ec:	9904      	ldr	r1, [sp, #16]
 80067ee:	4650      	mov	r0, sl
 80067f0:	f001 f8a2 	bl	8007938 <__pow5mult>
 80067f4:	9004      	str	r0, [sp, #16]
 80067f6:	2101      	movs	r1, #1
 80067f8:	4650      	mov	r0, sl
 80067fa:	f001 f804 	bl	8007806 <__i2b>
 80067fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006800:	4605      	mov	r5, r0
 8006802:	b35b      	cbz	r3, 800685c <_dtoa_r+0x7d4>
 8006804:	461a      	mov	r2, r3
 8006806:	4601      	mov	r1, r0
 8006808:	4650      	mov	r0, sl
 800680a:	f001 f895 	bl	8007938 <__pow5mult>
 800680e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006810:	4605      	mov	r5, r0
 8006812:	2b01      	cmp	r3, #1
 8006814:	dc18      	bgt.n	8006848 <_dtoa_r+0x7c0>
 8006816:	9b02      	ldr	r3, [sp, #8]
 8006818:	b983      	cbnz	r3, 800683c <_dtoa_r+0x7b4>
 800681a:	9b03      	ldr	r3, [sp, #12]
 800681c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006820:	b973      	cbnz	r3, 8006840 <_dtoa_r+0x7b8>
 8006822:	9b03      	ldr	r3, [sp, #12]
 8006824:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 8006828:	0d3f      	lsrs	r7, r7, #20
 800682a:	053f      	lsls	r7, r7, #20
 800682c:	b14f      	cbz	r7, 8006842 <_dtoa_r+0x7ba>
 800682e:	9b07      	ldr	r3, [sp, #28]
 8006830:	f108 0801 	add.w	r8, r8, #1
 8006834:	3301      	adds	r3, #1
 8006836:	9307      	str	r3, [sp, #28]
 8006838:	2701      	movs	r7, #1
 800683a:	e002      	b.n	8006842 <_dtoa_r+0x7ba>
 800683c:	2700      	movs	r7, #0
 800683e:	e000      	b.n	8006842 <_dtoa_r+0x7ba>
 8006840:	9f02      	ldr	r7, [sp, #8]
 8006842:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006844:	b173      	cbz	r3, 8006864 <_dtoa_r+0x7dc>
 8006846:	e000      	b.n	800684a <_dtoa_r+0x7c2>
 8006848:	2700      	movs	r7, #0
 800684a:	692b      	ldr	r3, [r5, #16]
 800684c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006850:	6918      	ldr	r0, [r3, #16]
 8006852:	f000 ff8b 	bl	800776c <__hi0bits>
 8006856:	f1c0 0020 	rsb	r0, r0, #32
 800685a:	e004      	b.n	8006866 <_dtoa_r+0x7de>
 800685c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800685e:	2b01      	cmp	r3, #1
 8006860:	ddd9      	ble.n	8006816 <_dtoa_r+0x78e>
 8006862:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8006864:	2001      	movs	r0, #1
 8006866:	9b07      	ldr	r3, [sp, #28]
 8006868:	4418      	add	r0, r3
 800686a:	f010 001f 	ands.w	r0, r0, #31
 800686e:	d008      	beq.n	8006882 <_dtoa_r+0x7fa>
 8006870:	f1c0 0320 	rsb	r3, r0, #32
 8006874:	2b04      	cmp	r3, #4
 8006876:	dd02      	ble.n	800687e <_dtoa_r+0x7f6>
 8006878:	f1c0 001c 	rsb	r0, r0, #28
 800687c:	e002      	b.n	8006884 <_dtoa_r+0x7fc>
 800687e:	d006      	beq.n	800688e <_dtoa_r+0x806>
 8006880:	4618      	mov	r0, r3
 8006882:	301c      	adds	r0, #28
 8006884:	9b07      	ldr	r3, [sp, #28]
 8006886:	4480      	add	r8, r0
 8006888:	4403      	add	r3, r0
 800688a:	4404      	add	r4, r0
 800688c:	9307      	str	r3, [sp, #28]
 800688e:	f1b8 0f00 	cmp.w	r8, #0
 8006892:	dd05      	ble.n	80068a0 <_dtoa_r+0x818>
 8006894:	4642      	mov	r2, r8
 8006896:	9904      	ldr	r1, [sp, #16]
 8006898:	4650      	mov	r0, sl
 800689a:	f001 f89b 	bl	80079d4 <__lshift>
 800689e:	9004      	str	r0, [sp, #16]
 80068a0:	9b07      	ldr	r3, [sp, #28]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	dd05      	ble.n	80068b2 <_dtoa_r+0x82a>
 80068a6:	4629      	mov	r1, r5
 80068a8:	461a      	mov	r2, r3
 80068aa:	4650      	mov	r0, sl
 80068ac:	f001 f892 	bl	80079d4 <__lshift>
 80068b0:	4605      	mov	r5, r0
 80068b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80068b4:	b323      	cbz	r3, 8006900 <_dtoa_r+0x878>
 80068b6:	4629      	mov	r1, r5
 80068b8:	9804      	ldr	r0, [sp, #16]
 80068ba:	f001 f8dc 	bl	8007a76 <__mcmp>
 80068be:	2800      	cmp	r0, #0
 80068c0:	da1e      	bge.n	8006900 <_dtoa_r+0x878>
 80068c2:	2300      	movs	r3, #0
 80068c4:	220a      	movs	r2, #10
 80068c6:	9904      	ldr	r1, [sp, #16]
 80068c8:	4650      	mov	r0, sl
 80068ca:	f000 ff14 	bl	80076f6 <__multadd>
 80068ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068d0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80068d4:	9004      	str	r0, [sp, #16]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	f000 815f 	beq.w	8006b9a <_dtoa_r+0xb12>
 80068dc:	4631      	mov	r1, r6
 80068de:	2300      	movs	r3, #0
 80068e0:	220a      	movs	r2, #10
 80068e2:	4650      	mov	r0, sl
 80068e4:	f000 ff07 	bl	80076f6 <__multadd>
 80068e8:	f1b9 0f00 	cmp.w	r9, #0
 80068ec:	4606      	mov	r6, r0
 80068ee:	dc3f      	bgt.n	8006970 <_dtoa_r+0x8e8>
 80068f0:	e03b      	b.n	800696a <_dtoa_r+0x8e2>
 80068f2:	bf00      	nop
 80068f4:	08008ad8 	.word	0x08008ad8
 80068f8:	40140000 	.word	0x40140000
 80068fc:	40240000 	.word	0x40240000
 8006900:	9b05      	ldr	r3, [sp, #20]
 8006902:	2b00      	cmp	r3, #0
 8006904:	dc2b      	bgt.n	800695e <_dtoa_r+0x8d6>
 8006906:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006908:	2b02      	cmp	r3, #2
 800690a:	dd28      	ble.n	800695e <_dtoa_r+0x8d6>
 800690c:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006910:	f1b9 0f00 	cmp.w	r9, #0
 8006914:	d111      	bne.n	800693a <_dtoa_r+0x8b2>
 8006916:	4629      	mov	r1, r5
 8006918:	464b      	mov	r3, r9
 800691a:	2205      	movs	r2, #5
 800691c:	4650      	mov	r0, sl
 800691e:	f000 feea 	bl	80076f6 <__multadd>
 8006922:	4601      	mov	r1, r0
 8006924:	4605      	mov	r5, r0
 8006926:	9804      	ldr	r0, [sp, #16]
 8006928:	f001 f8a5 	bl	8007a76 <__mcmp>
 800692c:	2800      	cmp	r0, #0
 800692e:	dc0c      	bgt.n	800694a <_dtoa_r+0x8c2>
 8006930:	e003      	b.n	800693a <_dtoa_r+0x8b2>
 8006932:	4635      	mov	r5, r6
 8006934:	e000      	b.n	8006938 <_dtoa_r+0x8b0>
 8006936:	2500      	movs	r5, #0
 8006938:	462e      	mov	r6, r5
 800693a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800693c:	9c06      	ldr	r4, [sp, #24]
 800693e:	ea6f 0b03 	mvn.w	fp, r3
 8006942:	e009      	b.n	8006958 <_dtoa_r+0x8d0>
 8006944:	4635      	mov	r5, r6
 8006946:	f8dd b020 	ldr.w	fp, [sp, #32]
 800694a:	9b06      	ldr	r3, [sp, #24]
 800694c:	9a06      	ldr	r2, [sp, #24]
 800694e:	1c5c      	adds	r4, r3, #1
 8006950:	2331      	movs	r3, #49	; 0x31
 8006952:	7013      	strb	r3, [r2, #0]
 8006954:	f10b 0b01 	add.w	fp, fp, #1
 8006958:	9605      	str	r6, [sp, #20]
 800695a:	2600      	movs	r6, #0
 800695c:	e0f7      	b.n	8006b4e <_dtoa_r+0xac6>
 800695e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006960:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006964:	b923      	cbnz	r3, 8006970 <_dtoa_r+0x8e8>
 8006966:	9c06      	ldr	r4, [sp, #24]
 8006968:	e0b2      	b.n	8006ad0 <_dtoa_r+0xa48>
 800696a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800696c:	2b02      	cmp	r3, #2
 800696e:	dccf      	bgt.n	8006910 <_dtoa_r+0x888>
 8006970:	2c00      	cmp	r4, #0
 8006972:	dd05      	ble.n	8006980 <_dtoa_r+0x8f8>
 8006974:	4631      	mov	r1, r6
 8006976:	4622      	mov	r2, r4
 8006978:	4650      	mov	r0, sl
 800697a:	f001 f82b 	bl	80079d4 <__lshift>
 800697e:	4606      	mov	r6, r0
 8006980:	b19f      	cbz	r7, 80069aa <_dtoa_r+0x922>
 8006982:	6871      	ldr	r1, [r6, #4]
 8006984:	4650      	mov	r0, sl
 8006986:	f000 fe6a 	bl	800765e <_Balloc>
 800698a:	4604      	mov	r4, r0
 800698c:	6932      	ldr	r2, [r6, #16]
 800698e:	f106 010c 	add.w	r1, r6, #12
 8006992:	3202      	adds	r2, #2
 8006994:	0092      	lsls	r2, r2, #2
 8006996:	300c      	adds	r0, #12
 8006998:	f000 fe54 	bl	8007644 <memcpy>
 800699c:	2201      	movs	r2, #1
 800699e:	4621      	mov	r1, r4
 80069a0:	4650      	mov	r0, sl
 80069a2:	f001 f817 	bl	80079d4 <__lshift>
 80069a6:	9005      	str	r0, [sp, #20]
 80069a8:	e000      	b.n	80069ac <_dtoa_r+0x924>
 80069aa:	9605      	str	r6, [sp, #20]
 80069ac:	9b02      	ldr	r3, [sp, #8]
 80069ae:	9f06      	ldr	r7, [sp, #24]
 80069b0:	f003 0301 	and.w	r3, r3, #1
 80069b4:	9307      	str	r3, [sp, #28]
 80069b6:	4629      	mov	r1, r5
 80069b8:	9804      	ldr	r0, [sp, #16]
 80069ba:	f7ff fad7 	bl	8005f6c <quorem>
 80069be:	4631      	mov	r1, r6
 80069c0:	4604      	mov	r4, r0
 80069c2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80069c6:	9804      	ldr	r0, [sp, #16]
 80069c8:	f001 f855 	bl	8007a76 <__mcmp>
 80069cc:	9a05      	ldr	r2, [sp, #20]
 80069ce:	9002      	str	r0, [sp, #8]
 80069d0:	4629      	mov	r1, r5
 80069d2:	4650      	mov	r0, sl
 80069d4:	f001 f86b 	bl	8007aae <__mdiff>
 80069d8:	68c3      	ldr	r3, [r0, #12]
 80069da:	4602      	mov	r2, r0
 80069dc:	b93b      	cbnz	r3, 80069ee <_dtoa_r+0x966>
 80069de:	4601      	mov	r1, r0
 80069e0:	900a      	str	r0, [sp, #40]	; 0x28
 80069e2:	9804      	ldr	r0, [sp, #16]
 80069e4:	f001 f847 	bl	8007a76 <__mcmp>
 80069e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069ea:	4603      	mov	r3, r0
 80069ec:	e000      	b.n	80069f0 <_dtoa_r+0x968>
 80069ee:	2301      	movs	r3, #1
 80069f0:	4611      	mov	r1, r2
 80069f2:	4650      	mov	r0, sl
 80069f4:	930a      	str	r3, [sp, #40]	; 0x28
 80069f6:	f000 fe67 	bl	80076c8 <_Bfree>
 80069fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069fc:	b953      	cbnz	r3, 8006a14 <_dtoa_r+0x98c>
 80069fe:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006a00:	b942      	cbnz	r2, 8006a14 <_dtoa_r+0x98c>
 8006a02:	9a07      	ldr	r2, [sp, #28]
 8006a04:	b932      	cbnz	r2, 8006a14 <_dtoa_r+0x98c>
 8006a06:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006a0a:	d02a      	beq.n	8006a62 <_dtoa_r+0x9da>
 8006a0c:	9b02      	ldr	r3, [sp, #8]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	dc1c      	bgt.n	8006a4c <_dtoa_r+0x9c4>
 8006a12:	e01d      	b.n	8006a50 <_dtoa_r+0x9c8>
 8006a14:	9a02      	ldr	r2, [sp, #8]
 8006a16:	2a00      	cmp	r2, #0
 8006a18:	db04      	blt.n	8006a24 <_dtoa_r+0x99c>
 8006a1a:	d11b      	bne.n	8006a54 <_dtoa_r+0x9cc>
 8006a1c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006a1e:	b9ca      	cbnz	r2, 8006a54 <_dtoa_r+0x9cc>
 8006a20:	9a07      	ldr	r2, [sp, #28]
 8006a22:	b9ba      	cbnz	r2, 8006a54 <_dtoa_r+0x9cc>
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	dd13      	ble.n	8006a50 <_dtoa_r+0x9c8>
 8006a28:	2201      	movs	r2, #1
 8006a2a:	9904      	ldr	r1, [sp, #16]
 8006a2c:	4650      	mov	r0, sl
 8006a2e:	f000 ffd1 	bl	80079d4 <__lshift>
 8006a32:	4629      	mov	r1, r5
 8006a34:	9004      	str	r0, [sp, #16]
 8006a36:	f001 f81e 	bl	8007a76 <__mcmp>
 8006a3a:	2800      	cmp	r0, #0
 8006a3c:	dc03      	bgt.n	8006a46 <_dtoa_r+0x9be>
 8006a3e:	d107      	bne.n	8006a50 <_dtoa_r+0x9c8>
 8006a40:	f018 0f01 	tst.w	r8, #1
 8006a44:	d004      	beq.n	8006a50 <_dtoa_r+0x9c8>
 8006a46:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006a4a:	d00a      	beq.n	8006a62 <_dtoa_r+0x9da>
 8006a4c:	f104 0831 	add.w	r8, r4, #49	; 0x31
 8006a50:	1c7c      	adds	r4, r7, #1
 8006a52:	e00c      	b.n	8006a6e <_dtoa_r+0x9e6>
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	f107 0401 	add.w	r4, r7, #1
 8006a5a:	dd0b      	ble.n	8006a74 <_dtoa_r+0x9ec>
 8006a5c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006a60:	d103      	bne.n	8006a6a <_dtoa_r+0x9e2>
 8006a62:	2339      	movs	r3, #57	; 0x39
 8006a64:	703b      	strb	r3, [r7, #0]
 8006a66:	3701      	adds	r7, #1
 8006a68:	e056      	b.n	8006b18 <_dtoa_r+0xa90>
 8006a6a:	f108 0801 	add.w	r8, r8, #1
 8006a6e:	f887 8000 	strb.w	r8, [r7]
 8006a72:	e06c      	b.n	8006b4e <_dtoa_r+0xac6>
 8006a74:	9b06      	ldr	r3, [sp, #24]
 8006a76:	4627      	mov	r7, r4
 8006a78:	1ae3      	subs	r3, r4, r3
 8006a7a:	454b      	cmp	r3, r9
 8006a7c:	f804 8c01 	strb.w	r8, [r4, #-1]
 8006a80:	d03b      	beq.n	8006afa <_dtoa_r+0xa72>
 8006a82:	2300      	movs	r3, #0
 8006a84:	220a      	movs	r2, #10
 8006a86:	9904      	ldr	r1, [sp, #16]
 8006a88:	4650      	mov	r0, sl
 8006a8a:	f000 fe34 	bl	80076f6 <__multadd>
 8006a8e:	9b05      	ldr	r3, [sp, #20]
 8006a90:	9004      	str	r0, [sp, #16]
 8006a92:	429e      	cmp	r6, r3
 8006a94:	f04f 020a 	mov.w	r2, #10
 8006a98:	f04f 0300 	mov.w	r3, #0
 8006a9c:	4631      	mov	r1, r6
 8006a9e:	4650      	mov	r0, sl
 8006aa0:	d104      	bne.n	8006aac <_dtoa_r+0xa24>
 8006aa2:	f000 fe28 	bl	80076f6 <__multadd>
 8006aa6:	4606      	mov	r6, r0
 8006aa8:	9005      	str	r0, [sp, #20]
 8006aaa:	e784      	b.n	80069b6 <_dtoa_r+0x92e>
 8006aac:	f000 fe23 	bl	80076f6 <__multadd>
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	4606      	mov	r6, r0
 8006ab4:	220a      	movs	r2, #10
 8006ab6:	9905      	ldr	r1, [sp, #20]
 8006ab8:	4650      	mov	r0, sl
 8006aba:	f000 fe1c 	bl	80076f6 <__multadd>
 8006abe:	9005      	str	r0, [sp, #20]
 8006ac0:	e779      	b.n	80069b6 <_dtoa_r+0x92e>
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	220a      	movs	r2, #10
 8006ac6:	9904      	ldr	r1, [sp, #16]
 8006ac8:	4650      	mov	r0, sl
 8006aca:	f000 fe14 	bl	80076f6 <__multadd>
 8006ace:	9004      	str	r0, [sp, #16]
 8006ad0:	4629      	mov	r1, r5
 8006ad2:	9804      	ldr	r0, [sp, #16]
 8006ad4:	f7ff fa4a 	bl	8005f6c <quorem>
 8006ad8:	9b06      	ldr	r3, [sp, #24]
 8006ada:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006ade:	f804 8b01 	strb.w	r8, [r4], #1
 8006ae2:	1ae3      	subs	r3, r4, r3
 8006ae4:	454b      	cmp	r3, r9
 8006ae6:	dbec      	blt.n	8006ac2 <_dtoa_r+0xa3a>
 8006ae8:	9b06      	ldr	r3, [sp, #24]
 8006aea:	9605      	str	r6, [sp, #20]
 8006aec:	f1b9 0f01 	cmp.w	r9, #1
 8006af0:	bfac      	ite	ge
 8006af2:	444b      	addge	r3, r9
 8006af4:	3301      	addlt	r3, #1
 8006af6:	461f      	mov	r7, r3
 8006af8:	2600      	movs	r6, #0
 8006afa:	2201      	movs	r2, #1
 8006afc:	9904      	ldr	r1, [sp, #16]
 8006afe:	4650      	mov	r0, sl
 8006b00:	f000 ff68 	bl	80079d4 <__lshift>
 8006b04:	4629      	mov	r1, r5
 8006b06:	9004      	str	r0, [sp, #16]
 8006b08:	f000 ffb5 	bl	8007a76 <__mcmp>
 8006b0c:	2800      	cmp	r0, #0
 8006b0e:	dc03      	bgt.n	8006b18 <_dtoa_r+0xa90>
 8006b10:	d115      	bne.n	8006b3e <_dtoa_r+0xab6>
 8006b12:	f018 0f01 	tst.w	r8, #1
 8006b16:	d012      	beq.n	8006b3e <_dtoa_r+0xab6>
 8006b18:	463c      	mov	r4, r7
 8006b1a:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8006b1e:	1e62      	subs	r2, r4, #1
 8006b20:	2b39      	cmp	r3, #57	; 0x39
 8006b22:	d109      	bne.n	8006b38 <_dtoa_r+0xab0>
 8006b24:	9b06      	ldr	r3, [sp, #24]
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d104      	bne.n	8006b34 <_dtoa_r+0xaac>
 8006b2a:	f10b 0b01 	add.w	fp, fp, #1
 8006b2e:	2331      	movs	r3, #49	; 0x31
 8006b30:	9a06      	ldr	r2, [sp, #24]
 8006b32:	e002      	b.n	8006b3a <_dtoa_r+0xab2>
 8006b34:	4614      	mov	r4, r2
 8006b36:	e7f0      	b.n	8006b1a <_dtoa_r+0xa92>
 8006b38:	3301      	adds	r3, #1
 8006b3a:	7013      	strb	r3, [r2, #0]
 8006b3c:	e007      	b.n	8006b4e <_dtoa_r+0xac6>
 8006b3e:	463c      	mov	r4, r7
 8006b40:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8006b44:	1e62      	subs	r2, r4, #1
 8006b46:	2b30      	cmp	r3, #48	; 0x30
 8006b48:	d101      	bne.n	8006b4e <_dtoa_r+0xac6>
 8006b4a:	4614      	mov	r4, r2
 8006b4c:	e7f8      	b.n	8006b40 <_dtoa_r+0xab8>
 8006b4e:	4629      	mov	r1, r5
 8006b50:	4650      	mov	r0, sl
 8006b52:	f000 fdb9 	bl	80076c8 <_Bfree>
 8006b56:	9b05      	ldr	r3, [sp, #20]
 8006b58:	b16b      	cbz	r3, 8006b76 <_dtoa_r+0xaee>
 8006b5a:	b12e      	cbz	r6, 8006b68 <_dtoa_r+0xae0>
 8006b5c:	429e      	cmp	r6, r3
 8006b5e:	d003      	beq.n	8006b68 <_dtoa_r+0xae0>
 8006b60:	4631      	mov	r1, r6
 8006b62:	4650      	mov	r0, sl
 8006b64:	f000 fdb0 	bl	80076c8 <_Bfree>
 8006b68:	9905      	ldr	r1, [sp, #20]
 8006b6a:	4650      	mov	r0, sl
 8006b6c:	f000 fdac 	bl	80076c8 <_Bfree>
 8006b70:	e001      	b.n	8006b76 <_dtoa_r+0xaee>
 8006b72:	f8dd b020 	ldr.w	fp, [sp, #32]
 8006b76:	9904      	ldr	r1, [sp, #16]
 8006b78:	4650      	mov	r0, sl
 8006b7a:	f000 fda5 	bl	80076c8 <_Bfree>
 8006b7e:	2300      	movs	r3, #0
 8006b80:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006b82:	7023      	strb	r3, [r4, #0]
 8006b84:	f10b 0301 	add.w	r3, fp, #1
 8006b88:	6013      	str	r3, [r2, #0]
 8006b8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b8c:	b11b      	cbz	r3, 8006b96 <_dtoa_r+0xb0e>
 8006b8e:	601c      	str	r4, [r3, #0]
 8006b90:	e001      	b.n	8006b96 <_dtoa_r+0xb0e>
 8006b92:	4808      	ldr	r0, [pc, #32]	; (8006bb4 <_dtoa_r+0xb2c>)
 8006b94:	e00a      	b.n	8006bac <_dtoa_r+0xb24>
 8006b96:	9806      	ldr	r0, [sp, #24]
 8006b98:	e008      	b.n	8006bac <_dtoa_r+0xb24>
 8006b9a:	f1b9 0f00 	cmp.w	r9, #0
 8006b9e:	f73f aee2 	bgt.w	8006966 <_dtoa_r+0x8de>
 8006ba2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006ba4:	2b02      	cmp	r3, #2
 8006ba6:	f77f aede 	ble.w	8006966 <_dtoa_r+0x8de>
 8006baa:	e6b1      	b.n	8006910 <_dtoa_r+0x888>
 8006bac:	b015      	add	sp, #84	; 0x54
 8006bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bb2:	bf00      	nop
 8006bb4:	08008a26 	.word	0x08008a26

08006bb8 <__sflush_r>:
 8006bb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bc0:	b293      	uxth	r3, r2
 8006bc2:	4605      	mov	r5, r0
 8006bc4:	0718      	lsls	r0, r3, #28
 8006bc6:	460c      	mov	r4, r1
 8006bc8:	d460      	bmi.n	8006c8c <__sflush_r+0xd4>
 8006bca:	684b      	ldr	r3, [r1, #4]
 8006bcc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	818a      	strh	r2, [r1, #12]
 8006bd4:	dc02      	bgt.n	8006bdc <__sflush_r+0x24>
 8006bd6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	dd17      	ble.n	8006c0c <__sflush_r+0x54>
 8006bdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006bde:	b1ae      	cbz	r6, 8006c0c <__sflush_r+0x54>
 8006be0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006be4:	2300      	movs	r3, #0
 8006be6:	b292      	uxth	r2, r2
 8006be8:	682f      	ldr	r7, [r5, #0]
 8006bea:	602b      	str	r3, [r5, #0]
 8006bec:	b10a      	cbz	r2, 8006bf2 <__sflush_r+0x3a>
 8006bee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006bf0:	e015      	b.n	8006c1e <__sflush_r+0x66>
 8006bf2:	6a21      	ldr	r1, [r4, #32]
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	4628      	mov	r0, r5
 8006bf8:	47b0      	blx	r6
 8006bfa:	1c41      	adds	r1, r0, #1
 8006bfc:	d10f      	bne.n	8006c1e <__sflush_r+0x66>
 8006bfe:	682b      	ldr	r3, [r5, #0]
 8006c00:	b16b      	cbz	r3, 8006c1e <__sflush_r+0x66>
 8006c02:	2b1d      	cmp	r3, #29
 8006c04:	d001      	beq.n	8006c0a <__sflush_r+0x52>
 8006c06:	2b16      	cmp	r3, #22
 8006c08:	d103      	bne.n	8006c12 <__sflush_r+0x5a>
 8006c0a:	602f      	str	r7, [r5, #0]
 8006c0c:	2000      	movs	r0, #0
 8006c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c12:	89a3      	ldrh	r3, [r4, #12]
 8006c14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c18:	81a3      	strh	r3, [r4, #12]
 8006c1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c1e:	89a3      	ldrh	r3, [r4, #12]
 8006c20:	075a      	lsls	r2, r3, #29
 8006c22:	d505      	bpl.n	8006c30 <__sflush_r+0x78>
 8006c24:	6863      	ldr	r3, [r4, #4]
 8006c26:	1ac0      	subs	r0, r0, r3
 8006c28:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006c2a:	b10b      	cbz	r3, 8006c30 <__sflush_r+0x78>
 8006c2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006c2e:	1ac0      	subs	r0, r0, r3
 8006c30:	2300      	movs	r3, #0
 8006c32:	4602      	mov	r2, r0
 8006c34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c36:	6a21      	ldr	r1, [r4, #32]
 8006c38:	4628      	mov	r0, r5
 8006c3a:	47b0      	blx	r6
 8006c3c:	1c43      	adds	r3, r0, #1
 8006c3e:	89a3      	ldrh	r3, [r4, #12]
 8006c40:	d106      	bne.n	8006c50 <__sflush_r+0x98>
 8006c42:	6829      	ldr	r1, [r5, #0]
 8006c44:	291d      	cmp	r1, #29
 8006c46:	d83d      	bhi.n	8006cc4 <__sflush_r+0x10c>
 8006c48:	4a22      	ldr	r2, [pc, #136]	; (8006cd4 <__sflush_r+0x11c>)
 8006c4a:	40ca      	lsrs	r2, r1
 8006c4c:	07d6      	lsls	r6, r2, #31
 8006c4e:	d539      	bpl.n	8006cc4 <__sflush_r+0x10c>
 8006c50:	2200      	movs	r2, #0
 8006c52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c56:	b21b      	sxth	r3, r3
 8006c58:	6062      	str	r2, [r4, #4]
 8006c5a:	6922      	ldr	r2, [r4, #16]
 8006c5c:	04d9      	lsls	r1, r3, #19
 8006c5e:	81a3      	strh	r3, [r4, #12]
 8006c60:	6022      	str	r2, [r4, #0]
 8006c62:	d504      	bpl.n	8006c6e <__sflush_r+0xb6>
 8006c64:	1c42      	adds	r2, r0, #1
 8006c66:	d101      	bne.n	8006c6c <__sflush_r+0xb4>
 8006c68:	682b      	ldr	r3, [r5, #0]
 8006c6a:	b903      	cbnz	r3, 8006c6e <__sflush_r+0xb6>
 8006c6c:	6560      	str	r0, [r4, #84]	; 0x54
 8006c6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c70:	602f      	str	r7, [r5, #0]
 8006c72:	2900      	cmp	r1, #0
 8006c74:	d0ca      	beq.n	8006c0c <__sflush_r+0x54>
 8006c76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c7a:	4299      	cmp	r1, r3
 8006c7c:	d002      	beq.n	8006c84 <__sflush_r+0xcc>
 8006c7e:	4628      	mov	r0, r5
 8006c80:	f000 f95c 	bl	8006f3c <_free_r>
 8006c84:	2000      	movs	r0, #0
 8006c86:	6360      	str	r0, [r4, #52]	; 0x34
 8006c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c8c:	690f      	ldr	r7, [r1, #16]
 8006c8e:	2f00      	cmp	r7, #0
 8006c90:	d0bc      	beq.n	8006c0c <__sflush_r+0x54>
 8006c92:	079b      	lsls	r3, r3, #30
 8006c94:	680e      	ldr	r6, [r1, #0]
 8006c96:	bf0c      	ite	eq
 8006c98:	694b      	ldreq	r3, [r1, #20]
 8006c9a:	2300      	movne	r3, #0
 8006c9c:	ebc7 0806 	rsb	r8, r7, r6
 8006ca0:	600f      	str	r7, [r1, #0]
 8006ca2:	608b      	str	r3, [r1, #8]
 8006ca4:	e002      	b.n	8006cac <__sflush_r+0xf4>
 8006ca6:	4407      	add	r7, r0
 8006ca8:	ebc0 0808 	rsb	r8, r0, r8
 8006cac:	f1b8 0f00 	cmp.w	r8, #0
 8006cb0:	ddac      	ble.n	8006c0c <__sflush_r+0x54>
 8006cb2:	4643      	mov	r3, r8
 8006cb4:	463a      	mov	r2, r7
 8006cb6:	6a21      	ldr	r1, [r4, #32]
 8006cb8:	4628      	mov	r0, r5
 8006cba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006cbc:	47b0      	blx	r6
 8006cbe:	2800      	cmp	r0, #0
 8006cc0:	dcf1      	bgt.n	8006ca6 <__sflush_r+0xee>
 8006cc2:	89a3      	ldrh	r3, [r4, #12]
 8006cc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cc8:	81a3      	strh	r3, [r4, #12]
 8006cca:	f04f 30ff 	mov.w	r0, #4294967295
 8006cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cd2:	bf00      	nop
 8006cd4:	20400001 	.word	0x20400001

08006cd8 <_fflush_r>:
 8006cd8:	b538      	push	{r3, r4, r5, lr}
 8006cda:	690b      	ldr	r3, [r1, #16]
 8006cdc:	4605      	mov	r5, r0
 8006cde:	460c      	mov	r4, r1
 8006ce0:	b1db      	cbz	r3, 8006d1a <_fflush_r+0x42>
 8006ce2:	b118      	cbz	r0, 8006cec <_fflush_r+0x14>
 8006ce4:	6983      	ldr	r3, [r0, #24]
 8006ce6:	b90b      	cbnz	r3, 8006cec <_fflush_r+0x14>
 8006ce8:	f000 f860 	bl	8006dac <__sinit>
 8006cec:	4b0c      	ldr	r3, [pc, #48]	; (8006d20 <_fflush_r+0x48>)
 8006cee:	429c      	cmp	r4, r3
 8006cf0:	d101      	bne.n	8006cf6 <_fflush_r+0x1e>
 8006cf2:	686c      	ldr	r4, [r5, #4]
 8006cf4:	e008      	b.n	8006d08 <_fflush_r+0x30>
 8006cf6:	4b0b      	ldr	r3, [pc, #44]	; (8006d24 <_fflush_r+0x4c>)
 8006cf8:	429c      	cmp	r4, r3
 8006cfa:	d101      	bne.n	8006d00 <_fflush_r+0x28>
 8006cfc:	68ac      	ldr	r4, [r5, #8]
 8006cfe:	e003      	b.n	8006d08 <_fflush_r+0x30>
 8006d00:	4b09      	ldr	r3, [pc, #36]	; (8006d28 <_fflush_r+0x50>)
 8006d02:	429c      	cmp	r4, r3
 8006d04:	bf08      	it	eq
 8006d06:	68ec      	ldreq	r4, [r5, #12]
 8006d08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d0c:	b12b      	cbz	r3, 8006d1a <_fflush_r+0x42>
 8006d0e:	4621      	mov	r1, r4
 8006d10:	4628      	mov	r0, r5
 8006d12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d16:	f7ff bf4f 	b.w	8006bb8 <__sflush_r>
 8006d1a:	2000      	movs	r0, #0
 8006d1c:	bd38      	pop	{r3, r4, r5, pc}
 8006d1e:	bf00      	nop
 8006d20:	08008a68 	.word	0x08008a68
 8006d24:	08008a88 	.word	0x08008a88
 8006d28:	08008aa8 	.word	0x08008aa8

08006d2c <_cleanup_r>:
 8006d2c:	4901      	ldr	r1, [pc, #4]	; (8006d34 <_cleanup_r+0x8>)
 8006d2e:	f000 b9c3 	b.w	80070b8 <_fwalk_reent>
 8006d32:	bf00      	nop
 8006d34:	08007fd9 	.word	0x08007fd9

08006d38 <std.isra.0>:
 8006d38:	b510      	push	{r4, lr}
 8006d3a:	4604      	mov	r4, r0
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	6003      	str	r3, [r0, #0]
 8006d40:	6043      	str	r3, [r0, #4]
 8006d42:	6083      	str	r3, [r0, #8]
 8006d44:	8181      	strh	r1, [r0, #12]
 8006d46:	6643      	str	r3, [r0, #100]	; 0x64
 8006d48:	81c2      	strh	r2, [r0, #14]
 8006d4a:	6103      	str	r3, [r0, #16]
 8006d4c:	6143      	str	r3, [r0, #20]
 8006d4e:	6183      	str	r3, [r0, #24]
 8006d50:	4619      	mov	r1, r3
 8006d52:	2208      	movs	r2, #8
 8006d54:	305c      	adds	r0, #92	; 0x5c
 8006d56:	f7fd f867 	bl	8003e28 <memset>
 8006d5a:	4b05      	ldr	r3, [pc, #20]	; (8006d70 <std.isra.0+0x38>)
 8006d5c:	6224      	str	r4, [r4, #32]
 8006d5e:	6263      	str	r3, [r4, #36]	; 0x24
 8006d60:	4b04      	ldr	r3, [pc, #16]	; (8006d74 <std.isra.0+0x3c>)
 8006d62:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d64:	4b04      	ldr	r3, [pc, #16]	; (8006d78 <std.isra.0+0x40>)
 8006d66:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006d68:	4b04      	ldr	r3, [pc, #16]	; (8006d7c <std.isra.0+0x44>)
 8006d6a:	6323      	str	r3, [r4, #48]	; 0x30
 8006d6c:	bd10      	pop	{r4, pc}
 8006d6e:	bf00      	nop
 8006d70:	08007c95 	.word	0x08007c95
 8006d74:	08007cb7 	.word	0x08007cb7
 8006d78:	08007cef 	.word	0x08007cef
 8006d7c:	08007d13 	.word	0x08007d13

08006d80 <__sfmoreglue>:
 8006d80:	b570      	push	{r4, r5, r6, lr}
 8006d82:	2368      	movs	r3, #104	; 0x68
 8006d84:	1e4d      	subs	r5, r1, #1
 8006d86:	435d      	muls	r5, r3
 8006d88:	460e      	mov	r6, r1
 8006d8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006d8e:	f000 fa2f 	bl	80071f0 <_malloc_r>
 8006d92:	4604      	mov	r4, r0
 8006d94:	b140      	cbz	r0, 8006da8 <__sfmoreglue+0x28>
 8006d96:	2100      	movs	r1, #0
 8006d98:	e880 0042 	stmia.w	r0, {r1, r6}
 8006d9c:	300c      	adds	r0, #12
 8006d9e:	60a0      	str	r0, [r4, #8]
 8006da0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006da4:	f7fd f840 	bl	8003e28 <memset>
 8006da8:	4620      	mov	r0, r4
 8006daa:	bd70      	pop	{r4, r5, r6, pc}

08006dac <__sinit>:
 8006dac:	6983      	ldr	r3, [r0, #24]
 8006dae:	b510      	push	{r4, lr}
 8006db0:	4604      	mov	r4, r0
 8006db2:	bb4b      	cbnz	r3, 8006e08 <__sinit+0x5c>
 8006db4:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
 8006db8:	f8c0 30dc 	str.w	r3, [r0, #220]	; 0xdc
 8006dbc:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0
 8006dc0:	4b12      	ldr	r3, [pc, #72]	; (8006e0c <__sinit+0x60>)
 8006dc2:	4a13      	ldr	r2, [pc, #76]	; (8006e10 <__sinit+0x64>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	6282      	str	r2, [r0, #40]	; 0x28
 8006dc8:	4298      	cmp	r0, r3
 8006dca:	bf04      	itt	eq
 8006dcc:	2301      	moveq	r3, #1
 8006dce:	6183      	streq	r3, [r0, #24]
 8006dd0:	f000 f820 	bl	8006e14 <__sfp>
 8006dd4:	6060      	str	r0, [r4, #4]
 8006dd6:	4620      	mov	r0, r4
 8006dd8:	f000 f81c 	bl	8006e14 <__sfp>
 8006ddc:	60a0      	str	r0, [r4, #8]
 8006dde:	4620      	mov	r0, r4
 8006de0:	f000 f818 	bl	8006e14 <__sfp>
 8006de4:	2200      	movs	r2, #0
 8006de6:	60e0      	str	r0, [r4, #12]
 8006de8:	2104      	movs	r1, #4
 8006dea:	6860      	ldr	r0, [r4, #4]
 8006dec:	f7ff ffa4 	bl	8006d38 <std.isra.0>
 8006df0:	2201      	movs	r2, #1
 8006df2:	2109      	movs	r1, #9
 8006df4:	68a0      	ldr	r0, [r4, #8]
 8006df6:	f7ff ff9f 	bl	8006d38 <std.isra.0>
 8006dfa:	2202      	movs	r2, #2
 8006dfc:	2112      	movs	r1, #18
 8006dfe:	68e0      	ldr	r0, [r4, #12]
 8006e00:	f7ff ff9a 	bl	8006d38 <std.isra.0>
 8006e04:	2301      	movs	r3, #1
 8006e06:	61a3      	str	r3, [r4, #24]
 8006e08:	bd10      	pop	{r4, pc}
 8006e0a:	bf00      	nop
 8006e0c:	08008acc 	.word	0x08008acc
 8006e10:	08006d2d 	.word	0x08006d2d

08006e14 <__sfp>:
 8006e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e16:	4b1c      	ldr	r3, [pc, #112]	; (8006e88 <__sfp+0x74>)
 8006e18:	4607      	mov	r7, r0
 8006e1a:	681e      	ldr	r6, [r3, #0]
 8006e1c:	69b3      	ldr	r3, [r6, #24]
 8006e1e:	b913      	cbnz	r3, 8006e26 <__sfp+0x12>
 8006e20:	4630      	mov	r0, r6
 8006e22:	f7ff ffc3 	bl	8006dac <__sinit>
 8006e26:	36d8      	adds	r6, #216	; 0xd8
 8006e28:	68b4      	ldr	r4, [r6, #8]
 8006e2a:	6873      	ldr	r3, [r6, #4]
 8006e2c:	3b01      	subs	r3, #1
 8006e2e:	d404      	bmi.n	8006e3a <__sfp+0x26>
 8006e30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006e34:	b17d      	cbz	r5, 8006e56 <__sfp+0x42>
 8006e36:	3468      	adds	r4, #104	; 0x68
 8006e38:	e7f8      	b.n	8006e2c <__sfp+0x18>
 8006e3a:	6833      	ldr	r3, [r6, #0]
 8006e3c:	b10b      	cbz	r3, 8006e42 <__sfp+0x2e>
 8006e3e:	6836      	ldr	r6, [r6, #0]
 8006e40:	e7f2      	b.n	8006e28 <__sfp+0x14>
 8006e42:	2104      	movs	r1, #4
 8006e44:	4638      	mov	r0, r7
 8006e46:	f7ff ff9b 	bl	8006d80 <__sfmoreglue>
 8006e4a:	6030      	str	r0, [r6, #0]
 8006e4c:	2800      	cmp	r0, #0
 8006e4e:	d1f6      	bne.n	8006e3e <__sfp+0x2a>
 8006e50:	230c      	movs	r3, #12
 8006e52:	603b      	str	r3, [r7, #0]
 8006e54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006e5a:	81e3      	strh	r3, [r4, #14]
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	81a3      	strh	r3, [r4, #12]
 8006e60:	6665      	str	r5, [r4, #100]	; 0x64
 8006e62:	6025      	str	r5, [r4, #0]
 8006e64:	60a5      	str	r5, [r4, #8]
 8006e66:	6065      	str	r5, [r4, #4]
 8006e68:	6125      	str	r5, [r4, #16]
 8006e6a:	6165      	str	r5, [r4, #20]
 8006e6c:	61a5      	str	r5, [r4, #24]
 8006e6e:	2208      	movs	r2, #8
 8006e70:	4629      	mov	r1, r5
 8006e72:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006e76:	f7fc ffd7 	bl	8003e28 <memset>
 8006e7a:	6365      	str	r5, [r4, #52]	; 0x34
 8006e7c:	63a5      	str	r5, [r4, #56]	; 0x38
 8006e7e:	64a5      	str	r5, [r4, #72]	; 0x48
 8006e80:	64e5      	str	r5, [r4, #76]	; 0x4c
 8006e82:	4620      	mov	r0, r4
 8006e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e86:	bf00      	nop
 8006e88:	08008acc 	.word	0x08008acc

08006e8c <__sfp_lock_acquire>:
 8006e8c:	4770      	bx	lr

08006e8e <__sfp_lock_release>:
 8006e8e:	4770      	bx	lr

08006e90 <_malloc_trim_r>:
 8006e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e94:	4689      	mov	r9, r1
 8006e96:	4f25      	ldr	r7, [pc, #148]	; (8006f2c <_malloc_trim_r+0x9c>)
 8006e98:	4606      	mov	r6, r0
 8006e9a:	f000 fbde 	bl	800765a <__malloc_lock>
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8006f38 <_malloc_trim_r+0xa8>
 8006ea4:	685d      	ldr	r5, [r3, #4]
 8006ea6:	f1a8 0411 	sub.w	r4, r8, #17
 8006eaa:	f025 0503 	bic.w	r5, r5, #3
 8006eae:	442c      	add	r4, r5
 8006eb0:	ebc9 0404 	rsb	r4, r9, r4
 8006eb4:	fbb4 f4f8 	udiv	r4, r4, r8
 8006eb8:	3c01      	subs	r4, #1
 8006eba:	fb08 f404 	mul.w	r4, r8, r4
 8006ebe:	4544      	cmp	r4, r8
 8006ec0:	da05      	bge.n	8006ece <_malloc_trim_r+0x3e>
 8006ec2:	4630      	mov	r0, r6
 8006ec4:	f000 fbca 	bl	800765c <__malloc_unlock>
 8006ec8:	2000      	movs	r0, #0
 8006eca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ece:	2100      	movs	r1, #0
 8006ed0:	4630      	mov	r0, r6
 8006ed2:	f000 fecf 	bl	8007c74 <_sbrk_r>
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	442b      	add	r3, r5
 8006eda:	4298      	cmp	r0, r3
 8006edc:	d1f1      	bne.n	8006ec2 <_malloc_trim_r+0x32>
 8006ede:	4261      	negs	r1, r4
 8006ee0:	4630      	mov	r0, r6
 8006ee2:	f000 fec7 	bl	8007c74 <_sbrk_r>
 8006ee6:	3001      	adds	r0, #1
 8006ee8:	d110      	bne.n	8006f0c <_malloc_trim_r+0x7c>
 8006eea:	2100      	movs	r1, #0
 8006eec:	4630      	mov	r0, r6
 8006eee:	f000 fec1 	bl	8007c74 <_sbrk_r>
 8006ef2:	68ba      	ldr	r2, [r7, #8]
 8006ef4:	1a83      	subs	r3, r0, r2
 8006ef6:	2b0f      	cmp	r3, #15
 8006ef8:	dde3      	ble.n	8006ec2 <_malloc_trim_r+0x32>
 8006efa:	490d      	ldr	r1, [pc, #52]	; (8006f30 <_malloc_trim_r+0xa0>)
 8006efc:	f043 0301 	orr.w	r3, r3, #1
 8006f00:	6809      	ldr	r1, [r1, #0]
 8006f02:	6053      	str	r3, [r2, #4]
 8006f04:	1a40      	subs	r0, r0, r1
 8006f06:	490b      	ldr	r1, [pc, #44]	; (8006f34 <_malloc_trim_r+0xa4>)
 8006f08:	6008      	str	r0, [r1, #0]
 8006f0a:	e7da      	b.n	8006ec2 <_malloc_trim_r+0x32>
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	4a09      	ldr	r2, [pc, #36]	; (8006f34 <_malloc_trim_r+0xa4>)
 8006f10:	1b2d      	subs	r5, r5, r4
 8006f12:	f045 0501 	orr.w	r5, r5, #1
 8006f16:	605d      	str	r5, [r3, #4]
 8006f18:	6813      	ldr	r3, [r2, #0]
 8006f1a:	4630      	mov	r0, r6
 8006f1c:	1b1c      	subs	r4, r3, r4
 8006f1e:	6014      	str	r4, [r2, #0]
 8006f20:	f000 fb9c 	bl	800765c <__malloc_unlock>
 8006f24:	2001      	movs	r0, #1
 8006f26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f2a:	bf00      	nop
 8006f2c:	200002b4 	.word	0x200002b4
 8006f30:	200006c0 	.word	0x200006c0
 8006f34:	20000780 	.word	0x20000780
 8006f38:	00000080 	.word	0x00000080

08006f3c <_free_r>:
 8006f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f40:	4604      	mov	r4, r0
 8006f42:	4688      	mov	r8, r1
 8006f44:	2900      	cmp	r1, #0
 8006f46:	f000 80ad 	beq.w	80070a4 <_free_r+0x168>
 8006f4a:	f000 fb86 	bl	800765a <__malloc_lock>
 8006f4e:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8006f52:	4d55      	ldr	r5, [pc, #340]	; (80070a8 <_free_r+0x16c>)
 8006f54:	f022 0001 	bic.w	r0, r2, #1
 8006f58:	f1a8 0308 	sub.w	r3, r8, #8
 8006f5c:	181f      	adds	r7, r3, r0
 8006f5e:	68a9      	ldr	r1, [r5, #8]
 8006f60:	687e      	ldr	r6, [r7, #4]
 8006f62:	428f      	cmp	r7, r1
 8006f64:	f026 0603 	bic.w	r6, r6, #3
 8006f68:	f002 0201 	and.w	r2, r2, #1
 8006f6c:	d11b      	bne.n	8006fa6 <_free_r+0x6a>
 8006f6e:	4430      	add	r0, r6
 8006f70:	b93a      	cbnz	r2, 8006f82 <_free_r+0x46>
 8006f72:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8006f76:	1a9b      	subs	r3, r3, r2
 8006f78:	6899      	ldr	r1, [r3, #8]
 8006f7a:	4410      	add	r0, r2
 8006f7c:	68da      	ldr	r2, [r3, #12]
 8006f7e:	60ca      	str	r2, [r1, #12]
 8006f80:	6091      	str	r1, [r2, #8]
 8006f82:	f040 0201 	orr.w	r2, r0, #1
 8006f86:	605a      	str	r2, [r3, #4]
 8006f88:	60ab      	str	r3, [r5, #8]
 8006f8a:	4b48      	ldr	r3, [pc, #288]	; (80070ac <_free_r+0x170>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4298      	cmp	r0, r3
 8006f90:	d304      	bcc.n	8006f9c <_free_r+0x60>
 8006f92:	4b47      	ldr	r3, [pc, #284]	; (80070b0 <_free_r+0x174>)
 8006f94:	4620      	mov	r0, r4
 8006f96:	6819      	ldr	r1, [r3, #0]
 8006f98:	f7ff ff7a 	bl	8006e90 <_malloc_trim_r>
 8006f9c:	4620      	mov	r0, r4
 8006f9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fa2:	f000 bb5b 	b.w	800765c <__malloc_unlock>
 8006fa6:	607e      	str	r6, [r7, #4]
 8006fa8:	b97a      	cbnz	r2, 8006fca <_free_r+0x8e>
 8006faa:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8006fae:	f105 0e08 	add.w	lr, r5, #8
 8006fb2:	1a5b      	subs	r3, r3, r1
 8006fb4:	4408      	add	r0, r1
 8006fb6:	6899      	ldr	r1, [r3, #8]
 8006fb8:	4571      	cmp	r1, lr
 8006fba:	d008      	beq.n	8006fce <_free_r+0x92>
 8006fbc:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8006fc0:	f8c1 e00c 	str.w	lr, [r1, #12]
 8006fc4:	f8ce 1008 	str.w	r1, [lr, #8]
 8006fc8:	e002      	b.n	8006fd0 <_free_r+0x94>
 8006fca:	2200      	movs	r2, #0
 8006fcc:	e000      	b.n	8006fd0 <_free_r+0x94>
 8006fce:	2201      	movs	r2, #1
 8006fd0:	19b9      	adds	r1, r7, r6
 8006fd2:	6849      	ldr	r1, [r1, #4]
 8006fd4:	07c9      	lsls	r1, r1, #31
 8006fd6:	d40e      	bmi.n	8006ff6 <_free_r+0xba>
 8006fd8:	4430      	add	r0, r6
 8006fda:	68b9      	ldr	r1, [r7, #8]
 8006fdc:	b942      	cbnz	r2, 8006ff0 <_free_r+0xb4>
 8006fde:	4e35      	ldr	r6, [pc, #212]	; (80070b4 <_free_r+0x178>)
 8006fe0:	42b1      	cmp	r1, r6
 8006fe2:	d105      	bne.n	8006ff0 <_free_r+0xb4>
 8006fe4:	616b      	str	r3, [r5, #20]
 8006fe6:	612b      	str	r3, [r5, #16]
 8006fe8:	2201      	movs	r2, #1
 8006fea:	60d9      	str	r1, [r3, #12]
 8006fec:	6099      	str	r1, [r3, #8]
 8006fee:	e002      	b.n	8006ff6 <_free_r+0xba>
 8006ff0:	68fe      	ldr	r6, [r7, #12]
 8006ff2:	60ce      	str	r6, [r1, #12]
 8006ff4:	60b1      	str	r1, [r6, #8]
 8006ff6:	f040 0101 	orr.w	r1, r0, #1
 8006ffa:	6059      	str	r1, [r3, #4]
 8006ffc:	5018      	str	r0, [r3, r0]
 8006ffe:	2a00      	cmp	r2, #0
 8007000:	d1cc      	bne.n	8006f9c <_free_r+0x60>
 8007002:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8007006:	d212      	bcs.n	800702e <_free_r+0xf2>
 8007008:	08c0      	lsrs	r0, r0, #3
 800700a:	1081      	asrs	r1, r0, #2
 800700c:	2201      	movs	r2, #1
 800700e:	fa02 f101 	lsl.w	r1, r2, r1
 8007012:	686a      	ldr	r2, [r5, #4]
 8007014:	3001      	adds	r0, #1
 8007016:	430a      	orrs	r2, r1
 8007018:	606a      	str	r2, [r5, #4]
 800701a:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800701e:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8007022:	3a08      	subs	r2, #8
 8007024:	60da      	str	r2, [r3, #12]
 8007026:	6099      	str	r1, [r3, #8]
 8007028:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 800702c:	e038      	b.n	80070a0 <_free_r+0x164>
 800702e:	0a42      	lsrs	r2, r0, #9
 8007030:	2a04      	cmp	r2, #4
 8007032:	d802      	bhi.n	800703a <_free_r+0xfe>
 8007034:	0982      	lsrs	r2, r0, #6
 8007036:	3238      	adds	r2, #56	; 0x38
 8007038:	e015      	b.n	8007066 <_free_r+0x12a>
 800703a:	2a14      	cmp	r2, #20
 800703c:	d801      	bhi.n	8007042 <_free_r+0x106>
 800703e:	325b      	adds	r2, #91	; 0x5b
 8007040:	e011      	b.n	8007066 <_free_r+0x12a>
 8007042:	2a54      	cmp	r2, #84	; 0x54
 8007044:	d802      	bhi.n	800704c <_free_r+0x110>
 8007046:	0b02      	lsrs	r2, r0, #12
 8007048:	326e      	adds	r2, #110	; 0x6e
 800704a:	e00c      	b.n	8007066 <_free_r+0x12a>
 800704c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8007050:	d802      	bhi.n	8007058 <_free_r+0x11c>
 8007052:	0bc2      	lsrs	r2, r0, #15
 8007054:	3277      	adds	r2, #119	; 0x77
 8007056:	e006      	b.n	8007066 <_free_r+0x12a>
 8007058:	f240 5154 	movw	r1, #1364	; 0x554
 800705c:	428a      	cmp	r2, r1
 800705e:	bf9a      	itte	ls
 8007060:	0c82      	lsrls	r2, r0, #18
 8007062:	327c      	addls	r2, #124	; 0x7c
 8007064:	227e      	movhi	r2, #126	; 0x7e
 8007066:	1c51      	adds	r1, r2, #1
 8007068:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800706c:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8007070:	428e      	cmp	r6, r1
 8007072:	4f0d      	ldr	r7, [pc, #52]	; (80070a8 <_free_r+0x16c>)
 8007074:	d10b      	bne.n	800708e <_free_r+0x152>
 8007076:	2101      	movs	r1, #1
 8007078:	1092      	asrs	r2, r2, #2
 800707a:	fa01 f202 	lsl.w	r2, r1, r2
 800707e:	6879      	ldr	r1, [r7, #4]
 8007080:	4311      	orrs	r1, r2
 8007082:	6079      	str	r1, [r7, #4]
 8007084:	4631      	mov	r1, r6
 8007086:	e008      	b.n	800709a <_free_r+0x15e>
 8007088:	6889      	ldr	r1, [r1, #8]
 800708a:	428e      	cmp	r6, r1
 800708c:	d004      	beq.n	8007098 <_free_r+0x15c>
 800708e:	684a      	ldr	r2, [r1, #4]
 8007090:	f022 0203 	bic.w	r2, r2, #3
 8007094:	4290      	cmp	r0, r2
 8007096:	d3f7      	bcc.n	8007088 <_free_r+0x14c>
 8007098:	68ce      	ldr	r6, [r1, #12]
 800709a:	60de      	str	r6, [r3, #12]
 800709c:	6099      	str	r1, [r3, #8]
 800709e:	60b3      	str	r3, [r6, #8]
 80070a0:	60cb      	str	r3, [r1, #12]
 80070a2:	e77b      	b.n	8006f9c <_free_r+0x60>
 80070a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070a8:	200002b4 	.word	0x200002b4
 80070ac:	200006bc 	.word	0x200006bc
 80070b0:	2000077c 	.word	0x2000077c
 80070b4:	200002bc 	.word	0x200002bc

080070b8 <_fwalk_reent>:
 80070b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070bc:	4680      	mov	r8, r0
 80070be:	4689      	mov	r9, r1
 80070c0:	f100 04d8 	add.w	r4, r0, #216	; 0xd8
 80070c4:	2600      	movs	r6, #0
 80070c6:	b194      	cbz	r4, 80070ee <_fwalk_reent+0x36>
 80070c8:	68a5      	ldr	r5, [r4, #8]
 80070ca:	6867      	ldr	r7, [r4, #4]
 80070cc:	3f01      	subs	r7, #1
 80070ce:	d40c      	bmi.n	80070ea <_fwalk_reent+0x32>
 80070d0:	89ab      	ldrh	r3, [r5, #12]
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d907      	bls.n	80070e6 <_fwalk_reent+0x2e>
 80070d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80070da:	3301      	adds	r3, #1
 80070dc:	d003      	beq.n	80070e6 <_fwalk_reent+0x2e>
 80070de:	4629      	mov	r1, r5
 80070e0:	4640      	mov	r0, r8
 80070e2:	47c8      	blx	r9
 80070e4:	4306      	orrs	r6, r0
 80070e6:	3568      	adds	r5, #104	; 0x68
 80070e8:	e7f0      	b.n	80070cc <_fwalk_reent+0x14>
 80070ea:	6824      	ldr	r4, [r4, #0]
 80070ec:	e7eb      	b.n	80070c6 <_fwalk_reent+0xe>
 80070ee:	4630      	mov	r0, r6
 80070f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080070f4 <__locale_charset>:
 80070f4:	4800      	ldr	r0, [pc, #0]	; (80070f8 <__locale_charset+0x4>)
 80070f6:	4770      	bx	lr
 80070f8:	20000290 	.word	0x20000290

080070fc <__locale_mb_cur_max>:
 80070fc:	4b01      	ldr	r3, [pc, #4]	; (8007104 <__locale_mb_cur_max+0x8>)
 80070fe:	6818      	ldr	r0, [r3, #0]
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop
 8007104:	200002b0 	.word	0x200002b0

08007108 <_localeconv_r>:
 8007108:	4800      	ldr	r0, [pc, #0]	; (800710c <_localeconv_r+0x4>)
 800710a:	4770      	bx	lr
 800710c:	20000258 	.word	0x20000258

08007110 <__swhatbuf_r>:
 8007110:	b570      	push	{r4, r5, r6, lr}
 8007112:	460e      	mov	r6, r1
 8007114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007118:	b090      	sub	sp, #64	; 0x40
 800711a:	2900      	cmp	r1, #0
 800711c:	4614      	mov	r4, r2
 800711e:	461d      	mov	r5, r3
 8007120:	da0a      	bge.n	8007138 <__swhatbuf_r+0x28>
 8007122:	89b3      	ldrh	r3, [r6, #12]
 8007124:	2200      	movs	r2, #0
 8007126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800712a:	b298      	uxth	r0, r3
 800712c:	602a      	str	r2, [r5, #0]
 800712e:	b1b0      	cbz	r0, 800715e <__swhatbuf_r+0x4e>
 8007130:	2340      	movs	r3, #64	; 0x40
 8007132:	6023      	str	r3, [r4, #0]
 8007134:	4610      	mov	r0, r2
 8007136:	e015      	b.n	8007164 <__swhatbuf_r+0x54>
 8007138:	aa01      	add	r2, sp, #4
 800713a:	f000 ffed 	bl	8008118 <_fstat_r>
 800713e:	2800      	cmp	r0, #0
 8007140:	dbef      	blt.n	8007122 <__swhatbuf_r+0x12>
 8007142:	9a02      	ldr	r2, [sp, #8]
 8007144:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007148:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800714c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007150:	425a      	negs	r2, r3
 8007152:	415a      	adcs	r2, r3
 8007154:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007158:	602a      	str	r2, [r5, #0]
 800715a:	6023      	str	r3, [r4, #0]
 800715c:	e002      	b.n	8007164 <__swhatbuf_r+0x54>
 800715e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007162:	6023      	str	r3, [r4, #0]
 8007164:	b010      	add	sp, #64	; 0x40
 8007166:	bd70      	pop	{r4, r5, r6, pc}

08007168 <__smakebuf_r>:
 8007168:	898b      	ldrh	r3, [r1, #12]
 800716a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800716c:	079e      	lsls	r6, r3, #30
 800716e:	4605      	mov	r5, r0
 8007170:	460c      	mov	r4, r1
 8007172:	d410      	bmi.n	8007196 <__smakebuf_r+0x2e>
 8007174:	ab01      	add	r3, sp, #4
 8007176:	466a      	mov	r2, sp
 8007178:	f7ff ffca 	bl	8007110 <__swhatbuf_r>
 800717c:	9900      	ldr	r1, [sp, #0]
 800717e:	4606      	mov	r6, r0
 8007180:	4628      	mov	r0, r5
 8007182:	f000 f835 	bl	80071f0 <_malloc_r>
 8007186:	b968      	cbnz	r0, 80071a4 <__smakebuf_r+0x3c>
 8007188:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800718c:	059a      	lsls	r2, r3, #22
 800718e:	d422      	bmi.n	80071d6 <__smakebuf_r+0x6e>
 8007190:	f043 0302 	orr.w	r3, r3, #2
 8007194:	81a3      	strh	r3, [r4, #12]
 8007196:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800719a:	6023      	str	r3, [r4, #0]
 800719c:	6123      	str	r3, [r4, #16]
 800719e:	2301      	movs	r3, #1
 80071a0:	6163      	str	r3, [r4, #20]
 80071a2:	e018      	b.n	80071d6 <__smakebuf_r+0x6e>
 80071a4:	4b0d      	ldr	r3, [pc, #52]	; (80071dc <__smakebuf_r+0x74>)
 80071a6:	62ab      	str	r3, [r5, #40]	; 0x28
 80071a8:	89a3      	ldrh	r3, [r4, #12]
 80071aa:	6020      	str	r0, [r4, #0]
 80071ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071b0:	81a3      	strh	r3, [r4, #12]
 80071b2:	9b00      	ldr	r3, [sp, #0]
 80071b4:	6120      	str	r0, [r4, #16]
 80071b6:	6163      	str	r3, [r4, #20]
 80071b8:	9b01      	ldr	r3, [sp, #4]
 80071ba:	b14b      	cbz	r3, 80071d0 <__smakebuf_r+0x68>
 80071bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071c0:	4628      	mov	r0, r5
 80071c2:	f001 f905 	bl	80083d0 <_isatty_r>
 80071c6:	b118      	cbz	r0, 80071d0 <__smakebuf_r+0x68>
 80071c8:	89a3      	ldrh	r3, [r4, #12]
 80071ca:	f043 0301 	orr.w	r3, r3, #1
 80071ce:	81a3      	strh	r3, [r4, #12]
 80071d0:	89a0      	ldrh	r0, [r4, #12]
 80071d2:	4330      	orrs	r0, r6
 80071d4:	81a0      	strh	r0, [r4, #12]
 80071d6:	b002      	add	sp, #8
 80071d8:	bd70      	pop	{r4, r5, r6, pc}
 80071da:	bf00      	nop
 80071dc:	08006d2d 	.word	0x08006d2d

080071e0 <malloc>:
 80071e0:	4b02      	ldr	r3, [pc, #8]	; (80071ec <malloc+0xc>)
 80071e2:	4601      	mov	r1, r0
 80071e4:	6818      	ldr	r0, [r3, #0]
 80071e6:	f000 b803 	b.w	80071f0 <_malloc_r>
 80071ea:	bf00      	nop
 80071ec:	20000254 	.word	0x20000254

080071f0 <_malloc_r>:
 80071f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071f4:	f101 040b 	add.w	r4, r1, #11
 80071f8:	2c16      	cmp	r4, #22
 80071fa:	b085      	sub	sp, #20
 80071fc:	4681      	mov	r9, r0
 80071fe:	d903      	bls.n	8007208 <_malloc_r+0x18>
 8007200:	f034 0407 	bics.w	r4, r4, #7
 8007204:	d501      	bpl.n	800720a <_malloc_r+0x1a>
 8007206:	e002      	b.n	800720e <_malloc_r+0x1e>
 8007208:	2410      	movs	r4, #16
 800720a:	428c      	cmp	r4, r1
 800720c:	d203      	bcs.n	8007216 <_malloc_r+0x26>
 800720e:	230c      	movs	r3, #12
 8007210:	f8c9 3000 	str.w	r3, [r9]
 8007214:	e1e7      	b.n	80075e6 <_malloc_r+0x3f6>
 8007216:	4648      	mov	r0, r9
 8007218:	f000 fa1f 	bl	800765a <__malloc_lock>
 800721c:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8007220:	4d9d      	ldr	r5, [pc, #628]	; (8007498 <_malloc_r+0x2a8>)
 8007222:	d217      	bcs.n	8007254 <_malloc_r+0x64>
 8007224:	f104 0208 	add.w	r2, r4, #8
 8007228:	442a      	add	r2, r5
 800722a:	6856      	ldr	r6, [r2, #4]
 800722c:	f1a2 0108 	sub.w	r1, r2, #8
 8007230:	428e      	cmp	r6, r1
 8007232:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8007236:	d102      	bne.n	800723e <_malloc_r+0x4e>
 8007238:	68d6      	ldr	r6, [r2, #12]
 800723a:	42b2      	cmp	r2, r6
 800723c:	d008      	beq.n	8007250 <_malloc_r+0x60>
 800723e:	6873      	ldr	r3, [r6, #4]
 8007240:	68f2      	ldr	r2, [r6, #12]
 8007242:	68b1      	ldr	r1, [r6, #8]
 8007244:	f023 0303 	bic.w	r3, r3, #3
 8007248:	60ca      	str	r2, [r1, #12]
 800724a:	4433      	add	r3, r6
 800724c:	6091      	str	r1, [r2, #8]
 800724e:	e02f      	b.n	80072b0 <_malloc_r+0xc0>
 8007250:	3302      	adds	r3, #2
 8007252:	e03d      	b.n	80072d0 <_malloc_r+0xe0>
 8007254:	0a63      	lsrs	r3, r4, #9
 8007256:	d01a      	beq.n	800728e <_malloc_r+0x9e>
 8007258:	2b04      	cmp	r3, #4
 800725a:	d802      	bhi.n	8007262 <_malloc_r+0x72>
 800725c:	09a3      	lsrs	r3, r4, #6
 800725e:	3338      	adds	r3, #56	; 0x38
 8007260:	e018      	b.n	8007294 <_malloc_r+0xa4>
 8007262:	2b14      	cmp	r3, #20
 8007264:	d801      	bhi.n	800726a <_malloc_r+0x7a>
 8007266:	335b      	adds	r3, #91	; 0x5b
 8007268:	e014      	b.n	8007294 <_malloc_r+0xa4>
 800726a:	2b54      	cmp	r3, #84	; 0x54
 800726c:	d802      	bhi.n	8007274 <_malloc_r+0x84>
 800726e:	0b23      	lsrs	r3, r4, #12
 8007270:	336e      	adds	r3, #110	; 0x6e
 8007272:	e00f      	b.n	8007294 <_malloc_r+0xa4>
 8007274:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8007278:	d802      	bhi.n	8007280 <_malloc_r+0x90>
 800727a:	0be3      	lsrs	r3, r4, #15
 800727c:	3377      	adds	r3, #119	; 0x77
 800727e:	e009      	b.n	8007294 <_malloc_r+0xa4>
 8007280:	f240 5254 	movw	r2, #1364	; 0x554
 8007284:	4293      	cmp	r3, r2
 8007286:	d804      	bhi.n	8007292 <_malloc_r+0xa2>
 8007288:	0ca3      	lsrs	r3, r4, #18
 800728a:	337c      	adds	r3, #124	; 0x7c
 800728c:	e002      	b.n	8007294 <_malloc_r+0xa4>
 800728e:	233f      	movs	r3, #63	; 0x3f
 8007290:	e000      	b.n	8007294 <_malloc_r+0xa4>
 8007292:	237e      	movs	r3, #126	; 0x7e
 8007294:	1c5a      	adds	r2, r3, #1
 8007296:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800729a:	f1a2 0008 	sub.w	r0, r2, #8
 800729e:	6856      	ldr	r6, [r2, #4]
 80072a0:	e00c      	b.n	80072bc <_malloc_r+0xcc>
 80072a2:	2900      	cmp	r1, #0
 80072a4:	68f1      	ldr	r1, [r6, #12]
 80072a6:	db08      	blt.n	80072ba <_malloc_r+0xca>
 80072a8:	68b3      	ldr	r3, [r6, #8]
 80072aa:	60d9      	str	r1, [r3, #12]
 80072ac:	608b      	str	r3, [r1, #8]
 80072ae:	18b3      	adds	r3, r6, r2
 80072b0:	685a      	ldr	r2, [r3, #4]
 80072b2:	f042 0201 	orr.w	r2, r2, #1
 80072b6:	605a      	str	r2, [r3, #4]
 80072b8:	e1a0      	b.n	80075fc <_malloc_r+0x40c>
 80072ba:	460e      	mov	r6, r1
 80072bc:	4286      	cmp	r6, r0
 80072be:	d006      	beq.n	80072ce <_malloc_r+0xde>
 80072c0:	6872      	ldr	r2, [r6, #4]
 80072c2:	f022 0203 	bic.w	r2, r2, #3
 80072c6:	1b11      	subs	r1, r2, r4
 80072c8:	290f      	cmp	r1, #15
 80072ca:	ddea      	ble.n	80072a2 <_malloc_r+0xb2>
 80072cc:	3b01      	subs	r3, #1
 80072ce:	3301      	adds	r3, #1
 80072d0:	4a71      	ldr	r2, [pc, #452]	; (8007498 <_malloc_r+0x2a8>)
 80072d2:	692e      	ldr	r6, [r5, #16]
 80072d4:	f102 0708 	add.w	r7, r2, #8
 80072d8:	42be      	cmp	r6, r7
 80072da:	4639      	mov	r1, r7
 80072dc:	d079      	beq.n	80073d2 <_malloc_r+0x1e2>
 80072de:	6870      	ldr	r0, [r6, #4]
 80072e0:	f020 0003 	bic.w	r0, r0, #3
 80072e4:	ebc4 0e00 	rsb	lr, r4, r0
 80072e8:	f1be 0f0f 	cmp.w	lr, #15
 80072ec:	dd0d      	ble.n	800730a <_malloc_r+0x11a>
 80072ee:	1933      	adds	r3, r6, r4
 80072f0:	f044 0401 	orr.w	r4, r4, #1
 80072f4:	6074      	str	r4, [r6, #4]
 80072f6:	6153      	str	r3, [r2, #20]
 80072f8:	6113      	str	r3, [r2, #16]
 80072fa:	f04e 0201 	orr.w	r2, lr, #1
 80072fe:	60df      	str	r7, [r3, #12]
 8007300:	609f      	str	r7, [r3, #8]
 8007302:	605a      	str	r2, [r3, #4]
 8007304:	f843 e00e 	str.w	lr, [r3, lr]
 8007308:	e178      	b.n	80075fc <_malloc_r+0x40c>
 800730a:	f1be 0f00 	cmp.w	lr, #0
 800730e:	6157      	str	r7, [r2, #20]
 8007310:	6117      	str	r7, [r2, #16]
 8007312:	db05      	blt.n	8007320 <_malloc_r+0x130>
 8007314:	4430      	add	r0, r6
 8007316:	6843      	ldr	r3, [r0, #4]
 8007318:	f043 0301 	orr.w	r3, r3, #1
 800731c:	6043      	str	r3, [r0, #4]
 800731e:	e16d      	b.n	80075fc <_malloc_r+0x40c>
 8007320:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8007324:	d215      	bcs.n	8007352 <_malloc_r+0x162>
 8007326:	08c0      	lsrs	r0, r0, #3
 8007328:	ea4f 0ea0 	mov.w	lr, r0, asr #2
 800732c:	2701      	movs	r7, #1
 800732e:	fa07 fe0e 	lsl.w	lr, r7, lr
 8007332:	6857      	ldr	r7, [r2, #4]
 8007334:	3001      	adds	r0, #1
 8007336:	ea4e 0707 	orr.w	r7, lr, r7
 800733a:	6057      	str	r7, [r2, #4]
 800733c:	f852 e030 	ldr.w	lr, [r2, r0, lsl #3]
 8007340:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
 8007344:	3f08      	subs	r7, #8
 8007346:	60f7      	str	r7, [r6, #12]
 8007348:	f8c6 e008 	str.w	lr, [r6, #8]
 800734c:	f842 6030 	str.w	r6, [r2, r0, lsl #3]
 8007350:	e03d      	b.n	80073ce <_malloc_r+0x1de>
 8007352:	0a42      	lsrs	r2, r0, #9
 8007354:	2a04      	cmp	r2, #4
 8007356:	d802      	bhi.n	800735e <_malloc_r+0x16e>
 8007358:	0982      	lsrs	r2, r0, #6
 800735a:	3238      	adds	r2, #56	; 0x38
 800735c:	e015      	b.n	800738a <_malloc_r+0x19a>
 800735e:	2a14      	cmp	r2, #20
 8007360:	d801      	bhi.n	8007366 <_malloc_r+0x176>
 8007362:	325b      	adds	r2, #91	; 0x5b
 8007364:	e011      	b.n	800738a <_malloc_r+0x19a>
 8007366:	2a54      	cmp	r2, #84	; 0x54
 8007368:	d802      	bhi.n	8007370 <_malloc_r+0x180>
 800736a:	0b02      	lsrs	r2, r0, #12
 800736c:	326e      	adds	r2, #110	; 0x6e
 800736e:	e00c      	b.n	800738a <_malloc_r+0x19a>
 8007370:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8007374:	d802      	bhi.n	800737c <_malloc_r+0x18c>
 8007376:	0bc2      	lsrs	r2, r0, #15
 8007378:	3277      	adds	r2, #119	; 0x77
 800737a:	e006      	b.n	800738a <_malloc_r+0x19a>
 800737c:	f240 5754 	movw	r7, #1364	; 0x554
 8007380:	42ba      	cmp	r2, r7
 8007382:	bf9a      	itte	ls
 8007384:	0c82      	lsrls	r2, r0, #18
 8007386:	327c      	addls	r2, #124	; 0x7c
 8007388:	227e      	movhi	r2, #126	; 0x7e
 800738a:	1c57      	adds	r7, r2, #1
 800738c:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8007390:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8007394:	45be      	cmp	lr, r7
 8007396:	f8df c100 	ldr.w	ip, [pc, #256]	; 8007498 <_malloc_r+0x2a8>
 800739a:	d10d      	bne.n	80073b8 <_malloc_r+0x1c8>
 800739c:	2001      	movs	r0, #1
 800739e:	1092      	asrs	r2, r2, #2
 80073a0:	fa00 f202 	lsl.w	r2, r0, r2
 80073a4:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80073a8:	4310      	orrs	r0, r2
 80073aa:	f8cc 0004 	str.w	r0, [ip, #4]
 80073ae:	4672      	mov	r2, lr
 80073b0:	e009      	b.n	80073c6 <_malloc_r+0x1d6>
 80073b2:	68bf      	ldr	r7, [r7, #8]
 80073b4:	45be      	cmp	lr, r7
 80073b6:	d004      	beq.n	80073c2 <_malloc_r+0x1d2>
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	f022 0203 	bic.w	r2, r2, #3
 80073be:	4290      	cmp	r0, r2
 80073c0:	d3f7      	bcc.n	80073b2 <_malloc_r+0x1c2>
 80073c2:	46be      	mov	lr, r7
 80073c4:	68fa      	ldr	r2, [r7, #12]
 80073c6:	60f2      	str	r2, [r6, #12]
 80073c8:	f8c6 e008 	str.w	lr, [r6, #8]
 80073cc:	6096      	str	r6, [r2, #8]
 80073ce:	f8ce 600c 	str.w	r6, [lr, #12]
 80073d2:	2001      	movs	r0, #1
 80073d4:	109a      	asrs	r2, r3, #2
 80073d6:	fa00 f202 	lsl.w	r2, r0, r2
 80073da:	6868      	ldr	r0, [r5, #4]
 80073dc:	4282      	cmp	r2, r0
 80073de:	d85d      	bhi.n	800749c <_malloc_r+0x2ac>
 80073e0:	4202      	tst	r2, r0
 80073e2:	d106      	bne.n	80073f2 <_malloc_r+0x202>
 80073e4:	f023 0303 	bic.w	r3, r3, #3
 80073e8:	0052      	lsls	r2, r2, #1
 80073ea:	4202      	tst	r2, r0
 80073ec:	f103 0304 	add.w	r3, r3, #4
 80073f0:	d0fa      	beq.n	80073e8 <_malloc_r+0x1f8>
 80073f2:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
 80073f6:	46c2      	mov	sl, r8
 80073f8:	469c      	mov	ip, r3
 80073fa:	f8da 600c 	ldr.w	r6, [sl, #12]
 80073fe:	4556      	cmp	r6, sl
 8007400:	d02c      	beq.n	800745c <_malloc_r+0x26c>
 8007402:	6870      	ldr	r0, [r6, #4]
 8007404:	68f7      	ldr	r7, [r6, #12]
 8007406:	f020 0003 	bic.w	r0, r0, #3
 800740a:	ebc4 0e00 	rsb	lr, r4, r0
 800740e:	f1be 0f0f 	cmp.w	lr, #15
 8007412:	dd11      	ble.n	8007438 <_malloc_r+0x248>
 8007414:	1933      	adds	r3, r6, r4
 8007416:	f044 0401 	orr.w	r4, r4, #1
 800741a:	6074      	str	r4, [r6, #4]
 800741c:	f856 2f08 	ldr.w	r2, [r6, #8]!
 8007420:	60d7      	str	r7, [r2, #12]
 8007422:	60ba      	str	r2, [r7, #8]
 8007424:	f04e 0201 	orr.w	r2, lr, #1
 8007428:	616b      	str	r3, [r5, #20]
 800742a:	612b      	str	r3, [r5, #16]
 800742c:	60d9      	str	r1, [r3, #12]
 800742e:	6099      	str	r1, [r3, #8]
 8007430:	605a      	str	r2, [r3, #4]
 8007432:	f843 e00e 	str.w	lr, [r3, lr]
 8007436:	e00b      	b.n	8007450 <_malloc_r+0x260>
 8007438:	f1be 0f00 	cmp.w	lr, #0
 800743c:	db0c      	blt.n	8007458 <_malloc_r+0x268>
 800743e:	1833      	adds	r3, r6, r0
 8007440:	685a      	ldr	r2, [r3, #4]
 8007442:	f042 0201 	orr.w	r2, r2, #1
 8007446:	605a      	str	r2, [r3, #4]
 8007448:	f856 3f08 	ldr.w	r3, [r6, #8]!
 800744c:	60df      	str	r7, [r3, #12]
 800744e:	60bb      	str	r3, [r7, #8]
 8007450:	4648      	mov	r0, r9
 8007452:	f000 f903 	bl	800765c <__malloc_unlock>
 8007456:	e0d5      	b.n	8007604 <_malloc_r+0x414>
 8007458:	463e      	mov	r6, r7
 800745a:	e7d0      	b.n	80073fe <_malloc_r+0x20e>
 800745c:	f10c 0c01 	add.w	ip, ip, #1
 8007460:	f01c 0f03 	tst.w	ip, #3
 8007464:	f10a 0a08 	add.w	sl, sl, #8
 8007468:	d1c7      	bne.n	80073fa <_malloc_r+0x20a>
 800746a:	0798      	lsls	r0, r3, #30
 800746c:	d104      	bne.n	8007478 <_malloc_r+0x288>
 800746e:	686b      	ldr	r3, [r5, #4]
 8007470:	ea23 0302 	bic.w	r3, r3, r2
 8007474:	606b      	str	r3, [r5, #4]
 8007476:	e004      	b.n	8007482 <_malloc_r+0x292>
 8007478:	f858 0908 	ldr.w	r0, [r8], #-8
 800747c:	3b01      	subs	r3, #1
 800747e:	4580      	cmp	r8, r0
 8007480:	d0f3      	beq.n	800746a <_malloc_r+0x27a>
 8007482:	6868      	ldr	r0, [r5, #4]
 8007484:	0052      	lsls	r2, r2, #1
 8007486:	4282      	cmp	r2, r0
 8007488:	d808      	bhi.n	800749c <_malloc_r+0x2ac>
 800748a:	b13a      	cbz	r2, 800749c <_malloc_r+0x2ac>
 800748c:	4663      	mov	r3, ip
 800748e:	4202      	tst	r2, r0
 8007490:	d1af      	bne.n	80073f2 <_malloc_r+0x202>
 8007492:	3304      	adds	r3, #4
 8007494:	0052      	lsls	r2, r2, #1
 8007496:	e7fa      	b.n	800748e <_malloc_r+0x29e>
 8007498:	200002b4 	.word	0x200002b4
 800749c:	f8d5 b008 	ldr.w	fp, [r5, #8]
 80074a0:	f8db 6004 	ldr.w	r6, [fp, #4]
 80074a4:	f026 0603 	bic.w	r6, r6, #3
 80074a8:	42b4      	cmp	r4, r6
 80074aa:	d803      	bhi.n	80074b4 <_malloc_r+0x2c4>
 80074ac:	1b33      	subs	r3, r6, r4
 80074ae:	2b0f      	cmp	r3, #15
 80074b0:	f300 809b 	bgt.w	80075ea <_malloc_r+0x3fa>
 80074b4:	4a55      	ldr	r2, [pc, #340]	; (800760c <_malloc_r+0x41c>)
 80074b6:	4956      	ldr	r1, [pc, #344]	; (8007610 <_malloc_r+0x420>)
 80074b8:	6812      	ldr	r2, [r2, #0]
 80074ba:	6808      	ldr	r0, [r1, #0]
 80074bc:	f102 0810 	add.w	r8, r2, #16
 80074c0:	4a54      	ldr	r2, [pc, #336]	; (8007614 <_malloc_r+0x424>)
 80074c2:	3001      	adds	r0, #1
 80074c4:	9101      	str	r1, [sp, #4]
 80074c6:	44a0      	add	r8, r4
 80074c8:	bf1f      	itttt	ne
 80074ca:	f102 31ff 	addne.w	r1, r2, #4294967295
 80074ce:	4488      	addne	r8, r1
 80074d0:	4251      	negne	r1, r2
 80074d2:	ea01 0808 	andne.w	r8, r1, r8
 80074d6:	eb0b 0306 	add.w	r3, fp, r6
 80074da:	4641      	mov	r1, r8
 80074dc:	4648      	mov	r0, r9
 80074de:	9203      	str	r2, [sp, #12]
 80074e0:	9302      	str	r3, [sp, #8]
 80074e2:	f000 fbc7 	bl	8007c74 <_sbrk_r>
 80074e6:	1c42      	adds	r2, r0, #1
 80074e8:	4607      	mov	r7, r0
 80074ea:	d06f      	beq.n	80075cc <_malloc_r+0x3dc>
 80074ec:	9b02      	ldr	r3, [sp, #8]
 80074ee:	9a03      	ldr	r2, [sp, #12]
 80074f0:	4283      	cmp	r3, r0
 80074f2:	d901      	bls.n	80074f8 <_malloc_r+0x308>
 80074f4:	45ab      	cmp	fp, r5
 80074f6:	d169      	bne.n	80075cc <_malloc_r+0x3dc>
 80074f8:	f8df a124 	ldr.w	sl, [pc, #292]	; 8007620 <_malloc_r+0x430>
 80074fc:	42bb      	cmp	r3, r7
 80074fe:	f8da 0000 	ldr.w	r0, [sl]
 8007502:	f8df c120 	ldr.w	ip, [pc, #288]	; 8007624 <_malloc_r+0x434>
 8007506:	4440      	add	r0, r8
 8007508:	f8ca 0000 	str.w	r0, [sl]
 800750c:	d108      	bne.n	8007520 <_malloc_r+0x330>
 800750e:	ea13 0f0c 	tst.w	r3, ip
 8007512:	d105      	bne.n	8007520 <_malloc_r+0x330>
 8007514:	68ab      	ldr	r3, [r5, #8]
 8007516:	4446      	add	r6, r8
 8007518:	f046 0601 	orr.w	r6, r6, #1
 800751c:	605e      	str	r6, [r3, #4]
 800751e:	e049      	b.n	80075b4 <_malloc_r+0x3c4>
 8007520:	9901      	ldr	r1, [sp, #4]
 8007522:	f8d1 e000 	ldr.w	lr, [r1]
 8007526:	f1be 3fff 	cmp.w	lr, #4294967295
 800752a:	bf15      	itete	ne
 800752c:	1afb      	subne	r3, r7, r3
 800752e:	4b38      	ldreq	r3, [pc, #224]	; (8007610 <_malloc_r+0x420>)
 8007530:	181b      	addne	r3, r3, r0
 8007532:	601f      	streq	r7, [r3, #0]
 8007534:	bf18      	it	ne
 8007536:	f8ca 3000 	strne.w	r3, [sl]
 800753a:	f017 0307 	ands.w	r3, r7, #7
 800753e:	bf1c      	itt	ne
 8007540:	f1c3 0308 	rsbne	r3, r3, #8
 8007544:	18ff      	addne	r7, r7, r3
 8007546:	44b8      	add	r8, r7
 8007548:	441a      	add	r2, r3
 800754a:	ea08 080c 	and.w	r8, r8, ip
 800754e:	ebc8 0802 	rsb	r8, r8, r2
 8007552:	4641      	mov	r1, r8
 8007554:	4648      	mov	r0, r9
 8007556:	f000 fb8d 	bl	8007c74 <_sbrk_r>
 800755a:	1c43      	adds	r3, r0, #1
 800755c:	bf04      	itt	eq
 800755e:	4638      	moveq	r0, r7
 8007560:	f04f 0800 	moveq.w	r8, #0
 8007564:	f8da 3000 	ldr.w	r3, [sl]
 8007568:	1bc2      	subs	r2, r0, r7
 800756a:	4442      	add	r2, r8
 800756c:	4443      	add	r3, r8
 800756e:	f042 0201 	orr.w	r2, r2, #1
 8007572:	45ab      	cmp	fp, r5
 8007574:	60af      	str	r7, [r5, #8]
 8007576:	f8ca 3000 	str.w	r3, [sl]
 800757a:	607a      	str	r2, [r7, #4]
 800757c:	d01a      	beq.n	80075b4 <_malloc_r+0x3c4>
 800757e:	2e0f      	cmp	r6, #15
 8007580:	d802      	bhi.n	8007588 <_malloc_r+0x398>
 8007582:	2301      	movs	r3, #1
 8007584:	607b      	str	r3, [r7, #4]
 8007586:	e021      	b.n	80075cc <_malloc_r+0x3dc>
 8007588:	f8db 3004 	ldr.w	r3, [fp, #4]
 800758c:	3e0c      	subs	r6, #12
 800758e:	f026 0607 	bic.w	r6, r6, #7
 8007592:	f003 0301 	and.w	r3, r3, #1
 8007596:	4333      	orrs	r3, r6
 8007598:	f8cb 3004 	str.w	r3, [fp, #4]
 800759c:	2205      	movs	r2, #5
 800759e:	eb0b 0306 	add.w	r3, fp, r6
 80075a2:	2e0f      	cmp	r6, #15
 80075a4:	605a      	str	r2, [r3, #4]
 80075a6:	609a      	str	r2, [r3, #8]
 80075a8:	d904      	bls.n	80075b4 <_malloc_r+0x3c4>
 80075aa:	f10b 0108 	add.w	r1, fp, #8
 80075ae:	4648      	mov	r0, r9
 80075b0:	f7ff fcc4 	bl	8006f3c <_free_r>
 80075b4:	4a18      	ldr	r2, [pc, #96]	; (8007618 <_malloc_r+0x428>)
 80075b6:	f8da 3000 	ldr.w	r3, [sl]
 80075ba:	6811      	ldr	r1, [r2, #0]
 80075bc:	428b      	cmp	r3, r1
 80075be:	bf88      	it	hi
 80075c0:	6013      	strhi	r3, [r2, #0]
 80075c2:	4a16      	ldr	r2, [pc, #88]	; (800761c <_malloc_r+0x42c>)
 80075c4:	6811      	ldr	r1, [r2, #0]
 80075c6:	428b      	cmp	r3, r1
 80075c8:	bf88      	it	hi
 80075ca:	6013      	strhi	r3, [r2, #0]
 80075cc:	68ab      	ldr	r3, [r5, #8]
 80075ce:	685a      	ldr	r2, [r3, #4]
 80075d0:	f022 0203 	bic.w	r2, r2, #3
 80075d4:	4294      	cmp	r4, r2
 80075d6:	eba2 0304 	sub.w	r3, r2, r4
 80075da:	d801      	bhi.n	80075e0 <_malloc_r+0x3f0>
 80075dc:	2b0f      	cmp	r3, #15
 80075de:	dc04      	bgt.n	80075ea <_malloc_r+0x3fa>
 80075e0:	4648      	mov	r0, r9
 80075e2:	f000 f83b 	bl	800765c <__malloc_unlock>
 80075e6:	2600      	movs	r6, #0
 80075e8:	e00c      	b.n	8007604 <_malloc_r+0x414>
 80075ea:	68ae      	ldr	r6, [r5, #8]
 80075ec:	f044 0201 	orr.w	r2, r4, #1
 80075f0:	f043 0301 	orr.w	r3, r3, #1
 80075f4:	4434      	add	r4, r6
 80075f6:	6072      	str	r2, [r6, #4]
 80075f8:	60ac      	str	r4, [r5, #8]
 80075fa:	6063      	str	r3, [r4, #4]
 80075fc:	4648      	mov	r0, r9
 80075fe:	f000 f82d 	bl	800765c <__malloc_unlock>
 8007602:	3608      	adds	r6, #8
 8007604:	4630      	mov	r0, r6
 8007606:	b005      	add	sp, #20
 8007608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800760c:	2000077c 	.word	0x2000077c
 8007610:	200006c0 	.word	0x200006c0
 8007614:	00000080 	.word	0x00000080
 8007618:	20000778 	.word	0x20000778
 800761c:	20000774 	.word	0x20000774
 8007620:	20000780 	.word	0x20000780
 8007624:	0000007f 	.word	0x0000007f

08007628 <memchr>:
 8007628:	b510      	push	{r4, lr}
 800762a:	b2c9      	uxtb	r1, r1
 800762c:	4402      	add	r2, r0
 800762e:	4290      	cmp	r0, r2
 8007630:	4603      	mov	r3, r0
 8007632:	d005      	beq.n	8007640 <memchr+0x18>
 8007634:	781c      	ldrb	r4, [r3, #0]
 8007636:	3001      	adds	r0, #1
 8007638:	428c      	cmp	r4, r1
 800763a:	d1f8      	bne.n	800762e <memchr+0x6>
 800763c:	4618      	mov	r0, r3
 800763e:	bd10      	pop	{r4, pc}
 8007640:	2000      	movs	r0, #0
 8007642:	bd10      	pop	{r4, pc}

08007644 <memcpy>:
 8007644:	b510      	push	{r4, lr}
 8007646:	1e43      	subs	r3, r0, #1
 8007648:	440a      	add	r2, r1
 800764a:	4291      	cmp	r1, r2
 800764c:	d004      	beq.n	8007658 <memcpy+0x14>
 800764e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007652:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007656:	e7f8      	b.n	800764a <memcpy+0x6>
 8007658:	bd10      	pop	{r4, pc}

0800765a <__malloc_lock>:
 800765a:	4770      	bx	lr

0800765c <__malloc_unlock>:
 800765c:	4770      	bx	lr

0800765e <_Balloc>:
 800765e:	b570      	push	{r4, r5, r6, lr}
 8007660:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007662:	4604      	mov	r4, r0
 8007664:	460e      	mov	r6, r1
 8007666:	b93d      	cbnz	r5, 8007678 <_Balloc+0x1a>
 8007668:	2010      	movs	r0, #16
 800766a:	f7ff fdb9 	bl	80071e0 <malloc>
 800766e:	6260      	str	r0, [r4, #36]	; 0x24
 8007670:	6045      	str	r5, [r0, #4]
 8007672:	6085      	str	r5, [r0, #8]
 8007674:	6005      	str	r5, [r0, #0]
 8007676:	60c5      	str	r5, [r0, #12]
 8007678:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800767a:	68eb      	ldr	r3, [r5, #12]
 800767c:	b143      	cbz	r3, 8007690 <_Balloc+0x32>
 800767e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007686:	b178      	cbz	r0, 80076a8 <_Balloc+0x4a>
 8007688:	6802      	ldr	r2, [r0, #0]
 800768a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800768e:	e017      	b.n	80076c0 <_Balloc+0x62>
 8007690:	2221      	movs	r2, #33	; 0x21
 8007692:	2104      	movs	r1, #4
 8007694:	4620      	mov	r0, r4
 8007696:	f000 fc61 	bl	8007f5c <_calloc_r>
 800769a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800769c:	60e8      	str	r0, [r5, #12]
 800769e:	68db      	ldr	r3, [r3, #12]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d1ec      	bne.n	800767e <_Balloc+0x20>
 80076a4:	2000      	movs	r0, #0
 80076a6:	bd70      	pop	{r4, r5, r6, pc}
 80076a8:	2101      	movs	r1, #1
 80076aa:	fa01 f506 	lsl.w	r5, r1, r6
 80076ae:	1d6a      	adds	r2, r5, #5
 80076b0:	0092      	lsls	r2, r2, #2
 80076b2:	4620      	mov	r0, r4
 80076b4:	f000 fc52 	bl	8007f5c <_calloc_r>
 80076b8:	2800      	cmp	r0, #0
 80076ba:	d0f3      	beq.n	80076a4 <_Balloc+0x46>
 80076bc:	6046      	str	r6, [r0, #4]
 80076be:	6085      	str	r5, [r0, #8]
 80076c0:	2300      	movs	r3, #0
 80076c2:	6103      	str	r3, [r0, #16]
 80076c4:	60c3      	str	r3, [r0, #12]
 80076c6:	bd70      	pop	{r4, r5, r6, pc}

080076c8 <_Bfree>:
 80076c8:	b570      	push	{r4, r5, r6, lr}
 80076ca:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80076cc:	4606      	mov	r6, r0
 80076ce:	460d      	mov	r5, r1
 80076d0:	b93c      	cbnz	r4, 80076e2 <_Bfree+0x1a>
 80076d2:	2010      	movs	r0, #16
 80076d4:	f7ff fd84 	bl	80071e0 <malloc>
 80076d8:	6270      	str	r0, [r6, #36]	; 0x24
 80076da:	6044      	str	r4, [r0, #4]
 80076dc:	6084      	str	r4, [r0, #8]
 80076de:	6004      	str	r4, [r0, #0]
 80076e0:	60c4      	str	r4, [r0, #12]
 80076e2:	b13d      	cbz	r5, 80076f4 <_Bfree+0x2c>
 80076e4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80076e6:	686a      	ldr	r2, [r5, #4]
 80076e8:	68db      	ldr	r3, [r3, #12]
 80076ea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80076ee:	6029      	str	r1, [r5, #0]
 80076f0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80076f4:	bd70      	pop	{r4, r5, r6, pc}

080076f6 <__multadd>:
 80076f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076fa:	4606      	mov	r6, r0
 80076fc:	460c      	mov	r4, r1
 80076fe:	690d      	ldr	r5, [r1, #16]
 8007700:	461f      	mov	r7, r3
 8007702:	f101 0e14 	add.w	lr, r1, #20
 8007706:	2300      	movs	r3, #0
 8007708:	f8de 0000 	ldr.w	r0, [lr]
 800770c:	3301      	adds	r3, #1
 800770e:	b281      	uxth	r1, r0
 8007710:	fb02 7101 	mla	r1, r2, r1, r7
 8007714:	0c00      	lsrs	r0, r0, #16
 8007716:	0c0f      	lsrs	r7, r1, #16
 8007718:	fb02 7000 	mla	r0, r2, r0, r7
 800771c:	b289      	uxth	r1, r1
 800771e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007722:	429d      	cmp	r5, r3
 8007724:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007728:	f84e 1b04 	str.w	r1, [lr], #4
 800772c:	dcec      	bgt.n	8007708 <__multadd+0x12>
 800772e:	b1d7      	cbz	r7, 8007766 <__multadd+0x70>
 8007730:	68a3      	ldr	r3, [r4, #8]
 8007732:	429d      	cmp	r5, r3
 8007734:	db12      	blt.n	800775c <__multadd+0x66>
 8007736:	6861      	ldr	r1, [r4, #4]
 8007738:	4630      	mov	r0, r6
 800773a:	3101      	adds	r1, #1
 800773c:	f7ff ff8f 	bl	800765e <_Balloc>
 8007740:	4680      	mov	r8, r0
 8007742:	6922      	ldr	r2, [r4, #16]
 8007744:	f104 010c 	add.w	r1, r4, #12
 8007748:	3202      	adds	r2, #2
 800774a:	0092      	lsls	r2, r2, #2
 800774c:	300c      	adds	r0, #12
 800774e:	f7ff ff79 	bl	8007644 <memcpy>
 8007752:	4621      	mov	r1, r4
 8007754:	4630      	mov	r0, r6
 8007756:	f7ff ffb7 	bl	80076c8 <_Bfree>
 800775a:	4644      	mov	r4, r8
 800775c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007760:	3501      	adds	r5, #1
 8007762:	615f      	str	r7, [r3, #20]
 8007764:	6125      	str	r5, [r4, #16]
 8007766:	4620      	mov	r0, r4
 8007768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800776c <__hi0bits>:
 800776c:	0c03      	lsrs	r3, r0, #16
 800776e:	041b      	lsls	r3, r3, #16
 8007770:	b913      	cbnz	r3, 8007778 <__hi0bits+0xc>
 8007772:	0400      	lsls	r0, r0, #16
 8007774:	2310      	movs	r3, #16
 8007776:	e000      	b.n	800777a <__hi0bits+0xe>
 8007778:	2300      	movs	r3, #0
 800777a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800777e:	bf04      	itt	eq
 8007780:	0200      	lsleq	r0, r0, #8
 8007782:	3308      	addeq	r3, #8
 8007784:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007788:	bf04      	itt	eq
 800778a:	0100      	lsleq	r0, r0, #4
 800778c:	3304      	addeq	r3, #4
 800778e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007792:	bf04      	itt	eq
 8007794:	0080      	lsleq	r0, r0, #2
 8007796:	3302      	addeq	r3, #2
 8007798:	2800      	cmp	r0, #0
 800779a:	db03      	blt.n	80077a4 <__hi0bits+0x38>
 800779c:	0042      	lsls	r2, r0, #1
 800779e:	d503      	bpl.n	80077a8 <__hi0bits+0x3c>
 80077a0:	1c58      	adds	r0, r3, #1
 80077a2:	4770      	bx	lr
 80077a4:	4618      	mov	r0, r3
 80077a6:	4770      	bx	lr
 80077a8:	2020      	movs	r0, #32
 80077aa:	4770      	bx	lr

080077ac <__lo0bits>:
 80077ac:	6803      	ldr	r3, [r0, #0]
 80077ae:	f013 0207 	ands.w	r2, r3, #7
 80077b2:	d00b      	beq.n	80077cc <__lo0bits+0x20>
 80077b4:	07d9      	lsls	r1, r3, #31
 80077b6:	d422      	bmi.n	80077fe <__lo0bits+0x52>
 80077b8:	079a      	lsls	r2, r3, #30
 80077ba:	bf4b      	itete	mi
 80077bc:	085b      	lsrmi	r3, r3, #1
 80077be:	089b      	lsrpl	r3, r3, #2
 80077c0:	6003      	strmi	r3, [r0, #0]
 80077c2:	6003      	strpl	r3, [r0, #0]
 80077c4:	bf4c      	ite	mi
 80077c6:	2001      	movmi	r0, #1
 80077c8:	2002      	movpl	r0, #2
 80077ca:	4770      	bx	lr
 80077cc:	b299      	uxth	r1, r3
 80077ce:	b909      	cbnz	r1, 80077d4 <__lo0bits+0x28>
 80077d0:	0c1b      	lsrs	r3, r3, #16
 80077d2:	2210      	movs	r2, #16
 80077d4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80077d8:	bf04      	itt	eq
 80077da:	0a1b      	lsreq	r3, r3, #8
 80077dc:	3208      	addeq	r2, #8
 80077de:	0719      	lsls	r1, r3, #28
 80077e0:	bf04      	itt	eq
 80077e2:	091b      	lsreq	r3, r3, #4
 80077e4:	3204      	addeq	r2, #4
 80077e6:	0799      	lsls	r1, r3, #30
 80077e8:	bf04      	itt	eq
 80077ea:	089b      	lsreq	r3, r3, #2
 80077ec:	3202      	addeq	r2, #2
 80077ee:	07d9      	lsls	r1, r3, #31
 80077f0:	d402      	bmi.n	80077f8 <__lo0bits+0x4c>
 80077f2:	085b      	lsrs	r3, r3, #1
 80077f4:	d005      	beq.n	8007802 <__lo0bits+0x56>
 80077f6:	3201      	adds	r2, #1
 80077f8:	6003      	str	r3, [r0, #0]
 80077fa:	4610      	mov	r0, r2
 80077fc:	4770      	bx	lr
 80077fe:	2000      	movs	r0, #0
 8007800:	4770      	bx	lr
 8007802:	2020      	movs	r0, #32
 8007804:	4770      	bx	lr

08007806 <__i2b>:
 8007806:	b510      	push	{r4, lr}
 8007808:	460c      	mov	r4, r1
 800780a:	2101      	movs	r1, #1
 800780c:	f7ff ff27 	bl	800765e <_Balloc>
 8007810:	2201      	movs	r2, #1
 8007812:	6144      	str	r4, [r0, #20]
 8007814:	6102      	str	r2, [r0, #16]
 8007816:	bd10      	pop	{r4, pc}

08007818 <__multiply>:
 8007818:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800781c:	4614      	mov	r4, r2
 800781e:	690a      	ldr	r2, [r1, #16]
 8007820:	6923      	ldr	r3, [r4, #16]
 8007822:	4688      	mov	r8, r1
 8007824:	429a      	cmp	r2, r3
 8007826:	bfbe      	ittt	lt
 8007828:	460b      	movlt	r3, r1
 800782a:	46a0      	movlt	r8, r4
 800782c:	461c      	movlt	r4, r3
 800782e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007832:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007836:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800783a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800783e:	eb07 0609 	add.w	r6, r7, r9
 8007842:	429e      	cmp	r6, r3
 8007844:	bfc8      	it	gt
 8007846:	3101      	addgt	r1, #1
 8007848:	f7ff ff09 	bl	800765e <_Balloc>
 800784c:	f100 0514 	add.w	r5, r0, #20
 8007850:	462b      	mov	r3, r5
 8007852:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 8007856:	2200      	movs	r2, #0
 8007858:	4563      	cmp	r3, ip
 800785a:	d202      	bcs.n	8007862 <__multiply+0x4a>
 800785c:	f843 2b04 	str.w	r2, [r3], #4
 8007860:	e7fa      	b.n	8007858 <__multiply+0x40>
 8007862:	f104 0214 	add.w	r2, r4, #20
 8007866:	f108 0114 	add.w	r1, r8, #20
 800786a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800786e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007872:	9300      	str	r3, [sp, #0]
 8007874:	9b00      	ldr	r3, [sp, #0]
 8007876:	9201      	str	r2, [sp, #4]
 8007878:	4293      	cmp	r3, r2
 800787a:	d957      	bls.n	800792c <__multiply+0x114>
 800787c:	f8b2 b000 	ldrh.w	fp, [r2]
 8007880:	f1bb 0f00 	cmp.w	fp, #0
 8007884:	d023      	beq.n	80078ce <__multiply+0xb6>
 8007886:	4689      	mov	r9, r1
 8007888:	46ae      	mov	lr, r5
 800788a:	f04f 0800 	mov.w	r8, #0
 800788e:	f859 4b04 	ldr.w	r4, [r9], #4
 8007892:	f8be a000 	ldrh.w	sl, [lr]
 8007896:	b2a3      	uxth	r3, r4
 8007898:	fb0b a303 	mla	r3, fp, r3, sl
 800789c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80078a0:	f8de 4000 	ldr.w	r4, [lr]
 80078a4:	4443      	add	r3, r8
 80078a6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80078aa:	fb0b 840a 	mla	r4, fp, sl, r8
 80078ae:	46f2      	mov	sl, lr
 80078b0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80078ba:	454f      	cmp	r7, r9
 80078bc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80078c0:	f84a 3b04 	str.w	r3, [sl], #4
 80078c4:	d901      	bls.n	80078ca <__multiply+0xb2>
 80078c6:	46d6      	mov	lr, sl
 80078c8:	e7e1      	b.n	800788e <__multiply+0x76>
 80078ca:	f8ce 8004 	str.w	r8, [lr, #4]
 80078ce:	9b01      	ldr	r3, [sp, #4]
 80078d0:	3204      	adds	r2, #4
 80078d2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80078d6:	f1ba 0f00 	cmp.w	sl, #0
 80078da:	d021      	beq.n	8007920 <__multiply+0x108>
 80078dc:	462c      	mov	r4, r5
 80078de:	4689      	mov	r9, r1
 80078e0:	682b      	ldr	r3, [r5, #0]
 80078e2:	f04f 0800 	mov.w	r8, #0
 80078e6:	f8b9 e000 	ldrh.w	lr, [r9]
 80078ea:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	fb0a be0e 	mla	lr, sl, lr, fp
 80078f4:	46a3      	mov	fp, r4
 80078f6:	44f0      	add	r8, lr
 80078f8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80078fc:	f84b 3b04 	str.w	r3, [fp], #4
 8007900:	f859 3b04 	ldr.w	r3, [r9], #4
 8007904:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 8007908:	0c1b      	lsrs	r3, r3, #16
 800790a:	fb0a e303 	mla	r3, sl, r3, lr
 800790e:	454f      	cmp	r7, r9
 8007910:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 8007914:	ea4f 4813 	mov.w	r8, r3, lsr #16
 8007918:	d901      	bls.n	800791e <__multiply+0x106>
 800791a:	465c      	mov	r4, fp
 800791c:	e7e3      	b.n	80078e6 <__multiply+0xce>
 800791e:	6063      	str	r3, [r4, #4]
 8007920:	3504      	adds	r5, #4
 8007922:	e7a7      	b.n	8007874 <__multiply+0x5c>
 8007924:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 8007928:	b913      	cbnz	r3, 8007930 <__multiply+0x118>
 800792a:	3e01      	subs	r6, #1
 800792c:	2e00      	cmp	r6, #0
 800792e:	dcf9      	bgt.n	8007924 <__multiply+0x10c>
 8007930:	6106      	str	r6, [r0, #16]
 8007932:	b003      	add	sp, #12
 8007934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007938 <__pow5mult>:
 8007938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800793c:	4615      	mov	r5, r2
 800793e:	f012 0203 	ands.w	r2, r2, #3
 8007942:	4606      	mov	r6, r0
 8007944:	460f      	mov	r7, r1
 8007946:	d007      	beq.n	8007958 <__pow5mult+0x20>
 8007948:	4c21      	ldr	r4, [pc, #132]	; (80079d0 <__pow5mult+0x98>)
 800794a:	3a01      	subs	r2, #1
 800794c:	2300      	movs	r3, #0
 800794e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007952:	f7ff fed0 	bl	80076f6 <__multadd>
 8007956:	4607      	mov	r7, r0
 8007958:	10ad      	asrs	r5, r5, #2
 800795a:	d036      	beq.n	80079ca <__pow5mult+0x92>
 800795c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800795e:	b93c      	cbnz	r4, 8007970 <__pow5mult+0x38>
 8007960:	2010      	movs	r0, #16
 8007962:	f7ff fc3d 	bl	80071e0 <malloc>
 8007966:	6270      	str	r0, [r6, #36]	; 0x24
 8007968:	6044      	str	r4, [r0, #4]
 800796a:	6084      	str	r4, [r0, #8]
 800796c:	6004      	str	r4, [r0, #0]
 800796e:	60c4      	str	r4, [r0, #12]
 8007970:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007974:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007978:	b94c      	cbnz	r4, 800798e <__pow5mult+0x56>
 800797a:	f240 2171 	movw	r1, #625	; 0x271
 800797e:	4630      	mov	r0, r6
 8007980:	f7ff ff41 	bl	8007806 <__i2b>
 8007984:	4604      	mov	r4, r0
 8007986:	2300      	movs	r3, #0
 8007988:	f8c8 0008 	str.w	r0, [r8, #8]
 800798c:	6003      	str	r3, [r0, #0]
 800798e:	f04f 0800 	mov.w	r8, #0
 8007992:	07eb      	lsls	r3, r5, #31
 8007994:	d50a      	bpl.n	80079ac <__pow5mult+0x74>
 8007996:	4639      	mov	r1, r7
 8007998:	4622      	mov	r2, r4
 800799a:	4630      	mov	r0, r6
 800799c:	f7ff ff3c 	bl	8007818 <__multiply>
 80079a0:	4681      	mov	r9, r0
 80079a2:	4639      	mov	r1, r7
 80079a4:	4630      	mov	r0, r6
 80079a6:	f7ff fe8f 	bl	80076c8 <_Bfree>
 80079aa:	464f      	mov	r7, r9
 80079ac:	106d      	asrs	r5, r5, #1
 80079ae:	d00c      	beq.n	80079ca <__pow5mult+0x92>
 80079b0:	6820      	ldr	r0, [r4, #0]
 80079b2:	b108      	cbz	r0, 80079b8 <__pow5mult+0x80>
 80079b4:	4604      	mov	r4, r0
 80079b6:	e7ec      	b.n	8007992 <__pow5mult+0x5a>
 80079b8:	4622      	mov	r2, r4
 80079ba:	4621      	mov	r1, r4
 80079bc:	4630      	mov	r0, r6
 80079be:	f7ff ff2b 	bl	8007818 <__multiply>
 80079c2:	6020      	str	r0, [r4, #0]
 80079c4:	f8c0 8000 	str.w	r8, [r0]
 80079c8:	e7f4      	b.n	80079b4 <__pow5mult+0x7c>
 80079ca:	4638      	mov	r0, r7
 80079cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079d0:	08008bc8 	.word	0x08008bc8

080079d4 <__lshift>:
 80079d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079d8:	460c      	mov	r4, r1
 80079da:	4607      	mov	r7, r0
 80079dc:	4691      	mov	r9, r2
 80079de:	6926      	ldr	r6, [r4, #16]
 80079e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80079e4:	4456      	add	r6, sl
 80079e6:	6849      	ldr	r1, [r1, #4]
 80079e8:	68a3      	ldr	r3, [r4, #8]
 80079ea:	1c75      	adds	r5, r6, #1
 80079ec:	42ab      	cmp	r3, r5
 80079ee:	da02      	bge.n	80079f6 <__lshift+0x22>
 80079f0:	3101      	adds	r1, #1
 80079f2:	005b      	lsls	r3, r3, #1
 80079f4:	e7fa      	b.n	80079ec <__lshift+0x18>
 80079f6:	4638      	mov	r0, r7
 80079f8:	f7ff fe31 	bl	800765e <_Balloc>
 80079fc:	2300      	movs	r3, #0
 80079fe:	4680      	mov	r8, r0
 8007a00:	461a      	mov	r2, r3
 8007a02:	f100 0114 	add.w	r1, r0, #20
 8007a06:	4553      	cmp	r3, sl
 8007a08:	da03      	bge.n	8007a12 <__lshift+0x3e>
 8007a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007a0e:	3301      	adds	r3, #1
 8007a10:	e7f9      	b.n	8007a06 <__lshift+0x32>
 8007a12:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 8007a16:	6920      	ldr	r0, [r4, #16]
 8007a18:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8007a1c:	f019 091f 	ands.w	r9, r9, #31
 8007a20:	f104 0114 	add.w	r1, r4, #20
 8007a24:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8007a28:	d014      	beq.n	8007a54 <__lshift+0x80>
 8007a2a:	f1c9 0c20 	rsb	ip, r9, #32
 8007a2e:	2200      	movs	r2, #0
 8007a30:	6808      	ldr	r0, [r1, #0]
 8007a32:	469a      	mov	sl, r3
 8007a34:	fa00 f009 	lsl.w	r0, r0, r9
 8007a38:	4302      	orrs	r2, r0
 8007a3a:	f843 2b04 	str.w	r2, [r3], #4
 8007a3e:	f851 2b04 	ldr.w	r2, [r1], #4
 8007a42:	458e      	cmp	lr, r1
 8007a44:	fa22 f20c 	lsr.w	r2, r2, ip
 8007a48:	d8f2      	bhi.n	8007a30 <__lshift+0x5c>
 8007a4a:	f8ca 2004 	str.w	r2, [sl, #4]
 8007a4e:	b142      	cbz	r2, 8007a62 <__lshift+0x8e>
 8007a50:	1cb5      	adds	r5, r6, #2
 8007a52:	e006      	b.n	8007a62 <__lshift+0x8e>
 8007a54:	3b04      	subs	r3, #4
 8007a56:	f851 2b04 	ldr.w	r2, [r1], #4
 8007a5a:	458e      	cmp	lr, r1
 8007a5c:	f843 2f04 	str.w	r2, [r3, #4]!
 8007a60:	d8f9      	bhi.n	8007a56 <__lshift+0x82>
 8007a62:	3d01      	subs	r5, #1
 8007a64:	4638      	mov	r0, r7
 8007a66:	f8c8 5010 	str.w	r5, [r8, #16]
 8007a6a:	4621      	mov	r1, r4
 8007a6c:	f7ff fe2c 	bl	80076c8 <_Bfree>
 8007a70:	4640      	mov	r0, r8
 8007a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007a76 <__mcmp>:
 8007a76:	6903      	ldr	r3, [r0, #16]
 8007a78:	690a      	ldr	r2, [r1, #16]
 8007a7a:	b510      	push	{r4, lr}
 8007a7c:	1a9b      	subs	r3, r3, r2
 8007a7e:	d111      	bne.n	8007aa4 <__mcmp+0x2e>
 8007a80:	0092      	lsls	r2, r2, #2
 8007a82:	3014      	adds	r0, #20
 8007a84:	3114      	adds	r1, #20
 8007a86:	1883      	adds	r3, r0, r2
 8007a88:	440a      	add	r2, r1
 8007a8a:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8007a8e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007a92:	428c      	cmp	r4, r1
 8007a94:	d002      	beq.n	8007a9c <__mcmp+0x26>
 8007a96:	d307      	bcc.n	8007aa8 <__mcmp+0x32>
 8007a98:	2001      	movs	r0, #1
 8007a9a:	bd10      	pop	{r4, pc}
 8007a9c:	4298      	cmp	r0, r3
 8007a9e:	d3f4      	bcc.n	8007a8a <__mcmp+0x14>
 8007aa0:	2000      	movs	r0, #0
 8007aa2:	bd10      	pop	{r4, pc}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	bd10      	pop	{r4, pc}
 8007aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8007aac:	bd10      	pop	{r4, pc}

08007aae <__mdiff>:
 8007aae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ab2:	460c      	mov	r4, r1
 8007ab4:	4607      	mov	r7, r0
 8007ab6:	4611      	mov	r1, r2
 8007ab8:	4620      	mov	r0, r4
 8007aba:	4615      	mov	r5, r2
 8007abc:	f7ff ffdb 	bl	8007a76 <__mcmp>
 8007ac0:	1e06      	subs	r6, r0, #0
 8007ac2:	d108      	bne.n	8007ad6 <__mdiff+0x28>
 8007ac4:	4631      	mov	r1, r6
 8007ac6:	4638      	mov	r0, r7
 8007ac8:	f7ff fdc9 	bl	800765e <_Balloc>
 8007acc:	2301      	movs	r3, #1
 8007ace:	6103      	str	r3, [r0, #16]
 8007ad0:	6146      	str	r6, [r0, #20]
 8007ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ad6:	bfbc      	itt	lt
 8007ad8:	4623      	movlt	r3, r4
 8007ada:	462c      	movlt	r4, r5
 8007adc:	4638      	mov	r0, r7
 8007ade:	6861      	ldr	r1, [r4, #4]
 8007ae0:	bfba      	itte	lt
 8007ae2:	461d      	movlt	r5, r3
 8007ae4:	2601      	movlt	r6, #1
 8007ae6:	2600      	movge	r6, #0
 8007ae8:	f7ff fdb9 	bl	800765e <_Balloc>
 8007aec:	692b      	ldr	r3, [r5, #16]
 8007aee:	60c6      	str	r6, [r0, #12]
 8007af0:	6926      	ldr	r6, [r4, #16]
 8007af2:	f105 0914 	add.w	r9, r5, #20
 8007af6:	f104 0114 	add.w	r1, r4, #20
 8007afa:	eb01 0786 	add.w	r7, r1, r6, lsl #2
 8007afe:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007b02:	f100 0514 	add.w	r5, r0, #20
 8007b06:	f04f 0c00 	mov.w	ip, #0
 8007b0a:	f851 2b04 	ldr.w	r2, [r1], #4
 8007b0e:	f859 4b04 	ldr.w	r4, [r9], #4
 8007b12:	b293      	uxth	r3, r2
 8007b14:	449c      	add	ip, r3
 8007b16:	b2a3      	uxth	r3, r4
 8007b18:	0c24      	lsrs	r4, r4, #16
 8007b1a:	ebc3 030c 	rsb	r3, r3, ip
 8007b1e:	ebc4 4212 	rsb	r2, r4, r2, lsr #16
 8007b22:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007b2c:	45c8      	cmp	r8, r9
 8007b2e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8007b32:	468e      	mov	lr, r1
 8007b34:	f845 2b04 	str.w	r2, [r5], #4
 8007b38:	d8e7      	bhi.n	8007b0a <__mdiff+0x5c>
 8007b3a:	45be      	cmp	lr, r7
 8007b3c:	d20e      	bcs.n	8007b5c <__mdiff+0xae>
 8007b3e:	f85e 1b04 	ldr.w	r1, [lr], #4
 8007b42:	b28a      	uxth	r2, r1
 8007b44:	4462      	add	r2, ip
 8007b46:	1413      	asrs	r3, r2, #16
 8007b48:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 8007b4c:	b292      	uxth	r2, r2
 8007b4e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007b52:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007b56:	f845 2b04 	str.w	r2, [r5], #4
 8007b5a:	e7ee      	b.n	8007b3a <__mdiff+0x8c>
 8007b5c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007b60:	b90b      	cbnz	r3, 8007b66 <__mdiff+0xb8>
 8007b62:	3e01      	subs	r6, #1
 8007b64:	e7fa      	b.n	8007b5c <__mdiff+0xae>
 8007b66:	6106      	str	r6, [r0, #16]
 8007b68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08007b6c <__d2b>:
 8007b6c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007b70:	461c      	mov	r4, r3
 8007b72:	2101      	movs	r1, #1
 8007b74:	4690      	mov	r8, r2
 8007b76:	9e08      	ldr	r6, [sp, #32]
 8007b78:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007b7a:	f7ff fd70 	bl	800765e <_Balloc>
 8007b7e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8007b82:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007b86:	4607      	mov	r7, r0
 8007b88:	b10c      	cbz	r4, 8007b8e <__d2b+0x22>
 8007b8a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007b8e:	9201      	str	r2, [sp, #4]
 8007b90:	f1b8 0f00 	cmp.w	r8, #0
 8007b94:	d019      	beq.n	8007bca <__d2b+0x5e>
 8007b96:	a802      	add	r0, sp, #8
 8007b98:	f840 8d08 	str.w	r8, [r0, #-8]!
 8007b9c:	f7ff fe06 	bl	80077ac <__lo0bits>
 8007ba0:	9b00      	ldr	r3, [sp, #0]
 8007ba2:	b148      	cbz	r0, 8007bb8 <__d2b+0x4c>
 8007ba4:	9a01      	ldr	r2, [sp, #4]
 8007ba6:	f1c0 0120 	rsb	r1, r0, #32
 8007baa:	fa02 f101 	lsl.w	r1, r2, r1
 8007bae:	430b      	orrs	r3, r1
 8007bb0:	40c2      	lsrs	r2, r0
 8007bb2:	617b      	str	r3, [r7, #20]
 8007bb4:	9201      	str	r2, [sp, #4]
 8007bb6:	e000      	b.n	8007bba <__d2b+0x4e>
 8007bb8:	617b      	str	r3, [r7, #20]
 8007bba:	9b01      	ldr	r3, [sp, #4]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	bf14      	ite	ne
 8007bc0:	2102      	movne	r1, #2
 8007bc2:	2101      	moveq	r1, #1
 8007bc4:	61bb      	str	r3, [r7, #24]
 8007bc6:	6139      	str	r1, [r7, #16]
 8007bc8:	e007      	b.n	8007bda <__d2b+0x6e>
 8007bca:	a801      	add	r0, sp, #4
 8007bcc:	f7ff fdee 	bl	80077ac <__lo0bits>
 8007bd0:	9b01      	ldr	r3, [sp, #4]
 8007bd2:	2101      	movs	r1, #1
 8007bd4:	617b      	str	r3, [r7, #20]
 8007bd6:	6139      	str	r1, [r7, #16]
 8007bd8:	3020      	adds	r0, #32
 8007bda:	b134      	cbz	r4, 8007bea <__d2b+0x7e>
 8007bdc:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007be0:	4404      	add	r4, r0
 8007be2:	6034      	str	r4, [r6, #0]
 8007be4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007be8:	e009      	b.n	8007bfe <__d2b+0x92>
 8007bea:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007bee:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007bf2:	6030      	str	r0, [r6, #0]
 8007bf4:	6918      	ldr	r0, [r3, #16]
 8007bf6:	f7ff fdb9 	bl	800776c <__hi0bits>
 8007bfa:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007bfe:	6028      	str	r0, [r5, #0]
 8007c00:	4638      	mov	r0, r7
 8007c02:	b002      	add	sp, #8
 8007c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007c08 <_putc_r>:
 8007c08:	b570      	push	{r4, r5, r6, lr}
 8007c0a:	460d      	mov	r5, r1
 8007c0c:	4614      	mov	r4, r2
 8007c0e:	4606      	mov	r6, r0
 8007c10:	b118      	cbz	r0, 8007c1a <_putc_r+0x12>
 8007c12:	6983      	ldr	r3, [r0, #24]
 8007c14:	b90b      	cbnz	r3, 8007c1a <_putc_r+0x12>
 8007c16:	f7ff f8c9 	bl	8006dac <__sinit>
 8007c1a:	4b13      	ldr	r3, [pc, #76]	; (8007c68 <_putc_r+0x60>)
 8007c1c:	429c      	cmp	r4, r3
 8007c1e:	d101      	bne.n	8007c24 <_putc_r+0x1c>
 8007c20:	6874      	ldr	r4, [r6, #4]
 8007c22:	e008      	b.n	8007c36 <_putc_r+0x2e>
 8007c24:	4b11      	ldr	r3, [pc, #68]	; (8007c6c <_putc_r+0x64>)
 8007c26:	429c      	cmp	r4, r3
 8007c28:	d101      	bne.n	8007c2e <_putc_r+0x26>
 8007c2a:	68b4      	ldr	r4, [r6, #8]
 8007c2c:	e003      	b.n	8007c36 <_putc_r+0x2e>
 8007c2e:	4b10      	ldr	r3, [pc, #64]	; (8007c70 <_putc_r+0x68>)
 8007c30:	429c      	cmp	r4, r3
 8007c32:	bf08      	it	eq
 8007c34:	68f4      	ldreq	r4, [r6, #12]
 8007c36:	68a3      	ldr	r3, [r4, #8]
 8007c38:	3b01      	subs	r3, #1
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	60a3      	str	r3, [r4, #8]
 8007c3e:	da0c      	bge.n	8007c5a <_putc_r+0x52>
 8007c40:	69a2      	ldr	r2, [r4, #24]
 8007c42:	4293      	cmp	r3, r2
 8007c44:	db02      	blt.n	8007c4c <_putc_r+0x44>
 8007c46:	b2eb      	uxtb	r3, r5
 8007c48:	2b0a      	cmp	r3, #10
 8007c4a:	d106      	bne.n	8007c5a <_putc_r+0x52>
 8007c4c:	4622      	mov	r2, r4
 8007c4e:	4629      	mov	r1, r5
 8007c50:	4630      	mov	r0, r6
 8007c52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007c56:	f000 b911 	b.w	8007e7c <__swbuf_r>
 8007c5a:	6823      	ldr	r3, [r4, #0]
 8007c5c:	b2e8      	uxtb	r0, r5
 8007c5e:	1c5a      	adds	r2, r3, #1
 8007c60:	6022      	str	r2, [r4, #0]
 8007c62:	701d      	strb	r5, [r3, #0]
 8007c64:	bd70      	pop	{r4, r5, r6, pc}
 8007c66:	bf00      	nop
 8007c68:	08008a68 	.word	0x08008a68
 8007c6c:	08008a88 	.word	0x08008a88
 8007c70:	08008aa8 	.word	0x08008aa8

08007c74 <_sbrk_r>:
 8007c74:	b538      	push	{r3, r4, r5, lr}
 8007c76:	4c06      	ldr	r4, [pc, #24]	; (8007c90 <_sbrk_r+0x1c>)
 8007c78:	2300      	movs	r3, #0
 8007c7a:	4605      	mov	r5, r0
 8007c7c:	4608      	mov	r0, r1
 8007c7e:	6023      	str	r3, [r4, #0]
 8007c80:	f000 fdfc 	bl	800887c <_sbrk>
 8007c84:	1c43      	adds	r3, r0, #1
 8007c86:	d102      	bne.n	8007c8e <_sbrk_r+0x1a>
 8007c88:	6823      	ldr	r3, [r4, #0]
 8007c8a:	b103      	cbz	r3, 8007c8e <_sbrk_r+0x1a>
 8007c8c:	602b      	str	r3, [r5, #0]
 8007c8e:	bd38      	pop	{r3, r4, r5, pc}
 8007c90:	20001130 	.word	0x20001130

08007c94 <__sread>:
 8007c94:	b510      	push	{r4, lr}
 8007c96:	460c      	mov	r4, r1
 8007c98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c9c:	f000 fbd6 	bl	800844c <_read_r>
 8007ca0:	2800      	cmp	r0, #0
 8007ca2:	bfab      	itete	ge
 8007ca4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007ca6:	89a3      	ldrhlt	r3, [r4, #12]
 8007ca8:	181b      	addge	r3, r3, r0
 8007caa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007cae:	bfac      	ite	ge
 8007cb0:	6563      	strge	r3, [r4, #84]	; 0x54
 8007cb2:	81a3      	strhlt	r3, [r4, #12]
 8007cb4:	bd10      	pop	{r4, pc}

08007cb6 <__swrite>:
 8007cb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cba:	461f      	mov	r7, r3
 8007cbc:	898b      	ldrh	r3, [r1, #12]
 8007cbe:	4605      	mov	r5, r0
 8007cc0:	05db      	lsls	r3, r3, #23
 8007cc2:	460c      	mov	r4, r1
 8007cc4:	4616      	mov	r6, r2
 8007cc6:	d505      	bpl.n	8007cd4 <__swrite+0x1e>
 8007cc8:	2302      	movs	r3, #2
 8007cca:	2200      	movs	r2, #0
 8007ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cd0:	f000 fb8e 	bl	80083f0 <_lseek_r>
 8007cd4:	89a3      	ldrh	r3, [r4, #12]
 8007cd6:	4632      	mov	r2, r6
 8007cd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007cdc:	81a3      	strh	r3, [r4, #12]
 8007cde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ce2:	463b      	mov	r3, r7
 8007ce4:	4628      	mov	r0, r5
 8007ce6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cea:	f000 b925 	b.w	8007f38 <_write_r>

08007cee <__sseek>:
 8007cee:	b510      	push	{r4, lr}
 8007cf0:	460c      	mov	r4, r1
 8007cf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cf6:	f000 fb7b 	bl	80083f0 <_lseek_r>
 8007cfa:	1c43      	adds	r3, r0, #1
 8007cfc:	89a3      	ldrh	r3, [r4, #12]
 8007cfe:	bf15      	itete	ne
 8007d00:	6560      	strne	r0, [r4, #84]	; 0x54
 8007d02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007d06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007d0a:	81a3      	strheq	r3, [r4, #12]
 8007d0c:	bf18      	it	ne
 8007d0e:	81a3      	strhne	r3, [r4, #12]
 8007d10:	bd10      	pop	{r4, pc}

08007d12 <__sclose>:
 8007d12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d16:	f000 b94f 	b.w	8007fb8 <_close_r>

08007d1a <__ssprint_r>:
 8007d1a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d1e:	4693      	mov	fp, r2
 8007d20:	6892      	ldr	r2, [r2, #8]
 8007d22:	4681      	mov	r9, r0
 8007d24:	460c      	mov	r4, r1
 8007d26:	b34a      	cbz	r2, 8007d7c <__ssprint_r+0x62>
 8007d28:	2300      	movs	r3, #0
 8007d2a:	f8db a000 	ldr.w	sl, [fp]
 8007d2e:	9301      	str	r3, [sp, #4]
 8007d30:	461f      	mov	r7, r3
 8007d32:	e006      	b.n	8007d42 <__ssprint_r+0x28>
 8007d34:	f8da 3000 	ldr.w	r3, [sl]
 8007d38:	f8da 7004 	ldr.w	r7, [sl, #4]
 8007d3c:	9301      	str	r3, [sp, #4]
 8007d3e:	f10a 0a08 	add.w	sl, sl, #8
 8007d42:	2f00      	cmp	r7, #0
 8007d44:	d0f6      	beq.n	8007d34 <__ssprint_r+0x1a>
 8007d46:	68a6      	ldr	r6, [r4, #8]
 8007d48:	42b7      	cmp	r7, r6
 8007d4a:	d360      	bcc.n	8007e0e <__ssprint_r+0xf4>
 8007d4c:	89a0      	ldrh	r0, [r4, #12]
 8007d4e:	f410 6f90 	tst.w	r0, #1152	; 0x480
 8007d52:	d117      	bne.n	8007d84 <__ssprint_r+0x6a>
 8007d54:	42b7      	cmp	r7, r6
 8007d56:	d35a      	bcc.n	8007e0e <__ssprint_r+0xf4>
 8007d58:	4632      	mov	r2, r6
 8007d5a:	9901      	ldr	r1, [sp, #4]
 8007d5c:	6820      	ldr	r0, [r4, #0]
 8007d5e:	f000 fb59 	bl	8008414 <memmove>
 8007d62:	68a2      	ldr	r2, [r4, #8]
 8007d64:	1b92      	subs	r2, r2, r6
 8007d66:	60a2      	str	r2, [r4, #8]
 8007d68:	6822      	ldr	r2, [r4, #0]
 8007d6a:	4416      	add	r6, r2
 8007d6c:	f8db 2008 	ldr.w	r2, [fp, #8]
 8007d70:	6026      	str	r6, [r4, #0]
 8007d72:	1bd7      	subs	r7, r2, r7
 8007d74:	f8cb 7008 	str.w	r7, [fp, #8]
 8007d78:	2f00      	cmp	r7, #0
 8007d7a:	d1db      	bne.n	8007d34 <__ssprint_r+0x1a>
 8007d7c:	2000      	movs	r0, #0
 8007d7e:	f8cb 0004 	str.w	r0, [fp, #4]
 8007d82:	e046      	b.n	8007e12 <__ssprint_r+0xf8>
 8007d84:	6825      	ldr	r5, [r4, #0]
 8007d86:	6921      	ldr	r1, [r4, #16]
 8007d88:	2302      	movs	r3, #2
 8007d8a:	ebc1 0805 	rsb	r8, r1, r5
 8007d8e:	6965      	ldr	r5, [r4, #20]
 8007d90:	f108 0201 	add.w	r2, r8, #1
 8007d94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d98:	fb95 f5f3 	sdiv	r5, r5, r3
 8007d9c:	443a      	add	r2, r7
 8007d9e:	4295      	cmp	r5, r2
 8007da0:	bf38      	it	cc
 8007da2:	4615      	movcc	r5, r2
 8007da4:	0543      	lsls	r3, r0, #21
 8007da6:	d510      	bpl.n	8007dca <__ssprint_r+0xb0>
 8007da8:	4629      	mov	r1, r5
 8007daa:	4648      	mov	r0, r9
 8007dac:	f7ff fa20 	bl	80071f0 <_malloc_r>
 8007db0:	4606      	mov	r6, r0
 8007db2:	b1a0      	cbz	r0, 8007dde <__ssprint_r+0xc4>
 8007db4:	4642      	mov	r2, r8
 8007db6:	6921      	ldr	r1, [r4, #16]
 8007db8:	f7ff fc44 	bl	8007644 <memcpy>
 8007dbc:	89a2      	ldrh	r2, [r4, #12]
 8007dbe:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8007dc2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007dc6:	81a2      	strh	r2, [r4, #12]
 8007dc8:	e018      	b.n	8007dfc <__ssprint_r+0xe2>
 8007dca:	462a      	mov	r2, r5
 8007dcc:	4648      	mov	r0, r9
 8007dce:	f000 fb4f 	bl	8008470 <_realloc_r>
 8007dd2:	4606      	mov	r6, r0
 8007dd4:	b990      	cbnz	r0, 8007dfc <__ssprint_r+0xe2>
 8007dd6:	6921      	ldr	r1, [r4, #16]
 8007dd8:	4648      	mov	r0, r9
 8007dda:	f7ff f8af 	bl	8006f3c <_free_r>
 8007dde:	220c      	movs	r2, #12
 8007de0:	f8c9 2000 	str.w	r2, [r9]
 8007de4:	89a2      	ldrh	r2, [r4, #12]
 8007de6:	f04f 30ff 	mov.w	r0, #4294967295
 8007dea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007dee:	81a2      	strh	r2, [r4, #12]
 8007df0:	2200      	movs	r2, #0
 8007df2:	f8cb 2008 	str.w	r2, [fp, #8]
 8007df6:	f8cb 2004 	str.w	r2, [fp, #4]
 8007dfa:	e00a      	b.n	8007e12 <__ssprint_r+0xf8>
 8007dfc:	6126      	str	r6, [r4, #16]
 8007dfe:	6165      	str	r5, [r4, #20]
 8007e00:	4446      	add	r6, r8
 8007e02:	ebc8 0505 	rsb	r5, r8, r5
 8007e06:	6026      	str	r6, [r4, #0]
 8007e08:	60a5      	str	r5, [r4, #8]
 8007e0a:	463e      	mov	r6, r7
 8007e0c:	e7a2      	b.n	8007d54 <__ssprint_r+0x3a>
 8007e0e:	463e      	mov	r6, r7
 8007e10:	e7a2      	b.n	8007d58 <__ssprint_r+0x3e>
 8007e12:	b003      	add	sp, #12
 8007e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007e18 <__sprint_r>:
 8007e18:	6893      	ldr	r3, [r2, #8]
 8007e1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e1e:	4680      	mov	r8, r0
 8007e20:	460f      	mov	r7, r1
 8007e22:	4614      	mov	r4, r2
 8007e24:	b91b      	cbnz	r3, 8007e2e <__sprint_r+0x16>
 8007e26:	6053      	str	r3, [r2, #4]
 8007e28:	4618      	mov	r0, r3
 8007e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e2e:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8007e30:	049d      	lsls	r5, r3, #18
 8007e32:	d51c      	bpl.n	8007e6e <__sprint_r+0x56>
 8007e34:	6815      	ldr	r5, [r2, #0]
 8007e36:	68a0      	ldr	r0, [r4, #8]
 8007e38:	3508      	adds	r5, #8
 8007e3a:	b1d0      	cbz	r0, 8007e72 <__sprint_r+0x5a>
 8007e3c:	f855 6c04 	ldr.w	r6, [r5, #-4]
 8007e40:	f855 ac08 	ldr.w	sl, [r5, #-8]
 8007e44:	08b6      	lsrs	r6, r6, #2
 8007e46:	f04f 0900 	mov.w	r9, #0
 8007e4a:	454e      	cmp	r6, r9
 8007e4c:	dd0a      	ble.n	8007e64 <__sprint_r+0x4c>
 8007e4e:	463a      	mov	r2, r7
 8007e50:	f85a 1029 	ldr.w	r1, [sl, r9, lsl #2]
 8007e54:	4640      	mov	r0, r8
 8007e56:	f000 f950 	bl	80080fa <_fputwc_r>
 8007e5a:	1c43      	adds	r3, r0, #1
 8007e5c:	d009      	beq.n	8007e72 <__sprint_r+0x5a>
 8007e5e:	f109 0901 	add.w	r9, r9, #1
 8007e62:	e7f2      	b.n	8007e4a <__sprint_r+0x32>
 8007e64:	68a3      	ldr	r3, [r4, #8]
 8007e66:	eba3 0686 	sub.w	r6, r3, r6, lsl #2
 8007e6a:	60a6      	str	r6, [r4, #8]
 8007e6c:	e7e3      	b.n	8007e36 <__sprint_r+0x1e>
 8007e6e:	f000 f965 	bl	800813c <__sfvwrite_r>
 8007e72:	2300      	movs	r3, #0
 8007e74:	60a3      	str	r3, [r4, #8]
 8007e76:	6063      	str	r3, [r4, #4]
 8007e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007e7c <__swbuf_r>:
 8007e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e7e:	460f      	mov	r7, r1
 8007e80:	4614      	mov	r4, r2
 8007e82:	4606      	mov	r6, r0
 8007e84:	b118      	cbz	r0, 8007e8e <__swbuf_r+0x12>
 8007e86:	6983      	ldr	r3, [r0, #24]
 8007e88:	b90b      	cbnz	r3, 8007e8e <__swbuf_r+0x12>
 8007e8a:	f7fe ff8f 	bl	8006dac <__sinit>
 8007e8e:	4b27      	ldr	r3, [pc, #156]	; (8007f2c <__swbuf_r+0xb0>)
 8007e90:	429c      	cmp	r4, r3
 8007e92:	d101      	bne.n	8007e98 <__swbuf_r+0x1c>
 8007e94:	6874      	ldr	r4, [r6, #4]
 8007e96:	e008      	b.n	8007eaa <__swbuf_r+0x2e>
 8007e98:	4b25      	ldr	r3, [pc, #148]	; (8007f30 <__swbuf_r+0xb4>)
 8007e9a:	429c      	cmp	r4, r3
 8007e9c:	d101      	bne.n	8007ea2 <__swbuf_r+0x26>
 8007e9e:	68b4      	ldr	r4, [r6, #8]
 8007ea0:	e003      	b.n	8007eaa <__swbuf_r+0x2e>
 8007ea2:	4b24      	ldr	r3, [pc, #144]	; (8007f34 <__swbuf_r+0xb8>)
 8007ea4:	429c      	cmp	r4, r3
 8007ea6:	bf08      	it	eq
 8007ea8:	68f4      	ldreq	r4, [r6, #12]
 8007eaa:	69a3      	ldr	r3, [r4, #24]
 8007eac:	60a3      	str	r3, [r4, #8]
 8007eae:	89a3      	ldrh	r3, [r4, #12]
 8007eb0:	0719      	lsls	r1, r3, #28
 8007eb2:	d50e      	bpl.n	8007ed2 <__swbuf_r+0x56>
 8007eb4:	6923      	ldr	r3, [r4, #16]
 8007eb6:	b163      	cbz	r3, 8007ed2 <__swbuf_r+0x56>
 8007eb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ebc:	b2fd      	uxtb	r5, r7
 8007ebe:	049a      	lsls	r2, r3, #18
 8007ec0:	d410      	bmi.n	8007ee4 <__swbuf_r+0x68>
 8007ec2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007ec6:	81a3      	strh	r3, [r4, #12]
 8007ec8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007eca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ece:	6663      	str	r3, [r4, #100]	; 0x64
 8007ed0:	e008      	b.n	8007ee4 <__swbuf_r+0x68>
 8007ed2:	4621      	mov	r1, r4
 8007ed4:	4630      	mov	r0, r6
 8007ed6:	f7fd ffdb 	bl	8005e90 <__swsetup_r>
 8007eda:	2800      	cmp	r0, #0
 8007edc:	d0ec      	beq.n	8007eb8 <__swbuf_r+0x3c>
 8007ede:	f04f 30ff 	mov.w	r0, #4294967295
 8007ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ee4:	6823      	ldr	r3, [r4, #0]
 8007ee6:	6920      	ldr	r0, [r4, #16]
 8007ee8:	1a18      	subs	r0, r3, r0
 8007eea:	6963      	ldr	r3, [r4, #20]
 8007eec:	4298      	cmp	r0, r3
 8007eee:	db05      	blt.n	8007efc <__swbuf_r+0x80>
 8007ef0:	4621      	mov	r1, r4
 8007ef2:	4630      	mov	r0, r6
 8007ef4:	f7fe fef0 	bl	8006cd8 <_fflush_r>
 8007ef8:	2800      	cmp	r0, #0
 8007efa:	d1f0      	bne.n	8007ede <__swbuf_r+0x62>
 8007efc:	68a3      	ldr	r3, [r4, #8]
 8007efe:	3b01      	subs	r3, #1
 8007f00:	60a3      	str	r3, [r4, #8]
 8007f02:	6823      	ldr	r3, [r4, #0]
 8007f04:	1c5a      	adds	r2, r3, #1
 8007f06:	6022      	str	r2, [r4, #0]
 8007f08:	701f      	strb	r7, [r3, #0]
 8007f0a:	6962      	ldr	r2, [r4, #20]
 8007f0c:	1c43      	adds	r3, r0, #1
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d004      	beq.n	8007f1c <__swbuf_r+0xa0>
 8007f12:	89a3      	ldrh	r3, [r4, #12]
 8007f14:	07db      	lsls	r3, r3, #31
 8007f16:	d507      	bpl.n	8007f28 <__swbuf_r+0xac>
 8007f18:	2d0a      	cmp	r5, #10
 8007f1a:	d105      	bne.n	8007f28 <__swbuf_r+0xac>
 8007f1c:	4621      	mov	r1, r4
 8007f1e:	4630      	mov	r0, r6
 8007f20:	f7fe feda 	bl	8006cd8 <_fflush_r>
 8007f24:	2800      	cmp	r0, #0
 8007f26:	d1da      	bne.n	8007ede <__swbuf_r+0x62>
 8007f28:	4628      	mov	r0, r5
 8007f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f2c:	08008a68 	.word	0x08008a68
 8007f30:	08008a88 	.word	0x08008a88
 8007f34:	08008aa8 	.word	0x08008aa8

08007f38 <_write_r>:
 8007f38:	b538      	push	{r3, r4, r5, lr}
 8007f3a:	4c07      	ldr	r4, [pc, #28]	; (8007f58 <_write_r+0x20>)
 8007f3c:	4605      	mov	r5, r0
 8007f3e:	4608      	mov	r0, r1
 8007f40:	4611      	mov	r1, r2
 8007f42:	2200      	movs	r2, #0
 8007f44:	6022      	str	r2, [r4, #0]
 8007f46:	461a      	mov	r2, r3
 8007f48:	f000 fca6 	bl	8008898 <_write>
 8007f4c:	1c43      	adds	r3, r0, #1
 8007f4e:	d102      	bne.n	8007f56 <_write_r+0x1e>
 8007f50:	6823      	ldr	r3, [r4, #0]
 8007f52:	b103      	cbz	r3, 8007f56 <_write_r+0x1e>
 8007f54:	602b      	str	r3, [r5, #0]
 8007f56:	bd38      	pop	{r3, r4, r5, pc}
 8007f58:	20001130 	.word	0x20001130

08007f5c <_calloc_r>:
 8007f5c:	b510      	push	{r4, lr}
 8007f5e:	4351      	muls	r1, r2
 8007f60:	f7ff f946 	bl	80071f0 <_malloc_r>
 8007f64:	4604      	mov	r4, r0
 8007f66:	b320      	cbz	r0, 8007fb2 <_calloc_r+0x56>
 8007f68:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8007f6c:	f022 0203 	bic.w	r2, r2, #3
 8007f70:	3a04      	subs	r2, #4
 8007f72:	2a24      	cmp	r2, #36	; 0x24
 8007f74:	d81a      	bhi.n	8007fac <_calloc_r+0x50>
 8007f76:	2a13      	cmp	r2, #19
 8007f78:	d912      	bls.n	8007fa0 <_calloc_r+0x44>
 8007f7a:	2100      	movs	r1, #0
 8007f7c:	2a1b      	cmp	r2, #27
 8007f7e:	6001      	str	r1, [r0, #0]
 8007f80:	6041      	str	r1, [r0, #4]
 8007f82:	d802      	bhi.n	8007f8a <_calloc_r+0x2e>
 8007f84:	f100 0308 	add.w	r3, r0, #8
 8007f88:	e00b      	b.n	8007fa2 <_calloc_r+0x46>
 8007f8a:	2a24      	cmp	r2, #36	; 0x24
 8007f8c:	6081      	str	r1, [r0, #8]
 8007f8e:	60c1      	str	r1, [r0, #12]
 8007f90:	bf11      	iteee	ne
 8007f92:	f100 0310 	addne.w	r3, r0, #16
 8007f96:	6101      	streq	r1, [r0, #16]
 8007f98:	f100 0318 	addeq.w	r3, r0, #24
 8007f9c:	6141      	streq	r1, [r0, #20]
 8007f9e:	e000      	b.n	8007fa2 <_calloc_r+0x46>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	601a      	str	r2, [r3, #0]
 8007fa6:	605a      	str	r2, [r3, #4]
 8007fa8:	609a      	str	r2, [r3, #8]
 8007faa:	e002      	b.n	8007fb2 <_calloc_r+0x56>
 8007fac:	2100      	movs	r1, #0
 8007fae:	f7fb ff3b 	bl	8003e28 <memset>
 8007fb2:	4620      	mov	r0, r4
 8007fb4:	bd10      	pop	{r4, pc}
	...

08007fb8 <_close_r>:
 8007fb8:	b538      	push	{r3, r4, r5, lr}
 8007fba:	4c06      	ldr	r4, [pc, #24]	; (8007fd4 <_close_r+0x1c>)
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	4605      	mov	r5, r0
 8007fc0:	4608      	mov	r0, r1
 8007fc2:	6023      	str	r3, [r4, #0]
 8007fc4:	f000 fc32 	bl	800882c <_close>
 8007fc8:	1c43      	adds	r3, r0, #1
 8007fca:	d102      	bne.n	8007fd2 <_close_r+0x1a>
 8007fcc:	6823      	ldr	r3, [r4, #0]
 8007fce:	b103      	cbz	r3, 8007fd2 <_close_r+0x1a>
 8007fd0:	602b      	str	r3, [r5, #0]
 8007fd2:	bd38      	pop	{r3, r4, r5, pc}
 8007fd4:	20001130 	.word	0x20001130

08007fd8 <_fclose_r>:
 8007fd8:	b570      	push	{r4, r5, r6, lr}
 8007fda:	4605      	mov	r5, r0
 8007fdc:	460c      	mov	r4, r1
 8007fde:	b909      	cbnz	r1, 8007fe4 <_fclose_r+0xc>
 8007fe0:	2000      	movs	r0, #0
 8007fe2:	bd70      	pop	{r4, r5, r6, pc}
 8007fe4:	b118      	cbz	r0, 8007fee <_fclose_r+0x16>
 8007fe6:	6983      	ldr	r3, [r0, #24]
 8007fe8:	b90b      	cbnz	r3, 8007fee <_fclose_r+0x16>
 8007fea:	f7fe fedf 	bl	8006dac <__sinit>
 8007fee:	4b20      	ldr	r3, [pc, #128]	; (8008070 <_fclose_r+0x98>)
 8007ff0:	429c      	cmp	r4, r3
 8007ff2:	d101      	bne.n	8007ff8 <_fclose_r+0x20>
 8007ff4:	686c      	ldr	r4, [r5, #4]
 8007ff6:	e008      	b.n	800800a <_fclose_r+0x32>
 8007ff8:	4b1e      	ldr	r3, [pc, #120]	; (8008074 <_fclose_r+0x9c>)
 8007ffa:	429c      	cmp	r4, r3
 8007ffc:	d101      	bne.n	8008002 <_fclose_r+0x2a>
 8007ffe:	68ac      	ldr	r4, [r5, #8]
 8008000:	e003      	b.n	800800a <_fclose_r+0x32>
 8008002:	4b1d      	ldr	r3, [pc, #116]	; (8008078 <_fclose_r+0xa0>)
 8008004:	429c      	cmp	r4, r3
 8008006:	bf08      	it	eq
 8008008:	68ec      	ldreq	r4, [r5, #12]
 800800a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d0e6      	beq.n	8007fe0 <_fclose_r+0x8>
 8008012:	4621      	mov	r1, r4
 8008014:	4628      	mov	r0, r5
 8008016:	f7fe fdcf 	bl	8006bb8 <__sflush_r>
 800801a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800801c:	4606      	mov	r6, r0
 800801e:	b133      	cbz	r3, 800802e <_fclose_r+0x56>
 8008020:	6a21      	ldr	r1, [r4, #32]
 8008022:	4628      	mov	r0, r5
 8008024:	4798      	blx	r3
 8008026:	2800      	cmp	r0, #0
 8008028:	bfb8      	it	lt
 800802a:	f04f 36ff 	movlt.w	r6, #4294967295
 800802e:	89a3      	ldrh	r3, [r4, #12]
 8008030:	061b      	lsls	r3, r3, #24
 8008032:	d503      	bpl.n	800803c <_fclose_r+0x64>
 8008034:	6921      	ldr	r1, [r4, #16]
 8008036:	4628      	mov	r0, r5
 8008038:	f7fe ff80 	bl	8006f3c <_free_r>
 800803c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800803e:	b141      	cbz	r1, 8008052 <_fclose_r+0x7a>
 8008040:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008044:	4299      	cmp	r1, r3
 8008046:	d002      	beq.n	800804e <_fclose_r+0x76>
 8008048:	4628      	mov	r0, r5
 800804a:	f7fe ff77 	bl	8006f3c <_free_r>
 800804e:	2300      	movs	r3, #0
 8008050:	6363      	str	r3, [r4, #52]	; 0x34
 8008052:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008054:	b121      	cbz	r1, 8008060 <_fclose_r+0x88>
 8008056:	4628      	mov	r0, r5
 8008058:	f7fe ff70 	bl	8006f3c <_free_r>
 800805c:	2300      	movs	r3, #0
 800805e:	64a3      	str	r3, [r4, #72]	; 0x48
 8008060:	f7fe ff14 	bl	8006e8c <__sfp_lock_acquire>
 8008064:	2300      	movs	r3, #0
 8008066:	81a3      	strh	r3, [r4, #12]
 8008068:	f7fe ff11 	bl	8006e8e <__sfp_lock_release>
 800806c:	4630      	mov	r0, r6
 800806e:	bd70      	pop	{r4, r5, r6, pc}
 8008070:	08008a68 	.word	0x08008a68
 8008074:	08008a88 	.word	0x08008a88
 8008078:	08008aa8 	.word	0x08008aa8

0800807c <__fputwc>:
 800807c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008080:	4680      	mov	r8, r0
 8008082:	460e      	mov	r6, r1
 8008084:	4614      	mov	r4, r2
 8008086:	f7ff f839 	bl	80070fc <__locale_mb_cur_max>
 800808a:	2801      	cmp	r0, #1
 800808c:	d106      	bne.n	800809c <__fputwc+0x20>
 800808e:	1e73      	subs	r3, r6, #1
 8008090:	2bfe      	cmp	r3, #254	; 0xfe
 8008092:	d803      	bhi.n	800809c <__fputwc+0x20>
 8008094:	f88d 6004 	strb.w	r6, [sp, #4]
 8008098:	4605      	mov	r5, r0
 800809a:	e00e      	b.n	80080ba <__fputwc+0x3e>
 800809c:	4632      	mov	r2, r6
 800809e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 80080a2:	a901      	add	r1, sp, #4
 80080a4:	4640      	mov	r0, r8
 80080a6:	f000 fb8f 	bl	80087c8 <_wcrtomb_r>
 80080aa:	1c42      	adds	r2, r0, #1
 80080ac:	4605      	mov	r5, r0
 80080ae:	d104      	bne.n	80080ba <__fputwc+0x3e>
 80080b0:	89a3      	ldrh	r3, [r4, #12]
 80080b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080b6:	81a3      	strh	r3, [r4, #12]
 80080b8:	e01c      	b.n	80080f4 <__fputwc+0x78>
 80080ba:	2700      	movs	r7, #0
 80080bc:	42af      	cmp	r7, r5
 80080be:	d018      	beq.n	80080f2 <__fputwc+0x76>
 80080c0:	ab01      	add	r3, sp, #4
 80080c2:	5cf9      	ldrb	r1, [r7, r3]
 80080c4:	68a3      	ldr	r3, [r4, #8]
 80080c6:	3b01      	subs	r3, #1
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	60a3      	str	r3, [r4, #8]
 80080cc:	da04      	bge.n	80080d8 <__fputwc+0x5c>
 80080ce:	69a2      	ldr	r2, [r4, #24]
 80080d0:	4293      	cmp	r3, r2
 80080d2:	db06      	blt.n	80080e2 <__fputwc+0x66>
 80080d4:	290a      	cmp	r1, #10
 80080d6:	d004      	beq.n	80080e2 <__fputwc+0x66>
 80080d8:	6823      	ldr	r3, [r4, #0]
 80080da:	1c5a      	adds	r2, r3, #1
 80080dc:	6022      	str	r2, [r4, #0]
 80080de:	7019      	strb	r1, [r3, #0]
 80080e0:	e005      	b.n	80080ee <__fputwc+0x72>
 80080e2:	4622      	mov	r2, r4
 80080e4:	4640      	mov	r0, r8
 80080e6:	f7ff fec9 	bl	8007e7c <__swbuf_r>
 80080ea:	1c43      	adds	r3, r0, #1
 80080ec:	d002      	beq.n	80080f4 <__fputwc+0x78>
 80080ee:	3701      	adds	r7, #1
 80080f0:	e7e4      	b.n	80080bc <__fputwc+0x40>
 80080f2:	4630      	mov	r0, r6
 80080f4:	b002      	add	sp, #8
 80080f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080080fa <_fputwc_r>:
 80080fa:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 80080fe:	b410      	push	{r4}
 8008100:	049c      	lsls	r4, r3, #18
 8008102:	d406      	bmi.n	8008112 <_fputwc_r+0x18>
 8008104:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8008106:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800810a:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 800810e:	8193      	strh	r3, [r2, #12]
 8008110:	6654      	str	r4, [r2, #100]	; 0x64
 8008112:	bc10      	pop	{r4}
 8008114:	f7ff bfb2 	b.w	800807c <__fputwc>

08008118 <_fstat_r>:
 8008118:	b538      	push	{r3, r4, r5, lr}
 800811a:	4c07      	ldr	r4, [pc, #28]	; (8008138 <_fstat_r+0x20>)
 800811c:	2300      	movs	r3, #0
 800811e:	4605      	mov	r5, r0
 8008120:	4608      	mov	r0, r1
 8008122:	4611      	mov	r1, r2
 8008124:	6023      	str	r3, [r4, #0]
 8008126:	f000 fb89 	bl	800883c <_fstat>
 800812a:	1c43      	adds	r3, r0, #1
 800812c:	d102      	bne.n	8008134 <_fstat_r+0x1c>
 800812e:	6823      	ldr	r3, [r4, #0]
 8008130:	b103      	cbz	r3, 8008134 <_fstat_r+0x1c>
 8008132:	602b      	str	r3, [r5, #0]
 8008134:	bd38      	pop	{r3, r4, r5, pc}
 8008136:	bf00      	nop
 8008138:	20001130 	.word	0x20001130

0800813c <__sfvwrite_r>:
 800813c:	6893      	ldr	r3, [r2, #8]
 800813e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008142:	4606      	mov	r6, r0
 8008144:	460c      	mov	r4, r1
 8008146:	4690      	mov	r8, r2
 8008148:	b90b      	cbnz	r3, 800814e <__sfvwrite_r+0x12>
 800814a:	2000      	movs	r0, #0
 800814c:	e13b      	b.n	80083c6 <__sfvwrite_r+0x28a>
 800814e:	898b      	ldrh	r3, [r1, #12]
 8008150:	0718      	lsls	r0, r3, #28
 8008152:	d50f      	bpl.n	8008174 <__sfvwrite_r+0x38>
 8008154:	690b      	ldr	r3, [r1, #16]
 8008156:	b16b      	cbz	r3, 8008174 <__sfvwrite_r+0x38>
 8008158:	f8b4 900c 	ldrh.w	r9, [r4, #12]
 800815c:	f8d8 b000 	ldr.w	fp, [r8]
 8008160:	f009 0502 	and.w	r5, r9, #2
 8008164:	b2ad      	uxth	r5, r5
 8008166:	b355      	cbz	r5, 80081be <__sfvwrite_r+0x82>
 8008168:	f04f 0900 	mov.w	r9, #0
 800816c:	464f      	mov	r7, r9
 800816e:	f8df a25c 	ldr.w	sl, [pc, #604]	; 80083cc <__sfvwrite_r+0x290>
 8008172:	e01b      	b.n	80081ac <__sfvwrite_r+0x70>
 8008174:	4621      	mov	r1, r4
 8008176:	4630      	mov	r0, r6
 8008178:	f7fd fe8a 	bl	8005e90 <__swsetup_r>
 800817c:	2800      	cmp	r0, #0
 800817e:	d0eb      	beq.n	8008158 <__sfvwrite_r+0x1c>
 8008180:	e11f      	b.n	80083c2 <__sfvwrite_r+0x286>
 8008182:	4557      	cmp	r7, sl
 8008184:	463b      	mov	r3, r7
 8008186:	464a      	mov	r2, r9
 8008188:	bf28      	it	cs
 800818a:	4653      	movcs	r3, sl
 800818c:	6a21      	ldr	r1, [r4, #32]
 800818e:	4630      	mov	r0, r6
 8008190:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8008192:	47a8      	blx	r5
 8008194:	2800      	cmp	r0, #0
 8008196:	f340 8110 	ble.w	80083ba <__sfvwrite_r+0x27e>
 800819a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800819e:	4481      	add	r9, r0
 80081a0:	1a3f      	subs	r7, r7, r0
 80081a2:	1a18      	subs	r0, r3, r0
 80081a4:	f8c8 0008 	str.w	r0, [r8, #8]
 80081a8:	2800      	cmp	r0, #0
 80081aa:	d0ce      	beq.n	800814a <__sfvwrite_r+0xe>
 80081ac:	2f00      	cmp	r7, #0
 80081ae:	d1e8      	bne.n	8008182 <__sfvwrite_r+0x46>
 80081b0:	f8db 9000 	ldr.w	r9, [fp]
 80081b4:	f8db 7004 	ldr.w	r7, [fp, #4]
 80081b8:	f10b 0b08 	add.w	fp, fp, #8
 80081bc:	e7f6      	b.n	80081ac <__sfvwrite_r+0x70>
 80081be:	f019 0901 	ands.w	r9, r9, #1
 80081c2:	d003      	beq.n	80081cc <__sfvwrite_r+0x90>
 80081c4:	9500      	str	r5, [sp, #0]
 80081c6:	46a9      	mov	r9, r5
 80081c8:	46aa      	mov	sl, r5
 80081ca:	e0bd      	b.n	8008348 <__sfvwrite_r+0x20c>
 80081cc:	464f      	mov	r7, r9
 80081ce:	b937      	cbnz	r7, 80081de <__sfvwrite_r+0xa2>
 80081d0:	f8db 9000 	ldr.w	r9, [fp]
 80081d4:	f8db 7004 	ldr.w	r7, [fp, #4]
 80081d8:	f10b 0b08 	add.w	fp, fp, #8
 80081dc:	e7f7      	b.n	80081ce <__sfvwrite_r+0x92>
 80081de:	89a2      	ldrh	r2, [r4, #12]
 80081e0:	68a5      	ldr	r5, [r4, #8]
 80081e2:	0591      	lsls	r1, r2, #22
 80081e4:	d552      	bpl.n	800828c <__sfvwrite_r+0x150>
 80081e6:	42af      	cmp	r7, r5
 80081e8:	d342      	bcc.n	8008270 <__sfvwrite_r+0x134>
 80081ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80081ee:	d03d      	beq.n	800826c <__sfvwrite_r+0x130>
 80081f0:	6921      	ldr	r1, [r4, #16]
 80081f2:	6823      	ldr	r3, [r4, #0]
 80081f4:	2002      	movs	r0, #2
 80081f6:	1a5b      	subs	r3, r3, r1
 80081f8:	9300      	str	r3, [sp, #0]
 80081fa:	6963      	ldr	r3, [r4, #20]
 80081fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008200:	fb93 faf0 	sdiv	sl, r3, r0
 8008204:	9b00      	ldr	r3, [sp, #0]
 8008206:	3301      	adds	r3, #1
 8008208:	443b      	add	r3, r7
 800820a:	459a      	cmp	sl, r3
 800820c:	bf38      	it	cc
 800820e:	469a      	movcc	sl, r3
 8008210:	0553      	lsls	r3, r2, #21
 8008212:	d510      	bpl.n	8008236 <__sfvwrite_r+0xfa>
 8008214:	4651      	mov	r1, sl
 8008216:	4630      	mov	r0, r6
 8008218:	f7fe ffea 	bl	80071f0 <_malloc_r>
 800821c:	4605      	mov	r5, r0
 800821e:	b1c0      	cbz	r0, 8008252 <__sfvwrite_r+0x116>
 8008220:	9a00      	ldr	r2, [sp, #0]
 8008222:	6921      	ldr	r1, [r4, #16]
 8008224:	f7ff fa0e 	bl	8007644 <memcpy>
 8008228:	89a3      	ldrh	r3, [r4, #12]
 800822a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800822e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008232:	81a3      	strh	r3, [r4, #12]
 8008234:	e010      	b.n	8008258 <__sfvwrite_r+0x11c>
 8008236:	4652      	mov	r2, sl
 8008238:	4630      	mov	r0, r6
 800823a:	f000 f919 	bl	8008470 <_realloc_r>
 800823e:	4605      	mov	r5, r0
 8008240:	b950      	cbnz	r0, 8008258 <__sfvwrite_r+0x11c>
 8008242:	6921      	ldr	r1, [r4, #16]
 8008244:	4630      	mov	r0, r6
 8008246:	f7fe fe79 	bl	8006f3c <_free_r>
 800824a:	89a3      	ldrh	r3, [r4, #12]
 800824c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008250:	81a3      	strh	r3, [r4, #12]
 8008252:	230c      	movs	r3, #12
 8008254:	6033      	str	r3, [r6, #0]
 8008256:	e0b0      	b.n	80083ba <__sfvwrite_r+0x27e>
 8008258:	9b00      	ldr	r3, [sp, #0]
 800825a:	6125      	str	r5, [r4, #16]
 800825c:	441d      	add	r5, r3
 800825e:	6025      	str	r5, [r4, #0]
 8008260:	463d      	mov	r5, r7
 8008262:	ebc3 030a 	rsb	r3, r3, sl
 8008266:	f8c4 a014 	str.w	sl, [r4, #20]
 800826a:	60a3      	str	r3, [r4, #8]
 800826c:	42af      	cmp	r7, r5
 800826e:	d200      	bcs.n	8008272 <__sfvwrite_r+0x136>
 8008270:	463d      	mov	r5, r7
 8008272:	462a      	mov	r2, r5
 8008274:	4649      	mov	r1, r9
 8008276:	6820      	ldr	r0, [r4, #0]
 8008278:	f000 f8cc 	bl	8008414 <memmove>
 800827c:	68a3      	ldr	r3, [r4, #8]
 800827e:	1b5b      	subs	r3, r3, r5
 8008280:	60a3      	str	r3, [r4, #8]
 8008282:	6823      	ldr	r3, [r4, #0]
 8008284:	441d      	add	r5, r3
 8008286:	6025      	str	r5, [r4, #0]
 8008288:	463d      	mov	r5, r7
 800828a:	e029      	b.n	80082e0 <__sfvwrite_r+0x1a4>
 800828c:	6820      	ldr	r0, [r4, #0]
 800828e:	6923      	ldr	r3, [r4, #16]
 8008290:	4298      	cmp	r0, r3
 8008292:	d802      	bhi.n	800829a <__sfvwrite_r+0x15e>
 8008294:	6962      	ldr	r2, [r4, #20]
 8008296:	4297      	cmp	r7, r2
 8008298:	d213      	bcs.n	80082c2 <__sfvwrite_r+0x186>
 800829a:	42bd      	cmp	r5, r7
 800829c:	bf28      	it	cs
 800829e:	463d      	movcs	r5, r7
 80082a0:	4649      	mov	r1, r9
 80082a2:	462a      	mov	r2, r5
 80082a4:	f000 f8b6 	bl	8008414 <memmove>
 80082a8:	68a3      	ldr	r3, [r4, #8]
 80082aa:	6822      	ldr	r2, [r4, #0]
 80082ac:	1b5b      	subs	r3, r3, r5
 80082ae:	442a      	add	r2, r5
 80082b0:	60a3      	str	r3, [r4, #8]
 80082b2:	6022      	str	r2, [r4, #0]
 80082b4:	b9a3      	cbnz	r3, 80082e0 <__sfvwrite_r+0x1a4>
 80082b6:	4621      	mov	r1, r4
 80082b8:	4630      	mov	r0, r6
 80082ba:	f7fe fd0d 	bl	8006cd8 <_fflush_r>
 80082be:	b178      	cbz	r0, 80082e0 <__sfvwrite_r+0x1a4>
 80082c0:	e07b      	b.n	80083ba <__sfvwrite_r+0x27e>
 80082c2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80082c6:	42bb      	cmp	r3, r7
 80082c8:	bf28      	it	cs
 80082ca:	463b      	movcs	r3, r7
 80082cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80082d0:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80082d2:	4353      	muls	r3, r2
 80082d4:	6a21      	ldr	r1, [r4, #32]
 80082d6:	464a      	mov	r2, r9
 80082d8:	4630      	mov	r0, r6
 80082da:	47a8      	blx	r5
 80082dc:	1e05      	subs	r5, r0, #0
 80082de:	dd6c      	ble.n	80083ba <__sfvwrite_r+0x27e>
 80082e0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80082e4:	44a9      	add	r9, r5
 80082e6:	1b7f      	subs	r7, r7, r5
 80082e8:	1b5d      	subs	r5, r3, r5
 80082ea:	f8c8 5008 	str.w	r5, [r8, #8]
 80082ee:	2d00      	cmp	r5, #0
 80082f0:	f47f af6d 	bne.w	80081ce <__sfvwrite_r+0x92>
 80082f4:	e729      	b.n	800814a <__sfvwrite_r+0xe>
 80082f6:	9b00      	ldr	r3, [sp, #0]
 80082f8:	b383      	cbz	r3, 800835c <__sfvwrite_r+0x220>
 80082fa:	6820      	ldr	r0, [r4, #0]
 80082fc:	6921      	ldr	r1, [r4, #16]
 80082fe:	4555      	cmp	r5, sl
 8008300:	462b      	mov	r3, r5
 8008302:	bf28      	it	cs
 8008304:	4653      	movcs	r3, sl
 8008306:	4288      	cmp	r0, r1
 8008308:	6962      	ldr	r2, [r4, #20]
 800830a:	d936      	bls.n	800837a <__sfvwrite_r+0x23e>
 800830c:	68a7      	ldr	r7, [r4, #8]
 800830e:	4417      	add	r7, r2
 8008310:	42bb      	cmp	r3, r7
 8008312:	dd32      	ble.n	800837a <__sfvwrite_r+0x23e>
 8008314:	4649      	mov	r1, r9
 8008316:	463a      	mov	r2, r7
 8008318:	f000 f87c 	bl	8008414 <memmove>
 800831c:	6823      	ldr	r3, [r4, #0]
 800831e:	4621      	mov	r1, r4
 8008320:	443b      	add	r3, r7
 8008322:	6023      	str	r3, [r4, #0]
 8008324:	4630      	mov	r0, r6
 8008326:	f7fe fcd7 	bl	8006cd8 <_fflush_r>
 800832a:	2800      	cmp	r0, #0
 800832c:	d145      	bne.n	80083ba <__sfvwrite_r+0x27e>
 800832e:	1bed      	subs	r5, r5, r7
 8008330:	d03c      	beq.n	80083ac <__sfvwrite_r+0x270>
 8008332:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008336:	44b9      	add	r9, r7
 8008338:	ebc7 0a0a 	rsb	sl, r7, sl
 800833c:	1bdf      	subs	r7, r3, r7
 800833e:	f8c8 7008 	str.w	r7, [r8, #8]
 8008342:	2f00      	cmp	r7, #0
 8008344:	f43f af01 	beq.w	800814a <__sfvwrite_r+0xe>
 8008348:	f1ba 0f00 	cmp.w	sl, #0
 800834c:	d1d3      	bne.n	80082f6 <__sfvwrite_r+0x1ba>
 800834e:	e89b 0600 	ldmia.w	fp, {r9, sl}
 8008352:	2300      	movs	r3, #0
 8008354:	f10b 0b08 	add.w	fp, fp, #8
 8008358:	9300      	str	r3, [sp, #0]
 800835a:	e7f5      	b.n	8008348 <__sfvwrite_r+0x20c>
 800835c:	4652      	mov	r2, sl
 800835e:	210a      	movs	r1, #10
 8008360:	4648      	mov	r0, r9
 8008362:	f7ff f961 	bl	8007628 <memchr>
 8008366:	b118      	cbz	r0, 8008370 <__sfvwrite_r+0x234>
 8008368:	3001      	adds	r0, #1
 800836a:	ebc9 0500 	rsb	r5, r9, r0
 800836e:	e001      	b.n	8008374 <__sfvwrite_r+0x238>
 8008370:	f10a 0501 	add.w	r5, sl, #1
 8008374:	2301      	movs	r3, #1
 8008376:	9300      	str	r3, [sp, #0]
 8008378:	e7bf      	b.n	80082fa <__sfvwrite_r+0x1be>
 800837a:	4293      	cmp	r3, r2
 800837c:	db08      	blt.n	8008390 <__sfvwrite_r+0x254>
 800837e:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8008380:	4613      	mov	r3, r2
 8008382:	6a21      	ldr	r1, [r4, #32]
 8008384:	464a      	mov	r2, r9
 8008386:	4630      	mov	r0, r6
 8008388:	47b8      	blx	r7
 800838a:	1e07      	subs	r7, r0, #0
 800838c:	dccf      	bgt.n	800832e <__sfvwrite_r+0x1f2>
 800838e:	e014      	b.n	80083ba <__sfvwrite_r+0x27e>
 8008390:	461a      	mov	r2, r3
 8008392:	4649      	mov	r1, r9
 8008394:	9301      	str	r3, [sp, #4]
 8008396:	f000 f83d 	bl	8008414 <memmove>
 800839a:	9b01      	ldr	r3, [sp, #4]
 800839c:	68a2      	ldr	r2, [r4, #8]
 800839e:	461f      	mov	r7, r3
 80083a0:	1ad2      	subs	r2, r2, r3
 80083a2:	60a2      	str	r2, [r4, #8]
 80083a4:	6822      	ldr	r2, [r4, #0]
 80083a6:	441a      	add	r2, r3
 80083a8:	6022      	str	r2, [r4, #0]
 80083aa:	e7c0      	b.n	800832e <__sfvwrite_r+0x1f2>
 80083ac:	4621      	mov	r1, r4
 80083ae:	4630      	mov	r0, r6
 80083b0:	f7fe fc92 	bl	8006cd8 <_fflush_r>
 80083b4:	b908      	cbnz	r0, 80083ba <__sfvwrite_r+0x27e>
 80083b6:	9500      	str	r5, [sp, #0]
 80083b8:	e7bb      	b.n	8008332 <__sfvwrite_r+0x1f6>
 80083ba:	89a3      	ldrh	r3, [r4, #12]
 80083bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083c0:	81a3      	strh	r3, [r4, #12]
 80083c2:	f04f 30ff 	mov.w	r0, #4294967295
 80083c6:	b003      	add	sp, #12
 80083c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083cc:	7ffffc00 	.word	0x7ffffc00

080083d0 <_isatty_r>:
 80083d0:	b538      	push	{r3, r4, r5, lr}
 80083d2:	4c06      	ldr	r4, [pc, #24]	; (80083ec <_isatty_r+0x1c>)
 80083d4:	2300      	movs	r3, #0
 80083d6:	4605      	mov	r5, r0
 80083d8:	4608      	mov	r0, r1
 80083da:	6023      	str	r3, [r4, #0]
 80083dc:	f000 fa36 	bl	800884c <_isatty>
 80083e0:	1c43      	adds	r3, r0, #1
 80083e2:	d102      	bne.n	80083ea <_isatty_r+0x1a>
 80083e4:	6823      	ldr	r3, [r4, #0]
 80083e6:	b103      	cbz	r3, 80083ea <_isatty_r+0x1a>
 80083e8:	602b      	str	r3, [r5, #0]
 80083ea:	bd38      	pop	{r3, r4, r5, pc}
 80083ec:	20001130 	.word	0x20001130

080083f0 <_lseek_r>:
 80083f0:	b538      	push	{r3, r4, r5, lr}
 80083f2:	4c07      	ldr	r4, [pc, #28]	; (8008410 <_lseek_r+0x20>)
 80083f4:	4605      	mov	r5, r0
 80083f6:	4608      	mov	r0, r1
 80083f8:	4611      	mov	r1, r2
 80083fa:	2200      	movs	r2, #0
 80083fc:	6022      	str	r2, [r4, #0]
 80083fe:	461a      	mov	r2, r3
 8008400:	f000 fa2c 	bl	800885c <_lseek>
 8008404:	1c43      	adds	r3, r0, #1
 8008406:	d102      	bne.n	800840e <_lseek_r+0x1e>
 8008408:	6823      	ldr	r3, [r4, #0]
 800840a:	b103      	cbz	r3, 800840e <_lseek_r+0x1e>
 800840c:	602b      	str	r3, [r5, #0]
 800840e:	bd38      	pop	{r3, r4, r5, pc}
 8008410:	20001130 	.word	0x20001130

08008414 <memmove>:
 8008414:	4288      	cmp	r0, r1
 8008416:	b510      	push	{r4, lr}
 8008418:	eb01 0302 	add.w	r3, r1, r2
 800841c:	d801      	bhi.n	8008422 <memmove+0xe>
 800841e:	1e42      	subs	r2, r0, #1
 8008420:	e00b      	b.n	800843a <memmove+0x26>
 8008422:	4298      	cmp	r0, r3
 8008424:	d2fb      	bcs.n	800841e <memmove+0xa>
 8008426:	1881      	adds	r1, r0, r2
 8008428:	1ad2      	subs	r2, r2, r3
 800842a:	42d3      	cmn	r3, r2
 800842c:	d004      	beq.n	8008438 <memmove+0x24>
 800842e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008432:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008436:	e7f8      	b.n	800842a <memmove+0x16>
 8008438:	bd10      	pop	{r4, pc}
 800843a:	4299      	cmp	r1, r3
 800843c:	d004      	beq.n	8008448 <memmove+0x34>
 800843e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008442:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008446:	e7f8      	b.n	800843a <memmove+0x26>
 8008448:	bd10      	pop	{r4, pc}
	...

0800844c <_read_r>:
 800844c:	b538      	push	{r3, r4, r5, lr}
 800844e:	4c07      	ldr	r4, [pc, #28]	; (800846c <_read_r+0x20>)
 8008450:	4605      	mov	r5, r0
 8008452:	4608      	mov	r0, r1
 8008454:	4611      	mov	r1, r2
 8008456:	2200      	movs	r2, #0
 8008458:	6022      	str	r2, [r4, #0]
 800845a:	461a      	mov	r2, r3
 800845c:	f000 fa06 	bl	800886c <_read>
 8008460:	1c43      	adds	r3, r0, #1
 8008462:	d102      	bne.n	800846a <_read_r+0x1e>
 8008464:	6823      	ldr	r3, [r4, #0]
 8008466:	b103      	cbz	r3, 800846a <_read_r+0x1e>
 8008468:	602b      	str	r3, [r5, #0]
 800846a:	bd38      	pop	{r3, r4, r5, pc}
 800846c:	20001130 	.word	0x20001130

08008470 <_realloc_r>:
 8008470:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008474:	4681      	mov	r9, r0
 8008476:	460c      	mov	r4, r1
 8008478:	b929      	cbnz	r1, 8008486 <_realloc_r+0x16>
 800847a:	4611      	mov	r1, r2
 800847c:	b003      	add	sp, #12
 800847e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008482:	f7fe beb5 	b.w	80071f0 <_malloc_r>
 8008486:	9201      	str	r2, [sp, #4]
 8008488:	f7ff f8e7 	bl	800765a <__malloc_lock>
 800848c:	9a01      	ldr	r2, [sp, #4]
 800848e:	f854 ec04 	ldr.w	lr, [r4, #-4]
 8008492:	f102 080b 	add.w	r8, r2, #11
 8008496:	f1b8 0f16 	cmp.w	r8, #22
 800849a:	f1a4 0b08 	sub.w	fp, r4, #8
 800849e:	f02e 0503 	bic.w	r5, lr, #3
 80084a2:	d903      	bls.n	80084ac <_realloc_r+0x3c>
 80084a4:	f038 0807 	bics.w	r8, r8, #7
 80084a8:	d502      	bpl.n	80084b0 <_realloc_r+0x40>
 80084aa:	e003      	b.n	80084b4 <_realloc_r+0x44>
 80084ac:	f04f 0810 	mov.w	r8, #16
 80084b0:	4590      	cmp	r8, r2
 80084b2:	d204      	bcs.n	80084be <_realloc_r+0x4e>
 80084b4:	230c      	movs	r3, #12
 80084b6:	f8c9 3000 	str.w	r3, [r9]
 80084ba:	2000      	movs	r0, #0
 80084bc:	e181      	b.n	80087c2 <_realloc_r+0x352>
 80084be:	45a8      	cmp	r8, r5
 80084c0:	f340 8154 	ble.w	800876c <_realloc_r+0x2fc>
 80084c4:	4ba8      	ldr	r3, [pc, #672]	; (8008768 <_realloc_r+0x2f8>)
 80084c6:	eb0b 0105 	add.w	r1, fp, r5
 80084ca:	6898      	ldr	r0, [r3, #8]
 80084cc:	684f      	ldr	r7, [r1, #4]
 80084ce:	4281      	cmp	r1, r0
 80084d0:	d005      	beq.n	80084de <_realloc_r+0x6e>
 80084d2:	f027 0601 	bic.w	r6, r7, #1
 80084d6:	440e      	add	r6, r1
 80084d8:	6876      	ldr	r6, [r6, #4]
 80084da:	07f6      	lsls	r6, r6, #31
 80084dc:	d426      	bmi.n	800852c <_realloc_r+0xbc>
 80084de:	f027 0a03 	bic.w	sl, r7, #3
 80084e2:	4281      	cmp	r1, r0
 80084e4:	eb05 070a 	add.w	r7, r5, sl
 80084e8:	d118      	bne.n	800851c <_realloc_r+0xac>
 80084ea:	f108 0610 	add.w	r6, r8, #16
 80084ee:	42b7      	cmp	r7, r6
 80084f0:	db1f      	blt.n	8008532 <_realloc_r+0xc2>
 80084f2:	ebc8 0707 	rsb	r7, r8, r7
 80084f6:	eb0b 0008 	add.w	r0, fp, r8
 80084fa:	f047 0701 	orr.w	r7, r7, #1
 80084fe:	6098      	str	r0, [r3, #8]
 8008500:	6047      	str	r7, [r0, #4]
 8008502:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8008506:	4648      	mov	r0, r9
 8008508:	f003 0301 	and.w	r3, r3, #1
 800850c:	ea43 0308 	orr.w	r3, r3, r8
 8008510:	f844 3c04 	str.w	r3, [r4, #-4]
 8008514:	f7ff f8a2 	bl	800765c <__malloc_unlock>
 8008518:	4620      	mov	r0, r4
 800851a:	e152      	b.n	80087c2 <_realloc_r+0x352>
 800851c:	45b8      	cmp	r8, r7
 800851e:	dc08      	bgt.n	8008532 <_realloc_r+0xc2>
 8008520:	68cb      	ldr	r3, [r1, #12]
 8008522:	688a      	ldr	r2, [r1, #8]
 8008524:	463d      	mov	r5, r7
 8008526:	60d3      	str	r3, [r2, #12]
 8008528:	609a      	str	r2, [r3, #8]
 800852a:	e11f      	b.n	800876c <_realloc_r+0x2fc>
 800852c:	f04f 0a00 	mov.w	sl, #0
 8008530:	4651      	mov	r1, sl
 8008532:	f01e 0f01 	tst.w	lr, #1
 8008536:	f040 80c6 	bne.w	80086c6 <_realloc_r+0x256>
 800853a:	f854 7c08 	ldr.w	r7, [r4, #-8]
 800853e:	ebc7 070b 	rsb	r7, r7, fp
 8008542:	687e      	ldr	r6, [r7, #4]
 8008544:	f026 0603 	bic.w	r6, r6, #3
 8008548:	442e      	add	r6, r5
 800854a:	2900      	cmp	r1, #0
 800854c:	f000 8085 	beq.w	800865a <_realloc_r+0x1ea>
 8008550:	4281      	cmp	r1, r0
 8008552:	44b2      	add	sl, r6
 8008554:	d148      	bne.n	80085e8 <_realloc_r+0x178>
 8008556:	f108 0110 	add.w	r1, r8, #16
 800855a:	458a      	cmp	sl, r1
 800855c:	db7d      	blt.n	800865a <_realloc_r+0x1ea>
 800855e:	463e      	mov	r6, r7
 8008560:	68fa      	ldr	r2, [r7, #12]
 8008562:	f856 1f08 	ldr.w	r1, [r6, #8]!
 8008566:	60ca      	str	r2, [r1, #12]
 8008568:	6091      	str	r1, [r2, #8]
 800856a:	1f2a      	subs	r2, r5, #4
 800856c:	2a24      	cmp	r2, #36	; 0x24
 800856e:	d826      	bhi.n	80085be <_realloc_r+0x14e>
 8008570:	2a13      	cmp	r2, #19
 8008572:	d91c      	bls.n	80085ae <_realloc_r+0x13e>
 8008574:	6821      	ldr	r1, [r4, #0]
 8008576:	2a1b      	cmp	r2, #27
 8008578:	60b9      	str	r1, [r7, #8]
 800857a:	6861      	ldr	r1, [r4, #4]
 800857c:	60f9      	str	r1, [r7, #12]
 800857e:	d803      	bhi.n	8008588 <_realloc_r+0x118>
 8008580:	f107 0210 	add.w	r2, r7, #16
 8008584:	3408      	adds	r4, #8
 8008586:	e013      	b.n	80085b0 <_realloc_r+0x140>
 8008588:	68a1      	ldr	r1, [r4, #8]
 800858a:	2a24      	cmp	r2, #36	; 0x24
 800858c:	6139      	str	r1, [r7, #16]
 800858e:	68e1      	ldr	r1, [r4, #12]
 8008590:	bf18      	it	ne
 8008592:	f107 0218 	addne.w	r2, r7, #24
 8008596:	6179      	str	r1, [r7, #20]
 8008598:	bf09      	itett	eq
 800859a:	6922      	ldreq	r2, [r4, #16]
 800859c:	3410      	addne	r4, #16
 800859e:	61ba      	streq	r2, [r7, #24]
 80085a0:	6961      	ldreq	r1, [r4, #20]
 80085a2:	bf02      	ittt	eq
 80085a4:	f107 0220 	addeq.w	r2, r7, #32
 80085a8:	61f9      	streq	r1, [r7, #28]
 80085aa:	3418      	addeq	r4, #24
 80085ac:	e000      	b.n	80085b0 <_realloc_r+0x140>
 80085ae:	4632      	mov	r2, r6
 80085b0:	6821      	ldr	r1, [r4, #0]
 80085b2:	6011      	str	r1, [r2, #0]
 80085b4:	6861      	ldr	r1, [r4, #4]
 80085b6:	6051      	str	r1, [r2, #4]
 80085b8:	68a1      	ldr	r1, [r4, #8]
 80085ba:	6091      	str	r1, [r2, #8]
 80085bc:	e005      	b.n	80085ca <_realloc_r+0x15a>
 80085be:	4621      	mov	r1, r4
 80085c0:	4630      	mov	r0, r6
 80085c2:	9301      	str	r3, [sp, #4]
 80085c4:	f7ff ff26 	bl	8008414 <memmove>
 80085c8:	9b01      	ldr	r3, [sp, #4]
 80085ca:	eb07 0208 	add.w	r2, r7, r8
 80085ce:	ebc8 0a0a 	rsb	sl, r8, sl
 80085d2:	609a      	str	r2, [r3, #8]
 80085d4:	f04a 0301 	orr.w	r3, sl, #1
 80085d8:	6053      	str	r3, [r2, #4]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f003 0301 	and.w	r3, r3, #1
 80085e0:	ea43 0308 	orr.w	r3, r3, r8
 80085e4:	607b      	str	r3, [r7, #4]
 80085e6:	e0b9      	b.n	800875c <_realloc_r+0x2ec>
 80085e8:	45d0      	cmp	r8, sl
 80085ea:	dc36      	bgt.n	800865a <_realloc_r+0x1ea>
 80085ec:	4638      	mov	r0, r7
 80085ee:	68cb      	ldr	r3, [r1, #12]
 80085f0:	688a      	ldr	r2, [r1, #8]
 80085f2:	60d3      	str	r3, [r2, #12]
 80085f4:	609a      	str	r2, [r3, #8]
 80085f6:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	60d3      	str	r3, [r2, #12]
 80085fe:	609a      	str	r2, [r3, #8]
 8008600:	1f2a      	subs	r2, r5, #4
 8008602:	2a24      	cmp	r2, #36	; 0x24
 8008604:	d824      	bhi.n	8008650 <_realloc_r+0x1e0>
 8008606:	2a13      	cmp	r2, #19
 8008608:	d91b      	bls.n	8008642 <_realloc_r+0x1d2>
 800860a:	6823      	ldr	r3, [r4, #0]
 800860c:	2a1b      	cmp	r2, #27
 800860e:	60bb      	str	r3, [r7, #8]
 8008610:	6863      	ldr	r3, [r4, #4]
 8008612:	60fb      	str	r3, [r7, #12]
 8008614:	d803      	bhi.n	800861e <_realloc_r+0x1ae>
 8008616:	f107 0010 	add.w	r0, r7, #16
 800861a:	3408      	adds	r4, #8
 800861c:	e011      	b.n	8008642 <_realloc_r+0x1d2>
 800861e:	68a3      	ldr	r3, [r4, #8]
 8008620:	2a24      	cmp	r2, #36	; 0x24
 8008622:	613b      	str	r3, [r7, #16]
 8008624:	68e3      	ldr	r3, [r4, #12]
 8008626:	bf18      	it	ne
 8008628:	f107 0018 	addne.w	r0, r7, #24
 800862c:	617b      	str	r3, [r7, #20]
 800862e:	bf09      	itett	eq
 8008630:	6923      	ldreq	r3, [r4, #16]
 8008632:	3410      	addne	r4, #16
 8008634:	61bb      	streq	r3, [r7, #24]
 8008636:	6963      	ldreq	r3, [r4, #20]
 8008638:	bf02      	ittt	eq
 800863a:	f107 0020 	addeq.w	r0, r7, #32
 800863e:	61fb      	streq	r3, [r7, #28]
 8008640:	3418      	addeq	r4, #24
 8008642:	6823      	ldr	r3, [r4, #0]
 8008644:	6003      	str	r3, [r0, #0]
 8008646:	6863      	ldr	r3, [r4, #4]
 8008648:	6043      	str	r3, [r0, #4]
 800864a:	68a3      	ldr	r3, [r4, #8]
 800864c:	6083      	str	r3, [r0, #8]
 800864e:	e002      	b.n	8008656 <_realloc_r+0x1e6>
 8008650:	4621      	mov	r1, r4
 8008652:	f7ff fedf 	bl	8008414 <memmove>
 8008656:	4655      	mov	r5, sl
 8008658:	e02f      	b.n	80086ba <_realloc_r+0x24a>
 800865a:	45b0      	cmp	r8, r6
 800865c:	dc33      	bgt.n	80086c6 <_realloc_r+0x256>
 800865e:	4638      	mov	r0, r7
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8008666:	60d3      	str	r3, [r2, #12]
 8008668:	609a      	str	r2, [r3, #8]
 800866a:	1f2a      	subs	r2, r5, #4
 800866c:	2a24      	cmp	r2, #36	; 0x24
 800866e:	d826      	bhi.n	80086be <_realloc_r+0x24e>
 8008670:	2a13      	cmp	r2, #19
 8008672:	d91b      	bls.n	80086ac <_realloc_r+0x23c>
 8008674:	6823      	ldr	r3, [r4, #0]
 8008676:	2a1b      	cmp	r2, #27
 8008678:	60bb      	str	r3, [r7, #8]
 800867a:	6863      	ldr	r3, [r4, #4]
 800867c:	60fb      	str	r3, [r7, #12]
 800867e:	d803      	bhi.n	8008688 <_realloc_r+0x218>
 8008680:	f107 0010 	add.w	r0, r7, #16
 8008684:	3408      	adds	r4, #8
 8008686:	e011      	b.n	80086ac <_realloc_r+0x23c>
 8008688:	68a3      	ldr	r3, [r4, #8]
 800868a:	2a24      	cmp	r2, #36	; 0x24
 800868c:	613b      	str	r3, [r7, #16]
 800868e:	68e3      	ldr	r3, [r4, #12]
 8008690:	bf18      	it	ne
 8008692:	f107 0018 	addne.w	r0, r7, #24
 8008696:	617b      	str	r3, [r7, #20]
 8008698:	bf09      	itett	eq
 800869a:	6923      	ldreq	r3, [r4, #16]
 800869c:	3410      	addne	r4, #16
 800869e:	61bb      	streq	r3, [r7, #24]
 80086a0:	6963      	ldreq	r3, [r4, #20]
 80086a2:	bf02      	ittt	eq
 80086a4:	f107 0020 	addeq.w	r0, r7, #32
 80086a8:	61fb      	streq	r3, [r7, #28]
 80086aa:	3418      	addeq	r4, #24
 80086ac:	6823      	ldr	r3, [r4, #0]
 80086ae:	6003      	str	r3, [r0, #0]
 80086b0:	6863      	ldr	r3, [r4, #4]
 80086b2:	6043      	str	r3, [r0, #4]
 80086b4:	68a3      	ldr	r3, [r4, #8]
 80086b6:	6083      	str	r3, [r0, #8]
 80086b8:	4635      	mov	r5, r6
 80086ba:	46bb      	mov	fp, r7
 80086bc:	e056      	b.n	800876c <_realloc_r+0x2fc>
 80086be:	4621      	mov	r1, r4
 80086c0:	f7ff fea8 	bl	8008414 <memmove>
 80086c4:	e7f8      	b.n	80086b8 <_realloc_r+0x248>
 80086c6:	4611      	mov	r1, r2
 80086c8:	4648      	mov	r0, r9
 80086ca:	f7fe fd91 	bl	80071f0 <_malloc_r>
 80086ce:	4606      	mov	r6, r0
 80086d0:	2800      	cmp	r0, #0
 80086d2:	d043      	beq.n	800875c <_realloc_r+0x2ec>
 80086d4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80086d8:	f1a0 0208 	sub.w	r2, r0, #8
 80086dc:	f023 0301 	bic.w	r3, r3, #1
 80086e0:	445b      	add	r3, fp
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d105      	bne.n	80086f2 <_realloc_r+0x282>
 80086e6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80086ea:	f023 0303 	bic.w	r3, r3, #3
 80086ee:	441d      	add	r5, r3
 80086f0:	e03c      	b.n	800876c <_realloc_r+0x2fc>
 80086f2:	1f2a      	subs	r2, r5, #4
 80086f4:	2a24      	cmp	r2, #36	; 0x24
 80086f6:	d82a      	bhi.n	800874e <_realloc_r+0x2de>
 80086f8:	2a13      	cmp	r2, #19
 80086fa:	d91f      	bls.n	800873c <_realloc_r+0x2cc>
 80086fc:	6823      	ldr	r3, [r4, #0]
 80086fe:	2a1b      	cmp	r2, #27
 8008700:	6003      	str	r3, [r0, #0]
 8008702:	6863      	ldr	r3, [r4, #4]
 8008704:	6043      	str	r3, [r0, #4]
 8008706:	d804      	bhi.n	8008712 <_realloc_r+0x2a2>
 8008708:	f100 0308 	add.w	r3, r0, #8
 800870c:	f104 0208 	add.w	r2, r4, #8
 8008710:	e016      	b.n	8008740 <_realloc_r+0x2d0>
 8008712:	68a3      	ldr	r3, [r4, #8]
 8008714:	2a24      	cmp	r2, #36	; 0x24
 8008716:	6083      	str	r3, [r0, #8]
 8008718:	68e3      	ldr	r3, [r4, #12]
 800871a:	bf18      	it	ne
 800871c:	f104 0210 	addne.w	r2, r4, #16
 8008720:	60c3      	str	r3, [r0, #12]
 8008722:	bf09      	itett	eq
 8008724:	6923      	ldreq	r3, [r4, #16]
 8008726:	f100 0310 	addne.w	r3, r0, #16
 800872a:	6103      	streq	r3, [r0, #16]
 800872c:	6961      	ldreq	r1, [r4, #20]
 800872e:	bf02      	ittt	eq
 8008730:	f100 0318 	addeq.w	r3, r0, #24
 8008734:	f104 0218 	addeq.w	r2, r4, #24
 8008738:	6141      	streq	r1, [r0, #20]
 800873a:	e001      	b.n	8008740 <_realloc_r+0x2d0>
 800873c:	4603      	mov	r3, r0
 800873e:	4622      	mov	r2, r4
 8008740:	6811      	ldr	r1, [r2, #0]
 8008742:	6019      	str	r1, [r3, #0]
 8008744:	6851      	ldr	r1, [r2, #4]
 8008746:	6059      	str	r1, [r3, #4]
 8008748:	6892      	ldr	r2, [r2, #8]
 800874a:	609a      	str	r2, [r3, #8]
 800874c:	e002      	b.n	8008754 <_realloc_r+0x2e4>
 800874e:	4621      	mov	r1, r4
 8008750:	f7ff fe60 	bl	8008414 <memmove>
 8008754:	4621      	mov	r1, r4
 8008756:	4648      	mov	r0, r9
 8008758:	f7fe fbf0 	bl	8006f3c <_free_r>
 800875c:	4648      	mov	r0, r9
 800875e:	f7fe ff7d 	bl	800765c <__malloc_unlock>
 8008762:	4630      	mov	r0, r6
 8008764:	e02d      	b.n	80087c2 <_realloc_r+0x352>
 8008766:	bf00      	nop
 8008768:	200002b4 	.word	0x200002b4
 800876c:	ebc8 0205 	rsb	r2, r8, r5
 8008770:	2a0f      	cmp	r2, #15
 8008772:	f8db 3004 	ldr.w	r3, [fp, #4]
 8008776:	d914      	bls.n	80087a2 <_realloc_r+0x332>
 8008778:	f003 0301 	and.w	r3, r3, #1
 800877c:	ea43 0308 	orr.w	r3, r3, r8
 8008780:	f8cb 3004 	str.w	r3, [fp, #4]
 8008784:	eb0b 0108 	add.w	r1, fp, r8
 8008788:	f042 0301 	orr.w	r3, r2, #1
 800878c:	604b      	str	r3, [r1, #4]
 800878e:	440a      	add	r2, r1
 8008790:	6853      	ldr	r3, [r2, #4]
 8008792:	3108      	adds	r1, #8
 8008794:	f043 0301 	orr.w	r3, r3, #1
 8008798:	6053      	str	r3, [r2, #4]
 800879a:	4648      	mov	r0, r9
 800879c:	f7fe fbce 	bl	8006f3c <_free_r>
 80087a0:	e00a      	b.n	80087b8 <_realloc_r+0x348>
 80087a2:	f003 0301 	and.w	r3, r3, #1
 80087a6:	432b      	orrs	r3, r5
 80087a8:	f8cb 3004 	str.w	r3, [fp, #4]
 80087ac:	eb0b 0205 	add.w	r2, fp, r5
 80087b0:	6853      	ldr	r3, [r2, #4]
 80087b2:	f043 0301 	orr.w	r3, r3, #1
 80087b6:	6053      	str	r3, [r2, #4]
 80087b8:	4648      	mov	r0, r9
 80087ba:	f7fe ff4f 	bl	800765c <__malloc_unlock>
 80087be:	f10b 0008 	add.w	r0, fp, #8
 80087c2:	b003      	add	sp, #12
 80087c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080087c8 <_wcrtomb_r>:
 80087c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087cc:	461d      	mov	r5, r3
 80087ce:	4b0f      	ldr	r3, [pc, #60]	; (800880c <_wcrtomb_r+0x44>)
 80087d0:	b086      	sub	sp, #24
 80087d2:	4604      	mov	r4, r0
 80087d4:	4690      	mov	r8, r2
 80087d6:	460e      	mov	r6, r1
 80087d8:	681f      	ldr	r7, [r3, #0]
 80087da:	b931      	cbnz	r1, 80087ea <_wcrtomb_r+0x22>
 80087dc:	f7fe fc8a 	bl	80070f4 <__locale_charset>
 80087e0:	9500      	str	r5, [sp, #0]
 80087e2:	4603      	mov	r3, r0
 80087e4:	4632      	mov	r2, r6
 80087e6:	a903      	add	r1, sp, #12
 80087e8:	e005      	b.n	80087f6 <_wcrtomb_r+0x2e>
 80087ea:	f7fe fc83 	bl	80070f4 <__locale_charset>
 80087ee:	4642      	mov	r2, r8
 80087f0:	4603      	mov	r3, r0
 80087f2:	4631      	mov	r1, r6
 80087f4:	9500      	str	r5, [sp, #0]
 80087f6:	4620      	mov	r0, r4
 80087f8:	47b8      	blx	r7
 80087fa:	1c43      	adds	r3, r0, #1
 80087fc:	bf01      	itttt	eq
 80087fe:	2300      	moveq	r3, #0
 8008800:	602b      	streq	r3, [r5, #0]
 8008802:	238a      	moveq	r3, #138	; 0x8a
 8008804:	6023      	streq	r3, [r4, #0]
 8008806:	b006      	add	sp, #24
 8008808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800880c:	200006c4 	.word	0x200006c4

08008810 <__ascii_wctomb>:
 8008810:	b149      	cbz	r1, 8008826 <__ascii_wctomb+0x16>
 8008812:	2aff      	cmp	r2, #255	; 0xff
 8008814:	bf85      	ittet	hi
 8008816:	238a      	movhi	r3, #138	; 0x8a
 8008818:	6003      	strhi	r3, [r0, #0]
 800881a:	700a      	strbls	r2, [r1, #0]
 800881c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008820:	bf98      	it	ls
 8008822:	2001      	movls	r0, #1
 8008824:	4770      	bx	lr
 8008826:	4608      	mov	r0, r1
 8008828:	4770      	bx	lr
	...

0800882c <_close>:
 800882c:	4b02      	ldr	r3, [pc, #8]	; (8008838 <_close+0xc>)
 800882e:	2258      	movs	r2, #88	; 0x58
 8008830:	601a      	str	r2, [r3, #0]
 8008832:	f04f 30ff 	mov.w	r0, #4294967295
 8008836:	4770      	bx	lr
 8008838:	20001130 	.word	0x20001130

0800883c <_fstat>:
 800883c:	4b02      	ldr	r3, [pc, #8]	; (8008848 <_fstat+0xc>)
 800883e:	2258      	movs	r2, #88	; 0x58
 8008840:	601a      	str	r2, [r3, #0]
 8008842:	f04f 30ff 	mov.w	r0, #4294967295
 8008846:	4770      	bx	lr
 8008848:	20001130 	.word	0x20001130

0800884c <_isatty>:
 800884c:	4b02      	ldr	r3, [pc, #8]	; (8008858 <_isatty+0xc>)
 800884e:	2258      	movs	r2, #88	; 0x58
 8008850:	601a      	str	r2, [r3, #0]
 8008852:	2000      	movs	r0, #0
 8008854:	4770      	bx	lr
 8008856:	bf00      	nop
 8008858:	20001130 	.word	0x20001130

0800885c <_lseek>:
 800885c:	4b02      	ldr	r3, [pc, #8]	; (8008868 <_lseek+0xc>)
 800885e:	2258      	movs	r2, #88	; 0x58
 8008860:	601a      	str	r2, [r3, #0]
 8008862:	f04f 30ff 	mov.w	r0, #4294967295
 8008866:	4770      	bx	lr
 8008868:	20001130 	.word	0x20001130

0800886c <_read>:
 800886c:	4b02      	ldr	r3, [pc, #8]	; (8008878 <_read+0xc>)
 800886e:	2258      	movs	r2, #88	; 0x58
 8008870:	601a      	str	r2, [r3, #0]
 8008872:	f04f 30ff 	mov.w	r0, #4294967295
 8008876:	4770      	bx	lr
 8008878:	20001130 	.word	0x20001130

0800887c <_sbrk>:
 800887c:	4b04      	ldr	r3, [pc, #16]	; (8008890 <_sbrk+0x14>)
 800887e:	4602      	mov	r2, r0
 8008880:	6819      	ldr	r1, [r3, #0]
 8008882:	b909      	cbnz	r1, 8008888 <_sbrk+0xc>
 8008884:	4903      	ldr	r1, [pc, #12]	; (8008894 <_sbrk+0x18>)
 8008886:	6019      	str	r1, [r3, #0]
 8008888:	6818      	ldr	r0, [r3, #0]
 800888a:	4402      	add	r2, r0
 800888c:	601a      	str	r2, [r3, #0]
 800888e:	4770      	bx	lr
 8008890:	200007a8 	.word	0x200007a8
 8008894:	20001134 	.word	0x20001134

08008898 <_write>:
 8008898:	4b02      	ldr	r3, [pc, #8]	; (80088a4 <_write+0xc>)
 800889a:	2258      	movs	r2, #88	; 0x58
 800889c:	601a      	str	r2, [r3, #0]
 800889e:	f04f 30ff 	mov.w	r0, #4294967295
 80088a2:	4770      	bx	lr
 80088a4:	20001130 	.word	0x20001130

080088a8 <_init>:
 80088a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088aa:	bf00      	nop
 80088ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088ae:	bc08      	pop	{r3}
 80088b0:	469e      	mov	lr, r3
 80088b2:	4770      	bx	lr

080088b4 <_fini>:
 80088b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088b6:	bf00      	nop
 80088b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088ba:	bc08      	pop	{r3}
 80088bc:	469e      	mov	lr, r3
 80088be:	4770      	bx	lr
