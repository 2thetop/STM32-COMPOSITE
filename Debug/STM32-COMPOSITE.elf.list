
STM32-COMPOSITE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008788  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000314  08008970  08008970  00018970  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008c84  08008c84  00018c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008c8c  08008c8c  00018c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008c90  08008c90  00018c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000006c8  20000000  08008c94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000009f4  200006c8  0800935c  000206c8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200010bc  0800935c  000210bc  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  000206c8  2**0
                  CONTENTS, READONLY
 10 .debug_line   000051ad  00000000  00000000  000206f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0000e95a  00000000  00000000  0002589e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002d84  00000000  00000000  000341f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000009b8  00000000  00000000  00036f80  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000bf0  00000000  00000000  00037938  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000056fa  00000000  00000000  00038528  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003057  00000000  00000000  0003dc22  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007e  00000000  00000000  00040c79  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000027a0  00000000  00000000  00040cf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stab         0000009c  00000000  00000000  00043498  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      0000014d  00000000  00000000  00043534  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200006c8 	.word	0x200006c8
 8000204:	00000000 	.word	0x00000000
 8000208:	08008958 	.word	0x08008958

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200006cc 	.word	0x200006cc
 8000224:	08008958 	.word	0x08008958

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000376:	f1a4 0401 	sub.w	r4, r4, #1
 800037a:	d1e9      	bne.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f092 0f00 	teq	r2, #0
 8000522:	bf14      	ite	ne
 8000524:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e720      	b.n	800037c <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aedc 	beq.w	800032a <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6c1      	b.n	800032a <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295
 8000b6c:	f000 b982 	b.w	8000e74 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b8c:	468c      	mov	ip, r1
 8000b8e:	460c      	mov	r4, r1
 8000b90:	4605      	mov	r5, r0
 8000b92:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d14f      	bne.n	8000c38 <__udivmoddi4+0xb0>
 8000b98:	428a      	cmp	r2, r1
 8000b9a:	4617      	mov	r7, r2
 8000b9c:	d96b      	bls.n	8000c76 <__udivmoddi4+0xee>
 8000b9e:	fab2 fe82 	clz	lr, r2
 8000ba2:	f1be 0f00 	cmp.w	lr, #0
 8000ba6:	d00b      	beq.n	8000bc0 <__udivmoddi4+0x38>
 8000ba8:	f1ce 0520 	rsb	r5, lr, #32
 8000bac:	fa20 f505 	lsr.w	r5, r0, r5
 8000bb0:	fa01 f30e 	lsl.w	r3, r1, lr
 8000bb4:	ea45 0c03 	orr.w	ip, r5, r3
 8000bb8:	fa02 f70e 	lsl.w	r7, r2, lr
 8000bbc:	fa00 f50e 	lsl.w	r5, r0, lr
 8000bc0:	0c39      	lsrs	r1, r7, #16
 8000bc2:	fbbc f0f1 	udiv	r0, ip, r1
 8000bc6:	b2ba      	uxth	r2, r7
 8000bc8:	fb01 c310 	mls	r3, r1, r0, ip
 8000bcc:	fb00 f802 	mul.w	r8, r0, r2
 8000bd0:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 8000bd4:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 8000bd8:	45a0      	cmp	r8, r4
 8000bda:	d909      	bls.n	8000bf0 <__udivmoddi4+0x68>
 8000bdc:	19e4      	adds	r4, r4, r7
 8000bde:	f100 33ff 	add.w	r3, r0, #4294967295
 8000be2:	f080 8128 	bcs.w	8000e36 <__udivmoddi4+0x2ae>
 8000be6:	45a0      	cmp	r8, r4
 8000be8:	f240 8125 	bls.w	8000e36 <__udivmoddi4+0x2ae>
 8000bec:	3802      	subs	r0, #2
 8000bee:	443c      	add	r4, r7
 8000bf0:	ebc8 0404 	rsb	r4, r8, r4
 8000bf4:	fbb4 f3f1 	udiv	r3, r4, r1
 8000bf8:	fb01 4c13 	mls	ip, r1, r3, r4
 8000bfc:	fb03 f202 	mul.w	r2, r3, r2
 8000c00:	b2ac      	uxth	r4, r5
 8000c02:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 8000c06:	428a      	cmp	r2, r1
 8000c08:	d909      	bls.n	8000c1e <__udivmoddi4+0x96>
 8000c0a:	19c9      	adds	r1, r1, r7
 8000c0c:	f103 34ff 	add.w	r4, r3, #4294967295
 8000c10:	f080 810f 	bcs.w	8000e32 <__udivmoddi4+0x2aa>
 8000c14:	428a      	cmp	r2, r1
 8000c16:	f240 810c 	bls.w	8000e32 <__udivmoddi4+0x2aa>
 8000c1a:	3b02      	subs	r3, #2
 8000c1c:	4439      	add	r1, r7
 8000c1e:	1a8a      	subs	r2, r1, r2
 8000c20:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c24:	2100      	movs	r1, #0
 8000c26:	2e00      	cmp	r6, #0
 8000c28:	d063      	beq.n	8000cf2 <__udivmoddi4+0x16a>
 8000c2a:	fa22 f20e 	lsr.w	r2, r2, lr
 8000c2e:	2300      	movs	r3, #0
 8000c30:	e886 000c 	stmia.w	r6, {r2, r3}
 8000c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c38:	428b      	cmp	r3, r1
 8000c3a:	d907      	bls.n	8000c4c <__udivmoddi4+0xc4>
 8000c3c:	2e00      	cmp	r6, #0
 8000c3e:	d056      	beq.n	8000cee <__udivmoddi4+0x166>
 8000c40:	2100      	movs	r1, #0
 8000c42:	e886 0011 	stmia.w	r6, {r0, r4}
 8000c46:	4608      	mov	r0, r1
 8000c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c4c:	fab3 f183 	clz	r1, r3
 8000c50:	2900      	cmp	r1, #0
 8000c52:	f040 8093 	bne.w	8000d7c <__udivmoddi4+0x1f4>
 8000c56:	42a3      	cmp	r3, r4
 8000c58:	d302      	bcc.n	8000c60 <__udivmoddi4+0xd8>
 8000c5a:	4282      	cmp	r2, r0
 8000c5c:	f200 80fe 	bhi.w	8000e5c <__udivmoddi4+0x2d4>
 8000c60:	1a85      	subs	r5, r0, r2
 8000c62:	eb64 0303 	sbc.w	r3, r4, r3
 8000c66:	469c      	mov	ip, r3
 8000c68:	2001      	movs	r0, #1
 8000c6a:	2e00      	cmp	r6, #0
 8000c6c:	d041      	beq.n	8000cf2 <__udivmoddi4+0x16a>
 8000c6e:	e886 1020 	stmia.w	r6, {r5, ip}
 8000c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c76:	b912      	cbnz	r2, 8000c7e <__udivmoddi4+0xf6>
 8000c78:	2701      	movs	r7, #1
 8000c7a:	fbb7 f7f2 	udiv	r7, r7, r2
 8000c7e:	fab7 fe87 	clz	lr, r7
 8000c82:	f1be 0f00 	cmp.w	lr, #0
 8000c86:	d136      	bne.n	8000cf6 <__udivmoddi4+0x16e>
 8000c88:	1be4      	subs	r4, r4, r7
 8000c8a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c8e:	fa1f f987 	uxth.w	r9, r7
 8000c92:	2101      	movs	r1, #1
 8000c94:	fbb4 f3f8 	udiv	r3, r4, r8
 8000c98:	fb08 4413 	mls	r4, r8, r3, r4
 8000c9c:	fb09 f203 	mul.w	r2, r9, r3
 8000ca0:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 8000ca4:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 8000ca8:	42a2      	cmp	r2, r4
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0x134>
 8000cac:	19e4      	adds	r4, r4, r7
 8000cae:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0x132>
 8000cb4:	42a2      	cmp	r2, r4
 8000cb6:	f200 80d3 	bhi.w	8000e60 <__udivmoddi4+0x2d8>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	1aa4      	subs	r4, r4, r2
 8000cbe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cc2:	fb08 4810 	mls	r8, r8, r0, r4
 8000cc6:	fb09 f900 	mul.w	r9, r9, r0
 8000cca:	b2ac      	uxth	r4, r5
 8000ccc:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 8000cd0:	4591      	cmp	r9, r2
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x15c>
 8000cd4:	19d2      	adds	r2, r2, r7
 8000cd6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x15a>
 8000cdc:	4591      	cmp	r9, r2
 8000cde:	f200 80ba 	bhi.w	8000e56 <__udivmoddi4+0x2ce>
 8000ce2:	4620      	mov	r0, r4
 8000ce4:	ebc9 0202 	rsb	r2, r9, r2
 8000ce8:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cec:	e79b      	b.n	8000c26 <__udivmoddi4+0x9e>
 8000cee:	4631      	mov	r1, r6
 8000cf0:	4630      	mov	r0, r6
 8000cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cf6:	fa07 f70e 	lsl.w	r7, r7, lr
 8000cfa:	f1ce 0c20 	rsb	ip, lr, #32
 8000cfe:	fa24 f30c 	lsr.w	r3, r4, ip
 8000d02:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d06:	fbb3 faf8 	udiv	sl, r3, r8
 8000d0a:	fa1f f987 	uxth.w	r9, r7
 8000d0e:	fb08 351a 	mls	r5, r8, sl, r3
 8000d12:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000d16:	fa04 f40e 	lsl.w	r4, r4, lr
 8000d1a:	fb0a fb09 	mul.w	fp, sl, r9
 8000d1e:	ea4c 0c04 	orr.w	ip, ip, r4
 8000d22:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000d26:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 8000d2a:	459b      	cmp	fp, r3
 8000d2c:	fa00 f50e 	lsl.w	r5, r0, lr
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x1c0>
 8000d32:	19db      	adds	r3, r3, r7
 8000d34:	f10a 32ff 	add.w	r2, sl, #4294967295
 8000d38:	f080 808b 	bcs.w	8000e52 <__udivmoddi4+0x2ca>
 8000d3c:	459b      	cmp	fp, r3
 8000d3e:	f240 8088 	bls.w	8000e52 <__udivmoddi4+0x2ca>
 8000d42:	f1aa 0a02 	sub.w	sl, sl, #2
 8000d46:	443b      	add	r3, r7
 8000d48:	ebcb 0303 	rsb	r3, fp, r3
 8000d4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d50:	fb08 3310 	mls	r3, r8, r0, r3
 8000d54:	fb00 f409 	mul.w	r4, r0, r9
 8000d58:	fa1f fc8c 	uxth.w	ip, ip
 8000d5c:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 8000d60:	429c      	cmp	r4, r3
 8000d62:	d907      	bls.n	8000d74 <__udivmoddi4+0x1ec>
 8000d64:	19db      	adds	r3, r3, r7
 8000d66:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6a:	d26e      	bcs.n	8000e4a <__udivmoddi4+0x2c2>
 8000d6c:	429c      	cmp	r4, r3
 8000d6e:	d96c      	bls.n	8000e4a <__udivmoddi4+0x2c2>
 8000d70:	3802      	subs	r0, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1b1c      	subs	r4, r3, r4
 8000d76:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 8000d7a:	e78b      	b.n	8000c94 <__udivmoddi4+0x10c>
 8000d7c:	f1c1 0e20 	rsb	lr, r1, #32
 8000d80:	408b      	lsls	r3, r1
 8000d82:	fa22 fc0e 	lsr.w	ip, r2, lr
 8000d86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8a:	fa24 f70e 	lsr.w	r7, r4, lr
 8000d8e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d92:	fbb7 faf9 	udiv	sl, r7, r9
 8000d96:	fa1f f38c 	uxth.w	r3, ip
 8000d9a:	fb09 771a 	mls	r7, r9, sl, r7
 8000d9e:	fa20 f80e 	lsr.w	r8, r0, lr
 8000da2:	408c      	lsls	r4, r1
 8000da4:	fb0a f503 	mul.w	r5, sl, r3
 8000da8:	ea48 0404 	orr.w	r4, r8, r4
 8000dac:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8000db0:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 8000db4:	42bd      	cmp	r5, r7
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 fb01 	lsl.w	fp, r0, r1
 8000dbe:	d909      	bls.n	8000dd4 <__udivmoddi4+0x24c>
 8000dc0:	eb17 070c 	adds.w	r7, r7, ip
 8000dc4:	f10a 30ff 	add.w	r0, sl, #4294967295
 8000dc8:	d241      	bcs.n	8000e4e <__udivmoddi4+0x2c6>
 8000dca:	42bd      	cmp	r5, r7
 8000dcc:	d93f      	bls.n	8000e4e <__udivmoddi4+0x2c6>
 8000dce:	f1aa 0a02 	sub.w	sl, sl, #2
 8000dd2:	4467      	add	r7, ip
 8000dd4:	1b7f      	subs	r7, r7, r5
 8000dd6:	fbb7 f5f9 	udiv	r5, r7, r9
 8000dda:	fb09 7715 	mls	r7, r9, r5, r7
 8000dde:	fb05 f303 	mul.w	r3, r5, r3
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8000de8:	42bb      	cmp	r3, r7
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x276>
 8000dec:	eb17 070c 	adds.w	r7, r7, ip
 8000df0:	f105 30ff 	add.w	r0, r5, #4294967295
 8000df4:	d227      	bcs.n	8000e46 <__udivmoddi4+0x2be>
 8000df6:	42bb      	cmp	r3, r7
 8000df8:	d925      	bls.n	8000e46 <__udivmoddi4+0x2be>
 8000dfa:	3d02      	subs	r5, #2
 8000dfc:	4467      	add	r7, ip
 8000dfe:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 8000e02:	fba0 8902 	umull	r8, r9, r0, r2
 8000e06:	1aff      	subs	r7, r7, r3
 8000e08:	454f      	cmp	r7, r9
 8000e0a:	4645      	mov	r5, r8
 8000e0c:	464c      	mov	r4, r9
 8000e0e:	d314      	bcc.n	8000e3a <__udivmoddi4+0x2b2>
 8000e10:	d029      	beq.n	8000e66 <__udivmoddi4+0x2de>
 8000e12:	b366      	cbz	r6, 8000e6e <__udivmoddi4+0x2e6>
 8000e14:	ebbb 0305 	subs.w	r3, fp, r5
 8000e18:	eb67 0704 	sbc.w	r7, r7, r4
 8000e1c:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000e20:	40cb      	lsrs	r3, r1
 8000e22:	40cf      	lsrs	r7, r1
 8000e24:	ea4e 0303 	orr.w	r3, lr, r3
 8000e28:	e886 0088 	stmia.w	r6, {r3, r7}
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e32:	4623      	mov	r3, r4
 8000e34:	e6f3      	b.n	8000c1e <__udivmoddi4+0x96>
 8000e36:	4618      	mov	r0, r3
 8000e38:	e6da      	b.n	8000bf0 <__udivmoddi4+0x68>
 8000e3a:	ebb8 0502 	subs.w	r5, r8, r2
 8000e3e:	eb69 040c 	sbc.w	r4, r9, ip
 8000e42:	3801      	subs	r0, #1
 8000e44:	e7e5      	b.n	8000e12 <__udivmoddi4+0x28a>
 8000e46:	4605      	mov	r5, r0
 8000e48:	e7d9      	b.n	8000dfe <__udivmoddi4+0x276>
 8000e4a:	4610      	mov	r0, r2
 8000e4c:	e792      	b.n	8000d74 <__udivmoddi4+0x1ec>
 8000e4e:	4682      	mov	sl, r0
 8000e50:	e7c0      	b.n	8000dd4 <__udivmoddi4+0x24c>
 8000e52:	4692      	mov	sl, r2
 8000e54:	e778      	b.n	8000d48 <__udivmoddi4+0x1c0>
 8000e56:	3802      	subs	r0, #2
 8000e58:	443a      	add	r2, r7
 8000e5a:	e743      	b.n	8000ce4 <__udivmoddi4+0x15c>
 8000e5c:	4608      	mov	r0, r1
 8000e5e:	e704      	b.n	8000c6a <__udivmoddi4+0xe2>
 8000e60:	3b02      	subs	r3, #2
 8000e62:	443c      	add	r4, r7
 8000e64:	e72a      	b.n	8000cbc <__udivmoddi4+0x134>
 8000e66:	45c3      	cmp	fp, r8
 8000e68:	d3e7      	bcc.n	8000e3a <__udivmoddi4+0x2b2>
 8000e6a:	463c      	mov	r4, r7
 8000e6c:	e7d1      	b.n	8000e12 <__udivmoddi4+0x28a>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000e74 <__aeabi_idiv0>:
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop

08000e78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000e78:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000e7a:	e003      	b.n	8000e84 <LoopCopyDataInit>

08000e7c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000e7c:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000e7e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000e80:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000e82:	3104      	adds	r1, #4

08000e84 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000e84:	480a      	ldr	r0, [pc, #40]	; (8000eb0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000e86:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000e88:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000e8a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000e8c:	d3f6      	bcc.n	8000e7c <CopyDataInit>
  ldr r2, =_sbss
 8000e8e:	4a0a      	ldr	r2, [pc, #40]	; (8000eb8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000e90:	e002      	b.n	8000e98 <LoopFillZerobss>

08000e92 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000e92:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000e94:	f842 3b04 	str.w	r3, [r2], #4

08000e98 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000e98:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000e9a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000e9c:	d3f9      	bcc.n	8000e92 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e9e:	f000 f811 	bl	8000ec4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ea2:	f002 fff5 	bl	8003e90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ea6:	f002 fd1b 	bl	80038e0 <main>
  bx lr
 8000eaa:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8000eac:	08008c94 	.word	0x08008c94
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8000eb0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000eb4:	200006c8 	.word	0x200006c8
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8000eb8:	200006c8 	.word	0x200006c8
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8000ebc:	200010bc 	.word	0x200010bc

08000ec0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ec0:	e7fe      	b.n	8000ec0 <ADC1_2_IRQHandler>
	...

08000ec4 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <SystemInit+0x40>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	f042 0201 	orr.w	r2, r2, #1
 8000ecc:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000ece:	6859      	ldr	r1, [r3, #4]
 8000ed0:	4a0d      	ldr	r2, [pc, #52]	; (8000f08 <SystemInit+0x44>)
 8000ed2:	400a      	ands	r2, r1
 8000ed4:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000edc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000ee0:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000ee8:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000eea:	685a      	ldr	r2, [r3, #4]
 8000eec:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000ef0:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000ef2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000ef6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000ef8:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <SystemInit+0x48>)
 8000efa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	40021000 	.word	0x40021000
 8000f08:	f8ff0000 	.word	0xf8ff0000
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f10:	b510      	push	{r4, lr}
 8000f12:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000f14:	f001 f8ee 	bl	80020f4 <HAL_RCC_GetHCLKFreq>
 8000f18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f20:	f000 f888 	bl	8001034 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000f24:	2200      	movs	r2, #0
 8000f26:	4621      	mov	r1, r4
 8000f28:	f04f 30ff 	mov.w	r0, #4294967295
 8000f2c:	f000 f842 	bl	8000fb4 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000f30:	2000      	movs	r0, #0
 8000f32:	bd10      	pop	{r4, pc}

08000f34 <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f34:	4a07      	ldr	r2, [pc, #28]	; (8000f54 <HAL_Init+0x20>)
  *        In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f36:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f38:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f3a:	2003      	movs	r0, #3
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f3c:	f043 0310 	orr.w	r3, r3, #16
 8000f40:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f42:	f000 f825 	bl	8000f90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f46:	2000      	movs	r0, #0
 8000f48:	f7ff ffe2 	bl	8000f10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f4c:	f002 fd74 	bl	8003a38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000f50:	2000      	movs	r0, #0
 8000f52:	bd08      	pop	{r3, pc}
 8000f54:	40022000 	.word	0x40022000

08000f58 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000f58:	4a02      	ldr	r2, [pc, #8]	; (8000f64 <HAL_IncTick+0xc>)
 8000f5a:	6813      	ldr	r3, [r2, #0]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	6013      	str	r3, [r2, #0]
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	200006e4 	.word	0x200006e4

08000f68 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f68:	4b01      	ldr	r3, [pc, #4]	; (8000f70 <HAL_GetTick+0x8>)
 8000f6a:	6818      	ldr	r0, [r3, #0]
}
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	200006e4 	.word	0x200006e4

08000f74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000f74:	b513      	push	{r0, r1, r4, lr}
 8000f76:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8000f78:	f7ff fff6 	bl	8000f68 <HAL_GetTick>
 8000f7c:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8000f7e:	f7ff fff3 	bl	8000f68 <HAL_GetTick>
 8000f82:	9b01      	ldr	r3, [sp, #4]
 8000f84:	1b00      	subs	r0, r0, r4
 8000f86:	4298      	cmp	r0, r3
 8000f88:	d3f9      	bcc.n	8000f7e <HAL_Delay+0xa>
  {
  }
}
 8000f8a:	b002      	add	sp, #8
 8000f8c:	bd10      	pop	{r4, pc}
	...

08000f90 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f90:	4a07      	ldr	r2, [pc, #28]	; (8000fb0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000f92:	0200      	lsls	r0, r0, #8
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f94:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000f96:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8000f9a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f9e:	041b      	lsls	r3, r3, #16
 8000fa0:	0c1b      	lsrs	r3, r3, #16
 8000fa2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000faa:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000fac:	60d3      	str	r3, [r2, #12]
 8000fae:	4770      	bx	lr
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb4:	4b17      	ldr	r3, [pc, #92]	; (8001014 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb6:	b530      	push	{r4, r5, lr}
 8000fb8:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fba:	f3c3 2302 	ubfx	r3, r3, #8, #3
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fbe:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fc2:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc4:	2c04      	cmp	r4, #4
 8000fc6:	bf28      	it	cs
 8000fc8:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fca:	2d06      	cmp	r5, #6

  return (
 8000fcc:	f04f 0501 	mov.w	r5, #1
 8000fd0:	fa05 f404 	lsl.w	r4, r5, r4
 8000fd4:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fd8:	bf8c      	ite	hi
 8000fda:	3b03      	subhi	r3, #3
 8000fdc:	2300      	movls	r3, #0

  return (
 8000fde:	400c      	ands	r4, r1
 8000fe0:	409c      	lsls	r4, r3
 8000fe2:	fa05 f303 	lsl.w	r3, r5, r3
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000fea:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8000fec:	ea42 0204 	orr.w	r2, r2, r4
 8000ff0:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff4:	bfaf      	iteee	ge
 8000ff6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffa:	4b07      	ldrlt	r3, [pc, #28]	; (8001018 <HAL_NVIC_SetPriority+0x64>)
 8000ffc:	f000 000f 	andlt.w	r0, r0, #15
 8001000:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001002:	bfa5      	ittet	ge
 8001004:	b2d2      	uxtbge	r2, r2
 8001006:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100a:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001010:	bd30      	pop	{r4, r5, pc}
 8001012:	bf00      	nop
 8001014:	e000ed00 	.word	0xe000ed00
 8001018:	e000ed14 	.word	0xe000ed14

0800101c <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800101c:	0942      	lsrs	r2, r0, #5
 800101e:	2301      	movs	r3, #1
 8001020:	f000 001f 	and.w	r0, r0, #31
 8001024:	fa03 f000 	lsl.w	r0, r3, r0
 8001028:	4b01      	ldr	r3, [pc, #4]	; (8001030 <HAL_NVIC_EnableIRQ+0x14>)
 800102a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800102e:	4770      	bx	lr
 8001030:	e000e100 	.word	0xe000e100

08001034 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001034:	3801      	subs	r0, #1
 8001036:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800103a:	d20a      	bcs.n	8001052 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800103c:	4b06      	ldr	r3, [pc, #24]	; (8001058 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103e:	4a07      	ldr	r2, [pc, #28]	; (800105c <HAL_SYSTICK_Config+0x28>)
 8001040:	21f0      	movs	r1, #240	; 0xf0
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001042:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001044:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001048:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800104a:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800104c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 8001052:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	e000e010 	.word	0xe000e010
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001060:	4b04      	ldr	r3, [pc, #16]	; (8001074 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001062:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	bf0c      	ite	eq
 8001068:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800106c:	f022 0204 	bicne.w	r2, r2, #4
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	4770      	bx	lr
 8001074:	e000e010 	.word	0xe000e010

08001078 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001078:	4770      	bx	lr

0800107a <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800107a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800107c:	f7ff fffc 	bl	8001078 <HAL_SYSTICK_Callback>
 8001080:	bd08      	pop	{r3, pc}
	...

08001084 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001084:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;
  uint32_t config = 0x00;
 8001088:	2400      	movs	r4, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800108a:	4626      	mov	r6, r4
 800108c:	4b6a      	ldr	r3, [pc, #424]	; (8001238 <HAL_GPIO_Init+0x1b4>)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800108e:	f8df e1b0 	ldr.w	lr, [pc, #432]	; 8001240 <HAL_GPIO_Init+0x1bc>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001092:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 8001244 <HAL_GPIO_Init+0x1c0>

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001096:	2201      	movs	r2, #1
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if (iocurrent == ioposition)
 8001098:	680d      	ldr	r5, [r1, #0]

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800109a:	40b2      	lsls	r2, r6
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if (iocurrent == ioposition)
 800109c:	ea32 0505 	bics.w	r5, r2, r5
 80010a0:	f040 80c2 	bne.w	8001228 <HAL_GPIO_Init+0x1a4>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010a4:	684d      	ldr	r5, [r1, #4]
 80010a6:	2d12      	cmp	r5, #18
 80010a8:	d02b      	beq.n	8001102 <HAL_GPIO_Init+0x7e>
 80010aa:	d80e      	bhi.n	80010ca <HAL_GPIO_Init+0x46>
 80010ac:	2d02      	cmp	r5, #2
 80010ae:	d025      	beq.n	80010fc <HAL_GPIO_Init+0x78>
 80010b0:	d804      	bhi.n	80010bc <HAL_GPIO_Init+0x38>
 80010b2:	b34d      	cbz	r5, 8001108 <HAL_GPIO_Init+0x84>
 80010b4:	2d01      	cmp	r5, #1
 80010b6:	d130      	bne.n	800111a <HAL_GPIO_Init+0x96>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010b8:	68cc      	ldr	r4, [r1, #12]
          break;
 80010ba:	e02e      	b.n	800111a <HAL_GPIO_Init+0x96>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010bc:	2d03      	cmp	r5, #3
 80010be:	d01b      	beq.n	80010f8 <HAL_GPIO_Init+0x74>
 80010c0:	2d11      	cmp	r5, #17
 80010c2:	d12a      	bne.n	800111a <HAL_GPIO_Init+0x96>
          
        /* If we are configuring the pin in OUTPUT open-drain mode */
        case GPIO_MODE_OUTPUT_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010c4:	68cc      	ldr	r4, [r1, #12]
 80010c6:	3404      	adds	r4, #4
          break;
 80010c8:	e027      	b.n	800111a <HAL_GPIO_Init+0x96>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010ca:	4565      	cmp	r5, ip
 80010cc:	d01c      	beq.n	8001108 <HAL_GPIO_Init+0x84>
 80010ce:	d806      	bhi.n	80010de <HAL_GPIO_Init+0x5a>
 80010d0:	f8df 8174 	ldr.w	r8, [pc, #372]	; 8001248 <HAL_GPIO_Init+0x1c4>
 80010d4:	4545      	cmp	r5, r8
 80010d6:	d017      	beq.n	8001108 <HAL_GPIO_Init+0x84>
 80010d8:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 80010dc:	e009      	b.n	80010f2 <HAL_GPIO_Init+0x6e>
 80010de:	f8df 816c 	ldr.w	r8, [pc, #364]	; 800124c <HAL_GPIO_Init+0x1c8>
 80010e2:	4545      	cmp	r5, r8
 80010e4:	d010      	beq.n	8001108 <HAL_GPIO_Init+0x84>
 80010e6:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 80010ea:	4545      	cmp	r5, r8
 80010ec:	d00c      	beq.n	8001108 <HAL_GPIO_Init+0x84>
 80010ee:	f5a8 1880 	sub.w	r8, r8, #1048576	; 0x100000
 80010f2:	4545      	cmp	r5, r8
 80010f4:	d111      	bne.n	800111a <HAL_GPIO_Init+0x96>
 80010f6:	e007      	b.n	8001108 <HAL_GPIO_Init+0x84>
          }
          break; 
          
        /* If we are configuring the pin in INPUT analog mode */
        case GPIO_MODE_ANALOG:
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010f8:	2400      	movs	r4, #0
 80010fa:	e00e      	b.n	800111a <HAL_GPIO_Init+0x96>
          
        /* If we are configuring the pin in ALTERNATE FUNCTION push-pull mode */
        case GPIO_MODE_AF_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010fc:	68cc      	ldr	r4, [r1, #12]
 80010fe:	3408      	adds	r4, #8
          break;
 8001100:	e00b      	b.n	800111a <HAL_GPIO_Init+0x96>
          
        /* If we are configuring the pin in ALTERNATE FUNCTION open-drain mode */
        case GPIO_MODE_AF_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001102:	68cc      	ldr	r4, [r1, #12]
 8001104:	340c      	adds	r4, #12
          break;
 8001106:	e008      	b.n	800111a <HAL_GPIO_Init+0x96>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if(GPIO_Init->Pull == GPIO_NOPULL)
 8001108:	688c      	ldr	r4, [r1, #8]
 800110a:	b12c      	cbz	r4, 8001118 <HAL_GPIO_Init+0x94>
          {  
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 800110c:	2c01      	cmp	r4, #1
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
            
            /* Set the corresponding ODR bit */
            GPIOx->BSRR = ioposition;
 800110e:	bf0c      	ite	eq
 8001110:	6102      	streq	r2, [r0, #16]
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
            
            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8001112:	6142      	strne	r2, [r0, #20]
            /* Set the corresponding ODR bit */
            GPIOx->BSRR = ioposition;
          }
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001114:	2408      	movs	r4, #8
 8001116:	e000      	b.n	800111a <HAL_GPIO_Init+0x96>
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if(GPIO_Init->Pull == GPIO_NOPULL)
          {  
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001118:	2404      	movs	r4, #4
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800111a:	2aff      	cmp	r2, #255	; 0xff
 800111c:	bf97      	itett	ls
 800111e:	4683      	movls	fp, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 8001120:	f1a6 0508 	subhi.w	r5, r6, #8
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001124:	f8d0 9000 	ldrls.w	r9, [r0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 8001128:	00b5      	lslls	r5, r6, #2
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800112a:	bf84      	itt	hi
 800112c:	f8d0 9004 	ldrhi.w	r9, [r0, #4]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 8001130:	00ad      	lslhi	r5, r5, #2
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8001132:	f04f 080f 	mov.w	r8, #15
 8001136:	fa08 fa05 	lsl.w	sl, r8, r5
 800113a:	ea29 090a 	bic.w	r9, r9, sl
 800113e:	fa04 f505 	lsl.w	r5, r4, r5
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001142:	bf88      	it	hi
 8001144:	f100 0b04 	addhi.w	fp, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8001148:	ea49 0505 	orr.w	r5, r9, r5
 800114c:	f8cb 5000 	str.w	r5, [fp]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001150:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8001154:	f019 5f80 	tst.w	r9, #268435456	; 0x10000000
 8001158:	d066      	beq.n	8001228 <HAL_GPIO_Init+0x1a4>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800115a:	4d38      	ldr	r5, [pc, #224]	; (800123c <HAL_GPIO_Init+0x1b8>)
 800115c:	4f37      	ldr	r7, [pc, #220]	; (800123c <HAL_GPIO_Init+0x1b8>)
 800115e:	69ad      	ldr	r5, [r5, #24]
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001160:	f006 0a03 	and.w	sl, r6, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001164:	f045 0501 	orr.w	r5, r5, #1
 8001168:	61bd      	str	r5, [r7, #24]
 800116a:	69bd      	ldr	r5, [r7, #24]
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 800116c:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001170:	f005 0501 	and.w	r5, r5, #1
 8001174:	9501      	str	r5, [sp, #4]
 8001176:	9d01      	ldr	r5, [sp, #4]
 8001178:	f026 0503 	bic.w	r5, r6, #3
 800117c:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8001180:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2];
 8001184:	f8d5 b008 	ldr.w	fp, [r5, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001188:	f5a7 3784 	sub.w	r7, r7, #67584	; 0x10800
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 800118c:	fa08 f80a 	lsl.w	r8, r8, sl
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001190:	42b8      	cmp	r0, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001192:	ea2b 0808 	bic.w	r8, fp, r8
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001196:	d016      	beq.n	80011c6 <HAL_GPIO_Init+0x142>
 8001198:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800119c:	42b8      	cmp	r0, r7
 800119e:	d015      	beq.n	80011cc <HAL_GPIO_Init+0x148>
 80011a0:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80011a4:	42b8      	cmp	r0, r7
 80011a6:	d014      	beq.n	80011d2 <HAL_GPIO_Init+0x14e>
 80011a8:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80011ac:	42b8      	cmp	r0, r7
 80011ae:	d013      	beq.n	80011d8 <HAL_GPIO_Init+0x154>
 80011b0:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80011b4:	42b8      	cmp	r0, r7
 80011b6:	d012      	beq.n	80011de <HAL_GPIO_Init+0x15a>
 80011b8:	4570      	cmp	r0, lr
 80011ba:	bf0c      	ite	eq
 80011bc:	f04f 0b05 	moveq.w	fp, #5
 80011c0:	f04f 0b06 	movne.w	fp, #6
 80011c4:	e00d      	b.n	80011e2 <HAL_GPIO_Init+0x15e>
 80011c6:	f04f 0b00 	mov.w	fp, #0
 80011ca:	e00a      	b.n	80011e2 <HAL_GPIO_Init+0x15e>
 80011cc:	f04f 0b01 	mov.w	fp, #1
 80011d0:	e007      	b.n	80011e2 <HAL_GPIO_Init+0x15e>
 80011d2:	f04f 0b02 	mov.w	fp, #2
 80011d6:	e004      	b.n	80011e2 <HAL_GPIO_Init+0x15e>
 80011d8:	f04f 0b03 	mov.w	fp, #3
 80011dc:	e001      	b.n	80011e2 <HAL_GPIO_Init+0x15e>
 80011de:	f04f 0b04 	mov.w	fp, #4
 80011e2:	fa0b fa0a 	lsl.w	sl, fp, sl
 80011e6:	ea4a 0a08 	orr.w	sl, sl, r8
        AFIO->EXTICR[position >> 2] = temp;
 80011ea:	f8c5 a008 	str.w	sl, [r5, #8]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 80011ee:	681d      	ldr	r5, [r3, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        AFIO->EXTICR[position >> 2] = temp;
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011f0:	f419 3f80 	tst.w	r9, #65536	; 0x10000
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 80011f4:	bf14      	ite	ne
 80011f6:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 80011f8:	4395      	biceq	r5, r2
 80011fa:	601d      	str	r5, [r3, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 80011fc:	685d      	ldr	r5, [r3, #4]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011fe:	f419 3f00 	tst.w	r9, #131072	; 0x20000
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8001202:	bf14      	ite	ne
 8001204:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 8001206:	4395      	biceq	r5, r2
 8001208:	605d      	str	r5, [r3, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 800120a:	689d      	ldr	r5, [r3, #8]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800120c:	f419 1f80 	tst.w	r9, #1048576	; 0x100000
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 8001210:	bf14      	ite	ne
 8001212:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 8001214:	4395      	biceq	r5, r2
 8001216:	609d      	str	r5, [r3, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 8001218:	68dd      	ldr	r5, [r3, #12]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800121a:	f419 1f00 	tst.w	r9, #2097152	; 0x200000
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 800121e:	bf14      	ite	ne
 8001220:	432a      	orrne	r2, r5
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 8001222:	ea25 0202 	biceq.w	r2, r5, r2
 8001226:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001228:	3601      	adds	r6, #1
 800122a:	2e10      	cmp	r6, #16
 800122c:	f47f af33 	bne.w	8001096 <HAL_GPIO_Init+0x12>
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
        }
      }
    }
  }
}
 8001230:	b003      	add	sp, #12
 8001232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001236:	bf00      	nop
 8001238:	40010400 	.word	0x40010400
 800123c:	40021000 	.word	0x40021000
 8001240:	40011c00 	.word	0x40011c00
 8001244:	10210000 	.word	0x10210000
 8001248:	10110000 	.word	0x10110000
 800124c:	10310000 	.word	0x10310000

08001250 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001250:	b902      	cbnz	r2, 8001254 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001252:	0409      	lsls	r1, r1, #16
 8001254:	6101      	str	r1, [r0, #16]
 8001256:	4770      	bx	lr

08001258 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001258:	68c3      	ldr	r3, [r0, #12]
 800125a:	4059      	eors	r1, r3
 800125c:	60c1      	str	r1, [r0, #12]
 800125e:	4770      	bx	lr

08001260 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t index = 0;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8001264:	4604      	mov	r4, r0
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001266:	b086      	sub	sp, #24
  uint32_t index = 0;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8001268:	2800      	cmp	r0, #0
 800126a:	d05f      	beq.n	800132c <HAL_PCD_Init+0xcc>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 800126c:	f890 33e9 	ldrb.w	r3, [r0, #1001]	; 0x3e9
 8001270:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001274:	b91b      	cbnz	r3, 800127e <HAL_PCD_Init+0x1e>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001276:	f880 23e8 	strb.w	r2, [r0, #1000]	; 0x3e8

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800127a:	f002 fcb5 	bl	8003be8 <HAL_PCD_MspInit>
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800127e:	4625      	mov	r5, r4
  
  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8001280:	466e      	mov	r6, sp

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001282:	2303      	movs	r3, #3
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001284:	f855 0b10 	ldr.w	r0, [r5], #16

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001288:	f884 33e9 	strb.w	r3, [r4, #1001]	; 0x3e9
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800128c:	f001 fa74 	bl	8002778 <USB_DisableGlobalInt>
  
  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8001290:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001292:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001294:	682b      	ldr	r3, [r5, #0]
 8001296:	1d27      	adds	r7, r4, #4
 8001298:	6033      	str	r3, [r6, #0]
 800129a:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800129e:	6820      	ldr	r0, [r4, #0]
 80012a0:	f001 fa5a 	bl	8002758 <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 80012a4:	2100      	movs	r1, #0
 80012a6:	6820      	ldr	r0, [r4, #0]
 80012a8:	f001 fa70 	bl	800278c <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0; index < 15 ; index++)
 80012ac:	2100      	movs	r1, #0
 80012ae:	4623      	mov	r3, r4
  
  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 80012b0:	4622      	mov	r2, r4
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1;
    hpcd->IN_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 80012b2:	4608      	mov	r0, r1
 80012b4:	f104 0510 	add.w	r5, r4, #16
 
  /* Init endpoints structures */
  for (index = 0; index < 15 ; index++)
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1;
 80012b8:	2601      	movs	r6, #1
    hpcd->IN_ep[index].num = index;
 80012ba:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
    hpcd->IN_ep[index].tx_fifo_num = index;
 80012be:	8691      	strh	r1, [r2, #52]	; 0x34
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 
  /* Init endpoints structures */
  for (index = 0; index < 15 ; index++)
 80012c0:	3101      	adds	r1, #1
 80012c2:	290f      	cmp	r1, #15
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1;
 80012c4:	f882 6029 	strb.w	r6, [r2, #41]	; 0x29
    hpcd->IN_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 80012c8:	f882 002b 	strb.w	r0, [r2, #43]	; 0x2b
    hpcd->IN_ep[index].maxpacket =  0;
 80012cc:	6390      	str	r0, [r2, #56]	; 0x38
    hpcd->IN_ep[index].xfer_buff = 0;
 80012ce:	63d0      	str	r0, [r2, #60]	; 0x3c
    hpcd->IN_ep[index].xfer_len = 0;
 80012d0:	6410      	str	r0, [r2, #64]	; 0x40
 80012d2:	f102 0220 	add.w	r2, r2, #32
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 
  /* Init endpoints structures */
  for (index = 0; index < 15 ; index++)
 80012d6:	d1f0      	bne.n	80012ba <HAL_PCD_Init+0x5a>
 80012d8:	2200      	movs	r2, #0
    hpcd->IN_ep[index].xfer_len = 0;
  }
  
  for (index = 0; index < 15 ; index++)
  {
    hpcd->OUT_ep[index].is_in = 0;
 80012da:	4611      	mov	r1, r2
    hpcd->OUT_ep[index].num = index;
 80012dc:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
    hpcd->IN_ep[index].tx_fifo_num = index;
 80012e0:	869a      	strh	r2, [r3, #52]	; 0x34
    hpcd->IN_ep[index].maxpacket =  0;
    hpcd->IN_ep[index].xfer_buff = 0;
    hpcd->IN_ep[index].xfer_len = 0;
  }
  
  for (index = 0; index < 15 ; index++)
 80012e2:	3201      	adds	r2, #1
 80012e4:	2a0f      	cmp	r2, #15
  {
    hpcd->OUT_ep[index].is_in = 0;
 80012e6:	f883 1209 	strb.w	r1, [r3, #521]	; 0x209
    hpcd->OUT_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 80012ea:	f883 120b 	strb.w	r1, [r3, #523]	; 0x20b
    hpcd->OUT_ep[index].maxpacket = 0;
 80012ee:	f8c3 1218 	str.w	r1, [r3, #536]	; 0x218
    hpcd->OUT_ep[index].xfer_buff = 0;
 80012f2:	f8c3 121c 	str.w	r1, [r3, #540]	; 0x21c
    hpcd->OUT_ep[index].xfer_len = 0;
 80012f6:	f8c3 1220 	str.w	r1, [r3, #544]	; 0x220
    hpcd->IN_ep[index].xfer_len = 0;
  }
  
  for (index = 0; index < 15 ; index++)
  {
    hpcd->OUT_ep[index].is_in = 0;
 80012fa:	f04f 0800 	mov.w	r8, #0
 80012fe:	f103 0320 	add.w	r3, r3, #32
    hpcd->IN_ep[index].maxpacket =  0;
    hpcd->IN_ep[index].xfer_buff = 0;
    hpcd->IN_ep[index].xfer_len = 0;
  }
  
  for (index = 0; index < 15 ; index++)
 8001302:	d1eb      	bne.n	80012dc <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[index].xfer_buff = 0;
    hpcd->OUT_ep[index].xfer_len = 0;
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 8001304:	466e      	mov	r6, sp
 8001306:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001308:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800130a:	682b      	ldr	r3, [r5, #0]
 800130c:	6033      	str	r3, [r6, #0]
 800130e:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001312:	6820      	ldr	r0, [r4, #0]
 8001314:	f001 fa3c 	bl	8002790 <USB_DevInit>
  
  hpcd->USB_Address = 0;
  hpcd->State= HAL_PCD_STATE_READY;
 8001318:	2301      	movs	r3, #1
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
  
  hpcd->USB_Address = 0;
 800131a:	f884 8024 	strb.w	r8, [r4, #36]	; 0x24
  hpcd->State= HAL_PCD_STATE_READY;
  
  USB_DevDisconnect (hpcd->Instance);  
 800131e:	6820      	ldr	r0, [r4, #0]
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
  
  hpcd->USB_Address = 0;
  hpcd->State= HAL_PCD_STATE_READY;
 8001320:	f884 33e9 	strb.w	r3, [r4, #1001]	; 0x3e9
  
  USB_DevDisconnect (hpcd->Instance);  
 8001324:	f001 fced 	bl	8002d02 <USB_DevDisconnect>
  return HAL_OK;
 8001328:	4640      	mov	r0, r8
 800132a:	e000      	b.n	800132e <HAL_PCD_Init+0xce>
  uint32_t index = 0;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
  {
    return HAL_ERROR;
 800132c:	2001      	movs	r0, #1
  hpcd->USB_Address = 0;
  hpcd->State= HAL_PCD_STATE_READY;
  
  USB_DevDisconnect (hpcd->Instance);  
  return HAL_OK;
}
 800132e:	b006      	add	sp, #24
 8001330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001334 <HAL_PCD_Start>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8001334:	f890 33e8 	ldrb.w	r3, [r0, #1000]	; 0x3e8
  * @brief  Start The USB Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001338:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 800133a:	2b01      	cmp	r3, #1
  * @brief  Start The USB Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800133c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800133e:	d00e      	beq.n	800135e <HAL_PCD_Start+0x2a>
 8001340:	2101      	movs	r1, #1
 8001342:	f880 13e8 	strb.w	r1, [r0, #1000]	; 0x3e8
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 8001346:	f002 fd50 	bl	8003dea <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 800134a:	6820      	ldr	r0, [r4, #0]
 800134c:	f001 fcd7 	bl	8002cfe <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001350:	6820      	ldr	r0, [r4, #0]
 8001352:	f001 fa08 	bl	8002766 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001356:	2000      	movs	r0, #0
 8001358:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  return HAL_OK;
 800135c:	bd10      	pop	{r4, pc}
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 800135e:	2002      	movs	r0, #2
  HAL_PCDEx_SetConnectionState (hpcd, 1);
  USB_DevConnect (hpcd->Instance);
  __HAL_PCD_ENABLE(hpcd);
  __HAL_UNLOCK(hpcd);
  return HAL_OK;
}
 8001360:	bd10      	pop	{r4, pc}

08001362 <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8001362:	f890 23e8 	ldrb.w	r2, [r0, #1000]	; 0x3e8
  * @param  hpcd: PCD handle
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001366:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8001368:	2a01      	cmp	r2, #1
  * @param  hpcd: PCD handle
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800136a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800136c:	d00b      	beq.n	8001386 <HAL_PCD_SetAddress+0x24>
 800136e:	2201      	movs	r2, #1
 8001370:	f880 23e8 	strb.w	r2, [r0, #1000]	; 0x3e8
  hpcd->USB_Address = address;
 8001374:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 8001378:	6800      	ldr	r0, [r0, #0]
 800137a:	f001 fcba 	bl	8002cf2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800137e:	2000      	movs	r0, #0
 8001380:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
 8001384:	bd10      	pop	{r4, pc}
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8001386:	2002      	movs	r0, #2
  hpcd->USB_Address = address;
  USB_SetDevAddress(hpcd->Instance, address);
  __HAL_UNLOCK(hpcd);
  return HAL_OK;
}
 8001388:	bd10      	pop	{r4, pc}

0800138a <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800138a:	b538      	push	{r3, r4, r5, lr}
 800138c:	4604      	mov	r4, r0
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80) == 0x80)
 800138e:	b248      	sxtb	r0, r1
 8001390:	2800      	cmp	r0, #0
 8001392:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001396:	bfb5      	itete	lt
 8001398:	eb04 1145 	addlt.w	r1, r4, r5, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800139c:	eb04 1141 	addge.w	r1, r4, r1, lsl #5
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80013a0:	3128      	addlt	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80013a2:	f501 7102 	addge.w	r1, r1, #520	; 0x208
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 80013a6:	0fc0      	lsrs	r0, r0, #31
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
 80013a8:	700d      	strb	r5, [r1, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 80013aa:	7048      	strb	r0, [r1, #1]
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
 80013ac:	70cb      	strb	r3, [r1, #3]
    
  __HAL_LOCK(hpcd);
 80013ae:	f894 33e8 	ldrb.w	r3, [r4, #1000]	; 0x3e8
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
  ep->maxpacket = ep_mps;
 80013b2:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
    
  __HAL_LOCK(hpcd);
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d009      	beq.n	80013cc <HAL_PCD_EP_Open+0x42>
 80013b8:	2301      	movs	r3, #1
 80013ba:	f884 33e8 	strb.w	r3, [r4, #1000]	; 0x3e8
  USB_ActivateEndpoint(hpcd->Instance , ep);
 80013be:	6820      	ldr	r0, [r4, #0]
 80013c0:	f001 f9fa 	bl	80027b8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80013c4:	2000      	movs	r0, #0
 80013c6:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  return ret;
 80013ca:	bd38      	pop	{r3, r4, r5, pc}
  
  ep->is_in = (0x80 & ep_addr) != 0;
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
    
  __HAL_LOCK(hpcd);
 80013cc:	2002      	movs	r0, #2
  USB_ActivateEndpoint(hpcd->Instance , ep);
  __HAL_UNLOCK(hpcd);
  return ret;
}
 80013ce:	bd38      	pop	{r3, r4, r5, pc}

080013d0 <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80) == 0x80)
 80013d0:	b24b      	sxtb	r3, r1
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	f001 027f 	and.w	r2, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80013d8:	bfb5      	itete	lt
 80013da:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80013de:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
{  
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80013e2:	3128      	addlt	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80013e4:	f501 7102 	addge.w	r1, r1, #520	; 0x208
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 80013e8:	0fdb      	lsrs	r3, r3, #31
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 80013ea:	b510      	push	{r4, lr}
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
 80013ec:	700a      	strb	r2, [r1, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 80013ee:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd);
 80013f0:	f890 33e8 	ldrb.w	r3, [r0, #1000]	; 0x3e8
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 80013f4:	4604      	mov	r4, r0
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
  
  __HAL_LOCK(hpcd);
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d009      	beq.n	800140e <HAL_PCD_EP_Close+0x3e>
 80013fa:	2301      	movs	r3, #1
 80013fc:	f880 33e8 	strb.w	r3, [r0, #1000]	; 0x3e8
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8001400:	6800      	ldr	r0, [r0, #0]
 8001402:	f001 fb4b 	bl	8002a9c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001406:	2000      	movs	r0, #0
 8001408:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  return HAL_OK;
 800140c:	bd10      	pop	{r4, pc}
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
  
  __HAL_LOCK(hpcd);
 800140e:	2002      	movs	r0, #2
  USB_DeactivateEndpoint(hpcd->Instance , ep);
  __HAL_UNLOCK(hpcd);
  return HAL_OK;
}
 8001410:	bd10      	pop	{r4, pc}

08001412 <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001412:	b570      	push	{r4, r5, r6, lr}
 8001414:	4604      	mov	r4, r0
 8001416:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 800141a:	0170      	lsls	r0, r6, #5
 800141c:	1825      	adds	r5, r4, r0
  ep->xfer_len = len;
 800141e:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
  ep->xfer_count = 0;
 8001422:	2300      	movs	r3, #0
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8001424:	f8c5 221c 	str.w	r2, [r5, #540]	; 0x21c
  ep->xfer_len = len;
  ep->xfer_count = 0;
 8001428:	f8c5 3224 	str.w	r3, [r5, #548]	; 0x224
  ep->is_in = 0;
 800142c:	f885 3209 	strb.w	r3, [r5, #521]	; 0x209
  ep->num = ep_addr & 0x7F;
 8001430:	f885 6208 	strb.w	r6, [r5, #520]	; 0x208
  
  __HAL_LOCK(hpcd);
 8001434:	f894 33e8 	ldrb.w	r3, [r4, #1000]	; 0x3e8
 8001438:	2b01      	cmp	r3, #1
 800143a:	d00c      	beq.n	8001456 <HAL_PCD_EP_Receive+0x44>
 800143c:	2301      	movs	r3, #1
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800143e:	f500 7002 	add.w	r0, r0, #520	; 0x208
 8001442:	1821      	adds	r1, r4, r0
  ep->xfer_len = len;
  ep->xfer_count = 0;
  ep->is_in = 0;
  ep->num = ep_addr & 0x7F;
  
  __HAL_LOCK(hpcd);
 8001444:	f884 33e8 	strb.w	r3, [r4, #1000]	; 0x3e8
  
  if ((ep_addr & 0x7F) == 0 )
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
 8001448:	6820      	ldr	r0, [r4, #0]
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 800144a:	f001 fc73 	bl	8002d34 <USB_EPStartXfer>
  }
  __HAL_UNLOCK(hpcd);
 800144e:	2000      	movs	r0, #0
 8001450:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  
  return HAL_OK;
 8001454:	bd70      	pop	{r4, r5, r6, pc}
  ep->xfer_len = len;
  ep->xfer_count = 0;
  ep->is_in = 0;
  ep->num = ep_addr & 0x7F;
  
  __HAL_LOCK(hpcd);
 8001456:	2002      	movs	r0, #2
    USB_EPStartXfer(hpcd->Instance , ep);
  }
  __HAL_UNLOCK(hpcd);
  
  return HAL_OK;
}
 8001458:	bd70      	pop	{r4, r5, r6, pc}

0800145a <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & 0x7F].xfer_count;
 800145a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800145e:	eb00 1041 	add.w	r0, r0, r1, lsl #5
}
 8001462:	f8b0 0224 	ldrh.w	r0, [r0, #548]	; 0x224
 8001466:	4770      	bx	lr

08001468 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001468:	b570      	push	{r4, r5, r6, lr}
 800146a:	4604      	mov	r4, r0
 800146c:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8001470:	0170      	lsls	r0, r6, #5
 8001472:	1825      	adds	r5, r4, r0
  ep->xfer_len = len;
 8001474:	642b      	str	r3, [r5, #64]	; 0x40
  ep->xfer_count = 0;
 8001476:	2300      	movs	r3, #0
 8001478:	646b      	str	r3, [r5, #68]	; 0x44
  ep->is_in = 1;
 800147a:	2301      	movs	r3, #1
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 800147c:	63ea      	str	r2, [r5, #60]	; 0x3c
  ep->xfer_len = len;
  ep->xfer_count = 0;
  ep->is_in = 1;
 800147e:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
  ep->num = ep_addr & 0x7F;
 8001482:	f885 6028 	strb.w	r6, [r5, #40]	; 0x28
  
  __HAL_LOCK(hpcd);
 8001486:	f894 23e8 	ldrb.w	r2, [r4, #1000]	; 0x3e8
 800148a:	429a      	cmp	r2, r3
 800148c:	d00a      	beq.n	80014a4 <HAL_PCD_EP_Transmit+0x3c>
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800148e:	3028      	adds	r0, #40	; 0x28
 8001490:	1821      	adds	r1, r4, r0
  ep->xfer_len = len;
  ep->xfer_count = 0;
  ep->is_in = 1;
  ep->num = ep_addr & 0x7F;
  
  __HAL_LOCK(hpcd);
 8001492:	f884 33e8 	strb.w	r3, [r4, #1000]	; 0x3e8
  
  if ((ep_addr & 0x7F) == 0 )
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
 8001496:	6820      	ldr	r0, [r4, #0]
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8001498:	f001 fc4c 	bl	8002d34 <USB_EPStartXfer>
  }
  
  __HAL_UNLOCK(hpcd);
 800149c:	2000      	movs	r0, #0
 800149e:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  
  return HAL_OK;
 80014a2:	bd70      	pop	{r4, r5, r6, pc}
  ep->xfer_len = len;
  ep->xfer_count = 0;
  ep->is_in = 1;
  ep->num = ep_addr & 0x7F;
  
  __HAL_LOCK(hpcd);
 80014a4:	2002      	movs	r0, #2
  }
  
  __HAL_UNLOCK(hpcd);
  
  return HAL_OK;
}
 80014a6:	bd70      	pop	{r4, r5, r6, pc}

080014a8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80014a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80014ac:	4604      	mov	r4, r0
  uint32_t wInterrupt_Mask = 0;
  
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 80014ae:	6800      	ldr	r0, [r0, #0]
 80014b0:	f001 fc29 	bl	8002d06 <USB_ReadInterrupts>
 80014b4:	0400      	lsls	r0, r0, #16
 80014b6:	d416      	bmi.n	80014e6 <HAL_PCD_IRQHandler+0x3e>
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    PCD_EP_ISR_Handler(hpcd);
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 80014b8:	6820      	ldr	r0, [r4, #0]
 80014ba:	f001 fc24 	bl	8002d06 <USB_ReadInterrupts>
 80014be:	0541      	lsls	r1, r0, #21
 80014c0:	f140 81db 	bpl.w	800187a <HAL_PCD_IRQHandler+0x3d2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80014c4:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 80014c6:	4620      	mov	r0, r4
    PCD_EP_ISR_Handler(hpcd);
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80014c8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80014cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80014d0:	041b      	lsls	r3, r3, #16
 80014d2:	0c1b      	lsrs	r3, r3, #16
 80014d4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 80014d8:	f002 fbbd 	bl	8003c56 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0);
 80014dc:	2100      	movs	r1, #0
 80014de:	4620      	mov	r0, r4
 80014e0:	f7ff ff3f 	bl	8001362 <HAL_PCD_SetAddress>
 80014e4:	e1c9      	b.n	800187a <HAL_PCD_IRQHandler+0x3d2>
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
  PCD_EPTypeDef *ep = NULL;
  uint16_t count = 0;
  uint8_t epindex = 0;
  __IO uint16_t wIstr = 0;  
 80014e6:	2300      	movs	r3, #0
 80014e8:	f8ad 3004 	strh.w	r3, [sp, #4]
        
        if ((wEPVal & USB_EP_SETUP) != 0)
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 80014ec:	f504 777b 	add.w	r7, r4, #1004	; 0x3ec
{
  PCD_EPTypeDef *ep = NULL;
  uint16_t count = 0;
  uint8_t epindex = 0;
  __IO uint16_t wIstr = 0;  
  __IO uint16_t wEPVal = 0;
 80014f0:	f8ad 3006 	strh.w	r3, [sp, #6]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 80014f4:	6820      	ldr	r0, [r4, #0]
 80014f6:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	f8ad 3004 	strh.w	r3, [sp, #4]
 8001500:	041b      	lsls	r3, r3, #16
 8001502:	d5d9      	bpl.n	80014b8 <HAL_PCD_IRQHandler+0x10>
  {
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001504:	f8bd 5004 	ldrh.w	r5, [sp, #4]
    
    if (epindex == 0)
 8001508:	f015 050f 	ands.w	r5, r5, #15
 800150c:	f040 80b5 	bne.w	800167a <HAL_PCD_IRQHandler+0x1d2>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 8001510:	f8bd 1004 	ldrh.w	r1, [sp, #4]
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001514:	8803      	ldrh	r3, [r0, #0]
    if (epindex == 0)
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 8001516:	f001 0110 	and.w	r1, r1, #16
 800151a:	b289      	uxth	r1, r1
 800151c:	bb59      	cbnz	r1, 8001576 <HAL_PCD_IRQHandler+0xce>
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800151e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001526:	041b      	lsls	r3, r3, #16
 8001528:	0c1b      	lsrs	r3, r3, #16
 800152a:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800152c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001530:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8001534:	b29b      	uxth	r3, r3
 8001536:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800153a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800153e:	f8d0 3404 	ldr.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8001542:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
        ep = &hpcd->IN_ep[0];
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001544:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001548:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 800154a:	4413      	add	r3, r2
 800154c:	63e3      	str	r3, [r4, #60]	; 0x3c
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0);
 800154e:	4620      	mov	r0, r4
 8001550:	f002 fb76 	bl	8003c40 <HAL_PCD_DataInStageCallback>
        
        
        if((hpcd->USB_Address > 0)&& ( ep->xfer_len == 0))
 8001554:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001558:	2b00      	cmp	r3, #0
 800155a:	d0cb      	beq.n	80014f4 <HAL_PCD_IRQHandler+0x4c>
 800155c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800155e:	2a00      	cmp	r2, #0
 8001560:	d1c8      	bne.n	80014f4 <HAL_PCD_IRQHandler+0x4c>
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8001562:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001566:	6821      	ldr	r1, [r4, #0]
 8001568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800156c:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0;
 8001570:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8001574:	e7be      	b.n	80014f4 <HAL_PCD_IRQHandler+0x4c>
        /* DIR = 1 */
        
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001576:	b29b      	uxth	r3, r3
 8001578:	f8ad 3006 	strh.w	r3, [sp, #6]
        
        if ((wEPVal & USB_EP_SETUP) != 0)
 800157c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001580:	051a      	lsls	r2, r3, #20
 8001582:	d51e      	bpl.n	80015c2 <HAL_PCD_IRQHandler+0x11a>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001584:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001588:	f894 2208 	ldrb.w	r2, [r4, #520]	; 0x208
 800158c:	b29b      	uxth	r3, r3
 800158e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001592:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001596:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 800159a:	f8b4 220c 	ldrh.w	r2, [r4, #524]	; 0x20c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
        
        if ((wEPVal & USB_EP_SETUP) != 0)
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800159e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015a2:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 80015a6:	4639      	mov	r1, r7
 80015a8:	f001 fc94 	bl	8002ed4 <USB_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 80015ac:	6822      	ldr	r2, [r4, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 80015ae:	4620      	mov	r0, r4
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 80015b0:	8813      	ldrh	r3, [r2, #0]
 80015b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015b6:	051b      	lsls	r3, r3, #20
 80015b8:	0d1b      	lsrs	r3, r3, #20
 80015ba:	8013      	strh	r3, [r2, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 80015bc:	f002 fb32 	bl	8003c24 <HAL_PCD_SetupStageCallback>
 80015c0:	e798      	b.n	80014f4 <HAL_PCD_IRQHandler+0x4c>
        }
        
        else if ((wEPVal & USB_EP_CTR_RX) != 0)
 80015c2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80015c6:	041b      	lsls	r3, r3, #16
 80015c8:	d594      	bpl.n	80014f4 <HAL_PCD_IRQHandler+0x4c>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80015ca:	8803      	ldrh	r3, [r0, #0]
 80015cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015d0:	051b      	lsls	r3, r3, #20
 80015d2:	0d1b      	lsrs	r3, r3, #20
 80015d4:	8003      	strh	r3, [r0, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80015d6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80015da:	f894 2208 	ldrb.w	r2, [r4, #520]	; 0x208
 80015de:	b29b      	uxth	r3, r3
 80015e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80015e4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80015e8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80015ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015f0:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
          
          if (ep->xfer_count != 0)
 80015f4:	b163      	cbz	r3, 8001610 <HAL_PCD_IRQHandler+0x168>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 80015f6:	f8b4 220c 	ldrh.w	r2, [r4, #524]	; 0x20c
 80015fa:	f8d4 121c 	ldr.w	r1, [r4, #540]	; 0x21c
 80015fe:	f001 fc69 	bl	8002ed4 <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8001602:	f8d4 221c 	ldr.w	r2, [r4, #540]	; 0x21c
 8001606:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
 800160a:	4413      	add	r3, r2
 800160c:	f8c4 321c 	str.w	r3, [r4, #540]	; 0x21c
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0);
 8001610:	2100      	movs	r1, #0
 8001612:	4620      	mov	r0, r4
 8001614:	f002 fb0c 	bl	8003c30 <HAL_PCD_DataOutStageCallback>
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001618:	6822      	ldr	r2, [r4, #0]
 800161a:	f8d4 5218 	ldr.w	r5, [r4, #536]	; 0x218
 800161e:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8001622:	2d3e      	cmp	r5, #62	; 0x3e
 8001624:	b289      	uxth	r1, r1
 8001626:	f101 0106 	add.w	r1, r1, #6
 800162a:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 800162e:	d90b      	bls.n	8001648 <HAL_PCD_IRQHandler+0x1a0>
 8001630:	f3c5 134f 	ubfx	r3, r5, #5, #16
 8001634:	06ee      	lsls	r6, r5, #27
 8001636:	bf04      	itt	eq
 8001638:	f103 33ff 	addeq.w	r3, r3, #4294967295
 800163c:	b29b      	uxtheq	r3, r3
 800163e:	ea6f 63c3 	mvn.w	r3, r3, lsl #27
 8001642:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001646:	e006      	b.n	8001656 <HAL_PCD_IRQHandler+0x1ae>
 8001648:	f3c5 034f 	ubfx	r3, r5, #1, #16
 800164c:	07ed      	lsls	r5, r5, #31
 800164e:	bf44      	itt	mi
 8001650:	3301      	addmi	r3, #1
 8001652:	b29b      	uxthmi	r3, r3
 8001654:	029b      	lsls	r3, r3, #10
 8001656:	b29b      	uxth	r3, r3
 8001658:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800165c:	8813      	ldrh	r3, [r2, #0]
 800165e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001666:	041b      	lsls	r3, r3, #16
 8001668:	0c1b      	lsrs	r3, r3, #16
 800166a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800166e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001672:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001676:	8013      	strh	r3, [r2, #0]
 8001678:	e73c      	b.n	80014f4 <HAL_PCD_IRQHandler+0x4c>
    else
    {
      /* Decode and service non control endpoints interrupt  */
	  
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800167a:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 800167e:	b29b      	uxth	r3, r3
 8001680:	f8ad 3006 	strh.w	r3, [sp, #6]
      if ((wEPVal & USB_EP_CTR_RX) != 0)
 8001684:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001688:	0419      	lsls	r1, r3, #16
 800168a:	d577      	bpl.n	800177c <HAL_PCD_IRQHandler+0x2d4>
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800168c:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        ep = &hpcd->OUT_ep[epindex];
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0)
 8001690:	ea4f 1845 	mov.w	r8, r5, lsl #5
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
      if ((wEPVal & USB_EP_CTR_RX) != 0)
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001698:	051b      	lsls	r3, r3, #20
 800169a:	0d1b      	lsrs	r3, r3, #20
 800169c:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        ep = &hpcd->OUT_ep[epindex];
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0)
 80016a0:	eb04 0108 	add.w	r1, r4, r8
 80016a4:	f891 3212 	ldrb.w	r3, [r1, #530]	; 0x212
 80016a8:	b9ab      	cbnz	r3, 80016d6 <HAL_PCD_IRQHandler+0x22e>
        {
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80016aa:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80016ae:	f891 2208 	ldrb.w	r2, [r1, #520]	; 0x208
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80016b8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80016bc:	f8d3 640c 	ldr.w	r6, [r3, #1036]	; 0x40c
 80016c0:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0)
 80016c4:	b3de      	cbz	r6, 800173e <HAL_PCD_IRQHandler+0x296>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80016c6:	f8b1 220c 	ldrh.w	r2, [r1, #524]	; 0x20c
 80016ca:	4633      	mov	r3, r6
 80016cc:	f8d1 121c 	ldr.w	r1, [r1, #540]	; 0x21c
 80016d0:	f001 fc00 	bl	8002ed4 <USB_ReadPMA>
 80016d4:	e033      	b.n	800173e <HAL_PCD_IRQHandler+0x296>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 80016d6:	f891 3208 	ldrb.w	r3, [r1, #520]	; 0x208
 80016da:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	f412 4f80 	tst.w	r2, #16384	; 0x4000
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80016e4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80016e8:	b292      	uxth	r2, r2
 80016ea:	4413      	add	r3, r2
 80016ec:	eb00 0343 	add.w	r3, r0, r3, lsl #1
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 80016f0:	d008      	beq.n	8001704 <HAL_PCD_IRQHandler+0x25c>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80016f2:	f8d3 6404 	ldr.w	r6, [r3, #1028]	; 0x404
 80016f6:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0)
 80016fa:	b17e      	cbz	r6, 800171c <HAL_PCD_IRQHandler+0x274>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80016fc:	4633      	mov	r3, r6
 80016fe:	f8b1 220e 	ldrh.w	r2, [r1, #526]	; 0x20e
 8001702:	e007      	b.n	8001714 <HAL_PCD_IRQHandler+0x26c>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001704:	f8d3 640c 	ldr.w	r6, [r3, #1036]	; 0x40c
 8001708:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0)
 800170c:	b136      	cbz	r6, 800171c <HAL_PCD_IRQHandler+0x274>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800170e:	4633      	mov	r3, r6
 8001710:	f8b1 2210 	ldrh.w	r2, [r1, #528]	; 0x210
 8001714:	f8d1 121c 	ldr.w	r1, [r1, #540]	; 0x21c
 8001718:	f001 fbdc 	bl	8002ed4 <USB_ReadPMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 800171c:	eb04 0308 	add.w	r3, r4, r8
 8001720:	f893 1208 	ldrb.w	r1, [r3, #520]	; 0x208
 8001724:	6822      	ldr	r2, [r4, #0]
 8001726:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800172a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800172e:	051b      	lsls	r3, r3, #20
 8001730:	0d1b      	lsrs	r3, r3, #20
 8001732:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001736:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800173a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800173e:	eb04 0108 	add.w	r1, r4, r8
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 8001742:	f8d1 3224 	ldr.w	r3, [r1, #548]	; 0x224
        ep->xfer_buff+=count;
 8001746:	f8d1 221c 	ldr.w	r2, [r1, #540]	; 0x21c
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 800174a:	4433      	add	r3, r6
 800174c:	f8c1 3224 	str.w	r3, [r1, #548]	; 0x224
        ep->xfer_buff+=count;
       
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 8001750:	f8d1 3220 	ldr.w	r3, [r1, #544]	; 0x220
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
        ep->xfer_buff+=count;
 8001754:	4432      	add	r2, r6
 8001756:	f8c1 221c 	str.w	r2, [r1, #540]	; 0x21c
       
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 800175a:	b11b      	cbz	r3, 8001764 <HAL_PCD_IRQHandler+0x2bc>
 800175c:	f8d1 0218 	ldr.w	r0, [r1, #536]	; 0x218
 8001760:	4286      	cmp	r6, r0
 8001762:	d206      	bcs.n	8001772 <HAL_PCD_IRQHandler+0x2ca>
        {
          /* RX COMPLETE */
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001764:	44a0      	add	r8, r4
 8001766:	f898 1208 	ldrb.w	r1, [r8, #520]	; 0x208
 800176a:	4620      	mov	r0, r4
 800176c:	f002 fa60 	bl	8003c30 <HAL_PCD_DataOutStageCallback>
 8001770:	e004      	b.n	800177c <HAL_PCD_IRQHandler+0x2d4>
        }
        else
        {
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001772:	f891 1208 	ldrb.w	r1, [r1, #520]	; 0x208
 8001776:	4620      	mov	r0, r4
 8001778:	f7ff fe4b 	bl	8001412 <HAL_PCD_EP_Receive>
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0)
 800177c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001780:	061a      	lsls	r2, r3, #24
 8001782:	f57f aeb7 	bpl.w	80014f4 <HAL_PCD_IRQHandler+0x4c>
      {
        ep = &hpcd->IN_ep[epindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001786:	6820      	ldr	r0, [r4, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0)
 8001788:	016e      	lsls	r6, r5, #5
      if ((wEPVal & USB_EP_CTR_TX) != 0)
      {
        ep = &hpcd->IN_ep[epindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800178a:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0)
 800178e:	19a1      	adds	r1, r4, r6
      if ((wEPVal & USB_EP_CTR_TX) != 0)
      {
        ep = &hpcd->IN_ep[epindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001790:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001798:	041b      	lsls	r3, r3, #16
 800179a:	0c1b      	lsrs	r3, r3, #16
 800179c:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0)
 80017a0:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 80017a4:	3502      	adds	r5, #2
 80017a6:	b9b3      	cbnz	r3, 80017d6 <HAL_PCD_IRQHandler+0x32e>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80017a8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80017ac:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80017b6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80017ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80017be:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 80017c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017c6:	606b      	str	r3, [r5, #4]
          if (ep->xfer_count != 0)
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d038      	beq.n	800183e <HAL_PCD_IRQHandler+0x396>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 80017cc:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 80017ce:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 80017d0:	f001 fa9f 	bl	8002d12 <USB_WritePMA>
 80017d4:	e033      	b.n	800183e <HAL_PCD_IRQHandler+0x396>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 80017d6:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 80017da:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	f012 0f40 	tst.w	r2, #64	; 0x40
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80017e4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80017e8:	b292      	uxth	r2, r2
 80017ea:	4413      	add	r3, r2
 80017ec:	eb00 0343 	add.w	r3, r0, r3, lsl #1
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 80017f0:	d009      	beq.n	8001806 <HAL_PCD_IRQHandler+0x35e>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80017f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80017f6:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 80017fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017fe:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0)
 8001800:	b16b      	cbz	r3, 800181e <HAL_PCD_IRQHandler+0x376>
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8001802:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
 8001804:	e008      	b.n	8001818 <HAL_PCD_IRQHandler+0x370>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001806:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800180a:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 800180e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001812:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0)
 8001814:	b11b      	cbz	r3, 800181e <HAL_PCD_IRQHandler+0x376>
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8001816:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 8001818:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800181a:	f001 fa7a 	bl	8002d12 <USB_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 800181e:	19a3      	adds	r3, r4, r6
 8001820:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8001824:	6822      	ldr	r2, [r4, #0]
 8001826:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800182a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800182e:	051b      	lsls	r3, r3, #20
 8001830:	0d1b      	lsrs	r3, r3, #20
 8001832:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800183a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800183e:	6820      	ldr	r0, [r4, #0]
 8001840:	19a1      	adds	r1, r4, r6
 8001842:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001846:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 800184a:	b292      	uxth	r2, r2
 800184c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8001850:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001854:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
        ep->xfer_buff+=ep->xfer_count;
 8001858:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800185a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800185e:	644a      	str	r2, [r1, #68]	; 0x44
        ep->xfer_buff+=ep->xfer_count;
 8001860:	441a      	add	r2, r3
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
 8001862:	6c0b      	ldr	r3, [r1, #64]	; 0x40
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
        ep->xfer_buff+=ep->xfer_count;
 8001864:	63ca      	str	r2, [r1, #60]	; 0x3c
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001866:	4620      	mov	r0, r4
 8001868:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
        ep->xfer_buff+=ep->xfer_count;
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
 800186c:	b913      	cbnz	r3, 8001874 <HAL_PCD_IRQHandler+0x3cc>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800186e:	f002 f9e7 	bl	8003c40 <HAL_PCD_DataInStageCallback>
 8001872:	e63f      	b.n	80014f4 <HAL_PCD_IRQHandler+0x4c>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001874:	f7ff fdf8 	bl	8001468 <HAL_PCD_EP_Transmit>
 8001878:	e63c      	b.n	80014f4 <HAL_PCD_IRQHandler+0x4c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
    HAL_PCD_ResetCallback(hpcd);
    HAL_PCD_SetAddress(hpcd, 0);
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 800187a:	6820      	ldr	r0, [r4, #0]
 800187c:	f001 fa43 	bl	8002d06 <USB_ReadInterrupts>
 8001880:	0447      	lsls	r7, r0, #17
 8001882:	d508      	bpl.n	8001896 <HAL_PCD_IRQHandler+0x3ee>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 8001884:	6822      	ldr	r2, [r4, #0]
 8001886:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800188a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800188e:	041b      	lsls	r3, r3, #16
 8001890:	0c1b      	lsrs	r3, r3, #16
 8001892:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8001896:	6820      	ldr	r0, [r4, #0]
 8001898:	f001 fa35 	bl	8002d06 <USB_ReadInterrupts>
 800189c:	0486      	lsls	r6, r0, #18
 800189e:	d508      	bpl.n	80018b2 <HAL_PCD_IRQHandler+0x40a>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 80018a0:	6822      	ldr	r2, [r4, #0]
 80018a2:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80018a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80018aa:	041b      	lsls	r3, r3, #16
 80018ac:	0c1b      	lsrs	r3, r3, #16
 80018ae:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 80018b2:	6820      	ldr	r0, [r4, #0]
 80018b4:	f001 fa27 	bl	8002d06 <USB_ReadInterrupts>
 80018b8:	04c5      	lsls	r5, r0, #19
 80018ba:	d518      	bpl.n	80018ee <HAL_PCD_IRQHandler+0x446>
  {  
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 80018bc:	6822      	ldr	r2, [r4, #0]
      | USB_CNTR_ESOFM | USB_CNTR_RESETM;
    
    /*Set interrupt mask*/
    hpcd->Instance->CNTR = wInterrupt_Mask;
    
    HAL_PCD_ResumeCallback(hpcd);
 80018be:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
  {  
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 80018c0:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80018c4:	f023 0304 	bic.w	r3, r3, #4
 80018c8:	041b      	lsls	r3, r3, #16
 80018ca:	0c1b      	lsrs	r3, r3, #16
 80018cc:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    /*set wInterrupt_Mask global variable*/
    wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
      | USB_CNTR_ESOFM | USB_CNTR_RESETM;
    
    /*Set interrupt mask*/
    hpcd->Instance->CNTR = wInterrupt_Mask;
 80018d0:	f44f 433d 	mov.w	r3, #48384	; 0xbd00
 80018d4:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    
    HAL_PCD_ResumeCallback(hpcd);
 80018d8:	f002 f9da 	bl	8003c90 <HAL_PCD_ResumeCallback>
    
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 80018dc:	6822      	ldr	r2, [r4, #0]
 80018de:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80018e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80018e6:	041b      	lsls	r3, r3, #16
 80018e8:	0c1b      	lsrs	r3, r3, #16
 80018ea:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 80018ee:	6820      	ldr	r0, [r4, #0]
 80018f0:	f001 fa09 	bl	8002d06 <USB_ReadInterrupts>
 80018f4:	0500      	lsls	r0, r0, #20
 80018f6:	d51d      	bpl.n	8001934 <HAL_PCD_IRQHandler+0x48c>
  {
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 80018f8:	6820      	ldr	r0, [r4, #0]
 80018fa:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80018fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001902:	041b      	lsls	r3, r3, #16
 8001904:	0c1b      	lsrs	r3, r3, #16
 8001906:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 800190a:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800190e:	b29b      	uxth	r3, r3
 8001910:	f043 0308 	orr.w	r3, r3, #8
 8001914:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8001918:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800191c:	b29b      	uxth	r3, r3
 800191e:	f043 0304 	orr.w	r3, r3, #4
 8001922:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0)
 8001926:	f001 f9ee 	bl	8002d06 <USB_ReadInterrupts>
 800192a:	04c1      	lsls	r1, r0, #19
 800192c:	d402      	bmi.n	8001934 <HAL_PCD_IRQHandler+0x48c>
    {
      HAL_PCD_SuspendCallback(hpcd);
 800192e:	4620      	mov	r0, r4
 8001930:	f002 f99e 	bl	8003c70 <HAL_PCD_SuspendCallback>
    }
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8001934:	6820      	ldr	r0, [r4, #0]
 8001936:	f001 f9e6 	bl	8002d06 <USB_ReadInterrupts>
 800193a:	0582      	lsls	r2, r0, #22
 800193c:	d50b      	bpl.n	8001956 <HAL_PCD_IRQHandler+0x4ae>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 800193e:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8001940:	4620      	mov	r0, r4
    }
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8001942:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001946:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800194a:	041b      	lsls	r3, r3, #16
 800194c:	0c1b      	lsrs	r3, r3, #16
 800194e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8001952:	f002 f97c 	bl	8003c4e <HAL_PCD_SOFCallback>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8001956:	6820      	ldr	r0, [r4, #0]
 8001958:	f001 f9d5 	bl	8002d06 <USB_ReadInterrupts>
 800195c:	05c3      	lsls	r3, r0, #23
 800195e:	d508      	bpl.n	8001972 <HAL_PCD_IRQHandler+0x4ca>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 8001960:	6822      	ldr	r2, [r4, #0]
 8001962:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001966:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800196a:	041b      	lsls	r3, r3, #16
 800196c:	0c1b      	lsrs	r3, r3, #16
 800196e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }
}
 8001972:	b002      	add	sp, #8
 8001974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001978 <HAL_PCD_EP_SetStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001978:	b538      	push	{r3, r4, r5, lr}
  PCD_EPTypeDef *ep = NULL;
  
  if ((0x80 & ep_addr) == 0x80)
 800197a:	b24b      	sxtb	r3, r1
 800197c:	2b00      	cmp	r3, #0
 800197e:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001982:	bfb5      	itete	lt
 8001984:	eb00 1145 	addlt.w	r1, r0, r5, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001988:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
{
  PCD_EPTypeDef *ep = NULL;
  
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800198c:	3128      	addlt	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800198e:	f501 7102 	addge.w	r1, r1, #520	; 0x208
  }
  
  ep->is_stall = 1;
 8001992:	2201      	movs	r2, #1
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001994:	0fdb      	lsrs	r3, r3, #31
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  ep->is_stall = 1;
  ep->num   = ep_addr & 0x7F;
 8001996:	b2ed      	uxtb	r5, r5
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  ep->is_stall = 1;
 8001998:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 800199a:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800199c:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd);
 800199e:	f890 33e8 	ldrb.w	r3, [r0, #1000]	; 0x3e8
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019a2:	4604      	mov	r4, r0
  
  ep->is_stall = 1;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  __HAL_LOCK(hpcd);
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d00e      	beq.n	80019c6 <HAL_PCD_EP_SetStall+0x4e>
 80019a8:	f880 23e8 	strb.w	r2, [r0, #1000]	; 0x3e8
  USB_EPSetStall(hpcd->Instance , ep);
 80019ac:	6800      	ldr	r0, [r0, #0]
 80019ae:	f001 f92d 	bl	8002c0c <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 80019b2:	b925      	cbnz	r5, 80019be <HAL_PCD_EP_SetStall+0x46>
  {
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80019b4:	f504 717b 	add.w	r1, r4, #1004	; 0x3ec
 80019b8:	6820      	ldr	r0, [r4, #0]
 80019ba:	f001 f9a8 	bl	8002d0e <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd); 
 80019be:	2000      	movs	r0, #0
 80019c0:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  
  return HAL_OK;
 80019c4:	bd38      	pop	{r3, r4, r5, pc}
  
  ep->is_stall = 1;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  __HAL_LOCK(hpcd);
 80019c6:	2002      	movs	r0, #2
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
  }
  __HAL_UNLOCK(hpcd); 
  
  return HAL_OK;
}
 80019c8:	bd38      	pop	{r3, r4, r5, pc}

080019ca <HAL_PCD_EP_ClrStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019ca:	b538      	push	{r3, r4, r5, lr}
  PCD_EPTypeDef *ep = NULL;
  
  if ((0x80 & ep_addr) == 0x80)
 80019cc:	b24b      	sxtb	r3, r1
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	f001 027f 	and.w	r2, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80019d4:	bfb5      	itete	lt
 80019d6:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80019da:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
{
  PCD_EPTypeDef *ep = NULL;
  
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80019de:	3128      	addlt	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80019e0:	f501 7102 	addge.w	r1, r1, #520	; 0x208
  }
  
  ep->is_stall = 0;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80019e4:	0fdb      	lsrs	r3, r3, #31
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  ep->is_stall = 0;
 80019e6:	2400      	movs	r4, #0
 80019e8:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 80019ea:	700a      	strb	r2, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80019ec:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd); 
 80019ee:	f890 33e8 	ldrb.w	r3, [r0, #1000]	; 0x3e8
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019f2:	4605      	mov	r5, r0
  
  ep->is_stall = 0;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  __HAL_LOCK(hpcd); 
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d009      	beq.n	8001a0c <HAL_PCD_EP_ClrStall+0x42>
 80019f8:	2301      	movs	r3, #1
 80019fa:	f880 33e8 	strb.w	r3, [r0, #1000]	; 0x3e8
  USB_EPClearStall(hpcd->Instance , ep);
 80019fe:	6800      	ldr	r0, [r0, #0]
 8001a00:	f001 f935 	bl	8002c6e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8001a04:	f885 43e8 	strb.w	r4, [r5, #1000]	; 0x3e8
  
  return HAL_OK;
 8001a08:	4620      	mov	r0, r4
 8001a0a:	bd38      	pop	{r3, r4, r5, pc}
  
  ep->is_stall = 0;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  __HAL_LOCK(hpcd); 
 8001a0c:	2002      	movs	r0, #2
  USB_EPClearStall(hpcd->Instance , ep);
  __HAL_UNLOCK(hpcd); 
  
  return HAL_OK;
}
 8001a0e:	bd38      	pop	{r3, r4, r5, pc}

08001a10 <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep = NULL;
  
  /* initialize ep structure*/
  if ((0x80 & ep_addr) == 0x80)
 8001a10:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001a14:	bf1b      	ittet	ne
 8001a16:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8001a1a:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001a1e:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
  PCD_EPTypeDef *ep = NULL;
  
  /* initialize ep structure*/
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001a22:	3028      	addne	r0, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001a24:	bf08      	it	eq
 8001a26:	f500 7002 	addeq.w	r0, r0, #520	; 0x208
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001a2a:	b912      	cbnz	r2, 8001a32 <HAL_PCDEx_PMAConfig+0x22>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0;
 8001a2c:	7282      	strb	r2, [r0, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8001a2e:	8083      	strh	r3, [r0, #4]
 8001a30:	e004      	b.n	8001a3c <HAL_PCDEx_PMAConfig+0x2c>
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1;
 8001a32:	2201      	movs	r2, #1
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
 8001a34:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
 8001a36:	0c1b      	lsrs	r3, r3, #16
    ep->pmaadress = (uint16_t)pmaadress;
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1;
 8001a38:	7282      	strb	r2, [r0, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
 8001a3a:	8103      	strh	r3, [r0, #8]
  }
  
  return HAL_OK; 
}
 8001a3c:	2000      	movs	r0, #0
 8001a3e:	4770      	bx	lr

08001a40 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a40:	6803      	ldr	r3, [r0, #0]
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a42:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a46:	07dc      	lsls	r4, r3, #31
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a48:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a4a:	d403      	bmi.n	8001a54 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a4c:	682b      	ldr	r3, [r5, #0]
 8001a4e:	0798      	lsls	r0, r3, #30
 8001a50:	d473      	bmi.n	8001b3a <HAL_RCC_OscConfig+0xfa>
 8001a52:	e0f2      	b.n	8001c3a <HAL_RCC_OscConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a54:	4cb9      	ldr	r4, [pc, #740]	; (8001d3c <HAL_RCC_OscConfig+0x2fc>)
 8001a56:	6863      	ldr	r3, [r4, #4]
 8001a58:	f003 030c 	and.w	r3, r3, #12
 8001a5c:	2b04      	cmp	r3, #4
 8001a5e:	d007      	beq.n	8001a70 <HAL_RCC_OscConfig+0x30>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a60:	6863      	ldr	r3, [r4, #4]
 8001a62:	f003 030c 	and.w	r3, r3, #12
 8001a66:	2b08      	cmp	r3, #8
 8001a68:	d116      	bne.n	8001a98 <HAL_RCC_OscConfig+0x58>
 8001a6a:	6863      	ldr	r3, [r4, #4]
 8001a6c:	03d9      	lsls	r1, r3, #15
 8001a6e:	d513      	bpl.n	8001a98 <HAL_RCC_OscConfig+0x58>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a74:	fa93 f2a3 	rbit	r2, r3
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a78:	6822      	ldr	r2, [r4, #0]
 8001a7a:	fa93 f3a3 	rbit	r3, r3
 8001a7e:	fab3 f383 	clz	r3, r3
 8001a82:	f003 031f 	and.w	r3, r3, #31
 8001a86:	fa22 f303 	lsr.w	r3, r2, r3
 8001a8a:	07da      	lsls	r2, r3, #31
 8001a8c:	d5de      	bpl.n	8001a4c <HAL_RCC_OscConfig+0xc>
 8001a8e:	686b      	ldr	r3, [r5, #4]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d1db      	bne.n	8001a4c <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 8001a94:	2001      	movs	r0, #1
 8001a96:	e22d      	b.n	8001ef4 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a98:	686b      	ldr	r3, [r5, #4]
 8001a9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a9e:	d015      	beq.n	8001acc <HAL_RCC_OscConfig+0x8c>
 8001aa0:	b96b      	cbnz	r3, 8001abe <HAL_RCC_OscConfig+0x7e>
 8001aa2:	6823      	ldr	r3, [r4, #0]
 8001aa4:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001aa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aac:	6023      	str	r3, [r4, #0]
 8001aae:	6823      	ldr	r3, [r4, #0]
 8001ab0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ab4:	6023      	str	r3, [r4, #0]
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab6:	f7ff fa57 	bl	8000f68 <HAL_GetTick>
 8001aba:	4607      	mov	r7, r0
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001abc:	e02f      	b.n	8001b1e <HAL_RCC_OscConfig+0xde>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001abe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ac2:	6823      	ldr	r3, [r4, #0]
 8001ac4:	d106      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x94>
 8001ac6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aca:	6023      	str	r3, [r4, #0]
 8001acc:	6823      	ldr	r3, [r4, #0]
 8001ace:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad2:	e005      	b.n	8001ae0 <HAL_RCC_OscConfig+0xa0>
 8001ad4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ad8:	6023      	str	r3, [r4, #0]
 8001ada:	6823      	ldr	r3, [r4, #0]
 8001adc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ae0:	6023      	str	r3, [r4, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae2:	f7ff fa41 	bl	8000f68 <HAL_GetTick>
 8001ae6:	4607      	mov	r7, r0
 8001ae8:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001aec:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af0:	6822      	ldr	r2, [r4, #0]
 8001af2:	fa96 f3a6 	rbit	r3, r6
 8001af6:	fab3 f383 	clz	r3, r3
 8001afa:	f003 031f 	and.w	r3, r3, #31
 8001afe:	fa22 f303 	lsr.w	r3, r2, r3
 8001b02:	07db      	lsls	r3, r3, #31
 8001b04:	d4a2      	bmi.n	8001a4c <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b06:	f7ff fa2f 	bl	8000f68 <HAL_GetTick>
 8001b0a:	1bc0      	subs	r0, r0, r7
 8001b0c:	2864      	cmp	r0, #100	; 0x64
 8001b0e:	d9ed      	bls.n	8001aec <HAL_RCC_OscConfig+0xac>
          {
            return HAL_TIMEOUT;
 8001b10:	2003      	movs	r0, #3
 8001b12:	e1ef      	b.n	8001ef4 <HAL_RCC_OscConfig+0x4b4>
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b14:	f7ff fa28 	bl	8000f68 <HAL_GetTick>
 8001b18:	1bc0      	subs	r0, r0, r7
 8001b1a:	2864      	cmp	r0, #100	; 0x64
 8001b1c:	d8f8      	bhi.n	8001b10 <HAL_RCC_OscConfig+0xd0>
 8001b1e:	fa96 f3a6 	rbit	r3, r6
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b22:	6822      	ldr	r2, [r4, #0]
 8001b24:	fa96 f3a6 	rbit	r3, r6
 8001b28:	fab3 f383 	clz	r3, r3
 8001b2c:	f003 031f 	and.w	r3, r3, #31
 8001b30:	fa22 f303 	lsr.w	r3, r2, r3
 8001b34:	07d8      	lsls	r0, r3, #31
 8001b36:	d4ed      	bmi.n	8001b14 <HAL_RCC_OscConfig+0xd4>
 8001b38:	e788      	b.n	8001a4c <HAL_RCC_OscConfig+0xc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b3a:	4c80      	ldr	r4, [pc, #512]	; (8001d3c <HAL_RCC_OscConfig+0x2fc>)
 8001b3c:	6863      	ldr	r3, [r4, #4]
 8001b3e:	f013 0f0c 	tst.w	r3, #12
 8001b42:	d007      	beq.n	8001b54 <HAL_RCC_OscConfig+0x114>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b44:	6863      	ldr	r3, [r4, #4]
 8001b46:	f003 030c 	and.w	r3, r3, #12
 8001b4a:	2b08      	cmp	r3, #8
 8001b4c:	d121      	bne.n	8001b92 <HAL_RCC_OscConfig+0x152>
 8001b4e:	6863      	ldr	r3, [r4, #4]
 8001b50:	03d9      	lsls	r1, r3, #15
 8001b52:	d41e      	bmi.n	8001b92 <HAL_RCC_OscConfig+0x152>
 8001b54:	2302      	movs	r3, #2
 8001b56:	fa93 f2a3 	rbit	r2, r3
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b5a:	6822      	ldr	r2, [r4, #0]
 8001b5c:	fa93 f3a3 	rbit	r3, r3
 8001b60:	fab3 f383 	clz	r3, r3
 8001b64:	f003 031f 	and.w	r3, r3, #31
 8001b68:	fa22 f303 	lsr.w	r3, r2, r3
 8001b6c:	07da      	lsls	r2, r3, #31
 8001b6e:	d502      	bpl.n	8001b76 <HAL_RCC_OscConfig+0x136>
 8001b70:	692b      	ldr	r3, [r5, #16]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d18e      	bne.n	8001a94 <HAL_RCC_OscConfig+0x54>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b76:	6823      	ldr	r3, [r4, #0]
 8001b78:	22f8      	movs	r2, #248	; 0xf8
 8001b7a:	fa92 f2a2 	rbit	r2, r2
 8001b7e:	fab2 f282 	clz	r2, r2
 8001b82:	6969      	ldr	r1, [r5, #20]
 8001b84:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001b88:	fa01 f202 	lsl.w	r2, r1, r2
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	6023      	str	r3, [r4, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b90:	e053      	b.n	8001c3a <HAL_RCC_OscConfig+0x1fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b92:	692a      	ldr	r2, [r5, #16]
 8001b94:	2301      	movs	r3, #1
 8001b96:	b37a      	cbz	r2, 8001bf8 <HAL_RCC_OscConfig+0x1b8>
 8001b98:	fa93 f2a3 	rbit	r2, r3
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b9c:	fab2 f282 	clz	r2, r2
 8001ba0:	0092      	lsls	r2, r2, #2
 8001ba2:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
 8001ba6:	f502 0284 	add.w	r2, r2, #4325376	; 0x420000
 8001baa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bac:	f7ff f9dc 	bl	8000f68 <HAL_GetTick>
 8001bb0:	4607      	mov	r7, r0
 8001bb2:	2602      	movs	r6, #2
 8001bb4:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb8:	4860      	ldr	r0, [pc, #384]	; (8001d3c <HAL_RCC_OscConfig+0x2fc>)
 8001bba:	6822      	ldr	r2, [r4, #0]
 8001bbc:	fa96 f3a6 	rbit	r3, r6
 8001bc0:	fab3 f383 	clz	r3, r3
 8001bc4:	f003 031f 	and.w	r3, r3, #31
 8001bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bcc:	07db      	lsls	r3, r3, #31
 8001bce:	d405      	bmi.n	8001bdc <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bd0:	f7ff f9ca 	bl	8000f68 <HAL_GetTick>
 8001bd4:	1bc0      	subs	r0, r0, r7
 8001bd6:	2802      	cmp	r0, #2
 8001bd8:	d9ec      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x174>
 8001bda:	e799      	b.n	8001b10 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bdc:	6803      	ldr	r3, [r0, #0]
 8001bde:	22f8      	movs	r2, #248	; 0xf8
 8001be0:	fa92 f2a2 	rbit	r2, r2
 8001be4:	fab2 f282 	clz	r2, r2
 8001be8:	6969      	ldr	r1, [r5, #20]
 8001bea:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001bee:	fa01 f202 	lsl.w	r2, r1, r2
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	6003      	str	r3, [r0, #0]
 8001bf6:	e020      	b.n	8001c3a <HAL_RCC_OscConfig+0x1fa>
 8001bf8:	fa93 f3a3 	rbit	r3, r3
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bfc:	fab3 f383 	clz	r3, r3
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001c06:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001c0a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0c:	f7ff f9ac 	bl	8000f68 <HAL_GetTick>
 8001c10:	4607      	mov	r7, r0
 8001c12:	2602      	movs	r6, #2
 8001c14:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c18:	6822      	ldr	r2, [r4, #0]
 8001c1a:	fa96 f3a6 	rbit	r3, r6
 8001c1e:	fab3 f383 	clz	r3, r3
 8001c22:	f003 031f 	and.w	r3, r3, #31
 8001c26:	fa22 f303 	lsr.w	r3, r2, r3
 8001c2a:	07d9      	lsls	r1, r3, #31
 8001c2c:	d505      	bpl.n	8001c3a <HAL_RCC_OscConfig+0x1fa>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c2e:	f7ff f99b 	bl	8000f68 <HAL_GetTick>
 8001c32:	1bc0      	subs	r0, r0, r7
 8001c34:	2802      	cmp	r0, #2
 8001c36:	d9ed      	bls.n	8001c14 <HAL_RCC_OscConfig+0x1d4>
 8001c38:	e76a      	b.n	8001b10 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c3a:	682b      	ldr	r3, [r5, #0]
 8001c3c:	071a      	lsls	r2, r3, #28
 8001c3e:	d546      	bpl.n	8001cce <HAL_RCC_OscConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c40:	69aa      	ldr	r2, [r5, #24]
 8001c42:	4c3e      	ldr	r4, [pc, #248]	; (8001d3c <HAL_RCC_OscConfig+0x2fc>)
 8001c44:	2301      	movs	r3, #1
 8001c46:	493e      	ldr	r1, [pc, #248]	; (8001d40 <HAL_RCC_OscConfig+0x300>)
 8001c48:	b312      	cbz	r2, 8001c90 <HAL_RCC_OscConfig+0x250>
 8001c4a:	fa93 f2a3 	rbit	r2, r3
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c4e:	fab2 f282 	clz	r2, r2
 8001c52:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c56:	f7ff f987 	bl	8000f68 <HAL_GetTick>
 8001c5a:	4607      	mov	r7, r0
 8001c5c:	2602      	movs	r6, #2
 8001c5e:	fa96 f3a6 	rbit	r3, r6
 8001c62:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c66:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001c68:	fa96 f3a6 	rbit	r3, r6
 8001c6c:	fab3 f383 	clz	r3, r3
 8001c70:	f003 031f 	and.w	r3, r3, #31
 8001c74:	fa22 f303 	lsr.w	r3, r2, r3
 8001c78:	07db      	lsls	r3, r3, #31
 8001c7a:	d405      	bmi.n	8001c88 <HAL_RCC_OscConfig+0x248>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c7c:	f7ff f974 	bl	8000f68 <HAL_GetTick>
 8001c80:	1bc0      	subs	r0, r0, r7
 8001c82:	2802      	cmp	r0, #2
 8001c84:	d9eb      	bls.n	8001c5e <HAL_RCC_OscConfig+0x21e>
 8001c86:	e743      	b.n	8001b10 <HAL_RCC_OscConfig+0xd0>
          return HAL_TIMEOUT;
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      HAL_Delay(1);
 8001c88:	2001      	movs	r0, #1
 8001c8a:	f7ff f973 	bl	8000f74 <HAL_Delay>
 8001c8e:	e01e      	b.n	8001cce <HAL_RCC_OscConfig+0x28e>
 8001c90:	fa93 f3a3 	rbit	r3, r3
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c94:	fab3 f383 	clz	r3, r3
 8001c98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c9c:	f7ff f964 	bl	8000f68 <HAL_GetTick>
 8001ca0:	4607      	mov	r7, r0
 8001ca2:	2602      	movs	r6, #2
 8001ca4:	fa96 f3a6 	rbit	r3, r6
 8001ca8:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cac:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001cae:	fa96 f3a6 	rbit	r3, r6
 8001cb2:	fab3 f383 	clz	r3, r3
 8001cb6:	f003 031f 	and.w	r3, r3, #31
 8001cba:	fa22 f303 	lsr.w	r3, r2, r3
 8001cbe:	07d8      	lsls	r0, r3, #31
 8001cc0:	d505      	bpl.n	8001cce <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cc2:	f7ff f951 	bl	8000f68 <HAL_GetTick>
 8001cc6:	1bc0      	subs	r0, r0, r7
 8001cc8:	2802      	cmp	r0, #2
 8001cca:	d9eb      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x264>
 8001ccc:	e720      	b.n	8001b10 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cce:	682b      	ldr	r3, [r5, #0]
 8001cd0:	0759      	lsls	r1, r3, #29
 8001cd2:	d404      	bmi.n	8001cde <HAL_RCC_OscConfig+0x29e>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cd4:	69ea      	ldr	r2, [r5, #28]
 8001cd6:	2a00      	cmp	r2, #0
 8001cd8:	f040 8081 	bne.w	8001dde <HAL_RCC_OscConfig+0x39e>
 8001cdc:	e0d8      	b.n	8001e90 <HAL_RCC_OscConfig+0x450>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cde:	4c17      	ldr	r4, [pc, #92]	; (8001d3c <HAL_RCC_OscConfig+0x2fc>)
    
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ce0:	4e18      	ldr	r6, [pc, #96]	; (8001d44 <HAL_RCC_OscConfig+0x304>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ce2:	69e3      	ldr	r3, [r4, #28]
 8001ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ce8:	61e3      	str	r3, [r4, #28]
 8001cea:	69e3      	ldr	r3, [r4, #28]
 8001cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf0:	9301      	str	r3, [sp, #4]
 8001cf2:	9b01      	ldr	r3, [sp, #4]
    
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cf4:	6833      	ldr	r3, [r6, #0]
 8001cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cfa:	6033      	str	r3, [r6, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cfc:	f7ff f934 	bl	8000f68 <HAL_GetTick>
 8001d00:	4607      	mov	r7, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001d02:	6833      	ldr	r3, [r6, #0]
 8001d04:	05da      	lsls	r2, r3, #23
 8001d06:	d405      	bmi.n	8001d14 <HAL_RCC_OscConfig+0x2d4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d08:	f7ff f92e 	bl	8000f68 <HAL_GetTick>
 8001d0c:	1bc0      	subs	r0, r0, r7
 8001d0e:	2864      	cmp	r0, #100	; 0x64
 8001d10:	d9f7      	bls.n	8001d02 <HAL_RCC_OscConfig+0x2c2>
 8001d12:	e6fd      	b.n	8001b10 <HAL_RCC_OscConfig+0xd0>
          return HAL_TIMEOUT;
        }
      }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d14:	68eb      	ldr	r3, [r5, #12]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d01c      	beq.n	8001d54 <HAL_RCC_OscConfig+0x314>
 8001d1a:	b9ab      	cbnz	r3, 8001d48 <HAL_RCC_OscConfig+0x308>
 8001d1c:	6a23      	ldr	r3, [r4, #32]
 8001d1e:	2602      	movs	r6, #2
 8001d20:	f023 0301 	bic.w	r3, r3, #1
 8001d24:	6223      	str	r3, [r4, #32]
 8001d26:	6a23      	ldr	r3, [r4, #32]
 8001d28:	4637      	mov	r7, r6
 8001d2a:	f023 0304 	bic.w	r3, r3, #4
 8001d2e:	6223      	str	r3, [r4, #32]
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d30:	f7ff f91a 	bl	8000f68 <HAL_GetTick>
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d34:	f241 3988 	movw	r9, #5000	; 0x1388
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d38:	4680      	mov	r8, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d3a:	e048      	b.n	8001dce <HAL_RCC_OscConfig+0x38e>
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	42420480 	.word	0x42420480
 8001d44:	40007000 	.word	0x40007000
          return HAL_TIMEOUT;
        }
      }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d48:	2b05      	cmp	r3, #5
 8001d4a:	6a23      	ldr	r3, [r4, #32]
 8001d4c:	d106      	bne.n	8001d5c <HAL_RCC_OscConfig+0x31c>
 8001d4e:	f043 0304 	orr.w	r3, r3, #4
 8001d52:	6223      	str	r3, [r4, #32]
 8001d54:	6a23      	ldr	r3, [r4, #32]
 8001d56:	f043 0301 	orr.w	r3, r3, #1
 8001d5a:	e005      	b.n	8001d68 <HAL_RCC_OscConfig+0x328>
 8001d5c:	f023 0301 	bic.w	r3, r3, #1
 8001d60:	6223      	str	r3, [r4, #32]
 8001d62:	6a23      	ldr	r3, [r4, #32]
 8001d64:	f023 0304 	bic.w	r3, r3, #4
 8001d68:	6223      	str	r3, [r4, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d6a:	f7ff f8fd 	bl	8000f68 <HAL_GetTick>
 8001d6e:	2602      	movs	r6, #2
 8001d70:	4681      	mov	r9, r0
 8001d72:	46b0      	mov	r8, r6
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d74:	f241 3788 	movw	r7, #5000	; 0x1388
 8001d78:	fa96 f3a6 	rbit	r3, r6
 8001d7c:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d80:	b10b      	cbz	r3, 8001d86 <HAL_RCC_OscConfig+0x346>
 8001d82:	6a22      	ldr	r2, [r4, #32]
 8001d84:	e000      	b.n	8001d88 <HAL_RCC_OscConfig+0x348>
 8001d86:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001d88:	fa98 f3a8 	rbit	r3, r8
 8001d8c:	fab3 f383 	clz	r3, r3
 8001d90:	f003 031f 	and.w	r3, r3, #31
 8001d94:	fa22 f303 	lsr.w	r3, r2, r3
 8001d98:	07db      	lsls	r3, r3, #31
 8001d9a:	d49b      	bmi.n	8001cd4 <HAL_RCC_OscConfig+0x294>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d9c:	f7ff f8e4 	bl	8000f68 <HAL_GetTick>
 8001da0:	ebc9 0000 	rsb	r0, r9, r0
 8001da4:	42b8      	cmp	r0, r7
 8001da6:	d9e7      	bls.n	8001d78 <HAL_RCC_OscConfig+0x338>
 8001da8:	e6b2      	b.n	8001b10 <HAL_RCC_OscConfig+0xd0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001daa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001dac:	fa97 f3a7 	rbit	r3, r7
 8001db0:	fab3 f383 	clz	r3, r3
 8001db4:	f003 031f 	and.w	r3, r3, #31
 8001db8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dbc:	07d8      	lsls	r0, r3, #31
 8001dbe:	d589      	bpl.n	8001cd4 <HAL_RCC_OscConfig+0x294>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dc0:	f7ff f8d2 	bl	8000f68 <HAL_GetTick>
 8001dc4:	ebc8 0000 	rsb	r0, r8, r0
 8001dc8:	4548      	cmp	r0, r9
 8001dca:	f63f aea1 	bhi.w	8001b10 <HAL_RCC_OscConfig+0xd0>
 8001dce:	fa96 f3a6 	rbit	r3, r6
 8001dd2:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d0e7      	beq.n	8001daa <HAL_RCC_OscConfig+0x36a>
 8001dda:	6a22      	ldr	r2, [r4, #32]
 8001ddc:	e7e6      	b.n	8001dac <HAL_RCC_OscConfig+0x36c>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dde:	4c47      	ldr	r4, [pc, #284]	; (8001efc <HAL_RCC_OscConfig+0x4bc>)
 8001de0:	6863      	ldr	r3, [r4, #4]
 8001de2:	f003 030c 	and.w	r3, r3, #12
 8001de6:	2b08      	cmp	r3, #8
 8001de8:	f43f ae54 	beq.w	8001a94 <HAL_RCC_OscConfig+0x54>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dec:	2a02      	cmp	r2, #2
 8001dee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001df2:	d15c      	bne.n	8001eae <HAL_RCC_OscConfig+0x46e>
 8001df4:	fa93 f3a3 	rbit	r3, r3
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001df8:	fab3 f383 	clz	r3, r3
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001e02:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0a:	f7ff f8ad 	bl	8000f68 <HAL_GetTick>
 8001e0e:	4680      	mov	r8, r0
 8001e10:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8001e14:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e18:	4f38      	ldr	r7, [pc, #224]	; (8001efc <HAL_RCC_OscConfig+0x4bc>)
 8001e1a:	6822      	ldr	r2, [r4, #0]
 8001e1c:	fa96 f3a6 	rbit	r3, r6
 8001e20:	fab3 f383 	clz	r3, r3
 8001e24:	f003 031f 	and.w	r3, r3, #31
 8001e28:	fa22 f303 	lsr.w	r3, r2, r3
 8001e2c:	07d9      	lsls	r1, r3, #31
 8001e2e:	d431      	bmi.n	8001e94 <HAL_RCC_OscConfig+0x454>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e30:	6a2e      	ldr	r6, [r5, #32]
 8001e32:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
 8001e36:	d105      	bne.n	8001e44 <HAL_RCC_OscConfig+0x404>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e38:	6879      	ldr	r1, [r7, #4]
 8001e3a:	f421 3000 	bic.w	r0, r1, #131072	; 0x20000
 8001e3e:	68a9      	ldr	r1, [r5, #8]
 8001e40:	4301      	orrs	r1, r0
 8001e42:	6079      	str	r1, [r7, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e44:	6863      	ldr	r3, [r4, #4]
 8001e46:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001e48:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8001e4c:	4332      	orrs	r2, r6
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	6063      	str	r3, [r4, #4]
 8001e52:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e56:	fa93 f3a3 	rbit	r3, r3
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e5a:	fab3 f383 	clz	r3, r3
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001e64:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001e68:	2201      	movs	r2, #1
 8001e6a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6c:	f7ff f87c 	bl	8000f68 <HAL_GetTick>
 8001e70:	4606      	mov	r6, r0
 8001e72:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001e76:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e7a:	6822      	ldr	r2, [r4, #0]
 8001e7c:	fa95 f3a5 	rbit	r3, r5
 8001e80:	fab3 f383 	clz	r3, r3
 8001e84:	f003 031f 	and.w	r3, r3, #31
 8001e88:	fa22 f303 	lsr.w	r3, r2, r3
 8001e8c:	07da      	lsls	r2, r3, #31
 8001e8e:	d508      	bpl.n	8001ea2 <HAL_RCC_OscConfig+0x462>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001e90:	2000      	movs	r0, #0
 8001e92:	e02f      	b.n	8001ef4 <HAL_RCC_OscConfig+0x4b4>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e94:	f7ff f868 	bl	8000f68 <HAL_GetTick>
 8001e98:	ebc8 0000 	rsb	r0, r8, r0
 8001e9c:	2802      	cmp	r0, #2
 8001e9e:	d9b9      	bls.n	8001e14 <HAL_RCC_OscConfig+0x3d4>
 8001ea0:	e636      	b.n	8001b10 <HAL_RCC_OscConfig+0xd0>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ea2:	f7ff f861 	bl	8000f68 <HAL_GetTick>
 8001ea6:	1b80      	subs	r0, r0, r6
 8001ea8:	2802      	cmp	r0, #2
 8001eaa:	d9e4      	bls.n	8001e76 <HAL_RCC_OscConfig+0x436>
 8001eac:	e630      	b.n	8001b10 <HAL_RCC_OscConfig+0xd0>
 8001eae:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb2:	fab3 f383 	clz	r3, r3
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001ebc:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec4:	f7ff f850 	bl	8000f68 <HAL_GetTick>
 8001ec8:	4606      	mov	r6, r0
 8001eca:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001ece:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ed2:	6822      	ldr	r2, [r4, #0]
 8001ed4:	fa95 f3a5 	rbit	r3, r5
 8001ed8:	fab3 f383 	clz	r3, r3
 8001edc:	f003 031f 	and.w	r3, r3, #31
 8001ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee4:	07db      	lsls	r3, r3, #31
 8001ee6:	d5d3      	bpl.n	8001e90 <HAL_RCC_OscConfig+0x450>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ee8:	f7ff f83e 	bl	8000f68 <HAL_GetTick>
 8001eec:	1b80      	subs	r0, r0, r6
 8001eee:	2802      	cmp	r0, #2
 8001ef0:	d9ed      	bls.n	8001ece <HAL_RCC_OscConfig+0x48e>
 8001ef2:	e60d      	b.n	8001b10 <HAL_RCC_OscConfig+0xd0>
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8001ef4:	b003      	add	sp, #12
 8001ef6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001efa:	bf00      	nop
 8001efc:	40021000 	.word	0x40021000

08001f00 <HAL_RCC_GetSysClockFreq>:
{
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001f00:	4b1f      	ldr	r3, [pc, #124]	; (8001f80 <HAL_RCC_GetSysClockFreq+0x80>)
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f02:	b570      	push	{r4, r5, r6, lr}
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001f04:	f103 0510 	add.w	r5, r3, #16
 8001f08:	462e      	mov	r6, r5
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f0a:	b086      	sub	sp, #24
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001f0c:	ac02      	add	r4, sp, #8
 8001f0e:	4622      	mov	r2, r4
 8001f10:	6818      	ldr	r0, [r3, #0]
 8001f12:	6859      	ldr	r1, [r3, #4]
 8001f14:	3308      	adds	r3, #8
 8001f16:	c203      	stmia	r2!, {r0, r1}
 8001f18:	42ab      	cmp	r3, r5
 8001f1a:	4614      	mov	r4, r2
 8001f1c:	d1f7      	bne.n	8001f0e <HAL_RCC_GetSysClockFreq+0xe>
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 8001f1e:	8833      	ldrh	r3, [r6, #0]
  uint32_t sysclockfreq = 0;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 8001f20:	4c18      	ldr	r4, [pc, #96]	; (8001f84 <HAL_RCC_GetSysClockFreq+0x84>)
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 8001f22:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint32_t sysclockfreq = 0;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 8001f26:	6860      	ldr	r0, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f28:	f000 030c 	and.w	r3, r0, #12
 8001f2c:	2b08      	cmp	r3, #8
 8001f2e:	d124      	bne.n	8001f7a <HAL_RCC_GetSysClockFreq+0x7a>
 8001f30:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8001f34:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 8001f38:	fab3 f383 	clz	r3, r3
 8001f3c:	f400 1270 	and.w	r2, r0, #3932160	; 0x3c0000
 8001f40:	fa22 f303 	lsr.w	r3, r2, r3
 8001f44:	aa06      	add	r2, sp, #24
 8001f46:	4413      	add	r3, r2
 8001f48:	f813 1c10 	ldrb.w	r1, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f4c:	03c3      	lsls	r3, r0, #15
 8001f4e:	d511      	bpl.n	8001f74 <HAL_RCC_GetSysClockFreq+0x74>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> POSITION_VAL(RCC_CFGR2_PREDIV1)];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> POSITION_VAL(RCC_CFGR_PLLXTPRE)];
 8001f50:	6862      	ldr	r2, [r4, #4]
 8001f52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f56:	fa93 f3a3 	rbit	r3, r3
 8001f5a:	fab3 f083 	clz	r0, r3
 8001f5e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8001f62:	40c3      	lsrs	r3, r0
 8001f64:	aa06      	add	r2, sp, #24
 8001f66:	4413      	add	r3, r2
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8001f68:	f813 0c14 	ldrb.w	r0, [r3, #-20]
 8001f6c:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x88>)
 8001f6e:	fbb3 f0f0 	udiv	r0, r3, r0
 8001f72:	e000      	b.n	8001f76 <HAL_RCC_GetSysClockFreq+0x76>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f74:	4805      	ldr	r0, [pc, #20]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x8c>)
 8001f76:	4348      	muls	r0, r1
 8001f78:	e000      	b.n	8001f7c <HAL_RCC_GetSysClockFreq+0x7c>
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f7a:	4803      	ldr	r0, [pc, #12]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x88>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001f7c:	b006      	add	sp, #24
 8001f7e:	bd70      	pop	{r4, r5, r6, pc}
 8001f80:	08008970 	.word	0x08008970
 8001f84:	40021000 	.word	0x40021000
 8001f88:	007a1200 	.word	0x007a1200
 8001f8c:	003d0900 	.word	0x003d0900

08001f90 <HAL_RCC_ClockConfig>:
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001f90:	4a54      	ldr	r2, [pc, #336]	; (80020e4 <HAL_RCC_ClockConfig+0x154>)
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001f96:	6813      	ldr	r3, [r2, #0]
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f98:	4606      	mov	r6, r0
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	428b      	cmp	r3, r1
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fa0:	460d      	mov	r5, r1
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001fa2:	d30a      	bcc.n	8001fba <HAL_RCC_ClockConfig+0x2a>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fa4:	6831      	ldr	r1, [r6, #0]
 8001fa6:	078c      	lsls	r4, r1, #30
 8001fa8:	d514      	bpl.n	8001fd4 <HAL_RCC_ClockConfig+0x44>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001faa:	484f      	ldr	r0, [pc, #316]	; (80020e8 <HAL_RCC_ClockConfig+0x158>)
 8001fac:	6843      	ldr	r3, [r0, #4]
 8001fae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fb2:	68b3      	ldr	r3, [r6, #8]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	6043      	str	r3, [r0, #4]
 8001fb8:	e00c      	b.n	8001fd4 <HAL_RCC_ClockConfig+0x44>
#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fba:	6813      	ldr	r3, [r2, #0]
 8001fbc:	f023 0307 	bic.w	r3, r3, #7
 8001fc0:	430b      	orrs	r3, r1
 8001fc2:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001fc4:	6813      	ldr	r3, [r2, #0]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	4299      	cmp	r1, r3
 8001fcc:	d0ea      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 8001fce:	2001      	movs	r0, #1
 8001fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fd4:	07c8      	lsls	r0, r1, #31
 8001fd6:	d406      	bmi.n	8001fe6 <HAL_RCC_ClockConfig+0x56>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001fd8:	4a42      	ldr	r2, [pc, #264]	; (80020e4 <HAL_RCC_ClockConfig+0x154>)
 8001fda:	6813      	ldr	r3, [r2, #0]
 8001fdc:	f003 0307 	and.w	r3, r3, #7
 8001fe0:	429d      	cmp	r5, r3
 8001fe2:	d34a      	bcc.n	800207a <HAL_RCC_ClockConfig+0xea>
 8001fe4:	e053      	b.n	800208e <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fe6:	6872      	ldr	r2, [r6, #4]
 8001fe8:	4c3f      	ldr	r4, [pc, #252]	; (80020e8 <HAL_RCC_ClockConfig+0x158>)
 8001fea:	2a01      	cmp	r2, #1
 8001fec:	d102      	bne.n	8001ff4 <HAL_RCC_ClockConfig+0x64>
 8001fee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ff2:	e004      	b.n	8001ffe <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ff4:	2a02      	cmp	r2, #2
 8001ff6:	bf0c      	ite	eq
 8001ff8:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8001ffc:	2302      	movne	r3, #2
 8001ffe:	fa93 f1a3 	rbit	r1, r3
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002002:	6821      	ldr	r1, [r4, #0]
 8002004:	fa93 f3a3 	rbit	r3, r3
 8002008:	fab3 f383 	clz	r3, r3
 800200c:	f003 031f 	and.w	r3, r3, #31
 8002010:	fa21 f303 	lsr.w	r3, r1, r3
 8002014:	07d9      	lsls	r1, r3, #31
 8002016:	d5da      	bpl.n	8001fce <HAL_RCC_ClockConfig+0x3e>
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002018:	6863      	ldr	r3, [r4, #4]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800201a:	f241 3888 	movw	r8, #5000	; 0x1388
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800201e:	f023 0303 	bic.w	r3, r3, #3
 8002022:	431a      	orrs	r2, r3
 8002024:	6062      	str	r2, [r4, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002026:	f7fe ff9f 	bl	8000f68 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800202a:	6873      	ldr	r3, [r6, #4]
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800202c:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800202e:	2b01      	cmp	r3, #1
 8002030:	d10c      	bne.n	800204c <HAL_RCC_ClockConfig+0xbc>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002032:	6863      	ldr	r3, [r4, #4]
 8002034:	f003 030c 	and.w	r3, r3, #12
 8002038:	2b04      	cmp	r3, #4
 800203a:	d0cd      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800203c:	f7fe ff94 	bl	8000f68 <HAL_GetTick>
 8002040:	1bc0      	subs	r0, r0, r7
 8002042:	4540      	cmp	r0, r8
 8002044:	d9f5      	bls.n	8002032 <HAL_RCC_ClockConfig+0xa2>
        {
          return HAL_TIMEOUT;
 8002046:	2003      	movs	r0, #3
 8002048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800204c:	2b02      	cmp	r3, #2
 800204e:	d10f      	bne.n	8002070 <HAL_RCC_ClockConfig+0xe0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002050:	6863      	ldr	r3, [r4, #4]
 8002052:	f003 030c 	and.w	r3, r3, #12
 8002056:	2b08      	cmp	r3, #8
 8002058:	d0be      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800205a:	f7fe ff85 	bl	8000f68 <HAL_GetTick>
 800205e:	1bc0      	subs	r0, r0, r7
 8002060:	4540      	cmp	r0, r8
 8002062:	d9f5      	bls.n	8002050 <HAL_RCC_ClockConfig+0xc0>
 8002064:	e7ef      	b.n	8002046 <HAL_RCC_ClockConfig+0xb6>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002066:	f7fe ff7f 	bl	8000f68 <HAL_GetTick>
 800206a:	1bc0      	subs	r0, r0, r7
 800206c:	4540      	cmp	r0, r8
 800206e:	d8ea      	bhi.n	8002046 <HAL_RCC_ClockConfig+0xb6>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002070:	6863      	ldr	r3, [r4, #4]
 8002072:	f013 0f0c 	tst.w	r3, #12
 8002076:	d1f6      	bne.n	8002066 <HAL_RCC_ClockConfig+0xd6>
 8002078:	e7ae      	b.n	8001fd8 <HAL_RCC_ClockConfig+0x48>
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800207a:	6813      	ldr	r3, [r2, #0]
 800207c:	f023 0307 	bic.w	r3, r3, #7
 8002080:	432b      	orrs	r3, r5
 8002082:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002084:	6813      	ldr	r3, [r2, #0]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	429d      	cmp	r5, r3
 800208c:	d19f      	bne.n	8001fce <HAL_RCC_ClockConfig+0x3e>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800208e:	6831      	ldr	r1, [r6, #0]
 8002090:	4c15      	ldr	r4, [pc, #84]	; (80020e8 <HAL_RCC_ClockConfig+0x158>)
 8002092:	f011 0f04 	tst.w	r1, #4
 8002096:	d005      	beq.n	80020a4 <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002098:	6863      	ldr	r3, [r4, #4]
 800209a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800209e:	68f3      	ldr	r3, [r6, #12]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	6063      	str	r3, [r4, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020a4:	070b      	lsls	r3, r1, #28
 80020a6:	d506      	bpl.n	80020b6 <HAL_RCC_ClockConfig+0x126>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020a8:	6863      	ldr	r3, [r4, #4]
 80020aa:	6932      	ldr	r2, [r6, #16]
 80020ac:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80020b0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80020b4:	6063      	str	r3, [r4, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80020b6:	f7ff ff23 	bl	8001f00 <HAL_RCC_GetSysClockFreq>
 80020ba:	6863      	ldr	r3, [r4, #4]
 80020bc:	22f0      	movs	r2, #240	; 0xf0
 80020be:	fa92 f2a2 	rbit	r2, r2
 80020c2:	fab2 f282 	clz	r2, r2
 80020c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020ca:	40d3      	lsrs	r3, r2
 80020cc:	4a07      	ldr	r2, [pc, #28]	; (80020ec <HAL_RCC_ClockConfig+0x15c>)
 80020ce:	5cd3      	ldrb	r3, [r2, r3]
 80020d0:	40d8      	lsrs	r0, r3
 80020d2:	4b07      	ldr	r3, [pc, #28]	; (80020f0 <HAL_RCC_ClockConfig+0x160>)
 80020d4:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80020d6:	2000      	movs	r0, #0
 80020d8:	f7fe ff1a 	bl	8000f10 <HAL_InitTick>
  
  return HAL_OK;
 80020dc:	2000      	movs	r0, #0
}
 80020de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80020e2:	bf00      	nop
 80020e4:	40022000 	.word	0x40022000
 80020e8:	40021000 	.word	0x40021000
 80020ec:	08008982 	.word	0x08008982
 80020f0:	20000000 	.word	0x20000000

080020f4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80020f4:	4b01      	ldr	r3, [pc, #4]	; (80020fc <HAL_RCC_GetHCLKFreq+0x8>)
 80020f6:	6818      	ldr	r0, [r3, #0]
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	20000000 	.word	0x20000000

08002100 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002100:	4b08      	ldr	r3, [pc, #32]	; (8002124 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002102:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	fa92 f2a2 	rbit	r2, r2
 800210c:	fab2 f282 	clz	r2, r2
 8002110:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002114:	40d3      	lsrs	r3, r2
 8002116:	4a04      	ldr	r2, [pc, #16]	; (8002128 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002118:	5cd3      	ldrb	r3, [r2, r3]
 800211a:	4a04      	ldr	r2, [pc, #16]	; (800212c <HAL_RCC_GetPCLK1Freq+0x2c>)
 800211c:	6810      	ldr	r0, [r2, #0]
}    
 800211e:	40d8      	lsrs	r0, r3
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	40021000 	.word	0x40021000
 8002128:	08008992 	.word	0x08008992
 800212c:	20000000 	.word	0x20000000

08002130 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002130:	4b08      	ldr	r3, [pc, #32]	; (8002154 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002132:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	fa92 f2a2 	rbit	r2, r2
 800213c:	fab2 f282 	clz	r2, r2
 8002140:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002144:	40d3      	lsrs	r3, r2
 8002146:	4a04      	ldr	r2, [pc, #16]	; (8002158 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002148:	5cd3      	ldrb	r3, [r2, r3]
 800214a:	4a04      	ldr	r2, [pc, #16]	; (800215c <HAL_RCC_GetPCLK2Freq+0x2c>)
 800214c:	6810      	ldr	r0, [r2, #0]
} 
 800214e:	40d8      	lsrs	r0, r3
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	40021000 	.word	0x40021000
 8002158:	08008992 	.word	0x08008992
 800215c:	20000000 	.word	0x20000000

08002160 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002160:	6803      	ldr	r3, [r0, #0]
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002162:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002166:	07dc      	lsls	r4, r3, #31
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002168:	4605      	mov	r5, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800216a:	d564      	bpl.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800216c:	4c3e      	ldr	r4, [pc, #248]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x108>)
    
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 800216e:	4e3f      	ldr	r6, [pc, #252]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002170:	69e3      	ldr	r3, [r4, #28]
 8002172:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002176:	61e3      	str	r3, [r4, #28]
 8002178:	69e3      	ldr	r3, [r4, #28]
 800217a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217e:	9301      	str	r3, [sp, #4]
 8002180:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8002182:	6833      	ldr	r3, [r6, #0]
 8002184:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002188:	6033      	str	r3, [r6, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800218a:	f7fe feed 	bl	8000f68 <HAL_GetTick>
 800218e:	4607      	mov	r7, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002190:	6833      	ldr	r3, [r6, #0]
 8002192:	05d8      	lsls	r0, r3, #23
 8002194:	d406      	bmi.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002196:	f7fe fee7 	bl	8000f68 <HAL_GetTick>
 800219a:	1bc0      	subs	r0, r0, r7
 800219c:	2864      	cmp	r0, #100	; 0x64
 800219e:	d9f7      	bls.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x30>
      {
        return HAL_TIMEOUT;
 80021a0:	2003      	movs	r0, #3
 80021a2:	e05d      	b.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x100>
      }      
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021a4:	6a23      	ldr	r3, [r4, #32]
 80021a6:	4830      	ldr	r0, [pc, #192]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x108>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021a8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80021ac:	d106      	bne.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x5c>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80021ae:	6a23      	ldr	r3, [r4, #32]
 80021b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021b4:	686b      	ldr	r3, [r5, #4]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	6223      	str	r3, [r4, #32]
 80021ba:	e03c      	b.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      }      
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021bc:	686a      	ldr	r2, [r5, #4]
 80021be:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d0f3      	beq.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021c6:	6a01      	ldr	r1, [r0, #32]
 80021c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021cc:	f421 7740 	bic.w	r7, r1, #768	; 0x300
 80021d0:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021d4:	fab2 f282 	clz	r2, r2
 80021d8:	4e25      	ldr	r6, [pc, #148]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80021da:	f04f 0e01 	mov.w	lr, #1
 80021de:	f846 e022 	str.w	lr, [r6, r2, lsl #2]
 80021e2:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021e6:	fab3 f383 	clz	r3, r3
 80021ea:	2200      	movs	r2, #0
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80021ec:	07c9      	lsls	r1, r1, #31
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021ee:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80021f2:	6207      	str	r7, [r0, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80021f4:	d5db      	bpl.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
 80021f6:	f7fe feb7 	bl	8000f68 <HAL_GetTick>
 80021fa:	2602      	movs	r6, #2
 80021fc:	4680      	mov	r8, r0
 80021fe:	4637      	mov	r7, r6
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002200:	f241 3988 	movw	r9, #5000	; 0x1388
 8002204:	fa96 f3a6 	rbit	r3, r6
 8002208:	fa96 f3a6 	rbit	r3, r6
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800220c:	b10b      	cbz	r3, 8002212 <HAL_RCCEx_PeriphCLKConfig+0xb2>
 800220e:	6a22      	ldr	r2, [r4, #32]
 8002210:	e000      	b.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8002212:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002214:	fa97 f3a7 	rbit	r3, r7
 8002218:	fab3 f383 	clz	r3, r3
 800221c:	f003 031f 	and.w	r3, r3, #31
 8002220:	fa22 f303 	lsr.w	r3, r2, r3
 8002224:	07da      	lsls	r2, r3, #31
 8002226:	d4c2      	bmi.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002228:	f7fe fe9e 	bl	8000f68 <HAL_GetTick>
 800222c:	ebc8 0000 	rsb	r0, r8, r0
 8002230:	4548      	cmp	r0, r9
 8002232:	d9e7      	bls.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002234:	e7b4      	b.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x40>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002236:	6828      	ldr	r0, [r5, #0]
 8002238:	0783      	lsls	r3, r0, #30
 800223a:	d506      	bpl.n	800224a <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800223c:	490a      	ldr	r1, [pc, #40]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 800223e:	684b      	ldr	r3, [r1, #4]
 8002240:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002244:	68ab      	ldr	r3, [r5, #8]
 8002246:	4313      	orrs	r3, r2
 8002248:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800224a:	f010 0010 	ands.w	r0, r0, #16
 800224e:	d007      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002250:	4905      	ldr	r1, [pc, #20]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x108>)
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002252:	2000      	movs	r0, #0
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002254:	684b      	ldr	r3, [r1, #4]
 8002256:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800225a:	696b      	ldr	r3, [r5, #20]
 800225c:	4313      	orrs	r3, r2
 800225e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
}
 8002260:	b003      	add	sp, #12
 8002262:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002266:	bf00      	nop
 8002268:	40021000 	.word	0x40021000
 800226c:	40007000 	.word	0x40007000
 8002270:	42420400 	.word	0x42420400

08002274 <UART_SetConfig>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002278:	6806      	ldr	r6, [r0, #0]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode ;
  MODIFY_REG(huart->Instance->CR1, 
 800227a:	6881      	ldr	r1, [r0, #8]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800227c:	6933      	ldr	r3, [r6, #16]
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800227e:	4681      	mov	r9, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002280:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002284:	68c3      	ldr	r3, [r0, #12]
 8002286:	2419      	movs	r4, #25
 8002288:	4313      	orrs	r3, r2
 800228a:	6133      	str	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode ;
  MODIFY_REG(huart->Instance->CR1, 
 800228c:	6903      	ldr	r3, [r0, #16]
 800228e:	68f2      	ldr	r2, [r6, #12]
 8002290:	4319      	orrs	r1, r3
 8002292:	6943      	ldr	r3, [r0, #20]
 8002294:	4319      	orrs	r1, r3
 8002296:	f422 53b0 	bic.w	r3, r2, #5632	; 0x1600
 800229a:	f023 030c 	bic.w	r3, r3, #12
 800229e:	430b      	orrs	r3, r1
 80022a0:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE), 
             tmpreg);
  
  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022a2:	6973      	ldr	r3, [r6, #20]
 80022a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022a8:	6983      	ldr	r3, [r0, #24]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	6173      	str	r3, [r6, #20]
  
  /*------- UART-associated USART registers setting : BRR Configuration ------*/
  if((huart->Instance == USART1))
 80022ae:	4b3d      	ldr	r3, [pc, #244]	; (80023a4 <UART_SetConfig+0x130>)
 80022b0:	429e      	cmp	r6, r3
 80022b2:	d131      	bne.n	8002318 <UART_SetConfig+0xa4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80022b4:	f7ff ff3c 	bl	8002130 <HAL_RCC_GetPCLK2Freq>
 80022b8:	4360      	muls	r0, r4
 80022ba:	f8d9 7004 	ldr.w	r7, [r9, #4]
 80022be:	f04f 0864 	mov.w	r8, #100	; 0x64
 80022c2:	00bf      	lsls	r7, r7, #2
 80022c4:	fbb0 f7f7 	udiv	r7, r0, r7
 80022c8:	f7ff ff32 	bl	8002130 <HAL_RCC_GetPCLK2Freq>
 80022cc:	4360      	muls	r0, r4
 80022ce:	f8d9 5004 	ldr.w	r5, [r9, #4]
 80022d2:	fbb7 f7f8 	udiv	r7, r7, r8
 80022d6:	00ad      	lsls	r5, r5, #2
 80022d8:	fbb0 f5f5 	udiv	r5, r0, r5
 80022dc:	f7ff ff28 	bl	8002130 <HAL_RCC_GetPCLK2Freq>
 80022e0:	4360      	muls	r0, r4
 80022e2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80022e6:	013f      	lsls	r7, r7, #4
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	fbb0 f0f3 	udiv	r0, r0, r3
 80022ee:	fbb0 f0f8 	udiv	r0, r0, r8
 80022f2:	fb08 5510 	mls	r5, r8, r0, r5
 80022f6:	f7ff ff1b 	bl	8002130 <HAL_RCC_GetPCLK2Freq>
 80022fa:	012d      	lsls	r5, r5, #4
 80022fc:	3532      	adds	r5, #50	; 0x32
 80022fe:	fbb5 f5f8 	udiv	r5, r5, r8
 8002302:	4360      	muls	r0, r4
 8002304:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8002308:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 800230c:	0089      	lsls	r1, r1, #2
 800230e:	fbb0 faf1 	udiv	sl, r0, r1
 8002312:	f7ff ff0d 	bl	8002130 <HAL_RCC_GetPCLK2Freq>
 8002316:	e030      	b.n	800237a <UART_SetConfig+0x106>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002318:	f7ff fef2 	bl	8002100 <HAL_RCC_GetPCLK1Freq>
 800231c:	4360      	muls	r0, r4
 800231e:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8002322:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002326:	00bf      	lsls	r7, r7, #2
 8002328:	fbb0 f7f7 	udiv	r7, r0, r7
 800232c:	f7ff fee8 	bl	8002100 <HAL_RCC_GetPCLK1Freq>
 8002330:	4360      	muls	r0, r4
 8002332:	f8d9 5004 	ldr.w	r5, [r9, #4]
 8002336:	fbb7 f7f8 	udiv	r7, r7, r8
 800233a:	00ad      	lsls	r5, r5, #2
 800233c:	fbb0 f5f5 	udiv	r5, r0, r5
 8002340:	f7ff fede 	bl	8002100 <HAL_RCC_GetPCLK1Freq>
 8002344:	4360      	muls	r0, r4
 8002346:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800234a:	013f      	lsls	r7, r7, #4
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002352:	fbb0 f0f8 	udiv	r0, r0, r8
 8002356:	fb08 5510 	mls	r5, r8, r0, r5
 800235a:	f7ff fed1 	bl	8002100 <HAL_RCC_GetPCLK1Freq>
 800235e:	012d      	lsls	r5, r5, #4
 8002360:	3532      	adds	r5, #50	; 0x32
 8002362:	fbb5 f5f8 	udiv	r5, r5, r8
 8002366:	4360      	muls	r0, r4
 8002368:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800236c:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8002370:	0089      	lsls	r1, r1, #2
 8002372:	fbb0 faf1 	udiv	sl, r0, r1
 8002376:	f7ff fec3 	bl	8002100 <HAL_RCC_GetPCLK1Freq>
 800237a:	4344      	muls	r4, r0
 800237c:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8002380:	0080      	lsls	r0, r0, #2
 8002382:	fbb4 f0f0 	udiv	r0, r4, r0
 8002386:	fbb0 f0f8 	udiv	r0, r0, r8
 800238a:	fb08 a210 	mls	r2, r8, r0, sl
 800238e:	0112      	lsls	r2, r2, #4
 8002390:	3232      	adds	r2, #50	; 0x32
 8002392:	fbb2 f3f8 	udiv	r3, r2, r8
 8002396:	f003 030f 	and.w	r3, r3, #15
 800239a:	442b      	add	r3, r5
 800239c:	441f      	add	r7, r3
 800239e:	60b7      	str	r7, [r6, #8]
 80023a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023a4:	40013800 	.word	0x40013800

080023a8 <UART_WaitOnFlagUntilTimeout.constprop.1>:
  * @param  Flag: specifies the UART flag to check.
  * @param  Status: The new Flag status (SET or RESET).
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
 80023a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023aa:	4604      	mov	r4, r0
 80023ac:	460e      	mov	r6, r1
 80023ae:	4615      	mov	r5, r2
{
  uint32_t tickstart = 0;

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80023b0:	f7fe fdda 	bl	8000f68 <HAL_GetTick>
 80023b4:	4607      	mov	r7, r0

  /* Wait until flag is set */
  if(Status == RESET)
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 80023b6:	6822      	ldr	r2, [r4, #0]
 80023b8:	6813      	ldr	r3, [r2, #0]
 80023ba:	ea36 0303 	bics.w	r3, r6, r3
 80023be:	d021      	beq.n	8002404 <UART_WaitOnFlagUntilTimeout.constprop.1+0x5c>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80023c0:	1c6b      	adds	r3, r5, #1
 80023c2:	d0f9      	beq.n	80023b8 <UART_WaitOnFlagUntilTimeout.constprop.1+0x10>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80023c4:	b9c5      	cbnz	r5, 80023f8 <UART_WaitOnFlagUntilTimeout.constprop.1+0x50>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80023c6:	6823      	ldr	r3, [r4, #0]
          huart->State= HAL_UART_STATE_READY;

          /* Process Unlocked */
          __HAL_UNLOCK(huart);

          return HAL_TIMEOUT;
 80023c8:	2003      	movs	r0, #3
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80023ca:	68da      	ldr	r2, [r3, #12]
 80023cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023d0:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80023d2:	68da      	ldr	r2, [r3, #12]
 80023d4:	f022 0220 	bic.w	r2, r2, #32
 80023d8:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80023da:	68da      	ldr	r2, [r3, #12]
 80023dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023e0:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80023e2:	695a      	ldr	r2, [r3, #20]
 80023e4:	f022 0201 	bic.w	r2, r2, #1
 80023e8:	615a      	str	r2, [r3, #20]

          huart->State= HAL_UART_STATE_READY;
 80023ea:	2301      	movs	r3, #1
 80023ec:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80023f0:	2300      	movs	r3, #0
 80023f2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80023f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80023f8:	f7fe fdb6 	bl	8000f68 <HAL_GetTick>
 80023fc:	1bc0      	subs	r0, r0, r7
 80023fe:	4285      	cmp	r5, r0
 8002400:	d2d9      	bcs.n	80023b6 <UART_WaitOnFlagUntilTimeout.constprop.1+0xe>
 8002402:	e7e0      	b.n	80023c6 <UART_WaitOnFlagUntilTimeout.constprop.1+0x1e>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8002404:	2000      	movs	r0, #0
}
 8002406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002408 <HAL_UART_Init>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002408:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 800240a:	4604      	mov	r4, r0
 800240c:	b330      	cbz	r0, 800245c <HAL_UART_Init+0x54>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->State == HAL_UART_STATE_RESET)
 800240e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002412:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002416:	b91b      	cbnz	r3, 8002420 <HAL_UART_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002418:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 800241c:	f001 fb52 	bl	8003ac4 <HAL_UART_MspInit>
  }

  huart->State = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002420:	6822      	ldr	r2, [r4, #0]
    
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
  }

  huart->State = HAL_UART_STATE_BUSY;
 8002422:	2302      	movs	r3, #2
 8002424:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002428:	68d3      	ldr	r3, [r2, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800242a:	4620      	mov	r0, r4
  }

  huart->State = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800242c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002430:	60d3      	str	r3, [r2, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002432:	f7ff ff1f 	bl	8002274 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002436:	6823      	ldr	r3, [r4, #0]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002438:	2000      	movs	r0, #0
  UART_SetConfig(huart);
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800243a:	691a      	ldr	r2, [r3, #16]
 800243c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002440:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002442:	695a      	ldr	r2, [r3, #20]
 8002444:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002448:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800244a:	68da      	ldr	r2, [r3, #12]
 800244c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002450:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->State= HAL_UART_STATE_READY;
 8002452:	2301      	movs	r3, #1
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002454:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 8002456:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 800245a:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 800245c:	2001      	movs	r0, #1
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->State= HAL_UART_STATE_READY;
  
  return HAL_OK;
}
 800245e:	bd10      	pop	{r4, pc}

08002460 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002460:	b570      	push	{r4, r5, r6, lr}
 8002462:	460d      	mov	r5, r1
  uint16_t* tmp;
  uint32_t tmp_state = 0;
  
  tmp_state = huart->State;
 8002464:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002468:	4604      	mov	r4, r0
  uint16_t* tmp;
  uint32_t tmp_state = 0;
  
  tmp_state = huart->State;
 800246a:	b2c9      	uxtb	r1, r1
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 800246c:	2901      	cmp	r1, #1
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800246e:	461e      	mov	r6, r3
  uint16_t* tmp;
  uint32_t tmp_state = 0;
  
  tmp_state = huart->State;
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 8002470:	d001      	beq.n	8002476 <HAL_UART_Transmit+0x16>
 8002472:	2922      	cmp	r1, #34	; 0x22
 8002474:	d14e      	bne.n	8002514 <HAL_UART_Transmit+0xb4>
  {
    if((pData == NULL) || (Size == 0))
 8002476:	2d00      	cmp	r5, #0
 8002478:	d04a      	beq.n	8002510 <HAL_UART_Transmit+0xb0>
 800247a:	2a00      	cmp	r2, #0
 800247c:	d048      	beq.n	8002510 <HAL_UART_Transmit+0xb0>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800247e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8002482:	2b01      	cmp	r3, #1
 8002484:	d046      	beq.n	8002514 <HAL_UART_Transmit+0xb4>
 8002486:	2301      	movs	r3, #1
 8002488:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800248c:	2300      	movs	r3, #0
 800248e:	63e3      	str	r3, [r4, #60]	; 0x3c
    /* Check if a non-blocking receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 8002490:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }

    huart->TxXferSize = Size;
 8002494:	84a2      	strh	r2, [r4, #36]	; 0x24
    /* Process Locked */
    __HAL_LOCK(huart);

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    /* Check if a non-blocking receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 8002496:	2b22      	cmp	r3, #34	; 0x22
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8002498:	bf0c      	ite	eq
 800249a:	2332      	moveq	r3, #50	; 0x32
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 800249c:	2312      	movne	r3, #18
 800249e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    }

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
 80024a2:	84e2      	strh	r2, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0)
 80024a4:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80024a6:	b302      	cbz	r2, 80024ea <HAL_UART_Transmit+0x8a>
    {
      huart->TxXferCount--;
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80024a8:	68a3      	ldr	r3, [r4, #8]

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0)
    {
      huart->TxXferCount--;
 80024aa:	3a01      	subs	r2, #1
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80024ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0)
    {
      huart->TxXferCount--;
 80024b0:	84e2      	strh	r2, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80024b2:	f04f 0180 	mov.w	r1, #128	; 0x80
 80024b6:	4632      	mov	r2, r6
 80024b8:	4620      	mov	r0, r4
    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0)
    {
      huart->TxXferCount--;
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80024ba:	d10d      	bne.n	80024d8 <HAL_UART_Transmit+0x78>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80024bc:	f7ff ff74 	bl	80023a8 <UART_WaitOnFlagUntilTimeout.constprop.1>
 80024c0:	b108      	cbz	r0, 80024c6 <HAL_UART_Transmit+0x66>
        {
          return HAL_TIMEOUT;
 80024c2:	2003      	movs	r0, #3
 80024c4:	bd70      	pop	{r4, r5, r6, pc}
        }
        tmp = (uint16_t*) pData;
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80024c6:	882b      	ldrh	r3, [r5, #0]
 80024c8:	6822      	ldr	r2, [r4, #0]
 80024ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024ce:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80024d0:	6923      	ldr	r3, [r4, #16]
 80024d2:	b943      	cbnz	r3, 80024e6 <HAL_UART_Transmit+0x86>
        {
          pData +=2;
 80024d4:	3502      	adds	r5, #2
 80024d6:	e7e5      	b.n	80024a4 <HAL_UART_Transmit+0x44>
          pData +=1;
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80024d8:	f7ff ff66 	bl	80023a8 <UART_WaitOnFlagUntilTimeout.constprop.1>
 80024dc:	2800      	cmp	r0, #0
 80024de:	d1f0      	bne.n	80024c2 <HAL_UART_Transmit+0x62>
        {
          return HAL_TIMEOUT;
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80024e0:	6823      	ldr	r3, [r4, #0]
 80024e2:	782a      	ldrb	r2, [r5, #0]
 80024e4:	605a      	str	r2, [r3, #4]
 80024e6:	3501      	adds	r5, #1
 80024e8:	e7dc      	b.n	80024a4 <HAL_UART_Transmit+0x44>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 80024ea:	4632      	mov	r2, r6
 80024ec:	2140      	movs	r1, #64	; 0x40
 80024ee:	4620      	mov	r0, r4
 80024f0:	f7ff ff5a 	bl	80023a8 <UART_WaitOnFlagUntilTimeout.constprop.1>
 80024f4:	2800      	cmp	r0, #0
 80024f6:	d1e4      	bne.n	80024c2 <HAL_UART_Transmit+0x62>
    { 
      return HAL_TIMEOUT;
    }

    /* Check if a non-blocking receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 80024f8:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80024fc:	2b32      	cmp	r3, #50	; 0x32
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 80024fe:	bf0c      	ite	eq
 8002500:	2322      	moveq	r3, #34	; 0x22
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 8002502:	2301      	movne	r3, #1
 8002504:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002508:	2300      	movs	r3, #0
 800250a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

    return HAL_OK;
 800250e:	bd70      	pop	{r4, r5, r6, pc}
  tmp_state = huart->State;
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
  {
    if((pData == NULL) || (Size == 0))
    {
      return  HAL_ERROR;
 8002510:	2001      	movs	r0, #1
 8002512:	bd70      	pop	{r4, r5, r6, pc}

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002514:	2002      	movs	r0, #2
  }
}
 8002516:	bd70      	pop	{r4, r5, r6, pc}

08002518 <HAL_UART_Transmit_IT>:
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  uint32_t tmp_state = 0;

  tmp_state = huart->State;
 8002518:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800251c:	b2db      	uxtb	r3, r3
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 800251e:	2b01      	cmp	r3, #1
 8002520:	d001      	beq.n	8002526 <HAL_UART_Transmit_IT+0xe>
 8002522:	2b22      	cmp	r3, #34	; 0x22
 8002524:	d120      	bne.n	8002568 <HAL_UART_Transmit_IT+0x50>
  {
    if((pData == NULL ) || (Size == 0))
 8002526:	b1e9      	cbz	r1, 8002564 <HAL_UART_Transmit_IT+0x4c>
 8002528:	b1e2      	cbz	r2, 8002564 <HAL_UART_Transmit_IT+0x4c>
    {
      return HAL_ERROR;
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 800252a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800252e:	2b01      	cmp	r3, #1
 8002530:	d01a      	beq.n	8002568 <HAL_UART_Transmit_IT+0x50>
 8002532:	2301      	movs	r3, #1
 8002534:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    
    huart->pTxBuffPtr = pData;
    huart->TxXferSize = Size;
    huart->TxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002538:	2300      	movs	r3, #0
 800253a:	63c3      	str	r3, [r0, #60]	; 0x3c
    
    /* Process Locked */
    __HAL_LOCK(huart);
    
    huart->pTxBuffPtr = pData;
    huart->TxXferSize = Size;
 800253c:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 800253e:	84c2      	strh	r2, [r0, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    /* Check if a receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 8002540:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002544:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->TxXferSize = Size;
    huart->TxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    /* Check if a receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 8002548:	2a22      	cmp	r2, #34	; 0x22
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 800254a:	bf0c      	ite	eq
 800254c:	2232      	moveq	r2, #50	; 0x32
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 800254e:	2212      	movne	r2, #18
 8002550:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002554:	6802      	ldr	r2, [r0, #0]
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
    
    huart->pTxBuffPtr = pData;
 8002556:	6201      	str	r1, [r0, #32]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002558:	68d3      	ldr	r3, [r2, #12]
    
    return HAL_OK;
 800255a:	2000      	movs	r0, #0

    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800255c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002560:	60d3      	str	r3, [r2, #12]
    
    return HAL_OK;
 8002562:	4770      	bx	lr
  tmp_state = huart->State;
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
  {
    if((pData == NULL ) || (Size == 0))
    {
      return HAL_ERROR;
 8002564:	2001      	movs	r0, #1
 8002566:	4770      	bx	lr
    
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002568:	2002      	movs	r0, #2
  }
}
 800256a:	4770      	bx	lr

0800256c <HAL_UART_Receive_IT>:
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  uint32_t tmp_state = 0;
  
  tmp_state = huart->State;
 800256c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002570:	b2db      	uxtb	r3, r3
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_TX))
 8002572:	2b01      	cmp	r3, #1
 8002574:	d001      	beq.n	800257a <HAL_UART_Receive_IT+0xe>
 8002576:	2b12      	cmp	r3, #18
 8002578:	d128      	bne.n	80025cc <HAL_UART_Receive_IT+0x60>
  {
    if((pData == NULL ) || (Size == 0))
 800257a:	b329      	cbz	r1, 80025c8 <HAL_UART_Receive_IT+0x5c>
 800257c:	b322      	cbz	r2, 80025c8 <HAL_UART_Receive_IT+0x5c>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800257e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002582:	2b01      	cmp	r3, #1
 8002584:	d022      	beq.n	80025cc <HAL_UART_Receive_IT+0x60>
 8002586:	2301      	movs	r3, #1
 8002588:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;
    huart->RxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800258c:	2300      	movs	r3, #0
 800258e:	63c3      	str	r3, [r0, #60]	; 0x3c

    /* Process Locked */
    __HAL_LOCK(huart);

    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;
 8002590:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002592:	85c2      	strh	r2, [r0, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8002594:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002598:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->RxXferSize = Size;
    huart->RxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 800259c:	2a12      	cmp	r2, #18

    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800259e:	6803      	ldr	r3, [r0, #0]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80025a0:	bf0c      	ite	eq
 80025a2:	2232      	moveq	r2, #50	; 0x32
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 80025a4:	2222      	movne	r2, #34	; 0x22
 80025a6:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80025aa:	68da      	ldr	r2, [r3, #12]
    }

    /* Process Locked */
    __HAL_LOCK(huart);

    huart->pRxBuffPtr = pData;
 80025ac:	6281      	str	r1, [r0, #40]	; 0x28

    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80025ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025b2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80025b4:	695a      	ldr	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);

    return HAL_OK;
 80025b6:	2000      	movs	r0, #0

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80025b8:	f042 0201 	orr.w	r2, r2, #1
 80025bc:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80025be:	68da      	ldr	r2, [r3, #12]
 80025c0:	f042 0220 	orr.w	r2, r2, #32
 80025c4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80025c6:	4770      	bx	lr
  tmp_state = huart->State;
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_TX))
  {
    if((pData == NULL ) || (Size == 0))
    {
      return HAL_ERROR;
 80025c8:	2001      	movs	r0, #1
 80025ca:	4770      	bx	lr

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80025cc:	2002      	movs	r0, #2
  }
}
 80025ce:	4770      	bx	lr

080025d0 <HAL_UART_TxCpltCallback>:
 80025d0:	4770      	bx	lr

080025d2 <HAL_UART_ErrorCallback>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80025d2:	4770      	bx	lr

080025d4 <HAL_UART_IRQHandler>:
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
  uint32_t tmp_flag = 0, tmp_it_source = 0;

  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 80025d4:	6802      	ldr	r2, [r0, #0]
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80025d6:	b513      	push	{r0, r1, r4, lr}
  uint32_t tmp_flag = 0, tmp_it_source = 0;

  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 80025d8:	6811      	ldr	r1, [r2, #0]
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80025da:	4604      	mov	r4, r0
  uint32_t tmp_flag = 0, tmp_it_source = 0;

  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
  /* UART parity error interrupt occurred ------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80025dc:	07c9      	lsls	r1, r1, #31
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
  uint32_t tmp_flag = 0, tmp_it_source = 0;

  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
 80025de:	68d3      	ldr	r3, [r2, #12]
  /* UART parity error interrupt occurred ------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80025e0:	d505      	bpl.n	80025ee <HAL_UART_IRQHandler+0x1a>
 80025e2:	05db      	lsls	r3, r3, #23
  { 
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 80025e4:	bf42      	ittt	mi
 80025e6:	6bc3      	ldrmi	r3, [r0, #60]	; 0x3c
 80025e8:	f043 0301 	orrmi.w	r3, r3, #1
 80025ec:	63c3      	strmi	r3, [r0, #60]	; 0x3c
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_FE);
 80025ee:	6811      	ldr	r1, [r2, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 80025f0:	6953      	ldr	r3, [r2, #20]
  /* UART frame error interrupt occurred -------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80025f2:	0788      	lsls	r0, r1, #30
  { 
    huart->ErrorCode |= HAL_UART_ERROR_PE;
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_FE);
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 80025f4:	f003 0301 	and.w	r3, r3, #1
  /* UART frame error interrupt occurred -------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80025f8:	d504      	bpl.n	8002604 <HAL_UART_IRQHandler+0x30>
 80025fa:	b11b      	cbz	r3, 8002604 <HAL_UART_IRQHandler+0x30>
  { 
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 80025fc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80025fe:	f041 0104 	orr.w	r1, r1, #4
 8002602:	63e1      	str	r1, [r4, #60]	; 0x3c
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_NE);
 8002604:	6811      	ldr	r1, [r2, #0]
  /* UART noise error interrupt occurred -------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002606:	0749      	lsls	r1, r1, #29
 8002608:	d504      	bpl.n	8002614 <HAL_UART_IRQHandler+0x40>
 800260a:	b11b      	cbz	r3, 8002614 <HAL_UART_IRQHandler+0x40>
  { 
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 800260c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800260e:	f041 0102 	orr.w	r1, r1, #2
 8002612:	63e1      	str	r1, [r4, #60]	; 0x3c
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_ORE);
 8002614:	6811      	ldr	r1, [r2, #0]
  /* UART Over-Run interrupt occurred ----------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002616:	0708      	lsls	r0, r1, #28
 8002618:	d504      	bpl.n	8002624 <HAL_UART_IRQHandler+0x50>
 800261a:	b11b      	cbz	r3, 8002624 <HAL_UART_IRQHandler+0x50>
  { 
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800261c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800261e:	f043 0308 	orr.w	r3, r3, #8
 8002622:	63e3      	str	r3, [r4, #60]	; 0x3c
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE);
 8002624:	6811      	ldr	r1, [r2, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE);
 8002626:	68d3      	ldr	r3, [r2, #12]
  /* UART in mode Receiver ---------------------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002628:	0689      	lsls	r1, r1, #26
 800262a:	d542      	bpl.n	80026b2 <HAL_UART_IRQHandler+0xde>
 800262c:	0698      	lsls	r0, r3, #26
 800262e:	d540      	bpl.n	80026b2 <HAL_UART_IRQHandler+0xde>
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint32_t tmp_state = 0;
  
  tmp_state = huart->State; 
 8002630:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
  if((tmp_state == HAL_UART_STATE_BUSY_RX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 8002634:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8002638:	2b22      	cmp	r3, #34	; 0x22
 800263a:	d13a      	bne.n	80026b2 <HAL_UART_IRQHandler+0xde>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800263c:	68a3      	ldr	r3, [r4, #8]
 800263e:	6921      	ldr	r1, [r4, #16]
 8002640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002644:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002646:	d10b      	bne.n	8002660 <HAL_UART_IRQHandler+0x8c>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
      if(huart->Init.Parity == UART_PARITY_NONE)
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002648:	6852      	ldr	r2, [r2, #4]
  if((tmp_state == HAL_UART_STATE_BUSY_RX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
      if(huart->Init.Parity == UART_PARITY_NONE)
 800264a:	b921      	cbnz	r1, 8002656 <HAL_UART_IRQHandler+0x82>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800264c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002650:	f823 2b02 	strh.w	r2, [r3], #2
 8002654:	e002      	b.n	800265c <HAL_UART_IRQHandler+0x88>
        huart->pRxBuffPtr += 2;
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002656:	b2d2      	uxtb	r2, r2
 8002658:	f823 2b01 	strh.w	r2, [r3], #1
        huart->pRxBuffPtr += 1;
 800265c:	62a3      	str	r3, [r4, #40]	; 0x28
 800265e:	e00a      	b.n	8002676 <HAL_UART_IRQHandler+0xa2>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002660:	b919      	cbnz	r1, 800266a <HAL_UART_IRQHandler+0x96>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002662:	1c59      	adds	r1, r3, #1
 8002664:	62a1      	str	r1, [r4, #40]	; 0x28
 8002666:	6852      	ldr	r2, [r2, #4]
 8002668:	e004      	b.n	8002674 <HAL_UART_IRQHandler+0xa0>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800266a:	6852      	ldr	r2, [r2, #4]
 800266c:	1c59      	adds	r1, r3, #1
 800266e:	62a1      	str	r1, [r4, #40]	; 0x28
 8002670:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002674:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0)
 8002676:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8002678:	3b01      	subs	r3, #1
 800267a:	b29b      	uxth	r3, r3
 800267c:	85e3      	strh	r3, [r4, #46]	; 0x2e
 800267e:	b9c3      	cbnz	r3, 80026b2 <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002680:	6823      	ldr	r3, [r4, #0]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);

        huart->State = HAL_UART_STATE_READY;
      }
      HAL_UART_RxCpltCallback(huart);
 8002682:	4620      	mov	r0, r4
      }
    }

    if(--huart->RxXferCount == 0)
    {
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002684:	68da      	ldr	r2, [r3, #12]
 8002686:	f022 0220 	bic.w	r2, r2, #32
 800268a:	60da      	str	r2, [r3, #12]

      /* Check if a transmit process is ongoing or not */
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 800268c:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8002690:	2a32      	cmp	r2, #50	; 0x32
        huart->State = HAL_UART_STATE_BUSY_TX;
      }
      else
      {
        /* Disable the UART Parity Error Interrupt */
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002692:	bf17      	itett	ne
 8002694:	68da      	ldrne	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);

      /* Check if a transmit process is ongoing or not */
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
      {
        huart->State = HAL_UART_STATE_BUSY_TX;
 8002696:	2312      	moveq	r3, #18
      }
      else
      {
        /* Disable the UART Parity Error Interrupt */
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002698:	f422 7280 	bicne.w	r2, r2, #256	; 0x100
 800269c:	60da      	strne	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800269e:	bf1f      	itttt	ne
 80026a0:	695a      	ldrne	r2, [r3, #20]
 80026a2:	f022 0201 	bicne.w	r2, r2, #1
 80026a6:	615a      	strne	r2, [r3, #20]

        huart->State = HAL_UART_STATE_READY;
 80026a8:	2301      	movne	r3, #1
 80026aa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      }
      HAL_UART_RxCpltCallback(huart);
 80026ae:	f001 f9b5 	bl	8003a1c <HAL_UART_RxCpltCallback>
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
  { 
    UART_Receive_IT(huart);
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TXE);
 80026b2:	6823      	ldr	r3, [r4, #0]
 80026b4:	6819      	ldr	r1, [r3, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE);
 80026b6:	68da      	ldr	r2, [r3, #12]
  /* UART in mode Transmitter ------------------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80026b8:	0609      	lsls	r1, r1, #24
 80026ba:	d528      	bpl.n	800270e <HAL_UART_IRQHandler+0x13a>
 80026bc:	0610      	lsls	r0, r2, #24
 80026be:	d526      	bpl.n	800270e <HAL_UART_IRQHandler+0x13a>
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint32_t tmp_state = 0;
  
  tmp_state = huart->State;
 80026c0:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
  if((tmp_state == HAL_UART_STATE_BUSY_TX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 80026c4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80026c8:	2a12      	cmp	r2, #18
 80026ca:	d120      	bne.n	800270e <HAL_UART_IRQHandler+0x13a>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80026cc:	68a2      	ldr	r2, [r4, #8]
 80026ce:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80026d2:	6a22      	ldr	r2, [r4, #32]
 80026d4:	d10a      	bne.n	80026ec <HAL_UART_IRQHandler+0x118>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80026d6:	8811      	ldrh	r1, [r2, #0]
 80026d8:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80026dc:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80026de:	6921      	ldr	r1, [r4, #16]
 80026e0:	b909      	cbnz	r1, 80026e6 <HAL_UART_IRQHandler+0x112>
      {
        huart->pTxBuffPtr += 2;
 80026e2:	3202      	adds	r2, #2
 80026e4:	e000      	b.n	80026e8 <HAL_UART_IRQHandler+0x114>
      }
      else
      {
        huart->pTxBuffPtr += 1;
 80026e6:	3201      	adds	r2, #1
 80026e8:	6222      	str	r2, [r4, #32]
 80026ea:	e003      	b.n	80026f4 <HAL_UART_IRQHandler+0x120>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80026ec:	1c51      	adds	r1, r2, #1
 80026ee:	6221      	str	r1, [r4, #32]
 80026f0:	7812      	ldrb	r2, [r2, #0]
 80026f2:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0)
 80026f4:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80026f6:	3a01      	subs	r2, #1
 80026f8:	b292      	uxth	r2, r2
 80026fa:	84e2      	strh	r2, [r4, #38]	; 0x26
 80026fc:	b93a      	cbnz	r2, 800270e <HAL_UART_IRQHandler+0x13a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80026fe:	68da      	ldr	r2, [r3, #12]
 8002700:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002704:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002706:	68da      	ldr	r2, [r3, #12]
 8002708:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800270c:	60da      	str	r2, [r3, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
  {
    UART_Transmit_IT(huart);
  }

  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TC);
 800270e:	6819      	ldr	r1, [r3, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC);
 8002710:	68da      	ldr	r2, [r3, #12]
  /* UART in mode Transmitter end --------------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002712:	0649      	lsls	r1, r1, #25
 8002714:	d510      	bpl.n	8002738 <HAL_UART_IRQHandler+0x164>
 8002716:	0652      	lsls	r2, r2, #25
 8002718:	d50e      	bpl.n	8002738 <HAL_UART_IRQHandler+0x164>
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800271a:	68da      	ldr	r2, [r3, #12]
  else
  {
    huart->State = HAL_UART_STATE_READY;
  }
  
  HAL_UART_TxCpltCallback(huart);
 800271c:	4620      	mov	r0, r4
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800271e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002722:	60da      	str	r2, [r3, #12]
  
  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8002724:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8002728:	2b32      	cmp	r3, #50	; 0x32
  {
    huart->State = HAL_UART_STATE_BUSY_RX;
 800272a:	bf0c      	ite	eq
 800272c:	2322      	moveq	r3, #34	; 0x22
  }
  else
  {
    huart->State = HAL_UART_STATE_READY;
 800272e:	2301      	movne	r3, #1
 8002730:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  }
  
  HAL_UART_TxCpltCallback(huart);
 8002734:	f7ff ff4c 	bl	80025d0 <HAL_UART_TxCpltCallback>
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
  {
    UART_EndTransmit_IT(huart);
  }  

  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002738:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800273a:	b15b      	cbz	r3, 8002754 <HAL_UART_IRQHandler+0x180>
  {
    /* Clear all the error flag at once */
    __HAL_UART_CLEAR_PEFLAG(huart);
 800273c:	6823      	ldr	r3, [r4, #0]
    
    /* Set the UART state ready to be able to start again the process */
    huart->State = HAL_UART_STATE_READY;
    
    HAL_UART_ErrorCallback(huart);
 800273e:	4620      	mov	r0, r4
  }  

  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
  {
    /* Clear all the error flag at once */
    __HAL_UART_CLEAR_PEFLAG(huart);
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	9201      	str	r2, [sp, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	9301      	str	r3, [sp, #4]
 8002748:	9b01      	ldr	r3, [sp, #4]
    
    /* Set the UART state ready to be able to start again the process */
    huart->State = HAL_UART_STATE_READY;
 800274a:	2301      	movs	r3, #1
 800274c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    
    HAL_UART_ErrorCallback(huart);
 8002750:	f7ff ff3f 	bl	80025d2 <HAL_UART_ErrorCallback>
  }  
}
 8002754:	b002      	add	sp, #8
 8002756:	bd10      	pop	{r4, pc}

08002758 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002758:	b084      	sub	sp, #16
 800275a:	a801      	add	r0, sp, #4
 800275c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002760:	b004      	add	sp, #16
 8002762:	2000      	movs	r0, #0
 8002764:	4770      	bx	lr

08002766 <USB_EnableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8002766:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800276a:	b29b      	uxth	r3, r3
 800276c:	f443 433d 	orr.w	r3, r3, #48384	; 0xbd00
 8002770:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 8002774:	2000      	movs	r0, #0
 8002776:	4770      	bx	lr

08002778 <USB_DisableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8002778:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800277c:	f423 5374 	bic.w	r3, r3, #15616	; 0x3d00
 8002780:	045b      	lsls	r3, r3, #17
 8002782:	0c5b      	lsrs	r3, r3, #17
 8002784:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 8002788:	2000      	movs	r0, #0
 800278a:	4770      	bx	lr

0800278c <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 800278c:	2000      	movs	r0, #0
 800278e:	4770      	bx	lr

08002790 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{    
 8002790:	b084      	sub	sp, #16
 8002792:	b510      	push	{r4, lr}
 8002794:	ac03      	add	r4, sp, #12
 8002796:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  
  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
    
  return HAL_OK;
}
 800279a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{    
  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 800279e:	2301      	movs	r3, #1
 80027a0:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 80027a4:	2300      	movs	r3, #0
 80027a6:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
    
  return HAL_OK;
}
 80027aa:	b004      	add	sp, #16
  
  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 
  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 80027ac:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  
  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80027b0:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
    
  return HAL_OK;
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	4770      	bx	lr

080027b8 <USB_ActivateEndpoint>:
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  /* initialize Endpoint */
  switch (ep->type)
 80027b8:	78cb      	ldrb	r3, [r1, #3]
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80027ba:	b530      	push	{r4, r5, lr}
 80027bc:	780a      	ldrb	r2, [r1, #0]
  /* initialize Endpoint */
  switch (ep->type)
 80027be:	2b03      	cmp	r3, #3
 80027c0:	d82b      	bhi.n	800281a <USB_ActivateEndpoint+0x62>
 80027c2:	e8df f003 	tbb	[pc, r3]
 80027c6:	1f02      	.short	0x1f02
 80027c8:	150c      	.short	0x150c
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 80027ca:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80027d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027dc:	e01b      	b.n	8002816 <USB_ActivateEndpoint+0x5e>
    break;
  case EP_TYPE_BULK:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 80027de:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80027e2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80027e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ea:	041b      	lsls	r3, r3, #16
 80027ec:	0c1b      	lsrs	r3, r3, #16
 80027ee:	e012      	b.n	8002816 <USB_ActivateEndpoint+0x5e>
    break;
  case EP_TYPE_INTR:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 80027f0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80027fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027fe:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002802:	e008      	b.n	8002816 <USB_ActivateEndpoint+0x5e>
    break;
  case EP_TYPE_ISOC:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 8002804:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002808:	b29b      	uxth	r3, r3
 800280a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800280e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002812:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002816:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
  default:
      break;
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800281a:	780c      	ldrb	r4, [r1, #0]
 800281c:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002820:	f444 4200 	orr.w	r2, r4, #32768	; 0x8000
 8002824:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002828:	051b      	lsls	r3, r3, #20
 800282a:	0d1b      	lsrs	r3, r3, #20
 800282c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002830:	4313      	orrs	r3, r2
 8002832:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
  
  if (ep->doublebuffer == 0) 
 8002836:	7a8b      	ldrb	r3, [r1, #10]
 8002838:	780d      	ldrb	r5, [r1, #0]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d174      	bne.n	8002928 <USB_ActivateEndpoint+0x170>
  {
    if (ep->is_in)
 800283e:	784a      	ldrb	r2, [r1, #1]
 8002840:	888b      	ldrh	r3, [r1, #4]
 8002842:	b33a      	cbz	r2, 8002894 <USB_ActivateEndpoint+0xdc>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002844:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002848:	085b      	lsrs	r3, r3, #1
 800284a:	b292      	uxth	r2, r2
 800284c:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8002856:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800285a:	780a      	ldrb	r2, [r1, #0]
 800285c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002860:	065b      	lsls	r3, r3, #25
 8002862:	d50b      	bpl.n	800287c <USB_ActivateEndpoint+0xc4>
 8002864:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002868:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800286c:	051b      	lsls	r3, r3, #20
 800286e:	0d1b      	lsrs	r3, r3, #20
 8002870:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002874:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002878:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 800287c:	780a      	ldrb	r2, [r1, #0]
 800287e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002882:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002886:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800288a:	041b      	lsls	r3, r3, #16
 800288c:	0c1b      	lsrs	r3, r3, #16
 800288e:	f083 0320 	eor.w	r3, r3, #32
 8002892:	e0fb      	b.n	8002a8c <USB_ActivateEndpoint+0x2d4>
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002894:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
 8002898:	085b      	lsrs	r3, r3, #1
 800289a:	b2a4      	uxth	r4, r4
 800289c:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80028a0:	3404      	adds	r4, #4
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 80028a8:	f842 3014 	str.w	r3, [r2, r4, lsl #1]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80028ac:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
 80028b0:	780b      	ldrb	r3, [r1, #0]
 80028b2:	690d      	ldr	r5, [r1, #16]
 80028b4:	b2a4      	uxth	r4, r4
 80028b6:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 80028ba:	2d3e      	cmp	r5, #62	; 0x3e
 80028bc:	f104 0406 	add.w	r4, r4, #6
 80028c0:	d90b      	bls.n	80028da <USB_ActivateEndpoint+0x122>
 80028c2:	f3c5 134f 	ubfx	r3, r5, #5, #16
 80028c6:	06ed      	lsls	r5, r5, #27
 80028c8:	bf04      	itt	eq
 80028ca:	f103 33ff 	addeq.w	r3, r3, #4294967295
 80028ce:	b29b      	uxtheq	r3, r3
 80028d0:	ea6f 63c3 	mvn.w	r3, r3, lsl #27
 80028d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028d8:	e006      	b.n	80028e8 <USB_ActivateEndpoint+0x130>
 80028da:	f3c5 034f 	ubfx	r3, r5, #1, #16
 80028de:	07ed      	lsls	r5, r5, #31
 80028e0:	bf44      	itt	mi
 80028e2:	3301      	addmi	r3, #1
 80028e4:	b29b      	uxthmi	r3, r3
 80028e6:	029b      	lsls	r3, r3, #10
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	f842 3014 	str.w	r3, [r2, r4, lsl #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80028ee:	780a      	ldrb	r2, [r1, #0]
 80028f0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80028f4:	045c      	lsls	r4, r3, #17
 80028f6:	d50b      	bpl.n	8002910 <USB_ActivateEndpoint+0x158>
 80028f8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80028fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002900:	051b      	lsls	r3, r3, #20
 8002902:	0d1b      	lsrs	r3, r3, #20
 8002904:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800290c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002910:	780a      	ldrb	r2, [r1, #0]
 8002912:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002916:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800291a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800291e:	041b      	lsls	r3, r3, #16
 8002920:	0c1b      	lsrs	r3, r3, #16
 8002922:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002926:	e0b1      	b.n	8002a8c <USB_ActivateEndpoint+0x2d4>
  }
  /*Double Buffer*/
  else
  {
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002928:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 800292c:	f500 6480 	add.w	r4, r0, #1024	; 0x400
 8002930:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8002934:	051b      	lsls	r3, r3, #20
 8002936:	0d1b      	lsrs	r3, r3, #20
 8002938:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800293c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002940:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 8002944:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002948:	780a      	ldrb	r2, [r1, #0]
 800294a:	b29b      	uxth	r3, r3
 800294c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002950:	88ca      	ldrh	r2, [r1, #6]
 8002952:	0852      	lsrs	r2, r2, #1
 8002954:	0052      	lsls	r2, r2, #1
 8002956:	f844 2013 	str.w	r2, [r4, r3, lsl #1]
 800295a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800295e:	780a      	ldrb	r2, [r1, #0]
 8002960:	b29b      	uxth	r3, r3
 8002962:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002966:	890a      	ldrh	r2, [r1, #8]
 8002968:	3304      	adds	r3, #4
 800296a:	0852      	lsrs	r2, r2, #1
 800296c:	0052      	lsls	r2, r2, #1
 800296e:	f844 2013 	str.w	r2, [r4, r3, lsl #1]
    
    if (ep->is_in==0)
 8002972:	784b      	ldrb	r3, [r1, #1]
 8002974:	780a      	ldrb	r2, [r1, #0]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d146      	bne.n	8002a08 <USB_ActivateEndpoint+0x250>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800297a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800297e:	045b      	lsls	r3, r3, #17
 8002980:	d50b      	bpl.n	800299a <USB_ActivateEndpoint+0x1e2>
 8002982:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002986:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800298a:	051b      	lsls	r3, r3, #20
 800298c:	0d1b      	lsrs	r3, r3, #20
 800298e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002996:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800299a:	780a      	ldrb	r2, [r1, #0]
 800299c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80029a0:	065d      	lsls	r5, r3, #25
 80029a2:	d50b      	bpl.n	80029bc <USB_ActivateEndpoint+0x204>
 80029a4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80029a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029ac:	051b      	lsls	r3, r3, #20
 80029ae:	0d1b      	lsrs	r3, r3, #20
 80029b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80029b8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80029bc:	780a      	ldrb	r2, [r1, #0]
 80029be:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80029c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029c6:	051b      	lsls	r3, r3, #20
 80029c8:	0d1b      	lsrs	r3, r3, #20
 80029ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80029d2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80029d6:	780a      	ldrb	r2, [r1, #0]
 80029d8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80029dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029e4:	041b      	lsls	r3, r3, #16
 80029e6:	0c1b      	lsrs	r3, r3, #16
 80029e8:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80029ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029f4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80029f8:	780a      	ldrb	r2, [r1, #0]
 80029fa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80029fe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002a02:	051b      	lsls	r3, r3, #20
 8002a04:	0d1b      	lsrs	r3, r3, #20
 8002a06:	e041      	b.n	8002a8c <USB_ActivateEndpoint+0x2d4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002a08:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002a0c:	045c      	lsls	r4, r3, #17
 8002a0e:	d50b      	bpl.n	8002a28 <USB_ActivateEndpoint+0x270>
 8002a10:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002a14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a18:	051b      	lsls	r3, r3, #20
 8002a1a:	0d1b      	lsrs	r3, r3, #20
 8002a1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a24:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002a28:	780a      	ldrb	r2, [r1, #0]
 8002a2a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002a2e:	065b      	lsls	r3, r3, #25
 8002a30:	d50b      	bpl.n	8002a4a <USB_ActivateEndpoint+0x292>
 8002a32:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002a36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a3a:	051b      	lsls	r3, r3, #20
 8002a3c:	0d1b      	lsrs	r3, r3, #20
 8002a3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a42:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002a46:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8002a4a:	780a      	ldrb	r2, [r1, #0]
 8002a4c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002a50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a54:	051b      	lsls	r3, r3, #20
 8002a56:	0d1b      	lsrs	r3, r3, #20
 8002a58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a60:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002a64:	780a      	ldrb	r2, [r1, #0]
 8002a66:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002a6a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002a6e:	051b      	lsls	r3, r3, #20
 8002a70:	0d1b      	lsrs	r3, r3, #20
 8002a72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a7a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002a7e:	780a      	ldrb	r2, [r1, #0]
 8002a80:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002a84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a88:	049b      	lsls	r3, r3, #18
 8002a8a:	0c9b      	lsrs	r3, r3, #18
 8002a8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a94:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
  
  return HAL_OK;
}
 8002a98:	2000      	movs	r0, #0
 8002a9a:	bd30      	pop	{r4, r5, pc}

08002a9c <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002a9c:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0) 
 8002a9e:	7a8c      	ldrb	r4, [r1, #10]
 8002aa0:	784a      	ldrb	r2, [r1, #1]
 8002aa2:	780b      	ldrb	r3, [r1, #0]
 8002aa4:	bb1c      	cbnz	r4, 8002aee <USB_DeactivateEndpoint+0x52>
  {
    if (ep->is_in)
 8002aa6:	b182      	cbz	r2, 8002aca <USB_DeactivateEndpoint+0x2e>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002aa8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002aac:	0652      	lsls	r2, r2, #25
 8002aae:	d55b      	bpl.n	8002b68 <USB_DeactivateEndpoint+0xcc>
 8002ab0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002ab4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002ab8:	0512      	lsls	r2, r2, #20
 8002aba:	0d12      	lsrs	r2, r2, #20
 8002abc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ac0:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002ac4:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 8002ac8:	e04e      	b.n	8002b68 <USB_DeactivateEndpoint+0xcc>
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002aca:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002ace:	0454      	lsls	r4, r2, #17
 8002ad0:	f140 808d 	bpl.w	8002bee <USB_DeactivateEndpoint+0x152>
 8002ad4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002ad8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002adc:	0512      	lsls	r2, r2, #20
 8002ade:	0d12      	lsrs	r2, r2, #20
 8002ae0:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002ae4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ae8:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 8002aec:	e07f      	b.n	8002bee <USB_DeactivateEndpoint+0x152>
    }
  }
  /*Double Buffer*/
  else
  { 
    if (ep->is_in==0)
 8002aee:	2a00      	cmp	r2, #0
 8002af0:	d142      	bne.n	8002b78 <USB_DeactivateEndpoint+0xdc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002af2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002af6:	0452      	lsls	r2, r2, #17
 8002af8:	d50b      	bpl.n	8002b12 <USB_DeactivateEndpoint+0x76>
 8002afa:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002afe:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002b02:	0512      	lsls	r2, r2, #20
 8002b04:	0d12      	lsrs	r2, r2, #20
 8002b06:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002b0a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b0e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002b12:	780a      	ldrb	r2, [r1, #0]
 8002b14:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002b18:	065c      	lsls	r4, r3, #25
 8002b1a:	d50b      	bpl.n	8002b34 <USB_DeactivateEndpoint+0x98>
 8002b1c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002b20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b24:	051b      	lsls	r3, r3, #20
 8002b26:	0d1b      	lsrs	r3, r3, #20
 8002b28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b2c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b30:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8002b34:	780a      	ldrb	r2, [r1, #0]
 8002b36:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002b3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b3e:	051b      	lsls	r3, r3, #20
 8002b40:	0d1b      	lsrs	r3, r3, #20
 8002b42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b46:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b4a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002b4e:	780a      	ldrb	r2, [r1, #0]
 8002b50:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002b54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b58:	049b      	lsls	r3, r3, #18
 8002b5a:	0c9b      	lsrs	r3, r3, #18
 8002b5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b64:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002b68:	780a      	ldrb	r2, [r1, #0]
 8002b6a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002b6e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002b72:	051b      	lsls	r3, r3, #20
 8002b74:	0d1b      	lsrs	r3, r3, #20
 8002b76:	e041      	b.n	8002bfc <USB_DeactivateEndpoint+0x160>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002b78:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002b7c:	0452      	lsls	r2, r2, #17
 8002b7e:	d50b      	bpl.n	8002b98 <USB_DeactivateEndpoint+0xfc>
 8002b80:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002b84:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002b88:	0512      	lsls	r2, r2, #20
 8002b8a:	0d12      	lsrs	r2, r2, #20
 8002b8c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002b90:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b94:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002b98:	780a      	ldrb	r2, [r1, #0]
 8002b9a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002b9e:	065b      	lsls	r3, r3, #25
 8002ba0:	d50b      	bpl.n	8002bba <USB_DeactivateEndpoint+0x11e>
 8002ba2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002ba6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002baa:	051b      	lsls	r3, r3, #20
 8002bac:	0d1b      	lsrs	r3, r3, #20
 8002bae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bb2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002bb6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8002bba:	780a      	ldrb	r2, [r1, #0]
 8002bbc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002bc0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bc4:	051b      	lsls	r3, r3, #20
 8002bc6:	0d1b      	lsrs	r3, r3, #20
 8002bc8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bd0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002bd4:	780a      	ldrb	r2, [r1, #0]
 8002bd6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002bda:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002bde:	051b      	lsls	r3, r3, #20
 8002be0:	0d1b      	lsrs	r3, r3, #20
 8002be2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002be6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bea:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002bee:	780a      	ldrb	r2, [r1, #0]
 8002bf0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002bf4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bf8:	049b      	lsls	r3, r3, #18
 8002bfa:	0c9b      	lsrs	r3, r3, #18
 8002bfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c04:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
  
  return HAL_OK;
}
 8002c08:	2000      	movs	r0, #0
 8002c0a:	bd10      	pop	{r4, pc}

08002c0c <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
  if (ep->num == 0)
 8002c0c:	780a      	ldrb	r2, [r1, #0]
 8002c0e:	b97a      	cbnz	r2, 8002c30 <USB_EPSetStall+0x24>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 8002c10:	8803      	ldrh	r3, [r0, #0]
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c1c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002c20:	f083 0310 	eor.w	r3, r3, #16
 8002c24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c2c:	8003      	strh	r3, [r0, #0]
 8002c2e:	e01c      	b.n	8002c6a <USB_EPSetStall+0x5e>
  }
  else
  {
    if (ep->is_in)
 8002c30:	784b      	ldrb	r3, [r1, #1]
 8002c32:	b153      	cbz	r3, 8002c4a <USB_EPSetStall+0x3e>
    {
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 8002c34:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002c38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c40:	041b      	lsls	r3, r3, #16
 8002c42:	0c1b      	lsrs	r3, r3, #16
 8002c44:	f083 0310 	eor.w	r3, r3, #16
 8002c48:	e009      	b.n	8002c5e <USB_EPSetStall+0x52>
    }
    else
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 8002c4a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002c4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c56:	041b      	lsls	r3, r3, #16
 8002c58:	0c1b      	lsrs	r3, r3, #16
 8002c5a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002c5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c66:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
  return HAL_OK;
}
 8002c6a:	2000      	movs	r0, #0
 8002c6c:	4770      	bx	lr

08002c6e <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in)
 8002c6e:	784b      	ldrb	r3, [r1, #1]
 8002c70:	780a      	ldrb	r2, [r1, #0]
 8002c72:	b1db      	cbz	r3, 8002cac <USB_EPClearStall+0x3e>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002c74:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002c78:	065b      	lsls	r3, r3, #25
 8002c7a:	d50b      	bpl.n	8002c94 <USB_EPClearStall+0x26>
 8002c7c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002c80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c84:	051b      	lsls	r3, r3, #20
 8002c86:	0d1b      	lsrs	r3, r3, #20
 8002c88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c90:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002c94:	780a      	ldrb	r2, [r1, #0]
 8002c96:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002c9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ca2:	041b      	lsls	r3, r3, #16
 8002ca4:	0c1b      	lsrs	r3, r3, #16
 8002ca6:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8002caa:	e01a      	b.n	8002ce2 <USB_EPClearStall+0x74>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002cac:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002cb0:	045b      	lsls	r3, r3, #17
 8002cb2:	d50b      	bpl.n	8002ccc <USB_EPClearStall+0x5e>
 8002cb4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002cb8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cbc:	051b      	lsls	r3, r3, #20
 8002cbe:	0d1b      	lsrs	r3, r3, #20
 8002cc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cc8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002ccc:	780a      	ldrb	r2, [r1, #0]
 8002cce:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002cd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cda:	041b      	lsls	r3, r3, #16
 8002cdc:	0c1b      	lsrs	r3, r3, #16
 8002cde:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002ce2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ce6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cea:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }
  return HAL_OK;
}
 8002cee:	2000      	movs	r0, #0
 8002cf0:	4770      	bx	lr

08002cf2 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
  if(address == 0) 
 8002cf2:	b911      	cbnz	r1, 8002cfa <USB_SetDevAddress+0x8>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 8002cf4:	2380      	movs	r3, #128	; 0x80
 8002cf6:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }
  
  return HAL_OK;
}
 8002cfa:	2000      	movs	r0, #0
 8002cfc:	4770      	bx	lr

08002cfe <USB_DevConnect>:
 8002cfe:	2000      	movs	r0, #0
 8002d00:	4770      	bx	lr

08002d02 <USB_DevDisconnect>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002d02:	2000      	movs	r0, #0
 8002d04:	4770      	bx	lr

08002d06 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
  uint32_t tmpreg = 0;
  
  tmpreg = USBx->ISTR;
 8002d06:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8002d0a:	b280      	uxth	r0, r0
 8002d0c:	4770      	bx	lr

08002d0e <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002d0e:	2000      	movs	r0, #0
 8002d10:	4770      	bx	lr

08002d12 <USB_WritePMA>:
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8002d12:	3301      	adds	r3, #1
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002d14:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8002d18:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8002d1a:	105b      	asrs	r3, r3, #1
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002d1c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 8002d20:	2400      	movs	r4, #0
 8002d22:	42a3      	cmp	r3, r4
 8002d24:	d005      	beq.n	8002d32 <USB_WritePMA+0x20>
 8002d26:	f831 0b02 	ldrh.w	r0, [r1], #2
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
 8002d2a:	f822 0024 	strh.w	r0, [r2, r4, lsl #2]
 8002d2e:	3401      	adds	r4, #1
 8002d30:	e7f7      	b.n	8002d22 <USB_WritePMA+0x10>
    pdwVal++;
    pbUsrBuf++;
  }
}
 8002d32:	bd10      	pop	{r4, pc}

08002d34 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
 8002d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d36:	4604      	mov	r4, r0
  uint16_t pmabuffer = 0;
  uint32_t len = ep->xfer_len;
  
  /* IN endpoint */
  if (ep->is_in == 1)
 8002d38:	7848      	ldrb	r0, [r1, #1]
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
 8002d3a:	460e      	mov	r6, r1
  uint16_t pmabuffer = 0;
  uint32_t len = ep->xfer_len;
  
  /* IN endpoint */
  if (ep->is_in == 1)
 8002d3c:	2801      	cmp	r0, #1
 8002d3e:	698b      	ldr	r3, [r1, #24]
 8002d40:	690a      	ldr	r2, [r1, #16]
 8002d42:	7a8f      	ldrb	r7, [r1, #10]
 8002d44:	d157      	bne.n	8002df6 <USB_EPStartXfer+0xc2>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8002d46:	461d      	mov	r5, r3
 8002d48:	4293      	cmp	r3, r2
    {
      len=ep->maxpacket;
      ep->xfer_len-=len; 
 8002d4a:	bf83      	ittte	hi
 8002d4c:	1a9d      	subhi	r5, r3, r2
 8002d4e:	618d      	strhi	r5, [r1, #24]
 8002d50:	4615      	movhi	r5, r2
    }
    else
    {  
      len=ep->xfer_len;
      ep->xfer_len =0;
 8002d52:	2300      	movls	r3, #0
 8002d54:	bf98      	it	ls
 8002d56:	618b      	strls	r3, [r1, #24]
 8002d58:	b2ab      	uxth	r3, r5
    }
    
    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0) 
 8002d5a:	b97f      	cbnz	r7, 8002d7c <USB_EPStartXfer+0x48>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 8002d5c:	888a      	ldrh	r2, [r1, #4]
 8002d5e:	4620      	mov	r0, r4
 8002d60:	6949      	ldr	r1, [r1, #20]
 8002d62:	f7ff ffd6 	bl	8002d12 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002d66:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8002d6a:	7832      	ldrb	r2, [r6, #0]
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002d72:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8002d76:	f8c3 5404 	str.w	r5, [r3, #1028]	; 0x404
 8002d7a:	e030      	b.n	8002dde <USB_EPStartXfer+0xaa>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8002d7c:	780a      	ldrb	r2, [r1, #0]
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
        pmabuffer = ep->pmaaddr0;
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 8002d7e:	4620      	mov	r0, r4
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
    }
    else
    {
      /* Write the data to the USB endpoint */
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8002d80:	f834 1022 	ldrh.w	r1, [r4, r2, lsl #2]
 8002d84:	00d2      	lsls	r2, r2, #3
 8002d86:	f011 0f40 	tst.w	r1, #64	; 0x40
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002d8a:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8002d8e:	b289      	uxth	r1, r1
 8002d90:	440a      	add	r2, r1
 8002d92:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8002d96:	f8c2 5404 	str.w	r5, [r2, #1028]	; 0x404
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
        pmabuffer = ep->pmaaddr0;
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 8002d9a:	6971      	ldr	r1, [r6, #20]
      /* Write the data to the USB endpoint */
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
        pmabuffer = ep->pmaaddr1;
 8002d9c:	bf14      	ite	ne
 8002d9e:	8932      	ldrhne	r2, [r6, #8]
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
        pmabuffer = ep->pmaaddr0;
 8002da0:	88f2      	ldrheq	r2, [r6, #6]
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 8002da2:	f7ff ffb6 	bl	8002d12 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8002da6:	7873      	ldrb	r3, [r6, #1]
 8002da8:	7832      	ldrb	r2, [r6, #0]
 8002daa:	b953      	cbnz	r3, 8002dc2 <USB_EPStartXfer+0x8e>
 8002dac:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8002db0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002db4:	051b      	lsls	r3, r3, #20
 8002db6:	0d1b      	lsrs	r3, r3, #20
 8002db8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dbc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002dc0:	e00b      	b.n	8002dda <USB_EPStartXfer+0xa6>
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d10b      	bne.n	8002dde <USB_EPStartXfer+0xaa>
 8002dc6:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8002dca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dce:	051b      	lsls	r3, r3, #20
 8002dd0:	0d1b      	lsrs	r3, r3, #20
 8002dd2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dda:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
    }
    
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002dde:	7832      	ldrb	r2, [r6, #0]
 8002de0:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8002de4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002de8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dec:	041b      	lsls	r3, r3, #16
 8002dee:	0c1b      	lsrs	r3, r3, #16
 8002df0:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8002df4:	e066      	b.n	8002ec4 <USB_EPStartXfer+0x190>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8002df6:	4293      	cmp	r3, r2
    {
      len=ep->maxpacket;
      ep->xfer_len-=len; 
 8002df8:	bf8b      	itete	hi
 8002dfa:	1a9b      	subhi	r3, r3, r2
    }
    else
    {
      len=ep->xfer_len;
      ep->xfer_len =0;
 8002dfc:	2200      	movls	r2, #0
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
    {
      len=ep->maxpacket;
      ep->xfer_len-=len; 
 8002dfe:	618b      	strhi	r3, [r1, #24]
    }
    else
    {
      len=ep->xfer_len;
      ep->xfer_len =0;
 8002e00:	618a      	strls	r2, [r1, #24]
 8002e02:	bf88      	it	hi
 8002e04:	4613      	movhi	r3, r2
 8002e06:	7809      	ldrb	r1, [r1, #0]
    }
    
    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0) 
 8002e08:	b327      	cbz	r7, 8002e54 <USB_EPStartXfer+0x120>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002e0a:	bb00      	cbnz	r0, 8002e4e <USB_EPStartXfer+0x11a>
 8002e0c:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8002e10:	2b3e      	cmp	r3, #62	; 0x3e
 8002e12:	b292      	uxth	r2, r2
 8002e14:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8002e18:	f101 0102 	add.w	r1, r1, #2
 8002e1c:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 8002e20:	d90b      	bls.n	8002e3a <USB_EPStartXfer+0x106>
 8002e22:	f3c3 124f 	ubfx	r2, r3, #5, #16
 8002e26:	06dd      	lsls	r5, r3, #27
 8002e28:	bf04      	itt	eq
 8002e2a:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8002e2e:	b292      	uxtheq	r2, r2
 8002e30:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8002e34:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002e38:	e006      	b.n	8002e48 <USB_EPStartXfer+0x114>
 8002e3a:	f3c3 024f 	ubfx	r2, r3, #1, #16
 8002e3e:	07df      	lsls	r7, r3, #31
 8002e40:	bf44      	itt	mi
 8002e42:	3201      	addmi	r2, #1
 8002e44:	b292      	uxthmi	r2, r2
 8002e46:	0292      	lsls	r2, r2, #10
 8002e48:	b292      	uxth	r2, r2
 8002e4a:	f840 2011 	str.w	r2, [r0, r1, lsl #1]
 8002e4e:	7872      	ldrb	r2, [r6, #1]
 8002e50:	7831      	ldrb	r1, [r6, #0]
 8002e52:	bb0a      	cbnz	r2, 8002e98 <USB_EPStartXfer+0x164>
 8002e54:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8002e58:	2b3e      	cmp	r3, #62	; 0x3e
 8002e5a:	b292      	uxth	r2, r2
 8002e5c:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8002e60:	f101 0106 	add.w	r1, r1, #6
 8002e64:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 8002e68:	d90b      	bls.n	8002e82 <USB_EPStartXfer+0x14e>
 8002e6a:	f3c3 124f 	ubfx	r2, r3, #5, #16
 8002e6e:	06dd      	lsls	r5, r3, #27
 8002e70:	bf04      	itt	eq
 8002e72:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8002e76:	b292      	uxtheq	r2, r2
 8002e78:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8002e7c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002e80:	e006      	b.n	8002e90 <USB_EPStartXfer+0x15c>
 8002e82:	f3c3 024f 	ubfx	r2, r3, #1, #16
 8002e86:	07db      	lsls	r3, r3, #31
 8002e88:	bf44      	itt	mi
 8002e8a:	3201      	addmi	r2, #1
 8002e8c:	b292      	uxthmi	r2, r2
 8002e8e:	0292      	lsls	r2, r2, #10
 8002e90:	b292      	uxth	r2, r2
 8002e92:	f840 2011 	str.w	r2, [r0, r1, lsl #1]
 8002e96:	e00a      	b.n	8002eae <USB_EPStartXfer+0x17a>
 8002e98:	2a01      	cmp	r2, #1
 8002e9a:	d108      	bne.n	8002eae <USB_EPStartXfer+0x17a>
 8002e9c:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8002ea0:	b292      	uxth	r2, r2
 8002ea2:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8002ea6:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8002eaa:	f8c1 3404 	str.w	r3, [r1, #1028]	; 0x404
    }
    
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002eae:	7832      	ldrb	r2, [r6, #0]
 8002eb0:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8002eb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002eb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ebc:	041b      	lsls	r3, r3, #16
 8002ebe:	0c1b      	lsrs	r3, r3, #16
 8002ec0:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002ec4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ecc:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
  }
  
  return HAL_OK;
}
 8002ed0:	2000      	movs	r0, #0
 8002ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002ed4 <USB_ReadPMA>:
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8002ed4:	3301      	adds	r3, #1
  uint32_t index = 0;
  uint32_t *pdwVal = NULL;
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002ed6:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8002eda:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8002edc:	105b      	asrs	r3, r3, #1
  uint32_t index = 0;
  uint32_t *pdwVal = NULL;
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002ede:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 8002ee2:	2400      	movs	r4, #0
 8002ee4:	42a3      	cmp	r3, r4
 8002ee6:	d005      	beq.n	8002ef4 <USB_ReadPMA+0x20>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8002ee8:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8002eec:	f821 0014 	strh.w	r0, [r1, r4, lsl #1]
 8002ef0:	3401      	adds	r4, #1
 8002ef2:	e7f7      	b.n	8002ee4 <USB_ReadPMA+0x10>
    pbUsrBuf++;
  }
}
 8002ef4:	bd10      	pop	{r4, pc}
	...

08002ef8 <USBD_HID_CDC_GetCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_CDC_GetCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_HID_CDC_CfgDesc);
 8002ef8:	236b      	movs	r3, #107	; 0x6b
 8002efa:	8003      	strh	r3, [r0, #0]
  return USBD_HID_CDC_CfgDesc;
}
 8002efc:	4800      	ldr	r0, [pc, #0]	; (8002f00 <USBD_HID_CDC_GetCfgDesc+0x8>)
 8002efe:	4770      	bx	lr
 8002f00:	200000a4 	.word	0x200000a4

08002f04 <USBD_HID_CDC_DataIn>:
  * @retval status
  */
static uint8_t  USBD_HID_CDC_DataIn (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
  USBD_HID_CDC_HandleTypeDef *h = (USBD_HID_CDC_HandleTypeDef *)pdev->pClassData;
 8002f04:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  /* Ensure that the FIFO is empty before a new transfer, this condition could 
  be caused by  a new transfer before the end of the previous transfer */
  if (h != NULL) {
 8002f08:	b133      	cbz	r3, 8002f18 <USBD_HID_CDC_DataIn+0x14>

	if (epnum == HID_EP0IN_ADDR) {
 8002f0a:	2983      	cmp	r1, #131	; 0x83
 8002f0c:	f04f 0000 	mov.w	r0, #0
	  h->state = HID_IDLE;
 8002f10:	bf0c      	ite	eq
 8002f12:	7318      	strbeq	r0, [r3, #12]
	} else {
	  h->CDCTxState = 0;
 8002f14:	6758      	strne	r0, [r3, #116]	; 0x74
 8002f16:	4770      	bx	lr
	}

	return USBD_OK;
  }

  return USBD_FAIL;
 8002f18:	2002      	movs	r0, #2
}
 8002f1a:	4770      	bx	lr

08002f1c <USBD_HID_CDC_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_CDC_GetDeviceQualifierDesc (uint16_t *length)
{
  *length = sizeof (USBD_HID_CDC_DeviceQualifierDesc);
 8002f1c:	230a      	movs	r3, #10
 8002f1e:	8003      	strh	r3, [r0, #0]
  return USBD_HID_CDC_DeviceQualifierDesc;
}
 8002f20:	4800      	ldr	r0, [pc, #0]	; (8002f24 <USBD_HID_CDC_GetDeviceQualifierDesc+0x8>)
 8002f22:	4770      	bx	lr
 8002f24:	20000110 	.word	0x20000110

08002f28 <USBD_HID_CDC_DataOut>:
  * @retval status
  */

static uint8_t  USBD_HID_CDC_DataOut (USBD_HandleTypeDef *pdev,
								uint8_t epnum)
{
 8002f28:	b538      	push	{r3, r4, r5, lr}
	USBD_HID_CDC_HandleTypeDef *h = (USBD_HID_CDC_HandleTypeDef *)pdev->pClassData;
 8002f2a:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  * @retval status
  */

static uint8_t  USBD_HID_CDC_DataOut (USBD_HandleTypeDef *pdev,
								uint8_t epnum)
{
 8002f2e:	4605      	mov	r5, r0
	USBD_HID_CDC_HandleTypeDef *h = (USBD_HID_CDC_HandleTypeDef *)pdev->pClassData;

    /* USB data will be immediately processed, this allow next USB traffic being
	NAKed till the end of the application Xfer */
	if(h != NULL && epnum != HID_EP1OUT_ADDR)
 8002f30:	b16c      	cbz	r4, 8002f4e <USBD_HID_CDC_DataOut+0x26>
 8002f32:	2903      	cmp	r1, #3
 8002f34:	d00b      	beq.n	8002f4e <USBD_HID_CDC_DataOut+0x26>
	{
		h->CDCRxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8002f36:	f000 ff4c 	bl	8003dd2 <USBD_LL_GetRxDataSize>
 8002f3a:	4621      	mov	r1, r4
	    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(h->CDCRxBuffer, &h->CDCRxLength);
 8002f3c:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c

    /* USB data will be immediately processed, this allow next USB traffic being
	NAKed till the end of the application Xfer */
	if(h != NULL && epnum != HID_EP1OUT_ADDR)
	{
		h->CDCRxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8002f40:	f841 0f6c 	str.w	r0, [r1, #108]!
	    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(h->CDCRxBuffer, &h->CDCRxLength);
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8002f48:	4798      	blx	r3

	    return USBD_OK;
 8002f4a:	2000      	movs	r0, #0
 8002f4c:	bd38      	pop	{r3, r4, r5, pc}
	}

    return USBD_FAIL;
 8002f4e:	2002      	movs	r0, #2
}
 8002f50:	bd38      	pop	{r3, r4, r5, pc}
	...

08002f54 <USBD_HID_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8002f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f58:	4607      	mov	r7, r0
 8002f5a:	b0c4      	sub	sp, #272	; 0x110
  uint16_t len = 0;
  uint8_t  *pbuf = NULL;

  USBD_HID_CDC_HandleTypeDef     *hhid = (USBD_HID_CDC_HandleTypeDef*) pdev->pClassData;
 8002f5c:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
  

  if (req) {
 8002f60:	460c      	mov	r4, r1
 8002f62:	b179      	cbz	r1, 8002f84 <USBD_HID_CDC_Setup+0x30>
	  uint8_t dbg[255];

	  uint8_t ll = sprintf(dbg,
 8002f64:	784b      	ldrb	r3, [r1, #1]
 8002f66:	780a      	ldrb	r2, [r1, #0]
 8002f68:	88c9      	ldrh	r1, [r1, #6]
 8002f6a:	a804      	add	r0, sp, #16
 8002f6c:	9102      	str	r1, [sp, #8]
 8002f6e:	88a1      	ldrh	r1, [r4, #4]
 8002f70:	9101      	str	r1, [sp, #4]
 8002f72:	8861      	ldrh	r1, [r4, #2]
 8002f74:	9100      	str	r1, [sp, #0]
 8002f76:	494b      	ldr	r1, [pc, #300]	; (80030a4 <USBD_HID_CDC_Setup+0x150>)
 8002f78:	f000 ffe4 	bl	8003f44 <sprintf>
			  req->bRequest,
			  req->wValue,
			  req->wIndex,
			  req->wLength
			  );
	  utx (dbg, ll);
 8002f7c:	b2c1      	uxtb	r1, r0
 8002f7e:	a804      	add	r0, sp, #16
 8002f80:	f000 fd4e 	bl	8003a20 <utx>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002f84:	7822      	ldrb	r2, [r4, #0]
 8002f86:	f012 0560 	ands.w	r5, r2, #96	; 0x60
 8002f8a:	d054      	beq.n	8003036 <USBD_HID_CDC_Setup+0xe2>
 8002f8c:	2d20      	cmp	r5, #32
 8002f8e:	f040 8084 	bne.w	800309a <USBD_HID_CDC_Setup+0x146>
 8002f92:	f002 030f 	and.w	r3, r2, #15
  {


  case USB_REQ_TYPE_CLASS :
      if ((((req->bmRequest & 0x0f) == 1) && (req->wIndex == 2)) ||
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	7860      	ldrb	r0, [r4, #1]
 8002f9a:	d102      	bne.n	8002fa2 <USBD_HID_CDC_Setup+0x4e>
 8002f9c:	88a3      	ldrh	r3, [r4, #4]
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	e006      	b.n	8002fb0 <USBD_HID_CDC_Setup+0x5c>
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d122      	bne.n	8002fec <USBD_HID_CDC_Setup+0x98>
    	   (((req->bmRequest & 0x0f) == 2) && ((req->wIndex == HID_EP0IN_ADDR) || (req->wIndex == HID_EP1OUT_ADDR)))) {
 8002fa6:	88a3      	ldrh	r3, [r4, #4]
 8002fa8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	2b03      	cmp	r3, #3
 8002fb0:	d11c      	bne.n	8002fec <USBD_HID_CDC_Setup+0x98>

		switch (req->bRequest)
 8002fb2:	3802      	subs	r0, #2
 8002fb4:	2809      	cmp	r0, #9
 8002fb6:	d813      	bhi.n	8002fe0 <USBD_HID_CDC_Setup+0x8c>
 8002fb8:	e8df f000 	tbb	[pc, r0]
 8002fbc:	1212080f 	.word	0x1212080f
 8002fc0:	12121212 	.word	0x12121212
 8002fc4:	050b      	.short	0x050b
		{
		case HID_REQ_SET_PROTOCOL:
		  hhid->Protocol = (uint8_t)(req->wValue);
 8002fc6:	78a3      	ldrb	r3, [r4, #2]
 8002fc8:	6033      	str	r3, [r6, #0]
 8002fca:	e066      	b.n	800309a <USBD_HID_CDC_Setup+0x146>
		  break;

		case HID_REQ_GET_PROTOCOL:
		  USBD_CtlSendData (pdev,
 8002fcc:	2201      	movs	r2, #1
 8002fce:	4631      	mov	r1, r6
 8002fd0:	e01b      	b.n	800300a <USBD_HID_CDC_Setup+0xb6>
							(uint8_t *)&hhid->Protocol,
							1);
		  break;

		case HID_REQ_SET_IDLE:
		  hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8002fd2:	8863      	ldrh	r3, [r4, #2]
 8002fd4:	0a1b      	lsrs	r3, r3, #8
 8002fd6:	6073      	str	r3, [r6, #4]
 8002fd8:	e05f      	b.n	800309a <USBD_HID_CDC_Setup+0x146>
		  break;

		case HID_REQ_GET_IDLE:
		  USBD_CtlSendData (pdev,
 8002fda:	2201      	movs	r2, #1
 8002fdc:	1d31      	adds	r1, r6, #4
 8002fde:	e014      	b.n	800300a <USBD_HID_CDC_Setup+0xb6>
							(uint8_t *)&hhid->IdleState,
							1);
		  break;

		default:
		  USBD_CtlError (pdev, req);
 8002fe0:	4621      	mov	r1, r4
 8002fe2:	4638      	mov	r0, r7
 8002fe4:	f000 fa48 	bl	8003478 <USBD_CtlError>
		  return USBD_FAIL;
 8002fe8:	2502      	movs	r5, #2
 8002fea:	e057      	b.n	800309c <USBD_HID_CDC_Setup+0x148>
		}
    } else if (req->wLength)
 8002fec:	88e5      	ldrh	r5, [r4, #6]
 8002fee:	b1dd      	cbz	r5, 8003028 <USBD_HID_CDC_Setup+0xd4>
    {
      if (req->bmRequest & 0x80)
 8002ff0:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002ff4:	f106 0820 	add.w	r8, r6, #32
 8002ff8:	d00b      	beq.n	8003012 <USBD_HID_CDC_Setup+0xbe>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002ffa:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8002ffe:	462a      	mov	r2, r5
 8003000:	4641      	mov	r1, r8
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	4798      	blx	r3
                                                          (uint8_t *)hhid->CDCdata,
                                                          req->wLength);
          USBD_CtlSendData (pdev,
 8003006:	4641      	mov	r1, r8
 8003008:	88e2      	ldrh	r2, [r4, #6]
 800300a:	4638      	mov	r0, r7
 800300c:	f000 fbe7 	bl	80037de <USBD_CtlSendData>
 8003010:	e043      	b.n	800309a <USBD_HID_CDC_Setup+0x146>
                            (uint8_t *)hhid->CDCdata,
                            req->wLength);
      }
      else
      {
        hhid->CDCCmdOpCode = req->bRequest;
 8003012:	f886 0060 	strb.w	r0, [r6, #96]	; 0x60
        hhid->CDCCmdLength = req->wLength;
 8003016:	88e3      	ldrh	r3, [r4, #6]

        USBD_CtlPrepareRx (pdev,
 8003018:	4641      	mov	r1, r8
                            req->wLength);
      }
      else
      {
        hhid->CDCCmdOpCode = req->bRequest;
        hhid->CDCCmdLength = req->wLength;
 800301a:	f886 3061 	strb.w	r3, [r6, #97]	; 0x61

        USBD_CtlPrepareRx (pdev,
 800301e:	88e2      	ldrh	r2, [r4, #6]
 8003020:	4638      	mov	r0, r7
 8003022:	f000 fbf1 	bl	8003808 <USBD_CtlPrepareRx>
 8003026:	e038      	b.n	800309a <USBD_HID_CDC_Setup+0x146>
      }
      
    }
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003028:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800302c:	462a      	mov	r2, r5
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	4621      	mov	r1, r4
 8003032:	4798      	blx	r3
 8003034:	e032      	b.n	800309c <USBD_HID_CDC_Setup+0x148>
                                                        0);
    }
    break;
    
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8003036:	7863      	ldrb	r3, [r4, #1]
 8003038:	2b0a      	cmp	r3, #10
 800303a:	d018      	beq.n	800306e <USBD_HID_CDC_Setup+0x11a>
 800303c:	2b0b      	cmp	r3, #11
 800303e:	d024      	beq.n	800308a <USBD_HID_CDC_Setup+0x136>
 8003040:	2b06      	cmp	r3, #6
 8003042:	d12b      	bne.n	800309c <USBD_HID_CDC_Setup+0x148>
    {
    case USB_REQ_GET_DESCRIPTOR: 
      if( req->wValue >> 8 == HID_REPORT_DESC)
 8003044:	8863      	ldrh	r3, [r4, #2]
 8003046:	0a1b      	lsrs	r3, r3, #8
 8003048:	2b22      	cmp	r3, #34	; 0x22
 800304a:	d105      	bne.n	8003058 <USBD_HID_CDC_Setup+0x104>
      {
        len = MIN(HID_BBOX_REPORT_DESC_SIZE, req->wLength);
 800304c:	88e2      	ldrh	r2, [r4, #6]
        pbuf = USBD_HID_BBOX_ReportDesc;
 800304e:	4916      	ldr	r1, [pc, #88]	; (80030a8 <USBD_HID_CDC_Setup+0x154>)
    switch (req->bRequest)
    {
    case USB_REQ_GET_DESCRIPTOR: 
      if( req->wValue >> 8 == HID_REPORT_DESC)
      {
        len = MIN(HID_BBOX_REPORT_DESC_SIZE, req->wLength);
 8003050:	2a56      	cmp	r2, #86	; 0x56
 8003052:	bf28      	it	cs
 8003054:	2256      	movcs	r2, #86	; 0x56
 8003056:	e014      	b.n	8003082 <USBD_HID_CDC_Setup+0x12e>
        pbuf = USBD_HID_BBOX_ReportDesc;
      }
      else if( req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8003058:	2b21      	cmp	r3, #33	; 0x21
 800305a:	d105      	bne.n	8003068 <USBD_HID_CDC_Setup+0x114>
      {
        pbuf = USBD_HID_CDC_Desc;
        len = MIN(USB_HID_DESC_SIZE, req->wLength);
 800305c:	88e2      	ldrh	r2, [r4, #6]
        len = MIN(HID_BBOX_REPORT_DESC_SIZE, req->wLength);
        pbuf = USBD_HID_BBOX_ReportDesc;
      }
      else if( req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
      {
        pbuf = USBD_HID_CDC_Desc;
 800305e:	4913      	ldr	r1, [pc, #76]	; (80030ac <USBD_HID_CDC_Setup+0x158>)
        len = MIN(USB_HID_DESC_SIZE, req->wLength);
 8003060:	2a09      	cmp	r2, #9
 8003062:	bf28      	it	cs
 8003064:	2209      	movcs	r2, #9
 8003066:	e00c      	b.n	8003082 <USBD_HID_CDC_Setup+0x12e>
  */
static uint8_t  USBD_HID_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
  uint16_t len = 0;
  uint8_t  *pbuf = NULL;
 8003068:	4629      	mov	r1, r5
  * @retval status
  */
static uint8_t  USBD_HID_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
  uint16_t len = 0;
 800306a:	462a      	mov	r2, r5
 800306c:	e009      	b.n	8003082 <USBD_HID_CDC_Setup+0x12e>
      
      break;
      
    case USB_REQ_GET_INTERFACE :
    	if ((uint8_t)(req->wValue) == HID_EP0IN_ADDR
    			|| (uint8_t)(req->wValue) == HID_EP1OUT_ADDR)
 800306e:	78a3      	ldrb	r3, [r4, #2]
    	{
    		USBD_CtlSendData (pdev,
 8003070:	2201      	movs	r2, #1
      
      break;
      
    case USB_REQ_GET_INTERFACE :
    	if ((uint8_t)(req->wValue) == HID_EP0IN_ADDR
    			|| (uint8_t)(req->wValue) == HID_EP1OUT_ADDR)
 8003072:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003076:	2b03      	cmp	r3, #3
    	{
    		USBD_CtlSendData (pdev,
 8003078:	bf0c      	ite	eq
 800307a:	f106 0108 	addeq.w	r1, r6, #8
                        (uint8_t *)&hhid->HIDAltSetting, 1);
    	} else {
    		USBD_CtlSendData (pdev,
 800307e:	f106 011c 	addne.w	r1, r6, #28
 8003082:	4638      	mov	r0, r7
 8003084:	f000 fbab 	bl	80037de <USBD_CtlSendData>
 8003088:	e008      	b.n	800309c <USBD_HID_CDC_Setup+0x148>
    		            (uint8_t *)&hhid->CDCAltSetting, 1);
		}
      break;
      
    case USB_REQ_SET_INTERFACE :
    	if ((uint8_t)(req->wValue) == HID_EP0IN_ADDR
 800308a:	78a3      	ldrb	r3, [r4, #2]
    			|| (uint8_t)(req->wValue) == HID_EP1OUT_ADDR)
 800308c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003090:	2a03      	cmp	r2, #3
    	{
    		hhid->HIDAltSetting = (uint8_t)(req->wValue);
 8003092:	bf0c      	ite	eq
 8003094:	60b3      	streq	r3, [r6, #8]
    	} else {
    		hhid->CDCAltSetting = (uint8_t)(req->wValue);
 8003096:	61f3      	strne	r3, [r6, #28]
 8003098:	e000      	b.n	800309c <USBD_HID_CDC_Setup+0x148>
		}
      break;
    }
  }
  return USBD_OK;
 800309a:	2500      	movs	r5, #0
}
 800309c:	4628      	mov	r0, r5
 800309e:	b044      	add	sp, #272	; 0x110
 80030a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030a4:	0800899a 	.word	0x0800899a
 80030a8:	2000004c 	.word	0x2000004c
 80030ac:	20000040 	.word	0x20000040

080030b0 <USBD_HID_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_CDC_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 80030b0:	b510      	push	{r4, lr}
 80030b2:	4604      	mov	r4, r0
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EP0IN_ADDR);
 80030b4:	2183      	movs	r1, #131	; 0x83
 80030b6:	f000 fe52 	bl	8003d5e <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, HID_EP1OUT_ADDR);
 80030ba:	2103      	movs	r1, #3
 80030bc:	4620      	mov	r0, r4
 80030be:	f000 fe4e 	bl	8003d5e <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_EP0IN_ADDR);
 80030c2:	2182      	movs	r1, #130	; 0x82
 80030c4:	4620      	mov	r0, r4
 80030c6:	f000 fe4a 	bl	8003d5e <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_EP1OUT_ADDR);
 80030ca:	2102      	movs	r1, #2
 80030cc:	4620      	mov	r0, r4
 80030ce:	f000 fe46 	bl	8003d5e <USBD_LL_CloseEP>
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80030d2:	2181      	movs	r1, #129	; 0x81
 80030d4:	4620      	mov	r0, r4
 80030d6:	f000 fe42 	bl	8003d5e <USBD_LL_CloseEP>

  /* FRee allocated memory */
  if(pdev->pClassData != NULL)
 80030da:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 80030de:	b153      	cbz	r3, 80030f6 <USBD_HID_CDC_DeInit+0x46>
  {
	((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80030e0:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80030e8:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 80030ec:	f000 fe7c 	bl	8003de8 <USBD_static_free>
    pdev->pClassData = NULL;
 80030f0:	2300      	movs	r3, #0
 80030f2:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
  } 
  
  return USBD_OK;
}
 80030f6:	2000      	movs	r0, #0
 80030f8:	bd10      	pop	{r4, pc}

080030fa <USBD_HID_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_CDC_Init (USBD_HandleTypeDef *pdev,
                               uint8_t cfgidx)
{
 80030fa:	b538      	push	{r3, r4, r5, lr}
 80030fc:	4604      	mov	r4, r0
  uint8_t ret = 0;
  
  /* Open EP IN */
  USBD_LL_OpenEP(pdev,
 80030fe:	2304      	movs	r3, #4
 8003100:	2203      	movs	r2, #3
 8003102:	2183      	movs	r1, #131	; 0x83
 8003104:	f000 fe21 	bl	8003d4a <USBD_LL_OpenEP>
                 HID_EP0IN_ADDR,
                 USBD_EP_TYPE_INTR,
                 HID_EP0IN_SIZE);
  
  /* Open EP OUT */
  USBD_LL_OpenEP(pdev,
 8003108:	2203      	movs	r2, #3
 800310a:	4611      	mov	r1, r2
 800310c:	2340      	movs	r3, #64	; 0x40
 800310e:	4620      	mov	r0, r4
 8003110:	f000 fe1b 	bl	8003d4a <USBD_LL_OpenEP>
                 HID_EP1OUT_ADDR,
                 USBD_EP_TYPE_INTR,
                 HID_EP1OUT_SIZE);

  /* Open EP IN */
  USBD_LL_OpenEP(pdev,
 8003114:	2340      	movs	r3, #64	; 0x40
 8003116:	2202      	movs	r2, #2
 8003118:	2182      	movs	r1, #130	; 0x82
 800311a:	4620      	mov	r0, r4
 800311c:	f000 fe15 	bl	8003d4a <USBD_LL_OpenEP>
                 CDC_EP0IN_ADDR,
                 USBD_EP_TYPE_BULK,
                 CDC_EP0IN_SIZE);

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev,
 8003120:	2202      	movs	r2, #2
 8003122:	4611      	mov	r1, r2
 8003124:	2340      	movs	r3, #64	; 0x40
 8003126:	4620      	mov	r0, r4
 8003128:	f000 fe0f 	bl	8003d4a <USBD_LL_OpenEP>
                 CDC_EP1OUT_ADDR,
                 USBD_EP_TYPE_BULK,
                 CDC_EP1OUT_SIZE);

  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 800312c:	2308      	movs	r3, #8
 800312e:	2203      	movs	r2, #3
 8003130:	2181      	movs	r1, #129	; 0x81
 8003132:	4620      	mov	r0, r4
 8003134:	f000 fe09 	bl	8003d4a <USBD_LL_OpenEP>
                   CDC_CMD_EP,
                   USBD_EP_TYPE_INTR,
                   CDC_CMD_PACKET_SIZE);

  pdev->pClassData = USBD_malloc(sizeof (USBD_HID_CDC_HandleTypeDef));
 8003138:	207c      	movs	r0, #124	; 0x7c
 800313a:	f000 fe51 	bl	8003de0 <USBD_static_malloc>
 800313e:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 8003142:	b1d0      	cbz	r0, 800317a <USBD_HID_CDC_Init+0x80>
  else
  {
    ((USBD_HID_CDC_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8003144:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
  {
    ret = 1; 
  }
  else
  {
    ((USBD_HID_CDC_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8003148:	2500      	movs	r5, #0
 800314a:	7305      	strb	r5, [r0, #12]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4798      	blx	r3

    /* Init Xfer states */
    ((USBD_HID_CDC_HandleTypeDef *)pdev->pClassData)->CDCTxState = 0;
 8003150:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
    ((USBD_HID_CDC_HandleTypeDef *)pdev->pClassData)->CDCRxState = 0;

    ((USBD_HID_CDC_HandleTypeDef *)pdev->pClassData)->HIDRxState = 0;

    /* Prepare Out endpoint to receive next packet */
    USBD_LL_PrepareReceive(pdev,
 8003154:	2340      	movs	r3, #64	; 0x40

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();

    /* Init Xfer states */
    ((USBD_HID_CDC_HandleTypeDef *)pdev->pClassData)->CDCTxState = 0;
 8003156:	6755      	str	r5, [r2, #116]	; 0x74
    ((USBD_HID_CDC_HandleTypeDef *)pdev->pClassData)->CDCRxState = 0;

    ((USBD_HID_CDC_HandleTypeDef *)pdev->pClassData)->HIDRxState = 0;

    /* Prepare Out endpoint to receive next packet */
    USBD_LL_PrepareReceive(pdev,
 8003158:	2102      	movs	r1, #2
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();

    /* Init Xfer states */
    ((USBD_HID_CDC_HandleTypeDef *)pdev->pClassData)->CDCTxState = 0;
    ((USBD_HID_CDC_HandleTypeDef *)pdev->pClassData)->CDCRxState = 0;
 800315a:	6795      	str	r5, [r2, #120]	; 0x78

    ((USBD_HID_CDC_HandleTypeDef *)pdev->pClassData)->HIDRxState = 0;

    /* Prepare Out endpoint to receive next packet */
    USBD_LL_PrepareReceive(pdev,
 800315c:	4620      	mov	r0, r4

    /* Init Xfer states */
    ((USBD_HID_CDC_HandleTypeDef *)pdev->pClassData)->CDCTxState = 0;
    ((USBD_HID_CDC_HandleTypeDef *)pdev->pClassData)->CDCRxState = 0;

    ((USBD_HID_CDC_HandleTypeDef *)pdev->pClassData)->HIDRxState = 0;
 800315e:	6195      	str	r5, [r2, #24]

    /* Prepare Out endpoint to receive next packet */
    USBD_LL_PrepareReceive(pdev,
 8003160:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8003162:	f000 fe2f 	bl	8003dc4 <USBD_LL_PrepareReceive>
    		CDC_EP1OUT_ADDR,
    		((USBD_HID_CDC_HandleTypeDef *)pdev->pClassData)->CDCRxBuffer,
            CDC_EP1OUT_SIZE);

    USBD_LL_PrepareReceive(pdev,
 8003166:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 800316a:	2340      	movs	r3, #64	; 0x40
 800316c:	6912      	ldr	r2, [r2, #16]
 800316e:	2103      	movs	r1, #3
 8003170:	4620      	mov	r0, r4
 8003172:	f000 fe27 	bl	8003dc4 <USBD_LL_PrepareReceive>
  * @retval status
  */
static uint8_t  USBD_HID_CDC_Init (USBD_HandleTypeDef *pdev,
                               uint8_t cfgidx)
{
  uint8_t ret = 0;
 8003176:	4628      	mov	r0, r5
 8003178:	bd38      	pop	{r3, r4, r5, pc}

  pdev->pClassData = USBD_malloc(sizeof (USBD_HID_CDC_HandleTypeDef));
  
  if(pdev->pClassData == NULL)
  {
    ret = 1; 
 800317a:	2001      	movs	r0, #1
        	((USBD_HID_CDC_HandleTypeDef *)pdev->pClassData)->HIDRxBuffer,
            HID_EP1OUT_SIZE);
  }

  return ret;
}
 800317c:	bd38      	pop	{r3, r4, r5, pc}

0800317e <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport     (USBD_HandleTypeDef  *pdev,
                                 uint8_t *report,
                                 uint16_t len)
{
 800317e:	b510      	push	{r4, lr}
 8003180:	4613      	mov	r3, r2
  USBD_HID_CDC_HandleTypeDef     *hhid = (USBD_HID_CDC_HandleTypeDef*)pdev->pClassData;
  
  if (pdev->dev_state == USBD_STATE_CONFIGURED )
 8003182:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003186:	2a03      	cmp	r2, #3
 8003188:	d109      	bne.n	800319e <USBD_HID_SendReport+0x20>
  */
uint8_t USBD_HID_SendReport     (USBD_HandleTypeDef  *pdev,
                                 uint8_t *report,
                                 uint16_t len)
{
  USBD_HID_CDC_HandleTypeDef     *hhid = (USBD_HID_CDC_HandleTypeDef*)pdev->pClassData;
 800318a:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  if (pdev->dev_state == USBD_STATE_CONFIGURED )
  {
    if(hhid->state == HID_IDLE)
 800318e:	7b22      	ldrb	r2, [r4, #12]
 8003190:	b92a      	cbnz	r2, 800319e <USBD_HID_SendReport+0x20>
    {
      hhid->state = HID_BUSY;
 8003192:	2201      	movs	r2, #1
 8003194:	7322      	strb	r2, [r4, #12]

      USBD_LL_Transmit (pdev, 
 8003196:	460a      	mov	r2, r1
 8003198:	2183      	movs	r1, #131	; 0x83
 800319a:	f000 fe0c 	bl	8003db6 <USBD_LL_Transmit>
                        report,
                        len);
    }
  }
  return USBD_OK;
}
 800319e:	2000      	movs	r0, #0
 80031a0:	bd10      	pop	{r4, pc}

080031a2 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if(fops != NULL)
 80031a2:	b119      	cbz	r1, 80031ac <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 80031a4:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;
 80031a8:	2000      	movs	r0, #0
 80031aa:	4770      	bx	lr
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
 80031ac:	2002      	movs	r0, #2
    pdev->pUserData= fops;
    ret = USBD_OK;
  }

  return ret;
}
 80031ae:	4770      	bx	lr

080031b0 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_HID_CDC_HandleTypeDef   *h = (USBD_HID_CDC_HandleTypeDef*) pdev->pClassData;
 80031b0:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218

  h->CDCTxBuffer = pbuff;
  h->CDCTxLength = length;

  return USBD_OK;
}
 80031b4:	2000      	movs	r0, #0
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_HID_CDC_HandleTypeDef   *h = (USBD_HID_CDC_HandleTypeDef*) pdev->pClassData;

  h->CDCTxBuffer = pbuff;
 80031b6:	6699      	str	r1, [r3, #104]	; 0x68
  h->CDCTxLength = length;
 80031b8:	671a      	str	r2, [r3, #112]	; 0x70

  return USBD_OK;
}
 80031ba:	4770      	bx	lr

080031bc <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_HID_CDC_HandleTypeDef   *h = (USBD_HID_CDC_HandleTypeDef*) pdev->pClassData;

  h->CDCRxBuffer = pbuff;
 80031bc:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218

  return USBD_OK;
}
 80031c0:	2000      	movs	r0, #0
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_HID_CDC_HandleTypeDef   *h = (USBD_HID_CDC_HandleTypeDef*) pdev->pClassData;

  h->CDCRxBuffer = pbuff;
 80031c2:	6659      	str	r1, [r3, #100]	; 0x64

  return USBD_OK;
}
 80031c4:	4770      	bx	lr

080031c6 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_HID_CDC_HandleTypeDef   *h = (USBD_HID_CDC_HandleTypeDef*) pdev->pClassData;
 80031c6:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80031ca:	b508      	push	{r3, lr}
  USBD_HID_CDC_HandleTypeDef   *h = (USBD_HID_CDC_HandleTypeDef*) pdev->pClassData;

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 80031cc:	b132      	cbz	r2, 80031dc <USBD_CDC_ReceivePacket+0x16>
  {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_EP1OUT_ADDR, h->CDCRxBuffer, VCOM_DATA_SIZE);
 80031ce:	2340      	movs	r3, #64	; 0x40
 80031d0:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80031d2:	2102      	movs	r1, #2
 80031d4:	f000 fdf6 	bl	8003dc4 <USBD_LL_PrepareReceive>

      return USBD_OK;
 80031d8:	2000      	movs	r0, #0
 80031da:	bd08      	pop	{r3, pc}
  }

  return USBD_FAIL;
 80031dc:	2002      	movs	r0, #2
}
 80031de:	bd08      	pop	{r3, pc}

080031e0 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80031e0:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80031e2:	b950      	cbnz	r0, 80031fa <USBD_Init+0x1a>
  {
    USBD_ErrLog("Invalid Device handle");
 80031e4:	480d      	ldr	r0, [pc, #52]	; (800321c <USBD_Init+0x3c>)
 80031e6:	f000 fe81 	bl	8003eec <printf>
 80031ea:	480d      	ldr	r0, [pc, #52]	; (8003220 <USBD_Init+0x40>)
 80031ec:	f000 fe7e 	bl	8003eec <printf>
 80031f0:	200a      	movs	r0, #10
 80031f2:	f000 fe93 	bl	8003f1c <putchar>
    return USBD_FAIL; 
 80031f6:	2002      	movs	r0, #2
 80031f8:	bd08      	pop	{r3, pc}
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80031fa:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80031fe:	b113      	cbz	r3, 8003206 <USBD_Init+0x26>
  {
    pdev->pClass = NULL;
 8003200:	2300      	movs	r3, #0
 8003202:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8003206:	b109      	cbz	r1, 800320c <USBD_Init+0x2c>
  {
    pdev->pDesc = pdesc;
 8003208:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800320c:	2301      	movs	r3, #1
 800320e:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 8003212:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8003214:	f000 fd40 	bl	8003c98 <USBD_LL_Init>
  
  return USBD_OK; 
 8003218:	2000      	movs	r0, #0
}
 800321a:	bd08      	pop	{r3, pc}
 800321c:	080089fd 	.word	0x080089fd
 8003220:	08008a05 	.word	0x08008a05

08003224 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8003224:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8003226:	b119      	cbz	r1, 8003230 <USBD_RegisterClass+0xc>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8003228:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 800322c:	2000      	movs	r0, #0
 800322e:	bd08      	pop	{r3, pc}
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
 8003230:	4805      	ldr	r0, [pc, #20]	; (8003248 <USBD_RegisterClass+0x24>)
 8003232:	f000 fe5b 	bl	8003eec <printf>
 8003236:	4805      	ldr	r0, [pc, #20]	; (800324c <USBD_RegisterClass+0x28>)
 8003238:	f000 fe58 	bl	8003eec <printf>
 800323c:	200a      	movs	r0, #10
 800323e:	f000 fe6d 	bl	8003f1c <putchar>
    status = USBD_FAIL; 
 8003242:	2002      	movs	r0, #2
  }
  
  return status;
}
 8003244:	bd08      	pop	{r3, pc}
 8003246:	bf00      	nop
 8003248:	080089fd 	.word	0x080089fd
 800324c:	08008a1b 	.word	0x08008a1b

08003250 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8003250:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8003252:	f000 fd73 	bl	8003d3c <USBD_LL_Start>
  
  return USBD_OK;  
}
 8003256:	2000      	movs	r0, #0
 8003258:	bd08      	pop	{r3, pc}

0800325a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800325a:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 800325c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003260:	b90b      	cbnz	r3, 8003266 <USBD_SetClassConfig+0xc>
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8003262:	2002      	movs	r0, #2
 8003264:	bd08      	pop	{r3, pc}
  
  if(pdev->pClass != NULL)
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4798      	blx	r3
 800326a:	2800      	cmp	r0, #0
 800326c:	d1f9      	bne.n	8003262 <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 800326e:	bd08      	pop	{r3, pc}

08003270 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003270:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8003272:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	4798      	blx	r3
  return USBD_OK;
}
 800327a:	2000      	movs	r0, #0
 800327c:	bd08      	pop	{r3, pc}

0800327e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800327e:	b538      	push	{r3, r4, r5, lr}
 8003280:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003282:	f500 7502 	add.w	r5, r0, #520	; 0x208
 8003286:	4628      	mov	r0, r5
 8003288:	f000 f8e2 	bl	8003450 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 800328c:	2301      	movs	r3, #1
 800328e:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 8003292:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
{

  USBD_ParseSetupRequest(&pdev->request, psetup);
  
  pdev->ep0_state = USBD_EP0_SETUP;
  pdev->ep0_data_len = pdev->request.wLength;
 8003296:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 800329a:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 800329e:	f001 031f 	and.w	r3, r1, #31
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d00c      	beq.n	80032c0 <USBD_LL_SetupStage+0x42>
 80032a6:	d306      	bcc.n	80032b6 <USBD_LL_SetupStage+0x38>
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d10e      	bne.n	80032ca <USBD_LL_SetupStage+0x4c>
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
    break;
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 80032ac:	4629      	mov	r1, r5
 80032ae:	4620      	mov	r0, r4
 80032b0:	f000 fa16 	bl	80036e0 <USBD_StdEPReq>
    break;
 80032b4:	e00e      	b.n	80032d4 <USBD_LL_SetupStage+0x56>
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 80032b6:	4629      	mov	r1, r5
 80032b8:	4620      	mov	r0, r4
 80032ba:	f000 f8e9 	bl	8003490 <USBD_StdDevReq>
    break;
 80032be:	e009      	b.n	80032d4 <USBD_LL_SetupStage+0x56>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 80032c0:	4629      	mov	r1, r5
 80032c2:	4620      	mov	r0, r4
 80032c4:	f000 f9f4 	bl	80036b0 <USBD_StdItfReq>
    break;
 80032c8:	e004      	b.n	80032d4 <USBD_LL_SetupStage+0x56>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 80032ca:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80032ce:	4620      	mov	r0, r4
 80032d0:	f000 fd4c 	bl	8003d6c <USBD_LL_StallEP>
    break;
  }  
  return USBD_OK;  
}
 80032d4:	2000      	movs	r0, #0
 80032d6:	bd38      	pop	{r3, r4, r5, pc}

080032d8 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 80032d8:	b538      	push	{r3, r4, r5, lr}
 80032da:	4604      	mov	r4, r0
 80032dc:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 80032de:	bb09      	cbnz	r1, 8003324 <USBD_LL_DataOutStage+0x4c>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80032e0:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 80032e4:	2b03      	cmp	r3, #3
 80032e6:	d126      	bne.n	8003336 <USBD_LL_DataOutStage+0x5e>
    {
      if(pep->rem_length > pep->maxpacket)
 80032e8:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
 80032ec:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 80032f0:	4291      	cmp	r1, r2
 80032f2:	d90a      	bls.n	800330a <USBD_LL_DataOutStage+0x32>
      {
        pep->rem_length -=  pep->maxpacket;
 80032f4:	1a8b      	subs	r3, r1, r2
       
        USBD_CtlContinueRx (pdev, 
 80032f6:	429a      	cmp	r2, r3
 80032f8:	bf28      	it	cs
 80032fa:	461a      	movcs	r2, r3
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
    {
      if(pep->rem_length > pep->maxpacket)
      {
        pep->rem_length -=  pep->maxpacket;
 80032fc:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
       
        USBD_CtlContinueRx (pdev, 
 8003300:	b292      	uxth	r2, r2
 8003302:	4629      	mov	r1, r5
 8003304:	f000 fa8f 	bl	8003826 <USBD_CtlContinueRx>
 8003308:	e015      	b.n	8003336 <USBD_LL_DataOutStage+0x5e>
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800330a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	b123      	cbz	r3, 800331c <USBD_LL_DataOutStage+0x44>
 8003312:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003316:	2a03      	cmp	r2, #3
 8003318:	d100      	bne.n	800331c <USBD_LL_DataOutStage+0x44>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
        {
          pdev->pClass->EP0_RxReady(pdev); 
 800331a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800331c:	4620      	mov	r0, r4
 800331e:	f000 fa8a 	bl	8003836 <USBD_CtlSendStatus>
 8003322:	e008      	b.n	8003336 <USBD_LL_DataOutStage+0x5e>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8003324:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	b123      	cbz	r3, 8003336 <USBD_LL_DataOutStage+0x5e>
 800332c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003330:	2a03      	cmp	r2, #3
 8003332:	d100      	bne.n	8003336 <USBD_LL_DataOutStage+0x5e>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
 8003334:	4798      	blx	r3
  }  
  return USBD_OK;
}
 8003336:	2000      	movs	r0, #0
 8003338:	bd38      	pop	{r3, r4, r5, pc}

0800333a <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 800333a:	b570      	push	{r4, r5, r6, lr}
 800333c:	4613      	mov	r3, r2
 800333e:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8003340:	460e      	mov	r6, r1
 8003342:	2900      	cmp	r1, #0
 8003344:	d13c      	bne.n	80033c0 <USBD_LL_DataInStage+0x86>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8003346:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 800334a:	2a02      	cmp	r2, #2
 800334c:	d130      	bne.n	80033b0 <USBD_LL_DataInStage+0x76>
    {
      if(pep->rem_length > pep->maxpacket)
 800334e:	69c5      	ldr	r5, [r0, #28]
 8003350:	6a02      	ldr	r2, [r0, #32]
 8003352:	4295      	cmp	r5, r2
 8003354:	d907      	bls.n	8003366 <USBD_LL_DataInStage+0x2c>
      {
        pep->rem_length -=  pep->maxpacket;
 8003356:	1aaa      	subs	r2, r5, r2
 8003358:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 800335a:	4619      	mov	r1, r3
 800335c:	b292      	uxth	r2, r2
 800335e:	f000 fa4b 	bl	80037f8 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8003362:	4633      	mov	r3, r6
 8003364:	e011      	b.n	800338a <USBD_LL_DataInStage+0x50>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8003366:	6983      	ldr	r3, [r0, #24]
 8003368:	fbb3 f5f2 	udiv	r5, r3, r2
 800336c:	fb02 3515 	mls	r5, r2, r5, r3
 8003370:	b98d      	cbnz	r5, 8003396 <USBD_LL_DataInStage+0x5c>
 8003372:	429a      	cmp	r2, r3
 8003374:	d80f      	bhi.n	8003396 <USBD_LL_DataInStage+0x5c>
           (pep->total_length >= pep->maxpacket) &&
 8003376:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 800337a:	4293      	cmp	r3, r2
 800337c:	d20b      	bcs.n	8003396 <USBD_LL_DataInStage+0x5c>
             (pep->total_length < pdev->ep0_data_len ))
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 800337e:	462a      	mov	r2, r5
 8003380:	f000 fa3a 	bl	80037f8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8003384:	462b      	mov	r3, r5
           (pep->total_length >= pep->maxpacket) &&
             (pep->total_length < pdev->ep0_data_len ))
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
 8003386:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800338a:	461a      	mov	r2, r3
 800338c:	4619      	mov	r1, r3
 800338e:	4620      	mov	r0, r4
 8003390:	f000 fd18 	bl	8003dc4 <USBD_LL_PrepareReceive>
 8003394:	e00c      	b.n	80033b0 <USBD_LL_DataInStage+0x76>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8003396:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	b12b      	cbz	r3, 80033aa <USBD_LL_DataInStage+0x70>
 800339e:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 80033a2:	2a03      	cmp	r2, #3
 80033a4:	d101      	bne.n	80033aa <USBD_LL_DataInStage+0x70>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
          {
            pdev->pClass->EP0_TxSent(pdev); 
 80033a6:	4620      	mov	r0, r4
 80033a8:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 80033aa:	4620      	mov	r0, r4
 80033ac:	f000 fa4e 	bl	800384c <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 80033b0:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d10c      	bne.n	80033d2 <USBD_LL_DataInStage+0x98>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 80033b8:	2300      	movs	r3, #0
 80033ba:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
 80033be:	e008      	b.n	80033d2 <USBD_LL_DataInStage+0x98>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 80033c0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	b123      	cbz	r3, 80033d2 <USBD_LL_DataInStage+0x98>
 80033c8:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80033cc:	2a03      	cmp	r2, #3
 80033ce:	d100      	bne.n	80033d2 <USBD_LL_DataInStage+0x98>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
 80033d0:	4798      	blx	r3
  }  
  return USBD_OK;
}
 80033d2:	2000      	movs	r0, #0
 80033d4:	bd70      	pop	{r4, r5, r6, pc}

080033d6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80033d6:	b538      	push	{r3, r4, r5, lr}
 80033d8:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 80033da:	2200      	movs	r2, #0
 80033dc:	4611      	mov	r1, r2
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80033de:	2540      	movs	r5, #64	; 0x40
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 80033e0:	2340      	movs	r3, #64	; 0x40
 80033e2:	f000 fcb2 	bl	8003d4a <USBD_LL_OpenEP>
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 80033e6:	462b      	mov	r3, r5
  USBD_LL_OpenEP(pdev,
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80033e8:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 80033ec:	2200      	movs	r2, #0
 80033ee:	2180      	movs	r1, #128	; 0x80
 80033f0:	4620      	mov	r0, r4
 80033f2:	f000 fcaa 	bl	8003d4a <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80033f6:	2301      	movs	r3, #1
 80033f8:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 80033fc:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  USBD_LL_OpenEP(pdev,
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003400:	6225      	str	r5, [r4, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  
  if (pdev->pClassData) 
 8003402:	b12b      	cbz	r3, 8003410 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8003404:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003408:	7921      	ldrb	r1, [r4, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	4620      	mov	r0, r4
 800340e:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8003410:	2000      	movs	r0, #0
 8003412:	bd38      	pop	{r3, r4, r5, pc}

08003414 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8003414:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8003416:	2000      	movs	r0, #0
 8003418:	4770      	bx	lr

0800341a <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 800341a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800341e:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8003422:	2304      	movs	r3, #4
 8003424:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8003428:	2000      	movs	r0, #0
 800342a:	4770      	bx	lr

0800342c <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 800342c:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 8003430:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8003434:	2000      	movs	r0, #0
 8003436:	4770      	bx	lr

08003438 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8003438:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800343a:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800343e:	2a03      	cmp	r2, #3
 8003440:	d104      	bne.n	800344c <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8003442:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003446:	69db      	ldr	r3, [r3, #28]
 8003448:	b103      	cbz	r3, 800344c <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 800344a:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 800344c:	2000      	movs	r0, #0
 800344e:	bd08      	pop	{r3, pc}

08003450 <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  req->bmRequest     = *(uint8_t *)  (pdata);
 8003450:	780b      	ldrb	r3, [r1, #0]
 8003452:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8003454:	784b      	ldrb	r3, [r1, #1]
 8003456:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8003458:	78ca      	ldrb	r2, [r1, #3]
 800345a:	788b      	ldrb	r3, [r1, #2]
 800345c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003460:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8003462:	794a      	ldrb	r2, [r1, #5]
 8003464:	790b      	ldrb	r3, [r1, #4]
 8003466:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800346a:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800346c:	79ca      	ldrb	r2, [r1, #7]
 800346e:	798b      	ldrb	r3, [r1, #6]
 8003470:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003474:	80c3      	strh	r3, [r0, #6]
 8003476:	4770      	bx	lr

08003478 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8003478:	b510      	push	{r4, lr}
 800347a:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 800347c:	2180      	movs	r1, #128	; 0x80
 800347e:	f000 fc75 	bl	8003d6c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8003482:	4620      	mov	r0, r4
}
 8003484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
  USBD_LL_StallEP(pdev , 0);
 8003488:	2100      	movs	r1, #0
 800348a:	f000 bc6f 	b.w	8003d6c <USBD_LL_StallEP>
	...

08003490 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8003490:	b573      	push	{r0, r1, r4, r5, r6, lr}
  USBD_StatusTypeDef ret = USBD_OK;  
  
  switch (req->bRequest) 
 8003492:	784b      	ldrb	r3, [r1, #1]
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8003494:	4604      	mov	r4, r0
 8003496:	460d      	mov	r5, r1
  USBD_StatusTypeDef ret = USBD_OK;  
  
  switch (req->bRequest) 
 8003498:	2b09      	cmp	r3, #9
 800349a:	f200 80ff 	bhi.w	800369c <USBD_StdDevReq+0x20c>
 800349e:	e8df f013 	tbh	[pc, r3, lsl #1]
 80034a2:	00d1      	.short	0x00d1
 80034a4:	00fd00e8 	.word	0x00fd00e8
 80034a8:	00fd00e4 	.word	0x00fd00e4
 80034ac:	000a007b 	.word	0x000a007b
 80034b0:	00c100fd 	.word	0x00c100fd
 80034b4:	0097      	.short	0x0097
{
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 80034b6:	8849      	ldrh	r1, [r1, #2]
 80034b8:	0a0b      	lsrs	r3, r1, #8
 80034ba:	3b01      	subs	r3, #1
 80034bc:	2b06      	cmp	r3, #6
 80034be:	f200 80ed 	bhi.w	800369c <USBD_StdDevReq+0x20c>
 80034c2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80034c6:	0007      	.short	0x0007
 80034c8:	0017000b 	.word	0x0017000b
 80034cc:	00eb00eb 	.word	0x00eb00eb
 80034d0:	004d0042 	.word	0x004d0042
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80034d4:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	e016      	b.n	800350a <USBD_StdDevReq+0x7a>
    break;
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 80034dc:	7c02      	ldrb	r2, [r0, #16]
 80034de:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80034e2:	b90a      	cbnz	r2, 80034e8 <USBD_StdDevReq+0x58>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80034e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e6:	e000      	b.n	80034ea <USBD_StdDevReq+0x5a>
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80034e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ea:	f10d 0006 	add.w	r0, sp, #6
 80034ee:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80034f0:	2302      	movs	r3, #2
 80034f2:	e040      	b.n	8003576 <USBD_StdDevReq+0xe6>
    }
    break;
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80034f4:	b2c9      	uxtb	r1, r1
 80034f6:	2905      	cmp	r1, #5
 80034f8:	d820      	bhi.n	800353c <USBD_StdDevReq+0xac>
 80034fa:	e8df f001 	tbb	[pc, r1]
 80034fe:	0b03      	.short	0x0b03
 8003500:	1b17130f 	.word	0x1b17130f
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8003504:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f10d 0106 	add.w	r1, sp, #6
 800350e:	7c20      	ldrb	r0, [r4, #16]
 8003510:	4798      	blx	r3
 8003512:	e031      	b.n	8003578 <USBD_StdDevReq+0xe8>
      break;
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8003514:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	e7f6      	b.n	800350a <USBD_StdDevReq+0x7a>
      break;
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800351c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	e7f2      	b.n	800350a <USBD_StdDevReq+0x7a>
      break;
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8003524:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	e7ee      	b.n	800350a <USBD_StdDevReq+0x7a>
      break;
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800352c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	e7ea      	b.n	800350a <USBD_StdDevReq+0x7a>
      break;
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8003534:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	e7e6      	b.n	800350a <USBD_StdDevReq+0x7a>
      break;
      
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
 800353c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003540:	f10d 0206 	add.w	r2, sp, #6
 8003544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003546:	4798      	blx	r3
 8003548:	e016      	b.n	8003578 <USBD_StdDevReq+0xe8>
#endif   
    }
    break;
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800354a:	7c03      	ldrb	r3, [r0, #16]
 800354c:	2b00      	cmp	r3, #0
 800354e:	f040 80a5 	bne.w	800369c <USBD_StdDevReq+0x20c>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8003552:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003556:	f10d 0006 	add.w	r0, sp, #6
 800355a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800355c:	4798      	blx	r3
 800355e:	e00b      	b.n	8003578 <USBD_StdDevReq+0xe8>
      USBD_CtlError(pdev , req);
      return;
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8003560:	7c03      	ldrb	r3, [r0, #16]
 8003562:	2b00      	cmp	r3, #0
 8003564:	f040 809a 	bne.w	800369c <USBD_StdDevReq+0x20c>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8003568:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800356c:	f10d 0006 	add.w	r0, sp, #6
 8003570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003572:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003574:	2307      	movs	r3, #7
 8003576:	7043      	strb	r3, [r0, #1]
  default: 
     USBD_CtlError(pdev , req);
    return;
  }
  
  if((len != 0)&& (req->wLength != 0))
 8003578:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800357c:	2a00      	cmp	r2, #0
 800357e:	f000 8091 	beq.w	80036a4 <USBD_StdDevReq+0x214>
 8003582:	88eb      	ldrh	r3, [r5, #6]
 8003584:	2b00      	cmp	r3, #0
 8003586:	f000 808d 	beq.w	80036a4 <USBD_StdDevReq+0x214>
  {
    
    len = MIN(len , req->wLength);
 800358a:	429a      	cmp	r2, r3
 800358c:	bf28      	it	cs
 800358e:	461a      	movcs	r2, r3
    
    USBD_CtlSendData (pdev, 
 8003590:	4601      	mov	r1, r0
  }
  
  if((len != 0)&& (req->wLength != 0))
  {
    
    len = MIN(len , req->wLength);
 8003592:	f8ad 2006 	strh.w	r2, [sp, #6]
 8003596:	e064      	b.n	8003662 <USBD_StdDevReq+0x1d2>
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8003598:	888b      	ldrh	r3, [r1, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d17e      	bne.n	800369c <USBD_StdDevReq+0x20c>
 800359e:	88cb      	ldrh	r3, [r1, #6]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d17b      	bne.n	800369c <USBD_StdDevReq+0x20c>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80035a4:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80035a8:	788e      	ldrb	r6, [r1, #2]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80035aa:	2b03      	cmp	r3, #3
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80035ac:	f006 067f 	and.w	r6, r6, #127	; 0x7f
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80035b0:	d074      	beq.n	800369c <USBD_StdDevReq+0x20c>
    {
      USBD_CtlError(pdev , req);
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 80035b2:	f880 61fe 	strb.w	r6, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 80035b6:	4631      	mov	r1, r6
 80035b8:	f000 fbf6 	bl	8003da8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 80035bc:	4620      	mov	r0, r4
 80035be:	f000 f93a 	bl	8003836 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 80035c2:	b10e      	cbz	r6, 80035c8 <USBD_StdDevReq+0x138>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 80035c4:	2302      	movs	r3, #2
 80035c6:	e000      	b.n	80035ca <USBD_StdDevReq+0x13a>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80035c8:	2301      	movs	r3, #1
 80035ca:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 80035ce:	e069      	b.n	80036a4 <USBD_StdDevReq+0x214>
                           USBD_SetupReqTypedef *req)
{
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 80035d0:	7889      	ldrb	r1, [r1, #2]
 80035d2:	4e36      	ldr	r6, [pc, #216]	; (80036ac <USBD_StdDevReq+0x21c>)
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80035d4:	2901      	cmp	r1, #1
                           USBD_SetupReqTypedef *req)
{
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 80035d6:	7031      	strb	r1, [r6, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80035d8:	d860      	bhi.n	800369c <USBD_StdDevReq+0x20c>
  {            
     USBD_CtlError(pdev , req);                              
  } 
  else 
  {
    switch (pdev->dev_state) 
 80035da:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d002      	beq.n	80035e8 <USBD_StdDevReq+0x158>
 80035e2:	2b03      	cmp	r3, #3
 80035e4:	d008      	beq.n	80035f8 <USBD_StdDevReq+0x168>
 80035e6:	e059      	b.n	800369c <USBD_StdDevReq+0x20c>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 80035e8:	2900      	cmp	r1, #0
 80035ea:	d053      	beq.n	8003694 <USBD_StdDevReq+0x204>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 80035ec:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80035ee:	2303      	movs	r3, #3
    switch (pdev->dev_state) 
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 80035f0:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80035f2:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
 80035f6:	e00f      	b.n	8003618 <USBD_StdDevReq+0x188>
         USBD_CtlSendStatus(pdev);
      }
      break;
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 80035f8:	b931      	cbnz	r1, 8003608 <USBD_StdDevReq+0x178>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80035fa:	2302      	movs	r3, #2
 80035fc:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8003600:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8003602:	f7ff fe35 	bl	8003270 <USBD_ClrClassConfig>
 8003606:	e045      	b.n	8003694 <USBD_StdDevReq+0x204>
        USBD_CtlSendStatus(pdev);
        
      } 
      else  if (cfgidx != pdev->dev_config) 
 8003608:	6841      	ldr	r1, [r0, #4]
 800360a:	2901      	cmp	r1, #1
 800360c:	d042      	beq.n	8003694 <USBD_StdDevReq+0x204>
      {
        /* Clear old configuration */
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 800360e:	b2c9      	uxtb	r1, r1
 8003610:	f7ff fe2e 	bl	8003270 <USBD_ClrClassConfig>
        
        /* set new configuration */
        pdev->dev_config = cfgidx;
 8003614:	7831      	ldrb	r1, [r6, #0]
 8003616:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8003618:	4620      	mov	r0, r4
 800361a:	f7ff fe1e 	bl	800325a <USBD_SetClassConfig>
 800361e:	2802      	cmp	r0, #2
 8003620:	d138      	bne.n	8003694 <USBD_StdDevReq+0x204>
 8003622:	e03b      	b.n	800369c <USBD_StdDevReq+0x20c>
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{

  if (req->wLength != 1) 
 8003624:	88ca      	ldrh	r2, [r1, #6]
 8003626:	2a01      	cmp	r2, #1
 8003628:	d138      	bne.n	800369c <USBD_StdDevReq+0x20c>
  {                   
     USBD_CtlError(pdev , req);
  }
  else 
  {
    switch (pdev->dev_state )  
 800362a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800362e:	2b02      	cmp	r3, #2
 8003630:	d003      	beq.n	800363a <USBD_StdDevReq+0x1aa>
 8003632:	2b03      	cmp	r3, #3
 8003634:	d132      	bne.n	800369c <USBD_StdDevReq+0x20c>
                        1);
      break;
      
    case USBD_STATE_CONFIGURED:   
      
      USBD_CtlSendData (pdev, 
 8003636:	1d01      	adds	r1, r0, #4
 8003638:	e013      	b.n	8003662 <USBD_StdDevReq+0x1d2>
  else 
  {
    switch (pdev->dev_state )  
    {
    case USBD_STATE_ADDRESSED:                     
      pdev->dev_default_config = 0;
 800363a:	4601      	mov	r1, r0
 800363c:	2300      	movs	r3, #0
 800363e:	f841 3f08 	str.w	r3, [r1, #8]!
 8003642:	e00e      	b.n	8003662 <USBD_StdDevReq+0x1d2>
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
  
    
  switch (pdev->dev_state) 
 8003644:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003648:	3b02      	subs	r3, #2
 800364a:	2b01      	cmp	r3, #1
 800364c:	d826      	bhi.n	800369c <USBD_StdDevReq+0x20c>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 800364e:	2301      	movs	r3, #1
 8003650:	60c3      	str	r3, [r0, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 8003652:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8003656:	b10b      	cbz	r3, 800365c <USBD_StdDevReq+0x1cc>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8003658:	2303      	movs	r3, #3
 800365a:	60c3      	str	r3, [r0, #12]
    }
    
    USBD_CtlSendData (pdev, 
 800365c:	2202      	movs	r2, #2
 800365e:	f104 010c 	add.w	r1, r4, #12
 8003662:	4620      	mov	r0, r4
 8003664:	f000 f8bb 	bl	80037de <USBD_CtlSendData>
 8003668:	e01c      	b.n	80036a4 <USBD_StdDevReq+0x214>
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800366a:	884b      	ldrh	r3, [r1, #2]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d119      	bne.n	80036a4 <USBD_StdDevReq+0x214>
 8003670:	e008      	b.n	8003684 <USBD_StdDevReq+0x1f4>
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
  switch (pdev->dev_state)
 8003672:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003676:	3b02      	subs	r3, #2
 8003678:	2b01      	cmp	r3, #1
 800367a:	d80f      	bhi.n	800369c <USBD_StdDevReq+0x20c>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 800367c:	884b      	ldrh	r3, [r1, #2]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d110      	bne.n	80036a4 <USBD_StdDevReq+0x214>
    {
      pdev->dev_remote_wakeup = 0; 
 8003682:	2300      	movs	r3, #0
 8003684:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8003688:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800368c:	4629      	mov	r1, r5
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	4620      	mov	r0, r4
 8003692:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8003694:	4620      	mov	r0, r4
 8003696:	f000 f8ce 	bl	8003836 <USBD_CtlSendStatus>
 800369a:	e003      	b.n	80036a4 <USBD_StdDevReq+0x214>
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
    break;
    
  default:  
    USBD_CtlError(pdev , req);
 800369c:	4629      	mov	r1, r5
 800369e:	4620      	mov	r0, r4
 80036a0:	f7ff feea 	bl	8003478 <USBD_CtlError>
    break;
  }
  
  return ret;
}
 80036a4:	2000      	movs	r0, #0
 80036a6:	b002      	add	sp, #8
 80036a8:	bd70      	pop	{r4, r5, r6, pc}
 80036aa:	bf00      	nop
 80036ac:	200006e8 	.word	0x200006e8

080036b0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80036b0:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret = USBD_OK; 
  
  switch (pdev->dev_state) 
 80036b2:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80036b6:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret = USBD_OK; 
  
  switch (pdev->dev_state) 
 80036b8:	2b03      	cmp	r3, #3
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80036ba:	460d      	mov	r5, r1
  USBD_StatusTypeDef ret = USBD_OK; 
  
  switch (pdev->dev_state) 
 80036bc:	d10c      	bne.n	80036d8 <USBD_StdItfReq+0x28>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 80036be:	790b      	ldrb	r3, [r1, #4]
 80036c0:	2b05      	cmp	r3, #5
 80036c2:	d809      	bhi.n	80036d8 <USBD_StdItfReq+0x28>
    {
      pdev->pClass->Setup (pdev, req); 
 80036c4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 80036cc:	88eb      	ldrh	r3, [r5, #6]
 80036ce:	b92b      	cbnz	r3, 80036dc <USBD_StdItfReq+0x2c>
      {
         USBD_CtlSendStatus(pdev);
 80036d0:	4620      	mov	r0, r4
 80036d2:	f000 f8b0 	bl	8003836 <USBD_CtlSendStatus>
 80036d6:	e001      	b.n	80036dc <USBD_StdItfReq+0x2c>
       USBD_CtlError(pdev , req);
    }
    break;
    
  default:
     USBD_CtlError(pdev , req);
 80036d8:	f7ff fece 	bl	8003478 <USBD_CtlError>
    break;
  }
  return USBD_OK;
}
 80036dc:	2000      	movs	r0, #0
 80036de:	bd38      	pop	{r3, r4, r5, pc}

080036e0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80036e0:	b570      	push	{r4, r5, r6, lr}
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 80036e2:	780a      	ldrb	r2, [r1, #0]
{
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 80036e4:	888e      	ldrh	r6, [r1, #4]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 80036e6:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80036ea:	2a20      	cmp	r2, #32
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80036ec:	4604      	mov	r4, r0
 80036ee:	460d      	mov	r5, r1
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 80036f0:	b2f3      	uxtb	r3, r6
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 80036f2:	d104      	bne.n	80036fe <USBD_StdEPReq+0x1e>
  {
    pdev->pClass->Setup (pdev, req);
 80036f4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	4798      	blx	r3
    
    return USBD_OK;
 80036fc:	e051      	b.n	80037a2 <USBD_StdEPReq+0xc2>
  }
  
  switch (req->bRequest) 
 80036fe:	784a      	ldrb	r2, [r1, #1]
 8003700:	2a01      	cmp	r2, #1
 8003702:	d010      	beq.n	8003726 <USBD_StdEPReq+0x46>
 8003704:	d326      	bcc.n	8003754 <USBD_StdEPReq+0x74>
 8003706:	2a03      	cmp	r2, #3
 8003708:	d14b      	bne.n	80037a2 <USBD_StdEPReq+0xc2>
  {
    
  case USB_REQ_SET_FEATURE :
    
    switch (pdev->dev_state) 
 800370a:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800370e:	2a02      	cmp	r2, #2
 8003710:	d027      	beq.n	8003762 <USBD_StdEPReq+0x82>
 8003712:	2a03      	cmp	r2, #3
 8003714:	d143      	bne.n	800379e <USBD_StdEPReq+0xbe>
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 8003716:	884a      	ldrh	r2, [r1, #2]
 8003718:	b992      	cbnz	r2, 8003740 <USBD_StdEPReq+0x60>
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800371a:	065e      	lsls	r6, r3, #25
 800371c:	d010      	beq.n	8003740 <USBD_StdEPReq+0x60>
        { 
          USBD_LL_StallEP(pdev , ep_addr);
 800371e:	4619      	mov	r1, r3
 8003720:	f000 fb24 	bl	8003d6c <USBD_LL_StallEP>
 8003724:	e00c      	b.n	8003740 <USBD_StdEPReq+0x60>
    }
    break;
    
  case USB_REQ_CLEAR_FEATURE :
    
    switch (pdev->dev_state) 
 8003726:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800372a:	2a02      	cmp	r2, #2
 800372c:	d019      	beq.n	8003762 <USBD_StdEPReq+0x82>
 800372e:	2a03      	cmp	r2, #3
 8003730:	d135      	bne.n	800379e <USBD_StdEPReq+0xbe>
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 8003732:	884a      	ldrh	r2, [r1, #2]
 8003734:	bbaa      	cbnz	r2, 80037a2 <USBD_StdEPReq+0xc2>
      {
        if ((ep_addr & 0x7F) != 0x00) 
 8003736:	0659      	lsls	r1, r3, #25
 8003738:	d008      	beq.n	800374c <USBD_StdEPReq+0x6c>
        {        
          USBD_LL_ClearStallEP(pdev , ep_addr);
 800373a:	4619      	mov	r1, r3
 800373c:	f000 fb1d 	bl	8003d7a <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 8003740:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003744:	4629      	mov	r1, r5
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	4620      	mov	r0, r4
 800374a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800374c:	4620      	mov	r0, r4
 800374e:	f000 f872 	bl	8003836 <USBD_CtlSendStatus>
 8003752:	e026      	b.n	80037a2 <USBD_StdEPReq+0xc2>
      break;    
    }
    break;
    
  case USB_REQ_GET_STATUS:                  
    switch (pdev->dev_state) 
 8003754:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003758:	2a02      	cmp	r2, #2
 800375a:	d002      	beq.n	8003762 <USBD_StdEPReq+0x82>
 800375c:	2a03      	cmp	r2, #3
 800375e:	d006      	beq.n	800376e <USBD_StdEPReq+0x8e>
 8003760:	e01d      	b.n	800379e <USBD_StdEPReq+0xbe>
    {
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr & 0x7F) != 0x00) 
 8003762:	065a      	lsls	r2, r3, #25
 8003764:	d01d      	beq.n	80037a2 <USBD_StdEPReq+0xc2>
      {
        USBD_LL_StallEP(pdev , ep_addr);
 8003766:	4619      	mov	r1, r3
 8003768:	f000 fb00 	bl	8003d6c <USBD_LL_StallEP>
 800376c:	e019      	b.n	80037a2 <USBD_StdEPReq+0xc2>
 800376e:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      }
      break;	
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8003772:	f016 0f80 	tst.w	r6, #128	; 0x80
 8003776:	eb00 1505 	add.w	r5, r0, r5, lsl #4
                                         &pdev->ep_out[ep_addr & 0x7F];
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 800377a:	4619      	mov	r1, r3
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800377c:	bf14      	ite	ne
 800377e:	3514      	addne	r5, #20
 8003780:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
                                         &pdev->ep_out[ep_addr & 0x7F];
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8003784:	f000 fb00 	bl	8003d88 <USBD_LL_IsStallEP>
 8003788:	b110      	cbz	r0, 8003790 <USBD_StdEPReq+0xb0>
      {
        pep->status = 0x0001;     
 800378a:	2301      	movs	r3, #1
 800378c:	602b      	str	r3, [r5, #0]
 800378e:	e000      	b.n	8003792 <USBD_StdEPReq+0xb2>
      }
      else
      {
        pep->status = 0x0000;  
 8003790:	6028      	str	r0, [r5, #0]
      }
      
      USBD_CtlSendData (pdev,
 8003792:	2202      	movs	r2, #2
 8003794:	4629      	mov	r1, r5
 8003796:	4620      	mov	r0, r4
 8003798:	f000 f821 	bl	80037de <USBD_CtlSendData>
                        (uint8_t *)&pep->status,
                        2);
      break;
 800379c:	e001      	b.n	80037a2 <USBD_StdEPReq+0xc2>
      
    default:                         
      USBD_CtlError(pdev , req);
 800379e:	f7ff fe6b 	bl	8003478 <USBD_CtlError>
    
  default:
    break;
  }
  return ret;
}
 80037a2:	2000      	movs	r0, #0
 80037a4:	bd70      	pop	{r4, r5, r6, pc}

080037a6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80037a6:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 80037a8:	b1c0      	cbz	r0, 80037dc <USBD_GetString+0x36>
 80037aa:	4605      	mov	r5, r0
 80037ac:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 80037ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2c00      	cmp	r4, #0
 80037b6:	d1f9      	bne.n	80037ac <USBD_GetString+0x6>
{
  uint8_t idx = 0;
  
  if (desc != NULL) 
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	3302      	adds	r3, #2
 80037bc:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 80037be:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 80037c0:	2303      	movs	r3, #3
 80037c2:	704b      	strb	r3, [r1, #1]
 80037c4:	3801      	subs	r0, #1
 80037c6:	2302      	movs	r3, #2
    
    while (*desc != '\0') 
 80037c8:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80037cc:	b135      	cbz	r5, 80037dc <USBD_GetString+0x36>
    {
      unicode[idx++] = *desc++;
 80037ce:	1c5a      	adds	r2, r3, #1
 80037d0:	54cd      	strb	r5, [r1, r3]
 80037d2:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0x00;
 80037d4:	3302      	adds	r3, #2
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	548c      	strb	r4, [r1, r2]
 80037da:	e7f5      	b.n	80037c8 <USBD_GetString+0x22>
 80037dc:	bd30      	pop	{r4, r5, pc}

080037de <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 80037de:	4613      	mov	r3, r2
 80037e0:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 80037e2:	2202      	movs	r2, #2
 80037e4:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 80037e8:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 80037ea:	460a      	mov	r2, r1
                               uint16_t len)
{
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 80037ec:	61c3      	str	r3, [r0, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 80037ee:	2100      	movs	r1, #0
 80037f0:	f000 fae1 	bl	8003db6 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80037f4:	2000      	movs	r0, #0
 80037f6:	bd10      	pop	{r4, pc}

080037f8 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 80037f8:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 80037fa:	4613      	mov	r3, r2
 80037fc:	460a      	mov	r2, r1
 80037fe:	2100      	movs	r1, #0
 8003800:	f000 fad9 	bl	8003db6 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003804:	2000      	movs	r0, #0
 8003806:	bd08      	pop	{r3, pc}

08003808 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8003808:	4613      	mov	r3, r2
 800380a:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 800380c:	2203      	movs	r2, #3
 800380e:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8003812:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8003816:	460a      	mov	r2, r1
                                  uint16_t len)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 8003818:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 800381c:	2100      	movs	r1, #0
 800381e:	f000 fad1 	bl	8003dc4 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 8003822:	2000      	movs	r0, #0
 8003824:	bd10      	pop	{r4, pc}

08003826 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8003826:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 8003828:	4613      	mov	r3, r2
 800382a:	460a      	mov	r2, r1
 800382c:	2100      	movs	r1, #0
 800382e:	f000 fac9 	bl	8003dc4 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8003832:	2000      	movs	r0, #0
 8003834:	bd08      	pop	{r3, pc}

08003836 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8003836:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8003838:	2304      	movs	r3, #4
 800383a:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 800383e:	2300      	movs	r3, #0
 8003840:	461a      	mov	r2, r3
 8003842:	4619      	mov	r1, r3
 8003844:	f000 fab7 	bl	8003db6 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003848:	2000      	movs	r0, #0
 800384a:	bd08      	pop	{r3, pc}

0800384c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 800384c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 800384e:	2305      	movs	r3, #5
 8003850:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8003854:	2300      	movs	r3, #0
 8003856:	461a      	mov	r2, r3
 8003858:	4619      	mov	r1, r3
 800385a:	f000 fab3 	bl	8003dc4 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 800385e:	2000      	movs	r0, #0
 8003860:	bd08      	pop	{r3, pc}

08003862 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8003862:	b510      	push	{r4, lr}

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003864:	2301      	movs	r3, #1
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8003866:	b096      	sub	sp, #88	; 0x58

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003868:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800386a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800386e:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003870:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003872:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003874:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003876:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003878:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800387c:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800387e:	9413      	str	r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003880:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003882:	f7fe f8dd 	bl	8001a40 <HAL_RCC_OscConfig>
 8003886:	b100      	cbz	r0, 800388a <SystemClock_Config+0x28>
 8003888:	e7fe      	b.n	8003888 <SystemClock_Config+0x26>
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800388a:	230f      	movs	r3, #15
 800388c:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800388e:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003890:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003894:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003896:	4621      	mov	r1, r4
 8003898:	a801      	add	r0, sp, #4
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800389a:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800389c:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800389e:	f7fe fb77 	bl	8001f90 <HAL_RCC_ClockConfig>
 80038a2:	b100      	cbz	r0, 80038a6 <SystemClock_Config+0x44>
 80038a4:	e7fe      	b.n	80038a4 <SystemClock_Config+0x42>
  {
    Error_Handler();
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80038a6:	2310      	movs	r3, #16
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80038a8:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038aa:	a806      	add	r0, sp, #24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80038ac:	9306      	str	r3, [sp, #24]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038ae:	f7fe fc57 	bl	8002160 <HAL_RCCEx_PeriphCLKConfig>
 80038b2:	4604      	mov	r4, r0
 80038b4:	b100      	cbz	r0, 80038b8 <SystemClock_Config+0x56>
 80038b6:	e7fe      	b.n	80038b6 <SystemClock_Config+0x54>
  {
    Error_Handler();
  }

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80038b8:	f7fe fc1c 	bl	80020f4 <HAL_RCC_GetHCLKFreq>
 80038bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038c0:	fbb0 f0f3 	udiv	r0, r0, r3
 80038c4:	f7fd fbb6 	bl	8001034 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80038c8:	2004      	movs	r0, #4
 80038ca:	f7fd fbc9 	bl	8001060 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80038ce:	4622      	mov	r2, r4
 80038d0:	4621      	mov	r1, r4
 80038d2:	f04f 30ff 	mov.w	r0, #4294967295
 80038d6:	f7fd fb6d 	bl	8000fb4 <HAL_NVIC_SetPriority>
}
 80038da:	b016      	add	sp, #88	; 0x58
 80038dc:	bd10      	pop	{r4, pc}
	...

080038e0 <main>:
uint8_t *readptr = read_buffer;

/* USER CODE END 0 */

int main(void)
{
 80038e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80038e4:	b089      	sub	sp, #36	; 0x24
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80038e6:	f7fd fb25 	bl	8000f34 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80038ea:	f7ff ffba 	bl	8003862 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80038ee:	4b43      	ldr	r3, [pc, #268]	; (80039fc <main+0x11c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_2_Pin|LED_1_Pin, GPIO_PIN_RESET);
 80038f0:	2105      	movs	r1, #5
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80038f2:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_2_Pin|LED_1_Pin, GPIO_PIN_RESET);
 80038f4:	4842      	ldr	r0, [pc, #264]	; (8003a00 <main+0x120>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80038f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038fa:	619a      	str	r2, [r3, #24]
 80038fc:	699a      	ldr	r2, [r3, #24]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_2_Pin|LED_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_2_Pin LED_1_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin|LED_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038fe:	2501      	movs	r5, #1
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003900:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8003904:	9201      	str	r2, [sp, #4]
 8003906:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003908:	699a      	ldr	r2, [r3, #24]

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
 800390a:	4c3e      	ldr	r4, [pc, #248]	; (8003a04 <main+0x124>)

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800390c:	f042 0210 	orr.w	r2, r2, #16
 8003910:	619a      	str	r2, [r3, #24]
 8003912:	699a      	ldr	r2, [r3, #24]
/* USART1 init function */
static void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
 8003914:	f44f 36e1 	mov.w	r6, #115200	; 0x1c200

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003918:	f002 0210 	and.w	r2, r2, #16
 800391c:	9202      	str	r2, [sp, #8]
 800391e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003920:	699a      	ldr	r2, [r3, #24]
 8003922:	f042 0204 	orr.w	r2, r2, #4
 8003926:	619a      	str	r2, [r3, #24]
 8003928:	699b      	ldr	r3, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_2_Pin|LED_1_Pin, GPIO_PIN_RESET);
 800392a:	2200      	movs	r2, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800392c:	f003 0304 	and.w	r3, r3, #4
 8003930:	9303      	str	r3, [sp, #12]
 8003932:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_2_Pin|LED_1_Pin, GPIO_PIN_RESET);
 8003934:	f7fd fc8c 	bl	8001250 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_2_Pin LED_1_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin|LED_1_Pin;
 8003938:	2305      	movs	r3, #5
 800393a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800393c:	a904      	add	r1, sp, #16
  HAL_GPIO_WritePin(GPIOE, LED_2_Pin|LED_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_2_Pin LED_1_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin|LED_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800393e:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003940:	482f      	ldr	r0, [pc, #188]	; (8003a00 <main+0x120>)
  HAL_GPIO_WritePin(GPIOE, LED_2_Pin|LED_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_2_Pin LED_1_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin|LED_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003942:	9307      	str	r3, [sp, #28]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_2_Pin|LED_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_2_Pin LED_1_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin|LED_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003944:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003946:	f7fd fb9d 	bl	8001084 <HAL_GPIO_Init>
  SystemClock_Config();

  /* Initialize all configured peripherals */
  MX_GPIO_Init();

  HAL_GPIO_WritePin(GPIOE, LED_1_Pin, GPIO_PIN_SET);
 800394a:	462a      	mov	r2, r5
 800394c:	4629      	mov	r1, r5
 800394e:	482c      	ldr	r0, [pc, #176]	; (8003a00 <main+0x120>)
 8003950:	f7fd fc7e 	bl	8001250 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, LED_2_Pin, GPIO_PIN_SET);
 8003954:	462a      	mov	r2, r5
 8003956:	2104      	movs	r1, #4
 8003958:	4829      	ldr	r0, [pc, #164]	; (8003a00 <main+0x120>)
 800395a:	f7fd fc79 	bl	8001250 <HAL_GPIO_WritePin>
/* USART1 init function */
static void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
 800395e:	4b2a      	ldr	r3, [pc, #168]	; (8003a08 <main+0x128>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003960:	220c      	movs	r2, #12
/* USART1 init function */
static void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
 8003962:	e884 0048 	stmia.w	r4, {r3, r6}
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003966:	4620      	mov	r0, r4
static void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003968:	2300      	movs	r3, #0
 800396a:	60a3      	str	r3, [r4, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800396c:	60e3      	str	r3, [r4, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800396e:	6123      	str	r3, [r4, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003970:	6162      	str	r2, [r4, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003972:	61a3      	str	r3, [r4, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003974:	61e3      	str	r3, [r4, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003976:	f7fe fd47 	bl	8002408 <HAL_UART_Init>
 800397a:	4606      	mov	r6, r0
 800397c:	b100      	cbz	r0, 8003980 <main+0xa0>
 800397e:	e7fe      	b.n	800397e <main+0x9e>
  HAL_GPIO_WritePin(GPIOE, LED_1_Pin, GPIO_PIN_SET);
  HAL_GPIO_WritePin(GPIOE, LED_2_Pin, GPIO_PIN_SET);

  MX_USART1_UART_Init();

  HAL_GPIO_WritePin(GPIOE, LED_1_Pin, GPIO_PIN_RESET);
 8003980:	4602      	mov	r2, r0
 8003982:	4629      	mov	r1, r5
 8003984:	481e      	ldr	r0, [pc, #120]	; (8003a00 <main+0x120>)
 8003986:	f7fd fc63 	bl	8001250 <HAL_GPIO_WritePin>

  MX_USB_DEVICE_Init();
 800398a:	f000 f8eb 	bl	8003b64 <MX_USB_DEVICE_Init>

  HAL_GPIO_WritePin(GPIOE, LED_2_Pin, GPIO_PIN_RESET);
 800398e:	4632      	mov	r2, r6
 8003990:	2104      	movs	r1, #4
 8003992:	481b      	ldr	r0, [pc, #108]	; (8003a00 <main+0x120>)
 8003994:	f7fd fc5c 	bl	8001250 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint32_t ticks = HAL_GetTick();
 8003998:	f7fd fae6 	bl	8000f68 <HAL_GetTick>
  while (1)
  {
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
	  if ((huart1.State & 0x20) == 0 ) {
 800399c:	4626      	mov	r6, r4
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint32_t ticks = HAL_GetTick();
 800399e:	4680      	mov	r8, r0
		  readptr = read_buffer;
	      HAL_UART_Receive_IT(&huart1, read_buffer, sizeof(read_buffer));

  	  } else if ((huart1.State & 0x10) == 0) {

  		if (huart1.pRxBuffPtr > readptr) {
 80039a0:	4f1a      	ldr	r7, [pc, #104]	; (8003a0c <main+0x12c>)
  while (1)
  {
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
	  if ((huart1.State & 0x20) == 0 ) {
 80039a2:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80039a6:	069a      	lsls	r2, r3, #26
 80039a8:	d406      	bmi.n	80039b8 <main+0xd8>

		  readptr = read_buffer;
 80039aa:	4919      	ldr	r1, [pc, #100]	; (8003a10 <main+0x130>)
	      HAL_UART_Receive_IT(&huart1, read_buffer, sizeof(read_buffer));
 80039ac:	2280      	movs	r2, #128	; 0x80
 80039ae:	4815      	ldr	r0, [pc, #84]	; (8003a04 <main+0x124>)
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
	  if ((huart1.State & 0x20) == 0 ) {

		  readptr = read_buffer;
 80039b0:	6039      	str	r1, [r7, #0]
	      HAL_UART_Receive_IT(&huart1, read_buffer, sizeof(read_buffer));
 80039b2:	f7fe fddb 	bl	800256c <HAL_UART_Receive_IT>
 80039b6:	e00d      	b.n	80039d4 <main+0xf4>

  	  } else if ((huart1.State & 0x10) == 0) {
 80039b8:	f896 3039 	ldrb.w	r3, [r6, #57]	; 0x39
 80039bc:	06db      	lsls	r3, r3, #27
 80039be:	d409      	bmi.n	80039d4 <main+0xf4>

  		if (huart1.pRxBuffPtr > readptr) {
 80039c0:	6839      	ldr	r1, [r7, #0]
 80039c2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80039c4:	428b      	cmp	r3, r1
 80039c6:	d905      	bls.n	80039d4 <main+0xf4>

  			HAL_UART_Transmit_IT(&huart1, readptr, huart1.pRxBuffPtr > readptr);
 80039c8:	2201      	movs	r2, #1
 80039ca:	480e      	ldr	r0, [pc, #56]	; (8003a04 <main+0x124>)
 80039cc:	f7fe fda4 	bl	8002518 <HAL_UART_Transmit_IT>
  			readptr = huart1.pRxBuffPtr;
 80039d0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80039d2:	603b      	str	r3, [r7, #0]
  		}
  	  }

	  uint32_t c_tick = HAL_GetTick();
 80039d4:	f7fd fac8 	bl	8000f68 <HAL_GetTick>
	  if (c_tick >= ticks + 500) {
 80039d8:	f508 73fa 	add.w	r3, r8, #500	; 0x1f4
 80039dc:	4298      	cmp	r0, r3
  			HAL_UART_Transmit_IT(&huart1, readptr, huart1.pRxBuffPtr > readptr);
  			readptr = huart1.pRxBuffPtr;
  		}
  	  }

	  uint32_t c_tick = HAL_GetTick();
 80039de:	4681      	mov	r9, r0
	  if (c_tick >= ticks + 500) {
 80039e0:	d304      	bcc.n	80039ec <main+0x10c>
		  ticks = c_tick;

		  HAL_GPIO_TogglePin(GPIOE, LED_2_Pin);
 80039e2:	2104      	movs	r1, #4
 80039e4:	4806      	ldr	r0, [pc, #24]	; (8003a00 <main+0x120>)
 80039e6:	f7fd fc37 	bl	8001258 <HAL_GPIO_TogglePin>
 80039ea:	46c8      	mov	r8, r9
//		  uint8_t stamp[32];
//		  uint8_t length = sprintf(stamp, "T%ul\r\n", ticks);
//		  HAL_UART_Transmit(&huart1, stamp, length, 1000);
	  }

	  report.id = 0x01;
 80039ec:	4909      	ldr	r1, [pc, #36]	; (8003a14 <main+0x134>)
	  USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&report, sizeof(report));
 80039ee:	220a      	movs	r2, #10
 80039f0:	4809      	ldr	r0, [pc, #36]	; (8003a18 <main+0x138>)
//		  uint8_t stamp[32];
//		  uint8_t length = sprintf(stamp, "T%ul\r\n", ticks);
//		  HAL_UART_Transmit(&huart1, stamp, length, 1000);
	  }

	  report.id = 0x01;
 80039f2:	700d      	strb	r5, [r1, #0]
	  USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&report, sizeof(report));
 80039f4:	f7ff fbc3 	bl	800317e <USBD_HID_SendReport>
  }
 80039f8:	e7d3      	b.n	80039a2 <main+0xc2>
 80039fa:	bf00      	nop
 80039fc:	40021000 	.word	0x40021000
 8003a00:	40011800 	.word	0x40011800
 8003a04:	200007ac 	.word	0x200007ac
 8003a08:	40013800 	.word	0x40013800
 8003a0c:	2000011c 	.word	0x2000011c
 8003a10:	200007ec 	.word	0x200007ec
 8003a14:	200006ea 	.word	0x200006ea
 8003a18:	2000086c 	.word	0x2000086c

08003a1c <HAL_UART_RxCpltCallback>:

}

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a1c:	4770      	bx	lr
	...

08003a20 <utx>:
	}
}

void utx(uint8_t buf, uint32_t length) {

	HAL_UART_Transmit(&huart1, buf, length, 1000);
 8003a20:	b28a      	uxth	r2, r1
 8003a22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a26:	4601      	mov	r1, r0
 8003a28:	4801      	ldr	r0, [pc, #4]	; (8003a30 <utx+0x10>)
 8003a2a:	f7fe bd19 	b.w	8002460 <HAL_UART_Transmit>
 8003a2e:	bf00      	nop
 8003a30:	200007ac 	.word	0x200007ac

08003a34 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8003a34:	e7fe      	b.n	8003a34 <Error_Handler>
	...

08003a38 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003a38:	4b20      	ldr	r3, [pc, #128]	; (8003abc <HAL_MspInit+0x84>)

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a3a:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003a3c:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a3e:	2003      	movs	r0, #3
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003a40:	f042 0201 	orr.w	r2, r2, #1
 8003a44:	619a      	str	r2, [r3, #24]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	9301      	str	r3, [sp, #4]
 8003a4e:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a50:	f7fd fa9e 	bl	8000f90 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003a54:	2200      	movs	r2, #0
 8003a56:	4611      	mov	r1, r2
 8003a58:	f06f 000b 	mvn.w	r0, #11
 8003a5c:	f7fd faaa 	bl	8000fb4 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003a60:	2200      	movs	r2, #0
 8003a62:	4611      	mov	r1, r2
 8003a64:	f06f 000a 	mvn.w	r0, #10
 8003a68:	f7fd faa4 	bl	8000fb4 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	4611      	mov	r1, r2
 8003a70:	f06f 0009 	mvn.w	r0, #9
 8003a74:	f7fd fa9e 	bl	8000fb4 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003a78:	2200      	movs	r2, #0
 8003a7a:	4611      	mov	r1, r2
 8003a7c:	f06f 0004 	mvn.w	r0, #4
 8003a80:	f7fd fa98 	bl	8000fb4 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003a84:	2200      	movs	r2, #0
 8003a86:	4611      	mov	r1, r2
 8003a88:	f06f 0003 	mvn.w	r0, #3
 8003a8c:	f7fd fa92 	bl	8000fb4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003a90:	2200      	movs	r2, #0
 8003a92:	4611      	mov	r1, r2
 8003a94:	f06f 0001 	mvn.w	r0, #1
 8003a98:	f7fd fa8c 	bl	8000fb4 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	4611      	mov	r1, r2
 8003aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8003aa4:	f7fd fa86 	bl	8000fb4 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003aa8:	4a05      	ldr	r2, [pc, #20]	; (8003ac0 <HAL_MspInit+0x88>)
 8003aaa:	6853      	ldr	r3, [r2, #4]
 8003aac:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003ab0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003ab4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ab6:	b003      	add	sp, #12
 8003ab8:	f85d fb04 	ldr.w	pc, [sp], #4
 8003abc:	40021000 	.word	0x40021000
 8003ac0:	40010000 	.word	0x40010000

08003ac4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003ac4:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8003ac6:	6802      	ldr	r2, [r0, #0]
 8003ac8:	4b16      	ldr	r3, [pc, #88]	; (8003b24 <HAL_UART_MspInit+0x60>)

  /* USER CODE END MspInit 1 */
}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003aca:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d127      	bne.n	8003b20 <HAL_UART_MspInit+0x5c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003ad0:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8003ad4:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ad6:	a902      	add	r1, sp, #8
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003ad8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003adc:	619a      	str	r2, [r3, #24]
 8003ade:	699b      	ldr	r3, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ae0:	4811      	ldr	r0, [pc, #68]	; (8003b28 <HAL_UART_MspInit+0x64>)
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ae6:	9301      	str	r3, [sp, #4]
 8003ae8:	9b01      	ldr	r3, [sp, #4]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003aea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003aee:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003af0:	2302      	movs	r3, #2
 8003af2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003af4:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003af6:	2400      	movs	r4, #0
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003af8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003afa:	f7fd fac3 	bl	8001084 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003afe:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b02:	a902      	add	r1, sp, #8
 8003b04:	4808      	ldr	r0, [pc, #32]	; (8003b28 <HAL_UART_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003b06:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b08:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b0a:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b0c:	f7fd faba 	bl	8001084 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003b10:	2025      	movs	r0, #37	; 0x25
 8003b12:	4622      	mov	r2, r4
 8003b14:	4621      	mov	r1, r4
 8003b16:	f7fd fa4d 	bl	8000fb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003b1a:	2025      	movs	r0, #37	; 0x25
 8003b1c:	f7fd fa7e 	bl	800101c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003b20:	b006      	add	sp, #24
 8003b22:	bd10      	pop	{r4, pc}
 8003b24:	40013800 	.word	0x40013800
 8003b28:	40010800 	.word	0x40010800

08003b2c <NMI_Handler>:
 8003b2c:	4770      	bx	lr

08003b2e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8003b2e:	e7fe      	b.n	8003b2e <HardFault_Handler>

08003b30 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8003b30:	e7fe      	b.n	8003b30 <MemManage_Handler>

08003b32 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8003b32:	e7fe      	b.n	8003b32 <BusFault_Handler>

08003b34 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8003b34:	e7fe      	b.n	8003b34 <UsageFault_Handler>

08003b36 <SVC_Handler>:
 8003b36:	4770      	bx	lr

08003b38 <DebugMon_Handler>:
 8003b38:	4770      	bx	lr

08003b3a <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8003b3a:	4770      	bx	lr

08003b3c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003b3c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b3e:	f7fd fa0b 	bl	8000f58 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 8003b46:	f7fd ba98 	b.w	800107a <HAL_SYSTICK_IRQHandler>
	...

08003b4c <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003b4c:	4801      	ldr	r0, [pc, #4]	; (8003b54 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8003b4e:	f7fd bcab 	b.w	80014a8 <HAL_PCD_IRQHandler>
 8003b52:	bf00      	nop
 8003b54:	20000a98 	.word	0x20000a98

08003b58 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003b58:	4801      	ldr	r0, [pc, #4]	; (8003b60 <USART1_IRQHandler+0x8>)
 8003b5a:	f7fe bd3b 	b.w	80025d4 <HAL_UART_IRQHandler>
 8003b5e:	bf00      	nop
 8003b60:	200007ac 	.word	0x200007ac

08003b64 <MX_USB_DEVICE_Init>:
/* USB Device Core handle declaration */
USBD_HandleTypeDef hUsbDeviceFS;

/* init function */				        
void MX_USB_DEVICE_Init(void)
{
 8003b64:	b510      	push	{r4, lr}
  /* Init Device Library,Add Supported Class and Start the library*/
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8003b66:	4c09      	ldr	r4, [pc, #36]	; (8003b8c <MX_USB_DEVICE_Init+0x28>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	4909      	ldr	r1, [pc, #36]	; (8003b90 <MX_USB_DEVICE_Init+0x2c>)
 8003b6c:	4620      	mov	r0, r4
 8003b6e:	f7ff fb37 	bl	80031e0 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID_CDC);
 8003b72:	4908      	ldr	r1, [pc, #32]	; (8003b94 <MX_USB_DEVICE_Init+0x30>)
 8003b74:	4620      	mov	r0, r4
 8003b76:	f7ff fb55 	bl	8003224 <USBD_RegisterClass>
  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 8003b7a:	4620      	mov	r0, r4
 8003b7c:	4906      	ldr	r1, [pc, #24]	; (8003b98 <MX_USB_DEVICE_Init+0x34>)
 8003b7e:	f7ff fb10 	bl	80031a2 <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 8003b82:	4620      	mov	r0, r4

}
 8003b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID_CDC);
  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);

  USBD_Start(&hUsbDeviceFS);
 8003b88:	f7ff bb62 	b.w	8003250 <USBD_Start>
 8003b8c:	2000086c 	.word	0x2000086c
 8003b90:	20000130 	.word	0x20000130
 8003b94:	20000004 	.word	0x20000004
 8003b98:	20000120 	.word	0x20000120

08003b9c <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */ 
  return (USBD_OK);
  /* USER CODE END 4 */ 
}
 8003b9c:	2000      	movs	r0, #0
 8003b9e:	4770      	bx	lr

08003ba0 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8003ba0:	2000      	movs	r0, #0
 8003ba2:	4770      	bx	lr

08003ba4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS (uint8_t* Buf, uint32_t *Len)
{
 8003ba4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8003ba6:	4c05      	ldr	r4, [pc, #20]	; (8003bbc <CDC_Receive_FS+0x18>)
 8003ba8:	4601      	mov	r1, r0
 8003baa:	4620      	mov	r0, r4
 8003bac:	f7ff fb06 	bl	80031bc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8003bb0:	4620      	mov	r0, r4
 8003bb2:	f7ff fb08 	bl	80031c6 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */ 
}
 8003bb6:	2000      	movs	r0, #0
 8003bb8:	bd10      	pop	{r4, pc}
 8003bba:	bf00      	nop
 8003bbc:	2000086c 	.word	0x2000086c

08003bc0 <CDC_Init_FS>:
  *         Initializes the CDC media low layer over the FS USB IP
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{ 
 8003bc0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 3 */ 
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8003bc2:	4c06      	ldr	r4, [pc, #24]	; (8003bdc <CDC_Init_FS+0x1c>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	4906      	ldr	r1, [pc, #24]	; (8003be0 <CDC_Init_FS+0x20>)
 8003bc8:	4620      	mov	r0, r4
 8003bca:	f7ff faf1 	bl	80031b0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8003bce:	4905      	ldr	r1, [pc, #20]	; (8003be4 <CDC_Init_FS+0x24>)
 8003bd0:	4620      	mov	r0, r4
 8003bd2:	f7ff faf3 	bl	80031bc <USBD_CDC_SetRxBuffer>

  return (USBD_OK);
  /* USER CODE END 3 */ 
}
 8003bd6:	2000      	movs	r0, #0
 8003bd8:	bd10      	pop	{r4, pc}
 8003bda:	bf00      	nop
 8003bdc:	2000086c 	.word	0x2000086c
 8003be0:	20000a94 	.word	0x20000a94
 8003be4:	20000a90 	.word	0x20000a90

08003be8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003be8:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8003bea:	4b0d      	ldr	r3, [pc, #52]	; (8003c20 <HAL_PCD_MspInit+0x38>)
 8003bec:	6802      	ldr	r2, [r0, #0]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d112      	bne.n	8003c18 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8003bf2:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8003bf6:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003bf8:	2014      	movs	r0, #20
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8003bfa:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003bfe:	61da      	str	r2, [r3, #28]
 8003c00:	69db      	ldr	r3, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003c02:	2200      	movs	r2, #0
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8003c04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c08:	9301      	str	r3, [sp, #4]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003c0a:	4611      	mov	r1, r2
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8003c0c:	9b01      	ldr	r3, [sp, #4]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003c0e:	f7fd f9d1 	bl	8000fb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8003c12:	2014      	movs	r0, #20
 8003c14:	f7fd fa02 	bl	800101c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8003c18:	b003      	add	sp, #12
 8003c1a:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c1e:	bf00      	nop
 8003c20:	40005c00 	.word	0x40005c00

08003c24 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8003c24:	f500 717b 	add.w	r1, r0, #1004	; 0x3ec
 8003c28:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 8003c2c:	f7ff bb27 	b.w	800327e <USBD_LL_SetupStage>

08003c30 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8003c30:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8003c34:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003c38:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 8003c3c:	f7ff bb4c 	b.w	80032d8 <USBD_LL_DataOutStage>

08003c40 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8003c40:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8003c44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c46:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 8003c4a:	f7ff bb76 	b.w	800333a <USBD_LL_DataInStage>

08003c4e <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8003c4e:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 8003c52:	f7ff bbf1 	b.w	8003438 <USBD_LL_SOF>

08003c56 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8003c56:	b510      	push	{r4, lr}
 8003c58:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;    
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);  
 8003c5a:	2101      	movs	r1, #1
 8003c5c:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 8003c60:	f7ff fbd8 	bl	8003414 <USBD_LL_SetSpeed>
  
  /*Reset Device*/
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003c64:	f8d4 041c 	ldr.w	r0, [r4, #1052]	; 0x41c
}
 8003c68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);  
  
  /*Reset Device*/
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003c6c:	f7ff bbb3 	b.w	80033d6 <USBD_LL_Reset>

08003c70 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8003c70:	b510      	push	{r4, lr}
 8003c72:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8003c74:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 8003c78:	f7ff fbcf 	bl	800341a <USBD_LL_Suspend>
  /*Enter in STOP mode */
  /* USER CODE BEGIN 2 */  
  if (hpcd->Init.low_power_enable)
 8003c7c:	69a3      	ldr	r3, [r4, #24]
 8003c7e:	b123      	cbz	r3, 8003c8a <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003c80:	4a02      	ldr	r2, [pc, #8]	; (8003c8c <HAL_PCD_SuspendCallback+0x1c>)
 8003c82:	6913      	ldr	r3, [r2, #16]
 8003c84:	f043 0306 	orr.w	r3, r3, #6
 8003c88:	6113      	str	r3, [r2, #16]
 8003c8a:	bd10      	pop	{r4, pc}
 8003c8c:	e000ed00 	.word	0xe000ed00

08003c90 <HAL_PCD_ResumeCallback>:
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8003c90:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 8003c94:	f7ff bbca 	b.w	800342c <USBD_LL_Resume>

08003c98 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
 8003c98:	b510      	push	{r4, lr}
 8003c9a:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8003c9c:	4a25      	ldr	r2, [pc, #148]	; (8003d34 <USBD_LL_Init+0x9c>)
  */
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
  /* Init USB_IP */
  /* Link The driver to the stack */
  hpcd_USB_FS.pData = pdev;
 8003c9e:	4826      	ldr	r0, [pc, #152]	; (8003d38 <USBD_LL_Init+0xa0>)
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8003ca0:	2308      	movs	r3, #8
 8003ca2:	f04f 0c02 	mov.w	ip, #2
  */
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
  /* Init USB_IP */
  /* Link The driver to the stack */
  hpcd_USB_FS.pData = pdev;
 8003ca6:	f8c0 441c 	str.w	r4, [r0, #1052]	; 0x41c
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8003caa:	e880 100c 	stmia.w	r0, {r2, r3, ip}
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
  /* Init USB_IP */
  /* Link The driver to the stack */
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;
 8003cae:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	60c3      	str	r3, [r0, #12]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003cb6:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8003cb8:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8003cba:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003cbc:	f7fd fad0 	bl	8001260 <HAL_PCD_Init>
 8003cc0:	b108      	cbz	r0, 8003cc6 <USBD_LL_Init+0x2e>
  {
    Error_Handler();
 8003cc2:	f7ff feb7 	bl	8003a34 <Error_Handler>
  }

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData, 0x00, PCD_SNG_BUF, 0x18);
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	4611      	mov	r1, r2
 8003cca:	2318      	movs	r3, #24
 8003ccc:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8003cd0:	f7fd fe9e 	bl	8001a10 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData, 0x80, PCD_SNG_BUF, 0x58);
 8003cd4:	2358      	movs	r3, #88	; 0x58
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	2180      	movs	r1, #128	; 0x80
 8003cda:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8003cde:	f7fd fe97 	bl	8001a10 <HAL_PCDEx_PMAConfig>

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData, CDC_EPCMD_ADDR,  PCD_SNG_BUF, 0x98);
 8003ce2:	2398      	movs	r3, #152	; 0x98
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	2181      	movs	r1, #129	; 0x81
 8003ce8:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8003cec:	f7fd fe90 	bl	8001a10 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData, CDC_EP0IN_ADDR,  PCD_SNG_BUF, 0xD8);
 8003cf0:	23d8      	movs	r3, #216	; 0xd8
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	2182      	movs	r1, #130	; 0x82
 8003cf6:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8003cfa:	f7fd fe89 	bl	8001a10 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData, HID_EP0IN_ADDR,  PCD_SNG_BUF, 0x118);
 8003cfe:	f44f 738c 	mov.w	r3, #280	; 0x118
 8003d02:	2200      	movs	r2, #0
 8003d04:	2183      	movs	r1, #131	; 0x83
 8003d06:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8003d0a:	f7fd fe81 	bl	8001a10 <HAL_PCDEx_PMAConfig>

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData, CDC_EP1OUT_ADDR, PCD_SNG_BUF, 0x158);
 8003d0e:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8003d12:	2200      	movs	r2, #0
 8003d14:	2101      	movs	r1, #1
 8003d16:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8003d1a:	f7fd fe79 	bl	8001a10 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData, HID_EP1OUT_ADDR, PCD_SNG_BUF, 0x198);
 8003d1e:	f44f 73cc 	mov.w	r3, #408	; 0x198
 8003d22:	2200      	movs	r2, #0
 8003d24:	2102      	movs	r1, #2
 8003d26:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8003d2a:	f7fd fe71 	bl	8001a10 <HAL_PCDEx_PMAConfig>

  return USBD_OK;
}
 8003d2e:	2000      	movs	r0, #0
 8003d30:	bd10      	pop	{r4, pc}
 8003d32:	bf00      	nop
 8003d34:	40005c00 	.word	0x40005c00
 8003d38:	20000a98 	.word	0x20000a98

08003d3c <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8003d3c:	b508      	push	{r3, lr}
  HAL_PCD_Start((PCD_HandleTypeDef*)pdev->pData);
 8003d3e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003d42:	f7fd faf7 	bl	8001334 <HAL_PCD_Start>
  return USBD_OK;
}
 8003d46:	2000      	movs	r0, #0
 8003d48:	bd08      	pop	{r3, pc}

08003d4a <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef  USBD_LL_OpenEP  (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  ep_type,
                                      uint16_t ep_mps)
{
 8003d4a:	b510      	push	{r4, lr}
 8003d4c:	461c      	mov	r4, r3
  HAL_PCD_EP_Open((PCD_HandleTypeDef*) pdev->pData,
 8003d4e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003d52:	4613      	mov	r3, r2
 8003d54:	4622      	mov	r2, r4
 8003d56:	f7fd fb18 	bl	800138a <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);
  
  return USBD_OK; 
}
 8003d5a:	2000      	movs	r0, #0
 8003d5c:	bd10      	pop	{r4, pc}

08003d5e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_CloseEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8003d5e:	b508      	push	{r3, lr}
  HAL_PCD_EP_Close((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8003d60:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003d64:	f7fd fb34 	bl	80013d0 <HAL_PCD_EP_Close>
  return USBD_OK;
}
 8003d68:	2000      	movs	r0, #0
 8003d6a:	bd08      	pop	{r3, pc}

08003d6c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_StallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8003d6c:	b508      	push	{r3, lr}
  HAL_PCD_EP_SetStall((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8003d6e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003d72:	f7fd fe01 	bl	8001978 <HAL_PCD_EP_SetStall>
  return USBD_OK;
}
 8003d76:	2000      	movs	r0, #0
 8003d78:	bd08      	pop	{r3, pc}

08003d7a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_ClearStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8003d7a:	b508      	push	{r3, lr}
  HAL_PCD_EP_ClrStall((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8003d7c:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003d80:	f7fd fe23 	bl	80019ca <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
}
 8003d84:	2000      	movs	r0, #0
 8003d86:	bd08      	pop	{r3, pc}

08003d88 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8003d88:	060a      	lsls	r2, r1, #24
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8003d8a:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
  
  if((ep_addr & 0x80) == 0x80)
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8003d8e:	bf45      	ittet	mi
 8003d90:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8003d94:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8003d98:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8003d9c:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8003da0:	bf58      	it	pl
 8003da2:	f893 020a 	ldrbpl.w	r0, [r3, #522]	; 0x20a
  }
}
 8003da6:	4770      	bx	lr

08003da8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_SetUSBAddress (USBD_HandleTypeDef *pdev, uint8_t dev_addr)   
{
 8003da8:	b508      	push	{r3, lr}
  HAL_PCD_SetAddress((PCD_HandleTypeDef*) pdev->pData, dev_addr);
 8003daa:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003dae:	f7fd fad8 	bl	8001362 <HAL_PCD_SetAddress>
  return USBD_OK; 
}
 8003db2:	2000      	movs	r0, #0
 8003db4:	bd08      	pop	{r3, pc}

08003db6 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef  USBD_LL_Transmit (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  *pbuf,
                                      uint16_t  size)
{
 8003db6:	b508      	push	{r3, lr}
  HAL_PCD_EP_Transmit((PCD_HandleTypeDef*) pdev->pData, ep_addr, pbuf, size);
 8003db8:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003dbc:	f7fd fb54 	bl	8001468 <HAL_PCD_EP_Transmit>
  return USBD_OK;
}
 8003dc0:	2000      	movs	r0, #0
 8003dc2:	bd08      	pop	{r3, pc}

08003dc4 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef  USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                           uint8_t  ep_addr,                                      
                                           uint8_t  *pbuf,
                                           uint16_t  size)
{
 8003dc4:	b508      	push	{r3, lr}
  HAL_PCD_EP_Receive((PCD_HandleTypeDef*) pdev->pData, ep_addr, pbuf, size);
 8003dc6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003dca:	f7fd fb22 	bl	8001412 <HAL_PCD_EP_Receive>
  return USBD_OK;
}
 8003dce:	2000      	movs	r0, #0
 8003dd0:	bd08      	pop	{r3, pc}

08003dd2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize  (USBD_HandleTypeDef *pdev, uint8_t  ep_addr)  
{
 8003dd2:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8003dd4:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003dd8:	f7fd fb3f 	bl	800145a <HAL_PCD_EP_GetRxCount>
}
 8003ddc:	bd08      	pop	{r3, pc}
	...

08003de0 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_HID_CDC_HandleTypeDef)/4+1)];//On 32-bit boundary
  return mem;
}
 8003de0:	4800      	ldr	r0, [pc, #0]	; (8003de4 <USBD_static_malloc+0x4>)
 8003de2:	4770      	bx	lr
 8003de4:	200006f4 	.word	0x200006f4

08003de8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  *p pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8003de8:	4770      	bx	lr

08003dea <HAL_PCDEx_SetConnectionState>:
* @param hpcd: PCD handle
* @param state: connection state (0 : disconnected / 1: connected) 
* @retval None
*/
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 8003dea:	4770      	bx	lr

08003dec <USBD_FS_DeviceDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_DeviceDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8003dec:	2312      	movs	r3, #18
 8003dee:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8003df0:	4800      	ldr	r0, [pc, #0]	; (8003df4 <USBD_FS_DeviceDescriptor+0x8>)
 8003df2:	4770      	bx	lr
 8003df4:	20000150 	.word	0x20000150

08003df8 <USBD_FS_LangIDStrDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_LangIDStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length =  sizeof(USBD_LangIDDesc);  
 8003df8:	2304      	movs	r3, #4
 8003dfa:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8003dfc:	4800      	ldr	r0, [pc, #0]	; (8003e00 <USBD_FS_LangIDStrDescriptor+0x8>)
 8003dfe:	4770      	bx	lr
 8003e00:	2000014c 	.word	0x2000014c

08003e04 <USBD_FS_ManufacturerStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ManufacturerStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8003e04:	b510      	push	{r4, lr}
  USBD_GetString (USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8003e06:	4c04      	ldr	r4, [pc, #16]	; (8003e18 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8003e08:	460a      	mov	r2, r1
 8003e0a:	4804      	ldr	r0, [pc, #16]	; (8003e1c <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8003e0c:	4621      	mov	r1, r4
 8003e0e:	f7ff fcca 	bl	80037a6 <USBD_GetString>
  return USBD_StrDesc;
}
 8003e12:	4620      	mov	r0, r4
 8003e14:	bd10      	pop	{r4, pc}
 8003e16:	bf00      	nop
 8003e18:	20000eb8 	.word	0x20000eb8
 8003e1c:	08008a30 	.word	0x08008a30

08003e20 <USBD_FS_ProductStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ProductStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8003e20:	b510      	push	{r4, lr}
  if(speed == 0)
  {   
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8003e22:	4c04      	ldr	r4, [pc, #16]	; (8003e34 <USBD_FS_ProductStrDescriptor+0x14>)
 8003e24:	460a      	mov	r2, r1
 8003e26:	4804      	ldr	r0, [pc, #16]	; (8003e38 <USBD_FS_ProductStrDescriptor+0x18>)
 8003e28:	4621      	mov	r1, r4
 8003e2a:	f7ff fcbc 	bl	80037a6 <USBD_GetString>
  else
  {
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);    
  }
  return USBD_StrDesc;
}
 8003e2e:	4620      	mov	r0, r4
 8003e30:	bd10      	pop	{r4, pc}
 8003e32:	bf00      	nop
 8003e34:	20000eb8 	.word	0x20000eb8
 8003e38:	08008a43 	.word	0x08008a43

08003e3c <USBD_FS_SerialStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_SerialStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8003e3c:	b510      	push	{r4, lr}
  if(speed  == USBD_SPEED_HIGH)
  {    
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8003e3e:	4c04      	ldr	r4, [pc, #16]	; (8003e50 <USBD_FS_SerialStrDescriptor+0x14>)
 8003e40:	460a      	mov	r2, r1
 8003e42:	4804      	ldr	r0, [pc, #16]	; (8003e54 <USBD_FS_SerialStrDescriptor+0x18>)
 8003e44:	4621      	mov	r1, r4
 8003e46:	f7ff fcae 	bl	80037a6 <USBD_GetString>
  else
  {
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);    
  }
  return USBD_StrDesc;
}
 8003e4a:	4620      	mov	r0, r4
 8003e4c:	bd10      	pop	{r4, pc}
 8003e4e:	bf00      	nop
 8003e50:	20000eb8 	.word	0x20000eb8
 8003e54:	08008a60 	.word	0x08008a60

08003e58 <USBD_FS_ConfigStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ConfigStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8003e58:	b510      	push	{r4, lr}
  if(speed  == USBD_SPEED_HIGH)
  {  
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8003e5a:	4c04      	ldr	r4, [pc, #16]	; (8003e6c <USBD_FS_ConfigStrDescriptor+0x14>)
 8003e5c:	460a      	mov	r2, r1
 8003e5e:	4804      	ldr	r0, [pc, #16]	; (8003e70 <USBD_FS_ConfigStrDescriptor+0x18>)
 8003e60:	4621      	mov	r1, r4
 8003e62:	f7ff fca0 	bl	80037a6 <USBD_GetString>
  else
  {
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length); 
  }
  return USBD_StrDesc;  
}
 8003e66:	4620      	mov	r0, r4
 8003e68:	bd10      	pop	{r4, pc}
 8003e6a:	bf00      	nop
 8003e6c:	20000eb8 	.word	0x20000eb8
 8003e70:	08008a6d 	.word	0x08008a6d

08003e74 <USBD_FS_InterfaceStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_InterfaceStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8003e74:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8003e76:	4c04      	ldr	r4, [pc, #16]	; (8003e88 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8003e78:	460a      	mov	r2, r1
 8003e7a:	4804      	ldr	r0, [pc, #16]	; (8003e8c <USBD_FS_InterfaceStrDescriptor+0x18>)
 8003e7c:	4621      	mov	r1, r4
 8003e7e:	f7ff fc92 	bl	80037a6 <USBD_GetString>
  else
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;  
}
 8003e82:	4620      	mov	r0, r4
 8003e84:	bd10      	pop	{r4, pc}
 8003e86:	bf00      	nop
 8003e88:	20000eb8 	.word	0x20000eb8
 8003e8c:	08008a7f 	.word	0x08008a7f

08003e90 <__libc_init_array>:
 8003e90:	4b0e      	ldr	r3, [pc, #56]	; (8003ecc <__libc_init_array+0x3c>)
 8003e92:	b570      	push	{r4, r5, r6, lr}
 8003e94:	461e      	mov	r6, r3
 8003e96:	4c0e      	ldr	r4, [pc, #56]	; (8003ed0 <__libc_init_array+0x40>)
 8003e98:	2500      	movs	r5, #0
 8003e9a:	1ae4      	subs	r4, r4, r3
 8003e9c:	10a4      	asrs	r4, r4, #2
 8003e9e:	42a5      	cmp	r5, r4
 8003ea0:	d004      	beq.n	8003eac <__libc_init_array+0x1c>
 8003ea2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ea6:	4798      	blx	r3
 8003ea8:	3501      	adds	r5, #1
 8003eaa:	e7f8      	b.n	8003e9e <__libc_init_array+0xe>
 8003eac:	f004 fd54 	bl	8008958 <_init>
 8003eb0:	4b08      	ldr	r3, [pc, #32]	; (8003ed4 <__libc_init_array+0x44>)
 8003eb2:	4c09      	ldr	r4, [pc, #36]	; (8003ed8 <__libc_init_array+0x48>)
 8003eb4:	461e      	mov	r6, r3
 8003eb6:	1ae4      	subs	r4, r4, r3
 8003eb8:	10a4      	asrs	r4, r4, #2
 8003eba:	2500      	movs	r5, #0
 8003ebc:	42a5      	cmp	r5, r4
 8003ebe:	d004      	beq.n	8003eca <__libc_init_array+0x3a>
 8003ec0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ec4:	4798      	blx	r3
 8003ec6:	3501      	adds	r5, #1
 8003ec8:	e7f8      	b.n	8003ebc <__libc_init_array+0x2c>
 8003eca:	bd70      	pop	{r4, r5, r6, pc}
 8003ecc:	08008c8c 	.word	0x08008c8c
 8003ed0:	08008c8c 	.word	0x08008c8c
 8003ed4:	08008c8c 	.word	0x08008c8c
 8003ed8:	08008c90 	.word	0x08008c90

08003edc <memset>:
 8003edc:	4603      	mov	r3, r0
 8003ede:	4402      	add	r2, r0
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d002      	beq.n	8003eea <memset+0xe>
 8003ee4:	f803 1b01 	strb.w	r1, [r3], #1
 8003ee8:	e7fa      	b.n	8003ee0 <memset+0x4>
 8003eea:	4770      	bx	lr

08003eec <printf>:
 8003eec:	b40f      	push	{r0, r1, r2, r3}
 8003eee:	4b0a      	ldr	r3, [pc, #40]	; (8003f18 <printf+0x2c>)
 8003ef0:	b513      	push	{r0, r1, r4, lr}
 8003ef2:	681c      	ldr	r4, [r3, #0]
 8003ef4:	b124      	cbz	r4, 8003f00 <printf+0x14>
 8003ef6:	69a3      	ldr	r3, [r4, #24]
 8003ef8:	b913      	cbnz	r3, 8003f00 <printf+0x14>
 8003efa:	4620      	mov	r0, r4
 8003efc:	f002 ffae 	bl	8006e5c <__sinit>
 8003f00:	ab05      	add	r3, sp, #20
 8003f02:	9a04      	ldr	r2, [sp, #16]
 8003f04:	68a1      	ldr	r1, [r4, #8]
 8003f06:	4620      	mov	r0, r4
 8003f08:	9301      	str	r3, [sp, #4]
 8003f0a:	f000 fff7 	bl	8004efc <_vfprintf_r>
 8003f0e:	b002      	add	sp, #8
 8003f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f14:	b004      	add	sp, #16
 8003f16:	4770      	bx	lr
 8003f18:	20000254 	.word	0x20000254

08003f1c <putchar>:
 8003f1c:	b538      	push	{r3, r4, r5, lr}
 8003f1e:	4b08      	ldr	r3, [pc, #32]	; (8003f40 <putchar+0x24>)
 8003f20:	4605      	mov	r5, r0
 8003f22:	681c      	ldr	r4, [r3, #0]
 8003f24:	b124      	cbz	r4, 8003f30 <putchar+0x14>
 8003f26:	69a3      	ldr	r3, [r4, #24]
 8003f28:	b913      	cbnz	r3, 8003f30 <putchar+0x14>
 8003f2a:	4620      	mov	r0, r4
 8003f2c:	f002 ff96 	bl	8006e5c <__sinit>
 8003f30:	68a2      	ldr	r2, [r4, #8]
 8003f32:	4629      	mov	r1, r5
 8003f34:	4620      	mov	r0, r4
 8003f36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f3a:	f003 bebd 	b.w	8007cb8 <_putc_r>
 8003f3e:	bf00      	nop
 8003f40:	20000254 	.word	0x20000254

08003f44 <sprintf>:
 8003f44:	b40e      	push	{r1, r2, r3}
 8003f46:	b500      	push	{lr}
 8003f48:	f44f 7102 	mov.w	r1, #520	; 0x208
 8003f4c:	b09c      	sub	sp, #112	; 0x70
 8003f4e:	f8ad 1014 	strh.w	r1, [sp, #20]
 8003f52:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f56:	9104      	str	r1, [sp, #16]
 8003f58:	9107      	str	r1, [sp, #28]
 8003f5a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003f5e:	ab1d      	add	r3, sp, #116	; 0x74
 8003f60:	9002      	str	r0, [sp, #8]
 8003f62:	9006      	str	r0, [sp, #24]
 8003f64:	4808      	ldr	r0, [pc, #32]	; (8003f88 <sprintf+0x44>)
 8003f66:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f6a:	f8ad 1016 	strh.w	r1, [sp, #22]
 8003f6e:	6800      	ldr	r0, [r0, #0]
 8003f70:	a902      	add	r1, sp, #8
 8003f72:	9301      	str	r3, [sp, #4]
 8003f74:	f000 f80a 	bl	8003f8c <_svfprintf_r>
 8003f78:	9b02      	ldr	r3, [sp, #8]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	701a      	strb	r2, [r3, #0]
 8003f7e:	b01c      	add	sp, #112	; 0x70
 8003f80:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f84:	b003      	add	sp, #12
 8003f86:	4770      	bx	lr
 8003f88:	20000254 	.word	0x20000254

08003f8c <_svfprintf_r>:
 8003f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f90:	b0bd      	sub	sp, #244	; 0xf4
 8003f92:	468b      	mov	fp, r1
 8003f94:	9209      	str	r2, [sp, #36]	; 0x24
 8003f96:	461f      	mov	r7, r3
 8003f98:	4681      	mov	r9, r0
 8003f9a:	f003 f90d 	bl	80071b8 <_localeconv_r>
 8003f9e:	6803      	ldr	r3, [r0, #0]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	9311      	str	r3, [sp, #68]	; 0x44
 8003fa4:	f7fc f940 	bl	8000228 <strlen>
 8003fa8:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8003fac:	900a      	str	r0, [sp, #40]	; 0x28
 8003fae:	0619      	lsls	r1, r3, #24
 8003fb0:	d515      	bpl.n	8003fde <_svfprintf_r+0x52>
 8003fb2:	f8db 3010 	ldr.w	r3, [fp, #16]
 8003fb6:	b993      	cbnz	r3, 8003fde <_svfprintf_r+0x52>
 8003fb8:	2140      	movs	r1, #64	; 0x40
 8003fba:	4648      	mov	r0, r9
 8003fbc:	f003 f970 	bl	80072a0 <_malloc_r>
 8003fc0:	f8cb 0000 	str.w	r0, [fp]
 8003fc4:	f8cb 0010 	str.w	r0, [fp, #16]
 8003fc8:	b930      	cbnz	r0, 8003fd8 <_svfprintf_r+0x4c>
 8003fca:	230c      	movs	r3, #12
 8003fcc:	f8c9 3000 	str.w	r3, [r9]
 8003fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8003fd4:	f000 bf8b 	b.w	8004eee <_svfprintf_r+0xf62>
 8003fd8:	2340      	movs	r3, #64	; 0x40
 8003fda:	f8cb 3014 	str.w	r3, [fp, #20]
 8003fde:	2300      	movs	r3, #0
 8003fe0:	ac2c      	add	r4, sp, #176	; 0xb0
 8003fe2:	941f      	str	r4, [sp, #124]	; 0x7c
 8003fe4:	9321      	str	r3, [sp, #132]	; 0x84
 8003fe6:	9320      	str	r3, [sp, #128]	; 0x80
 8003fe8:	9308      	str	r3, [sp, #32]
 8003fea:	930c      	str	r3, [sp, #48]	; 0x30
 8003fec:	930d      	str	r3, [sp, #52]	; 0x34
 8003fee:	9313      	str	r3, [sp, #76]	; 0x4c
 8003ff0:	9312      	str	r3, [sp, #72]	; 0x48
 8003ff2:	930e      	str	r3, [sp, #56]	; 0x38
 8003ff4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8003ff6:	462b      	mov	r3, r5
 8003ff8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ffc:	b11a      	cbz	r2, 8004006 <_svfprintf_r+0x7a>
 8003ffe:	2a25      	cmp	r2, #37	; 0x25
 8004000:	d001      	beq.n	8004006 <_svfprintf_r+0x7a>
 8004002:	461d      	mov	r5, r3
 8004004:	e7f7      	b.n	8003ff6 <_svfprintf_r+0x6a>
 8004006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004008:	1aee      	subs	r6, r5, r3
 800400a:	d017      	beq.n	800403c <_svfprintf_r+0xb0>
 800400c:	e884 0048 	stmia.w	r4, {r3, r6}
 8004010:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004012:	4433      	add	r3, r6
 8004014:	9321      	str	r3, [sp, #132]	; 0x84
 8004016:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004018:	3301      	adds	r3, #1
 800401a:	2b07      	cmp	r3, #7
 800401c:	9320      	str	r3, [sp, #128]	; 0x80
 800401e:	dc01      	bgt.n	8004024 <_svfprintf_r+0x98>
 8004020:	3408      	adds	r4, #8
 8004022:	e008      	b.n	8004036 <_svfprintf_r+0xaa>
 8004024:	aa1f      	add	r2, sp, #124	; 0x7c
 8004026:	4659      	mov	r1, fp
 8004028:	4648      	mov	r0, r9
 800402a:	f003 fece 	bl	8007dca <__ssprint_r>
 800402e:	2800      	cmp	r0, #0
 8004030:	f040 8622 	bne.w	8004c78 <_svfprintf_r+0xcec>
 8004034:	ac2c      	add	r4, sp, #176	; 0xb0
 8004036:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004038:	4433      	add	r3, r6
 800403a:	930e      	str	r3, [sp, #56]	; 0x38
 800403c:	782b      	ldrb	r3, [r5, #0]
 800403e:	2b00      	cmp	r3, #0
 8004040:	f000 8613 	beq.w	8004c6a <_svfprintf_r+0xcde>
 8004044:	2200      	movs	r2, #0
 8004046:	1c6b      	adds	r3, r5, #1
 8004048:	4611      	mov	r1, r2
 800404a:	4615      	mov	r5, r2
 800404c:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8004050:	f04f 3aff 	mov.w	sl, #4294967295
 8004054:	920b      	str	r2, [sp, #44]	; 0x2c
 8004056:	200a      	movs	r0, #10
 8004058:	1c5e      	adds	r6, r3, #1
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	9609      	str	r6, [sp, #36]	; 0x24
 800405e:	9306      	str	r3, [sp, #24]
 8004060:	9b06      	ldr	r3, [sp, #24]
 8004062:	3b20      	subs	r3, #32
 8004064:	2b58      	cmp	r3, #88	; 0x58
 8004066:	f200 8259 	bhi.w	800451c <_svfprintf_r+0x590>
 800406a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800406e:	005c      	.short	0x005c
 8004070:	02570257 	.word	0x02570257
 8004074:	0257006b 	.word	0x0257006b
 8004078:	02570257 	.word	0x02570257
 800407c:	02570257 	.word	0x02570257
 8004080:	006e0257 	.word	0x006e0257
 8004084:	02570059 	.word	0x02570059
 8004088:	007b0078 	.word	0x007b0078
 800408c:	009f0257 	.word	0x009f0257
 8004090:	00a200a2 	.word	0x00a200a2
 8004094:	00a200a2 	.word	0x00a200a2
 8004098:	00a200a2 	.word	0x00a200a2
 800409c:	00a200a2 	.word	0x00a200a2
 80040a0:	025700a2 	.word	0x025700a2
 80040a4:	02570257 	.word	0x02570257
 80040a8:	02570257 	.word	0x02570257
 80040ac:	02570257 	.word	0x02570257
 80040b0:	02570257 	.word	0x02570257
 80040b4:	00d20257 	.word	0x00d20257
 80040b8:	025700fe 	.word	0x025700fe
 80040bc:	025700fe 	.word	0x025700fe
 80040c0:	02570257 	.word	0x02570257
 80040c4:	00b50257 	.word	0x00b50257
 80040c8:	02570257 	.word	0x02570257
 80040cc:	02570143 	.word	0x02570143
 80040d0:	02570257 	.word	0x02570257
 80040d4:	02570257 	.word	0x02570257
 80040d8:	0257018a 	.word	0x0257018a
 80040dc:	00660257 	.word	0x00660257
 80040e0:	02570257 	.word	0x02570257
 80040e4:	02570257 	.word	0x02570257
 80040e8:	02570257 	.word	0x02570257
 80040ec:	02570257 	.word	0x02570257
 80040f0:	02570257 	.word	0x02570257
 80040f4:	006100c9 	.word	0x006100c9
 80040f8:	00fe00fe 	.word	0x00fe00fe
 80040fc:	00b800fe 	.word	0x00b800fe
 8004100:	02570061 	.word	0x02570061
 8004104:	00bb0257 	.word	0x00bb0257
 8004108:	01250257 	.word	0x01250257
 800410c:	01600145 	.word	0x01600145
 8004110:	025700c6 	.word	0x025700c6
 8004114:	02570171 	.word	0x02570171
 8004118:	0257018c 	.word	0x0257018c
 800411c:	01a40257 	.word	0x01a40257
 8004120:	2201      	movs	r2, #1
 8004122:	212b      	movs	r1, #43	; 0x2b
 8004124:	e002      	b.n	800412c <_svfprintf_r+0x1a0>
 8004126:	b909      	cbnz	r1, 800412c <_svfprintf_r+0x1a0>
 8004128:	2201      	movs	r2, #1
 800412a:	2120      	movs	r1, #32
 800412c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800412e:	e793      	b.n	8004058 <_svfprintf_r+0xcc>
 8004130:	2a00      	cmp	r2, #0
 8004132:	d073      	beq.n	800421c <_svfprintf_r+0x290>
 8004134:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8004138:	e070      	b.n	800421c <_svfprintf_r+0x290>
 800413a:	b10a      	cbz	r2, 8004140 <_svfprintf_r+0x1b4>
 800413c:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8004140:	4ba9      	ldr	r3, [pc, #676]	; (80043e8 <_svfprintf_r+0x45c>)
 8004142:	e13c      	b.n	80043be <_svfprintf_r+0x432>
 8004144:	f045 0501 	orr.w	r5, r5, #1
 8004148:	e7f0      	b.n	800412c <_svfprintf_r+0x1a0>
 800414a:	683e      	ldr	r6, [r7, #0]
 800414c:	1d3b      	adds	r3, r7, #4
 800414e:	2e00      	cmp	r6, #0
 8004150:	960b      	str	r6, [sp, #44]	; 0x2c
 8004152:	db01      	blt.n	8004158 <_svfprintf_r+0x1cc>
 8004154:	461f      	mov	r7, r3
 8004156:	e7e9      	b.n	800412c <_svfprintf_r+0x1a0>
 8004158:	461f      	mov	r7, r3
 800415a:	4276      	negs	r6, r6
 800415c:	960b      	str	r6, [sp, #44]	; 0x2c
 800415e:	f045 0504 	orr.w	r5, r5, #4
 8004162:	e7e3      	b.n	800412c <_svfprintf_r+0x1a0>
 8004164:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004166:	1c5e      	adds	r6, r3, #1
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	2b2a      	cmp	r3, #42	; 0x2a
 800416c:	9306      	str	r3, [sp, #24]
 800416e:	d001      	beq.n	8004174 <_svfprintf_r+0x1e8>
 8004170:	2300      	movs	r3, #0
 8004172:	e00a      	b.n	800418a <_svfprintf_r+0x1fe>
 8004174:	f8d7 a000 	ldr.w	sl, [r7]
 8004178:	1d3b      	adds	r3, r7, #4
 800417a:	f1ba 0f00 	cmp.w	sl, #0
 800417e:	461f      	mov	r7, r3
 8004180:	9609      	str	r6, [sp, #36]	; 0x24
 8004182:	dad3      	bge.n	800412c <_svfprintf_r+0x1a0>
 8004184:	f04f 3aff 	mov.w	sl, #4294967295
 8004188:	e7d0      	b.n	800412c <_svfprintf_r+0x1a0>
 800418a:	9609      	str	r6, [sp, #36]	; 0x24
 800418c:	9e06      	ldr	r6, [sp, #24]
 800418e:	3e30      	subs	r6, #48	; 0x30
 8004190:	2e09      	cmp	r6, #9
 8004192:	d808      	bhi.n	80041a6 <_svfprintf_r+0x21a>
 8004194:	fb00 6303 	mla	r3, r0, r3, r6
 8004198:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800419a:	46b6      	mov	lr, r6
 800419c:	f81e 6b01 	ldrb.w	r6, [lr], #1
 80041a0:	9606      	str	r6, [sp, #24]
 80041a2:	4676      	mov	r6, lr
 80041a4:	e7f1      	b.n	800418a <_svfprintf_r+0x1fe>
 80041a6:	ea43 7ae3 	orr.w	sl, r3, r3, asr #31
 80041aa:	e759      	b.n	8004060 <_svfprintf_r+0xd4>
 80041ac:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80041b0:	e7bc      	b.n	800412c <_svfprintf_r+0x1a0>
 80041b2:	2300      	movs	r3, #0
 80041b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80041b6:	9b06      	ldr	r3, [sp, #24]
 80041b8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80041ba:	3b30      	subs	r3, #48	; 0x30
 80041bc:	fb00 3306 	mla	r3, r0, r6, r3
 80041c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80041c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041c4:	461e      	mov	r6, r3
 80041c6:	f816 3b01 	ldrb.w	r3, [r6], #1
 80041ca:	9306      	str	r3, [sp, #24]
 80041cc:	9b06      	ldr	r3, [sp, #24]
 80041ce:	9609      	str	r6, [sp, #36]	; 0x24
 80041d0:	3b30      	subs	r3, #48	; 0x30
 80041d2:	2b09      	cmp	r3, #9
 80041d4:	d9ef      	bls.n	80041b6 <_svfprintf_r+0x22a>
 80041d6:	e743      	b.n	8004060 <_svfprintf_r+0xd4>
 80041d8:	f045 0508 	orr.w	r5, r5, #8
 80041dc:	e7a6      	b.n	800412c <_svfprintf_r+0x1a0>
 80041de:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 80041e2:	e7a3      	b.n	800412c <_svfprintf_r+0x1a0>
 80041e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	2b6c      	cmp	r3, #108	; 0x6c
 80041ea:	d103      	bne.n	80041f4 <_svfprintf_r+0x268>
 80041ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041ee:	3301      	adds	r3, #1
 80041f0:	9309      	str	r3, [sp, #36]	; 0x24
 80041f2:	e002      	b.n	80041fa <_svfprintf_r+0x26e>
 80041f4:	f045 0510 	orr.w	r5, r5, #16
 80041f8:	e798      	b.n	800412c <_svfprintf_r+0x1a0>
 80041fa:	f045 0520 	orr.w	r5, r5, #32
 80041fe:	e795      	b.n	800412c <_svfprintf_r+0x1a0>
 8004200:	1d3b      	adds	r3, r7, #4
 8004202:	9307      	str	r3, [sp, #28]
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	2600      	movs	r6, #0
 8004208:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 800420c:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8004210:	e193      	b.n	800453a <_svfprintf_r+0x5ae>
 8004212:	b10a      	cbz	r2, 8004218 <_svfprintf_r+0x28c>
 8004214:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8004218:	f045 0510 	orr.w	r5, r5, #16
 800421c:	06aa      	lsls	r2, r5, #26
 800421e:	d508      	bpl.n	8004232 <_svfprintf_r+0x2a6>
 8004220:	3707      	adds	r7, #7
 8004222:	f027 0707 	bic.w	r7, r7, #7
 8004226:	f107 0308 	add.w	r3, r7, #8
 800422a:	9307      	str	r3, [sp, #28]
 800422c:	e9d7 6700 	ldrd	r6, r7, [r7]
 8004230:	e00e      	b.n	8004250 <_svfprintf_r+0x2c4>
 8004232:	f015 0f10 	tst.w	r5, #16
 8004236:	f107 0304 	add.w	r3, r7, #4
 800423a:	d002      	beq.n	8004242 <_svfprintf_r+0x2b6>
 800423c:	9307      	str	r3, [sp, #28]
 800423e:	683e      	ldr	r6, [r7, #0]
 8004240:	e005      	b.n	800424e <_svfprintf_r+0x2c2>
 8004242:	683e      	ldr	r6, [r7, #0]
 8004244:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004248:	9307      	str	r3, [sp, #28]
 800424a:	bf18      	it	ne
 800424c:	b236      	sxthne	r6, r6
 800424e:	17f7      	asrs	r7, r6, #31
 8004250:	2e00      	cmp	r6, #0
 8004252:	f177 0300 	sbcs.w	r3, r7, #0
 8004256:	f280 80e2 	bge.w	800441e <_svfprintf_r+0x492>
 800425a:	4276      	negs	r6, r6
 800425c:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8004260:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8004264:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8004268:	e0d9      	b.n	800441e <_svfprintf_r+0x492>
 800426a:	b10a      	cbz	r2, 8004270 <_svfprintf_r+0x2e4>
 800426c:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8004270:	3707      	adds	r7, #7
 8004272:	f027 0707 	bic.w	r7, r7, #7
 8004276:	f107 0308 	add.w	r3, r7, #8
 800427a:	9307      	str	r3, [sp, #28]
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	f04f 32ff 	mov.w	r2, #4294967295
 8004282:	930c      	str	r3, [sp, #48]	; 0x30
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8004288:	930d      	str	r3, [sp, #52]	; 0x34
 800428a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800428c:	4638      	mov	r0, r7
 800428e:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 8004292:	4631      	mov	r1, r6
 8004294:	4b55      	ldr	r3, [pc, #340]	; (80043ec <_svfprintf_r+0x460>)
 8004296:	f7fc fc21 	bl	8000adc <__aeabi_dcmpun>
 800429a:	2800      	cmp	r0, #0
 800429c:	f040 84f6 	bne.w	8004c8c <_svfprintf_r+0xd00>
 80042a0:	f04f 32ff 	mov.w	r2, #4294967295
 80042a4:	4b51      	ldr	r3, [pc, #324]	; (80043ec <_svfprintf_r+0x460>)
 80042a6:	4638      	mov	r0, r7
 80042a8:	4631      	mov	r1, r6
 80042aa:	f7fc fbf9 	bl	8000aa0 <__aeabi_dcmple>
 80042ae:	2800      	cmp	r0, #0
 80042b0:	f040 84ec 	bne.w	8004c8c <_svfprintf_r+0xd00>
 80042b4:	f000 be04 	b.w	8004ec0 <_svfprintf_r+0xf34>
 80042b8:	b10a      	cbz	r2, 80042be <_svfprintf_r+0x332>
 80042ba:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80042be:	f015 0f20 	tst.w	r5, #32
 80042c2:	f107 0304 	add.w	r3, r7, #4
 80042c6:	d007      	beq.n	80042d8 <_svfprintf_r+0x34c>
 80042c8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80042ca:	683a      	ldr	r2, [r7, #0]
 80042cc:	17ce      	asrs	r6, r1, #31
 80042ce:	4608      	mov	r0, r1
 80042d0:	4631      	mov	r1, r6
 80042d2:	e9c2 0100 	strd	r0, r1, [r2]
 80042d6:	e00b      	b.n	80042f0 <_svfprintf_r+0x364>
 80042d8:	06e9      	lsls	r1, r5, #27
 80042da:	d406      	bmi.n	80042ea <_svfprintf_r+0x35e>
 80042dc:	066a      	lsls	r2, r5, #25
 80042de:	d504      	bpl.n	80042ea <_svfprintf_r+0x35e>
 80042e0:	683a      	ldr	r2, [r7, #0]
 80042e2:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 80042e6:	8011      	strh	r1, [r2, #0]
 80042e8:	e002      	b.n	80042f0 <_svfprintf_r+0x364>
 80042ea:	683a      	ldr	r2, [r7, #0]
 80042ec:	990e      	ldr	r1, [sp, #56]	; 0x38
 80042ee:	6011      	str	r1, [r2, #0]
 80042f0:	461f      	mov	r7, r3
 80042f2:	e67f      	b.n	8003ff4 <_svfprintf_r+0x68>
 80042f4:	f045 0510 	orr.w	r5, r5, #16
 80042f8:	f015 0320 	ands.w	r3, r5, #32
 80042fc:	d009      	beq.n	8004312 <_svfprintf_r+0x386>
 80042fe:	3707      	adds	r7, #7
 8004300:	f027 0707 	bic.w	r7, r7, #7
 8004304:	f107 0308 	add.w	r3, r7, #8
 8004308:	9307      	str	r3, [sp, #28]
 800430a:	e9d7 6700 	ldrd	r6, r7, [r7]
 800430e:	2300      	movs	r3, #0
 8004310:	e081      	b.n	8004416 <_svfprintf_r+0x48a>
 8004312:	1d3a      	adds	r2, r7, #4
 8004314:	f015 0110 	ands.w	r1, r5, #16
 8004318:	9207      	str	r2, [sp, #28]
 800431a:	d105      	bne.n	8004328 <_svfprintf_r+0x39c>
 800431c:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8004320:	d002      	beq.n	8004328 <_svfprintf_r+0x39c>
 8004322:	883e      	ldrh	r6, [r7, #0]
 8004324:	2700      	movs	r7, #0
 8004326:	e7f2      	b.n	800430e <_svfprintf_r+0x382>
 8004328:	683e      	ldr	r6, [r7, #0]
 800432a:	2700      	movs	r7, #0
 800432c:	e073      	b.n	8004416 <_svfprintf_r+0x48a>
 800432e:	1d3b      	adds	r3, r7, #4
 8004330:	9307      	str	r3, [sp, #28]
 8004332:	2330      	movs	r3, #48	; 0x30
 8004334:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8004338:	4b2d      	ldr	r3, [pc, #180]	; (80043f0 <_svfprintf_r+0x464>)
 800433a:	2278      	movs	r2, #120	; 0x78
 800433c:	683e      	ldr	r6, [r7, #0]
 800433e:	9313      	str	r3, [sp, #76]	; 0x4c
 8004340:	2700      	movs	r7, #0
 8004342:	f045 0502 	orr.w	r5, r5, #2
 8004346:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 800434a:	2302      	movs	r3, #2
 800434c:	9206      	str	r2, [sp, #24]
 800434e:	e062      	b.n	8004416 <_svfprintf_r+0x48a>
 8004350:	2600      	movs	r6, #0
 8004352:	1d3b      	adds	r3, r7, #4
 8004354:	45b2      	cmp	sl, r6
 8004356:	9307      	str	r3, [sp, #28]
 8004358:	f8d7 8000 	ldr.w	r8, [r7]
 800435c:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8004360:	db0a      	blt.n	8004378 <_svfprintf_r+0x3ec>
 8004362:	4652      	mov	r2, sl
 8004364:	4631      	mov	r1, r6
 8004366:	4640      	mov	r0, r8
 8004368:	f003 f9b6 	bl	80076d8 <memchr>
 800436c:	2800      	cmp	r0, #0
 800436e:	f000 80ea 	beq.w	8004546 <_svfprintf_r+0x5ba>
 8004372:	ebc8 0a00 	rsb	sl, r8, r0
 8004376:	e0e7      	b.n	8004548 <_svfprintf_r+0x5bc>
 8004378:	4640      	mov	r0, r8
 800437a:	f7fb ff55 	bl	8000228 <strlen>
 800437e:	4682      	mov	sl, r0
 8004380:	e0e2      	b.n	8004548 <_svfprintf_r+0x5bc>
 8004382:	f045 0510 	orr.w	r5, r5, #16
 8004386:	06ae      	lsls	r6, r5, #26
 8004388:	d508      	bpl.n	800439c <_svfprintf_r+0x410>
 800438a:	3707      	adds	r7, #7
 800438c:	f027 0707 	bic.w	r7, r7, #7
 8004390:	f107 0308 	add.w	r3, r7, #8
 8004394:	9307      	str	r3, [sp, #28]
 8004396:	e9d7 6700 	ldrd	r6, r7, [r7]
 800439a:	e00a      	b.n	80043b2 <_svfprintf_r+0x426>
 800439c:	1d3b      	adds	r3, r7, #4
 800439e:	f015 0f10 	tst.w	r5, #16
 80043a2:	9307      	str	r3, [sp, #28]
 80043a4:	d103      	bne.n	80043ae <_svfprintf_r+0x422>
 80043a6:	0668      	lsls	r0, r5, #25
 80043a8:	d501      	bpl.n	80043ae <_svfprintf_r+0x422>
 80043aa:	883e      	ldrh	r6, [r7, #0]
 80043ac:	e000      	b.n	80043b0 <_svfprintf_r+0x424>
 80043ae:	683e      	ldr	r6, [r7, #0]
 80043b0:	2700      	movs	r7, #0
 80043b2:	2301      	movs	r3, #1
 80043b4:	e02f      	b.n	8004416 <_svfprintf_r+0x48a>
 80043b6:	b10a      	cbz	r2, 80043bc <_svfprintf_r+0x430>
 80043b8:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80043bc:	4b0c      	ldr	r3, [pc, #48]	; (80043f0 <_svfprintf_r+0x464>)
 80043be:	06a9      	lsls	r1, r5, #26
 80043c0:	9313      	str	r3, [sp, #76]	; 0x4c
 80043c2:	d508      	bpl.n	80043d6 <_svfprintf_r+0x44a>
 80043c4:	3707      	adds	r7, #7
 80043c6:	f027 0707 	bic.w	r7, r7, #7
 80043ca:	f107 0308 	add.w	r3, r7, #8
 80043ce:	9307      	str	r3, [sp, #28]
 80043d0:	e9d7 6700 	ldrd	r6, r7, [r7]
 80043d4:	e010      	b.n	80043f8 <_svfprintf_r+0x46c>
 80043d6:	1d3b      	adds	r3, r7, #4
 80043d8:	f015 0f10 	tst.w	r5, #16
 80043dc:	9307      	str	r3, [sp, #28]
 80043de:	d109      	bne.n	80043f4 <_svfprintf_r+0x468>
 80043e0:	066a      	lsls	r2, r5, #25
 80043e2:	d507      	bpl.n	80043f4 <_svfprintf_r+0x468>
 80043e4:	883e      	ldrh	r6, [r7, #0]
 80043e6:	e006      	b.n	80043f6 <_svfprintf_r+0x46a>
 80043e8:	08008ab4 	.word	0x08008ab4
 80043ec:	7fefffff 	.word	0x7fefffff
 80043f0:	08008ac5 	.word	0x08008ac5
 80043f4:	683e      	ldr	r6, [r7, #0]
 80043f6:	2700      	movs	r7, #0
 80043f8:	07eb      	lsls	r3, r5, #31
 80043fa:	d50b      	bpl.n	8004414 <_svfprintf_r+0x488>
 80043fc:	ea56 0307 	orrs.w	r3, r6, r7
 8004400:	d008      	beq.n	8004414 <_svfprintf_r+0x488>
 8004402:	2330      	movs	r3, #48	; 0x30
 8004404:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8004408:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800440c:	f045 0502 	orr.w	r5, r5, #2
 8004410:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 8004414:	2302      	movs	r3, #2
 8004416:	2200      	movs	r2, #0
 8004418:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800441c:	e000      	b.n	8004420 <_svfprintf_r+0x494>
 800441e:	2301      	movs	r3, #1
 8004420:	f1ba 0f00 	cmp.w	sl, #0
 8004424:	f2c0 855d 	blt.w	8004ee2 <_svfprintf_r+0xf56>
 8004428:	ea56 0207 	orrs.w	r2, r6, r7
 800442c:	f025 0180 	bic.w	r1, r5, #128	; 0x80
 8004430:	d103      	bne.n	800443a <_svfprintf_r+0x4ae>
 8004432:	f1ba 0f00 	cmp.w	sl, #0
 8004436:	d05f      	beq.n	80044f8 <_svfprintf_r+0x56c>
 8004438:	e006      	b.n	8004448 <_svfprintf_r+0x4bc>
 800443a:	460d      	mov	r5, r1
 800443c:	2b01      	cmp	r3, #1
 800443e:	d025      	beq.n	800448c <_svfprintf_r+0x500>
 8004440:	2b02      	cmp	r3, #2
 8004442:	d046      	beq.n	80044d2 <_svfprintf_r+0x546>
 8004444:	4629      	mov	r1, r5
 8004446:	e007      	b.n	8004458 <_svfprintf_r+0x4cc>
 8004448:	460d      	mov	r5, r1
 800444a:	2b01      	cmp	r3, #1
 800444c:	d022      	beq.n	8004494 <_svfprintf_r+0x508>
 800444e:	2b02      	cmp	r3, #2
 8004450:	d03d      	beq.n	80044ce <_svfprintf_r+0x542>
 8004452:	4629      	mov	r1, r5
 8004454:	2600      	movs	r6, #0
 8004456:	2700      	movs	r7, #0
 8004458:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800445c:	08f2      	lsrs	r2, r6, #3
 800445e:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 8004462:	08f8      	lsrs	r0, r7, #3
 8004464:	f006 0307 	and.w	r3, r6, #7
 8004468:	4607      	mov	r7, r0
 800446a:	4616      	mov	r6, r2
 800446c:	3330      	adds	r3, #48	; 0x30
 800446e:	ea56 0207 	orrs.w	r2, r6, r7
 8004472:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8004476:	d1f1      	bne.n	800445c <_svfprintf_r+0x4d0>
 8004478:	07e8      	lsls	r0, r5, #31
 800447a:	d548      	bpl.n	800450e <_svfprintf_r+0x582>
 800447c:	2b30      	cmp	r3, #48	; 0x30
 800447e:	d046      	beq.n	800450e <_svfprintf_r+0x582>
 8004480:	2330      	movs	r3, #48	; 0x30
 8004482:	f808 3c01 	strb.w	r3, [r8, #-1]
 8004486:	f108 38ff 	add.w	r8, r8, #4294967295
 800448a:	e040      	b.n	800450e <_svfprintf_r+0x582>
 800448c:	2f00      	cmp	r7, #0
 800448e:	bf08      	it	eq
 8004490:	2e0a      	cmpeq	r6, #10
 8004492:	d205      	bcs.n	80044a0 <_svfprintf_r+0x514>
 8004494:	3630      	adds	r6, #48	; 0x30
 8004496:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 800449a:	f808 6d41 	strb.w	r6, [r8, #-65]!
 800449e:	e029      	b.n	80044f4 <_svfprintf_r+0x568>
 80044a0:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 80044a4:	4630      	mov	r0, r6
 80044a6:	4639      	mov	r1, r7
 80044a8:	220a      	movs	r2, #10
 80044aa:	2300      	movs	r3, #0
 80044ac:	f7fc fb54 	bl	8000b58 <__aeabi_uldivmod>
 80044b0:	3230      	adds	r2, #48	; 0x30
 80044b2:	f808 2d01 	strb.w	r2, [r8, #-1]!
 80044b6:	2300      	movs	r3, #0
 80044b8:	4630      	mov	r0, r6
 80044ba:	4639      	mov	r1, r7
 80044bc:	220a      	movs	r2, #10
 80044be:	f7fc fb4b 	bl	8000b58 <__aeabi_uldivmod>
 80044c2:	4606      	mov	r6, r0
 80044c4:	460f      	mov	r7, r1
 80044c6:	ea56 0307 	orrs.w	r3, r6, r7
 80044ca:	d1eb      	bne.n	80044a4 <_svfprintf_r+0x518>
 80044cc:	e012      	b.n	80044f4 <_svfprintf_r+0x568>
 80044ce:	2600      	movs	r6, #0
 80044d0:	2700      	movs	r7, #0
 80044d2:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 80044d6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80044d8:	f006 030f 	and.w	r3, r6, #15
 80044dc:	5cd3      	ldrb	r3, [r2, r3]
 80044de:	093a      	lsrs	r2, r7, #4
 80044e0:	f808 3d01 	strb.w	r3, [r8, #-1]!
 80044e4:	0933      	lsrs	r3, r6, #4
 80044e6:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 80044ea:	461e      	mov	r6, r3
 80044ec:	4617      	mov	r7, r2
 80044ee:	ea56 0307 	orrs.w	r3, r6, r7
 80044f2:	d1f0      	bne.n	80044d6 <_svfprintf_r+0x54a>
 80044f4:	4629      	mov	r1, r5
 80044f6:	e00a      	b.n	800450e <_svfprintf_r+0x582>
 80044f8:	b93b      	cbnz	r3, 800450a <_svfprintf_r+0x57e>
 80044fa:	07ea      	lsls	r2, r5, #31
 80044fc:	d505      	bpl.n	800450a <_svfprintf_r+0x57e>
 80044fe:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8004502:	2330      	movs	r3, #48	; 0x30
 8004504:	f808 3d41 	strb.w	r3, [r8, #-65]!
 8004508:	e001      	b.n	800450e <_svfprintf_r+0x582>
 800450a:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800450e:	ab2c      	add	r3, sp, #176	; 0xb0
 8004510:	4656      	mov	r6, sl
 8004512:	460d      	mov	r5, r1
 8004514:	ebc8 0a03 	rsb	sl, r8, r3
 8004518:	2700      	movs	r7, #0
 800451a:	e016      	b.n	800454a <_svfprintf_r+0x5be>
 800451c:	b10a      	cbz	r2, 8004522 <_svfprintf_r+0x596>
 800451e:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8004522:	9b06      	ldr	r3, [sp, #24]
 8004524:	2b00      	cmp	r3, #0
 8004526:	f000 83a0 	beq.w	8004c6a <_svfprintf_r+0xcde>
 800452a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800452e:	2600      	movs	r6, #0
 8004530:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8004534:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8004538:	9707      	str	r7, [sp, #28]
 800453a:	f04f 0a01 	mov.w	sl, #1
 800453e:	4637      	mov	r7, r6
 8004540:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8004544:	e001      	b.n	800454a <_svfprintf_r+0x5be>
 8004546:	4606      	mov	r6, r0
 8004548:	4637      	mov	r7, r6
 800454a:	4556      	cmp	r6, sl
 800454c:	4633      	mov	r3, r6
 800454e:	bfb8      	it	lt
 8004550:	4653      	movlt	r3, sl
 8004552:	930f      	str	r3, [sp, #60]	; 0x3c
 8004554:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8004558:	b113      	cbz	r3, 8004560 <_svfprintf_r+0x5d4>
 800455a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800455c:	3301      	adds	r3, #1
 800455e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004560:	f015 0302 	ands.w	r3, r5, #2
 8004564:	9314      	str	r3, [sp, #80]	; 0x50
 8004566:	bf1e      	ittt	ne
 8004568:	9b0f      	ldrne	r3, [sp, #60]	; 0x3c
 800456a:	3302      	addne	r3, #2
 800456c:	930f      	strne	r3, [sp, #60]	; 0x3c
 800456e:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8004572:	9315      	str	r3, [sp, #84]	; 0x54
 8004574:	d139      	bne.n	80045ea <_svfprintf_r+0x65e>
 8004576:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004578:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800457a:	1a9b      	subs	r3, r3, r2
 800457c:	2b00      	cmp	r3, #0
 800457e:	9310      	str	r3, [sp, #64]	; 0x40
 8004580:	dd33      	ble.n	80045ea <_svfprintf_r+0x65e>
 8004582:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004584:	2b10      	cmp	r3, #16
 8004586:	4ba3      	ldr	r3, [pc, #652]	; (8004814 <_svfprintf_r+0x888>)
 8004588:	6023      	str	r3, [r4, #0]
 800458a:	dd18      	ble.n	80045be <_svfprintf_r+0x632>
 800458c:	2310      	movs	r3, #16
 800458e:	6063      	str	r3, [r4, #4]
 8004590:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004592:	3310      	adds	r3, #16
 8004594:	9321      	str	r3, [sp, #132]	; 0x84
 8004596:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004598:	3301      	adds	r3, #1
 800459a:	2b07      	cmp	r3, #7
 800459c:	9320      	str	r3, [sp, #128]	; 0x80
 800459e:	dc01      	bgt.n	80045a4 <_svfprintf_r+0x618>
 80045a0:	3408      	adds	r4, #8
 80045a2:	e008      	b.n	80045b6 <_svfprintf_r+0x62a>
 80045a4:	aa1f      	add	r2, sp, #124	; 0x7c
 80045a6:	4659      	mov	r1, fp
 80045a8:	4648      	mov	r0, r9
 80045aa:	f003 fc0e 	bl	8007dca <__ssprint_r>
 80045ae:	2800      	cmp	r0, #0
 80045b0:	f040 8362 	bne.w	8004c78 <_svfprintf_r+0xcec>
 80045b4:	ac2c      	add	r4, sp, #176	; 0xb0
 80045b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80045b8:	3b10      	subs	r3, #16
 80045ba:	9310      	str	r3, [sp, #64]	; 0x40
 80045bc:	e7e1      	b.n	8004582 <_svfprintf_r+0x5f6>
 80045be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80045c0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80045c2:	6063      	str	r3, [r4, #4]
 80045c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80045c6:	4413      	add	r3, r2
 80045c8:	9321      	str	r3, [sp, #132]	; 0x84
 80045ca:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80045cc:	3301      	adds	r3, #1
 80045ce:	2b07      	cmp	r3, #7
 80045d0:	9320      	str	r3, [sp, #128]	; 0x80
 80045d2:	dc01      	bgt.n	80045d8 <_svfprintf_r+0x64c>
 80045d4:	3408      	adds	r4, #8
 80045d6:	e008      	b.n	80045ea <_svfprintf_r+0x65e>
 80045d8:	aa1f      	add	r2, sp, #124	; 0x7c
 80045da:	4659      	mov	r1, fp
 80045dc:	4648      	mov	r0, r9
 80045de:	f003 fbf4 	bl	8007dca <__ssprint_r>
 80045e2:	2800      	cmp	r0, #0
 80045e4:	f040 8348 	bne.w	8004c78 <_svfprintf_r+0xcec>
 80045e8:	ac2c      	add	r4, sp, #176	; 0xb0
 80045ea:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 80045ee:	b1bb      	cbz	r3, 8004620 <_svfprintf_r+0x694>
 80045f0:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 80045f4:	6023      	str	r3, [r4, #0]
 80045f6:	2301      	movs	r3, #1
 80045f8:	6063      	str	r3, [r4, #4]
 80045fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80045fc:	3301      	adds	r3, #1
 80045fe:	9321      	str	r3, [sp, #132]	; 0x84
 8004600:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004602:	3301      	adds	r3, #1
 8004604:	2b07      	cmp	r3, #7
 8004606:	9320      	str	r3, [sp, #128]	; 0x80
 8004608:	dc01      	bgt.n	800460e <_svfprintf_r+0x682>
 800460a:	3408      	adds	r4, #8
 800460c:	e008      	b.n	8004620 <_svfprintf_r+0x694>
 800460e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004610:	4659      	mov	r1, fp
 8004612:	4648      	mov	r0, r9
 8004614:	f003 fbd9 	bl	8007dca <__ssprint_r>
 8004618:	2800      	cmp	r0, #0
 800461a:	f040 832d 	bne.w	8004c78 <_svfprintf_r+0xcec>
 800461e:	ac2c      	add	r4, sp, #176	; 0xb0
 8004620:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004622:	b1b3      	cbz	r3, 8004652 <_svfprintf_r+0x6c6>
 8004624:	ab18      	add	r3, sp, #96	; 0x60
 8004626:	6023      	str	r3, [r4, #0]
 8004628:	2302      	movs	r3, #2
 800462a:	6063      	str	r3, [r4, #4]
 800462c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800462e:	3302      	adds	r3, #2
 8004630:	9321      	str	r3, [sp, #132]	; 0x84
 8004632:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004634:	3301      	adds	r3, #1
 8004636:	2b07      	cmp	r3, #7
 8004638:	9320      	str	r3, [sp, #128]	; 0x80
 800463a:	dc01      	bgt.n	8004640 <_svfprintf_r+0x6b4>
 800463c:	3408      	adds	r4, #8
 800463e:	e008      	b.n	8004652 <_svfprintf_r+0x6c6>
 8004640:	aa1f      	add	r2, sp, #124	; 0x7c
 8004642:	4659      	mov	r1, fp
 8004644:	4648      	mov	r0, r9
 8004646:	f003 fbc0 	bl	8007dca <__ssprint_r>
 800464a:	2800      	cmp	r0, #0
 800464c:	f040 8314 	bne.w	8004c78 <_svfprintf_r+0xcec>
 8004650:	ac2c      	add	r4, sp, #176	; 0xb0
 8004652:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004654:	2b80      	cmp	r3, #128	; 0x80
 8004656:	d139      	bne.n	80046cc <_svfprintf_r+0x740>
 8004658:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800465a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800465c:	1a9b      	subs	r3, r3, r2
 800465e:	2b00      	cmp	r3, #0
 8004660:	9310      	str	r3, [sp, #64]	; 0x40
 8004662:	dd33      	ble.n	80046cc <_svfprintf_r+0x740>
 8004664:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004666:	2b10      	cmp	r3, #16
 8004668:	4b6b      	ldr	r3, [pc, #428]	; (8004818 <_svfprintf_r+0x88c>)
 800466a:	6023      	str	r3, [r4, #0]
 800466c:	dd18      	ble.n	80046a0 <_svfprintf_r+0x714>
 800466e:	2310      	movs	r3, #16
 8004670:	6063      	str	r3, [r4, #4]
 8004672:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004674:	3310      	adds	r3, #16
 8004676:	9321      	str	r3, [sp, #132]	; 0x84
 8004678:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800467a:	3301      	adds	r3, #1
 800467c:	2b07      	cmp	r3, #7
 800467e:	9320      	str	r3, [sp, #128]	; 0x80
 8004680:	dc01      	bgt.n	8004686 <_svfprintf_r+0x6fa>
 8004682:	3408      	adds	r4, #8
 8004684:	e008      	b.n	8004698 <_svfprintf_r+0x70c>
 8004686:	aa1f      	add	r2, sp, #124	; 0x7c
 8004688:	4659      	mov	r1, fp
 800468a:	4648      	mov	r0, r9
 800468c:	f003 fb9d 	bl	8007dca <__ssprint_r>
 8004690:	2800      	cmp	r0, #0
 8004692:	f040 82f1 	bne.w	8004c78 <_svfprintf_r+0xcec>
 8004696:	ac2c      	add	r4, sp, #176	; 0xb0
 8004698:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800469a:	3b10      	subs	r3, #16
 800469c:	9310      	str	r3, [sp, #64]	; 0x40
 800469e:	e7e1      	b.n	8004664 <_svfprintf_r+0x6d8>
 80046a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80046a2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80046a4:	6063      	str	r3, [r4, #4]
 80046a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80046a8:	4413      	add	r3, r2
 80046aa:	9321      	str	r3, [sp, #132]	; 0x84
 80046ac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80046ae:	3301      	adds	r3, #1
 80046b0:	2b07      	cmp	r3, #7
 80046b2:	9320      	str	r3, [sp, #128]	; 0x80
 80046b4:	dc01      	bgt.n	80046ba <_svfprintf_r+0x72e>
 80046b6:	3408      	adds	r4, #8
 80046b8:	e008      	b.n	80046cc <_svfprintf_r+0x740>
 80046ba:	aa1f      	add	r2, sp, #124	; 0x7c
 80046bc:	4659      	mov	r1, fp
 80046be:	4648      	mov	r0, r9
 80046c0:	f003 fb83 	bl	8007dca <__ssprint_r>
 80046c4:	2800      	cmp	r0, #0
 80046c6:	f040 82d7 	bne.w	8004c78 <_svfprintf_r+0xcec>
 80046ca:	ac2c      	add	r4, sp, #176	; 0xb0
 80046cc:	ebca 0606 	rsb	r6, sl, r6
 80046d0:	2e00      	cmp	r6, #0
 80046d2:	dd2e      	ble.n	8004732 <_svfprintf_r+0x7a6>
 80046d4:	4b50      	ldr	r3, [pc, #320]	; (8004818 <_svfprintf_r+0x88c>)
 80046d6:	2e10      	cmp	r6, #16
 80046d8:	6023      	str	r3, [r4, #0]
 80046da:	dd16      	ble.n	800470a <_svfprintf_r+0x77e>
 80046dc:	2310      	movs	r3, #16
 80046de:	6063      	str	r3, [r4, #4]
 80046e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80046e2:	3310      	adds	r3, #16
 80046e4:	9321      	str	r3, [sp, #132]	; 0x84
 80046e6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80046e8:	3301      	adds	r3, #1
 80046ea:	2b07      	cmp	r3, #7
 80046ec:	9320      	str	r3, [sp, #128]	; 0x80
 80046ee:	dc01      	bgt.n	80046f4 <_svfprintf_r+0x768>
 80046f0:	3408      	adds	r4, #8
 80046f2:	e008      	b.n	8004706 <_svfprintf_r+0x77a>
 80046f4:	aa1f      	add	r2, sp, #124	; 0x7c
 80046f6:	4659      	mov	r1, fp
 80046f8:	4648      	mov	r0, r9
 80046fa:	f003 fb66 	bl	8007dca <__ssprint_r>
 80046fe:	2800      	cmp	r0, #0
 8004700:	f040 82ba 	bne.w	8004c78 <_svfprintf_r+0xcec>
 8004704:	ac2c      	add	r4, sp, #176	; 0xb0
 8004706:	3e10      	subs	r6, #16
 8004708:	e7e4      	b.n	80046d4 <_svfprintf_r+0x748>
 800470a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800470c:	9821      	ldr	r0, [sp, #132]	; 0x84
 800470e:	3301      	adds	r3, #1
 8004710:	6066      	str	r6, [r4, #4]
 8004712:	2b07      	cmp	r3, #7
 8004714:	4406      	add	r6, r0
 8004716:	9621      	str	r6, [sp, #132]	; 0x84
 8004718:	9320      	str	r3, [sp, #128]	; 0x80
 800471a:	dc01      	bgt.n	8004720 <_svfprintf_r+0x794>
 800471c:	3408      	adds	r4, #8
 800471e:	e008      	b.n	8004732 <_svfprintf_r+0x7a6>
 8004720:	aa1f      	add	r2, sp, #124	; 0x7c
 8004722:	4659      	mov	r1, fp
 8004724:	4648      	mov	r0, r9
 8004726:	f003 fb50 	bl	8007dca <__ssprint_r>
 800472a:	2800      	cmp	r0, #0
 800472c:	f040 82a4 	bne.w	8004c78 <_svfprintf_r+0xcec>
 8004730:	ac2c      	add	r4, sp, #176	; 0xb0
 8004732:	05eb      	lsls	r3, r5, #23
 8004734:	d414      	bmi.n	8004760 <_svfprintf_r+0x7d4>
 8004736:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004738:	e884 0500 	stmia.w	r4, {r8, sl}
 800473c:	4453      	add	r3, sl
 800473e:	9321      	str	r3, [sp, #132]	; 0x84
 8004740:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004742:	3301      	adds	r3, #1
 8004744:	2b07      	cmp	r3, #7
 8004746:	9320      	str	r3, [sp, #128]	; 0x80
 8004748:	f340 8245 	ble.w	8004bd6 <_svfprintf_r+0xc4a>
 800474c:	aa1f      	add	r2, sp, #124	; 0x7c
 800474e:	4659      	mov	r1, fp
 8004750:	4648      	mov	r0, r9
 8004752:	f003 fb3a 	bl	8007dca <__ssprint_r>
 8004756:	2800      	cmp	r0, #0
 8004758:	f040 828e 	bne.w	8004c78 <_svfprintf_r+0xcec>
 800475c:	ac2c      	add	r4, sp, #176	; 0xb0
 800475e:	e23b      	b.n	8004bd8 <_svfprintf_r+0xc4c>
 8004760:	9b06      	ldr	r3, [sp, #24]
 8004762:	2b65      	cmp	r3, #101	; 0x65
 8004764:	f340 81ae 	ble.w	8004ac4 <_svfprintf_r+0xb38>
 8004768:	2200      	movs	r2, #0
 800476a:	2300      	movs	r3, #0
 800476c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800476e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004770:	f7fc f982 	bl	8000a78 <__aeabi_dcmpeq>
 8004774:	2800      	cmp	r0, #0
 8004776:	d05e      	beq.n	8004836 <_svfprintf_r+0x8aa>
 8004778:	4b28      	ldr	r3, [pc, #160]	; (800481c <_svfprintf_r+0x890>)
 800477a:	6023      	str	r3, [r4, #0]
 800477c:	2301      	movs	r3, #1
 800477e:	6063      	str	r3, [r4, #4]
 8004780:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004782:	3301      	adds	r3, #1
 8004784:	9321      	str	r3, [sp, #132]	; 0x84
 8004786:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004788:	3301      	adds	r3, #1
 800478a:	2b07      	cmp	r3, #7
 800478c:	9320      	str	r3, [sp, #128]	; 0x80
 800478e:	dc01      	bgt.n	8004794 <_svfprintf_r+0x808>
 8004790:	3408      	adds	r4, #8
 8004792:	e008      	b.n	80047a6 <_svfprintf_r+0x81a>
 8004794:	aa1f      	add	r2, sp, #124	; 0x7c
 8004796:	4659      	mov	r1, fp
 8004798:	4648      	mov	r0, r9
 800479a:	f003 fb16 	bl	8007dca <__ssprint_r>
 800479e:	2800      	cmp	r0, #0
 80047a0:	f040 826a 	bne.w	8004c78 <_svfprintf_r+0xcec>
 80047a4:	ac2c      	add	r4, sp, #176	; 0xb0
 80047a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80047a8:	9a08      	ldr	r2, [sp, #32]
 80047aa:	4293      	cmp	r3, r2
 80047ac:	db02      	blt.n	80047b4 <_svfprintf_r+0x828>
 80047ae:	07ee      	lsls	r6, r5, #31
 80047b0:	f140 8212 	bpl.w	8004bd8 <_svfprintf_r+0xc4c>
 80047b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80047b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80047b8:	6023      	str	r3, [r4, #0]
 80047ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047bc:	6063      	str	r3, [r4, #4]
 80047be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80047c0:	4413      	add	r3, r2
 80047c2:	9321      	str	r3, [sp, #132]	; 0x84
 80047c4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80047c6:	3301      	adds	r3, #1
 80047c8:	2b07      	cmp	r3, #7
 80047ca:	9320      	str	r3, [sp, #128]	; 0x80
 80047cc:	dc01      	bgt.n	80047d2 <_svfprintf_r+0x846>
 80047ce:	3408      	adds	r4, #8
 80047d0:	e008      	b.n	80047e4 <_svfprintf_r+0x858>
 80047d2:	aa1f      	add	r2, sp, #124	; 0x7c
 80047d4:	4659      	mov	r1, fp
 80047d6:	4648      	mov	r0, r9
 80047d8:	f003 faf7 	bl	8007dca <__ssprint_r>
 80047dc:	2800      	cmp	r0, #0
 80047de:	f040 824b 	bne.w	8004c78 <_svfprintf_r+0xcec>
 80047e2:	ac2c      	add	r4, sp, #176	; 0xb0
 80047e4:	9b08      	ldr	r3, [sp, #32]
 80047e6:	1e5e      	subs	r6, r3, #1
 80047e8:	2e00      	cmp	r6, #0
 80047ea:	f340 81f5 	ble.w	8004bd8 <_svfprintf_r+0xc4c>
 80047ee:	4f0a      	ldr	r7, [pc, #40]	; (8004818 <_svfprintf_r+0x88c>)
 80047f0:	f04f 0810 	mov.w	r8, #16
 80047f4:	2e10      	cmp	r6, #16
 80047f6:	f340 8159 	ble.w	8004aac <_svfprintf_r+0xb20>
 80047fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80047fc:	e884 0180 	stmia.w	r4, {r7, r8}
 8004800:	3310      	adds	r3, #16
 8004802:	9321      	str	r3, [sp, #132]	; 0x84
 8004804:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004806:	3301      	adds	r3, #1
 8004808:	2b07      	cmp	r3, #7
 800480a:	9320      	str	r3, [sp, #128]	; 0x80
 800480c:	dc08      	bgt.n	8004820 <_svfprintf_r+0x894>
 800480e:	3408      	adds	r4, #8
 8004810:	e00f      	b.n	8004832 <_svfprintf_r+0x8a6>
 8004812:	bf00      	nop
 8004814:	08008ad8 	.word	0x08008ad8
 8004818:	08008a94 	.word	0x08008a94
 800481c:	08008ad6 	.word	0x08008ad6
 8004820:	aa1f      	add	r2, sp, #124	; 0x7c
 8004822:	4659      	mov	r1, fp
 8004824:	4648      	mov	r0, r9
 8004826:	f003 fad0 	bl	8007dca <__ssprint_r>
 800482a:	2800      	cmp	r0, #0
 800482c:	f040 8224 	bne.w	8004c78 <_svfprintf_r+0xcec>
 8004830:	ac2c      	add	r4, sp, #176	; 0xb0
 8004832:	3e10      	subs	r6, #16
 8004834:	e7de      	b.n	80047f4 <_svfprintf_r+0x868>
 8004836:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004838:	2b00      	cmp	r3, #0
 800483a:	dc7c      	bgt.n	8004936 <_svfprintf_r+0x9aa>
 800483c:	4b9f      	ldr	r3, [pc, #636]	; (8004abc <_svfprintf_r+0xb30>)
 800483e:	6023      	str	r3, [r4, #0]
 8004840:	2301      	movs	r3, #1
 8004842:	6063      	str	r3, [r4, #4]
 8004844:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004846:	3301      	adds	r3, #1
 8004848:	9321      	str	r3, [sp, #132]	; 0x84
 800484a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800484c:	3301      	adds	r3, #1
 800484e:	2b07      	cmp	r3, #7
 8004850:	9320      	str	r3, [sp, #128]	; 0x80
 8004852:	dc01      	bgt.n	8004858 <_svfprintf_r+0x8cc>
 8004854:	3408      	adds	r4, #8
 8004856:	e008      	b.n	800486a <_svfprintf_r+0x8de>
 8004858:	aa1f      	add	r2, sp, #124	; 0x7c
 800485a:	4659      	mov	r1, fp
 800485c:	4648      	mov	r0, r9
 800485e:	f003 fab4 	bl	8007dca <__ssprint_r>
 8004862:	2800      	cmp	r0, #0
 8004864:	f040 8208 	bne.w	8004c78 <_svfprintf_r+0xcec>
 8004868:	ac2c      	add	r4, sp, #176	; 0xb0
 800486a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800486c:	b923      	cbnz	r3, 8004878 <_svfprintf_r+0x8ec>
 800486e:	9b08      	ldr	r3, [sp, #32]
 8004870:	b913      	cbnz	r3, 8004878 <_svfprintf_r+0x8ec>
 8004872:	07e8      	lsls	r0, r5, #31
 8004874:	f140 81b0 	bpl.w	8004bd8 <_svfprintf_r+0xc4c>
 8004878:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800487a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800487c:	6023      	str	r3, [r4, #0]
 800487e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004880:	6063      	str	r3, [r4, #4]
 8004882:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004884:	4413      	add	r3, r2
 8004886:	9321      	str	r3, [sp, #132]	; 0x84
 8004888:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800488a:	3301      	adds	r3, #1
 800488c:	2b07      	cmp	r3, #7
 800488e:	9320      	str	r3, [sp, #128]	; 0x80
 8004890:	dc02      	bgt.n	8004898 <_svfprintf_r+0x90c>
 8004892:	f104 0308 	add.w	r3, r4, #8
 8004896:	e008      	b.n	80048aa <_svfprintf_r+0x91e>
 8004898:	aa1f      	add	r2, sp, #124	; 0x7c
 800489a:	4659      	mov	r1, fp
 800489c:	4648      	mov	r0, r9
 800489e:	f003 fa94 	bl	8007dca <__ssprint_r>
 80048a2:	2800      	cmp	r0, #0
 80048a4:	f040 81e8 	bne.w	8004c78 <_svfprintf_r+0xcec>
 80048a8:	ab2c      	add	r3, sp, #176	; 0xb0
 80048aa:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80048ac:	4276      	negs	r6, r6
 80048ae:	2e00      	cmp	r6, #0
 80048b0:	dd30      	ble.n	8004914 <_svfprintf_r+0x988>
 80048b2:	4f83      	ldr	r7, [pc, #524]	; (8004ac0 <_svfprintf_r+0xb34>)
 80048b4:	2410      	movs	r4, #16
 80048b6:	2e10      	cmp	r6, #16
 80048b8:	dd16      	ble.n	80048e8 <_svfprintf_r+0x95c>
 80048ba:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80048bc:	601f      	str	r7, [r3, #0]
 80048be:	3210      	adds	r2, #16
 80048c0:	9221      	str	r2, [sp, #132]	; 0x84
 80048c2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80048c4:	605c      	str	r4, [r3, #4]
 80048c6:	3201      	adds	r2, #1
 80048c8:	2a07      	cmp	r2, #7
 80048ca:	9220      	str	r2, [sp, #128]	; 0x80
 80048cc:	dc01      	bgt.n	80048d2 <_svfprintf_r+0x946>
 80048ce:	3308      	adds	r3, #8
 80048d0:	e008      	b.n	80048e4 <_svfprintf_r+0x958>
 80048d2:	aa1f      	add	r2, sp, #124	; 0x7c
 80048d4:	4659      	mov	r1, fp
 80048d6:	4648      	mov	r0, r9
 80048d8:	f003 fa77 	bl	8007dca <__ssprint_r>
 80048dc:	2800      	cmp	r0, #0
 80048de:	f040 81cb 	bne.w	8004c78 <_svfprintf_r+0xcec>
 80048e2:	ab2c      	add	r3, sp, #176	; 0xb0
 80048e4:	3e10      	subs	r6, #16
 80048e6:	e7e6      	b.n	80048b6 <_svfprintf_r+0x92a>
 80048e8:	4a75      	ldr	r2, [pc, #468]	; (8004ac0 <_svfprintf_r+0xb34>)
 80048ea:	e883 0044 	stmia.w	r3, {r2, r6}
 80048ee:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80048f0:	4416      	add	r6, r2
 80048f2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80048f4:	9621      	str	r6, [sp, #132]	; 0x84
 80048f6:	3201      	adds	r2, #1
 80048f8:	2a07      	cmp	r2, #7
 80048fa:	9220      	str	r2, [sp, #128]	; 0x80
 80048fc:	dc01      	bgt.n	8004902 <_svfprintf_r+0x976>
 80048fe:	3308      	adds	r3, #8
 8004900:	e008      	b.n	8004914 <_svfprintf_r+0x988>
 8004902:	aa1f      	add	r2, sp, #124	; 0x7c
 8004904:	4659      	mov	r1, fp
 8004906:	4648      	mov	r0, r9
 8004908:	f003 fa5f 	bl	8007dca <__ssprint_r>
 800490c:	2800      	cmp	r0, #0
 800490e:	f040 81b3 	bne.w	8004c78 <_svfprintf_r+0xcec>
 8004912:	ab2c      	add	r3, sp, #176	; 0xb0
 8004914:	9a08      	ldr	r2, [sp, #32]
 8004916:	9908      	ldr	r1, [sp, #32]
 8004918:	605a      	str	r2, [r3, #4]
 800491a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800491c:	f8c3 8000 	str.w	r8, [r3]
 8004920:	440a      	add	r2, r1
 8004922:	9221      	str	r2, [sp, #132]	; 0x84
 8004924:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004926:	3201      	adds	r2, #1
 8004928:	2a07      	cmp	r2, #7
 800492a:	9220      	str	r2, [sp, #128]	; 0x80
 800492c:	f73f af0e 	bgt.w	800474c <_svfprintf_r+0x7c0>
 8004930:	f103 0408 	add.w	r4, r3, #8
 8004934:	e150      	b.n	8004bd8 <_svfprintf_r+0xc4c>
 8004936:	9b08      	ldr	r3, [sp, #32]
 8004938:	42bb      	cmp	r3, r7
 800493a:	bfa8      	it	ge
 800493c:	463b      	movge	r3, r7
 800493e:	2b00      	cmp	r3, #0
 8004940:	461e      	mov	r6, r3
 8004942:	dd15      	ble.n	8004970 <_svfprintf_r+0x9e4>
 8004944:	6063      	str	r3, [r4, #4]
 8004946:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004948:	f8c4 8000 	str.w	r8, [r4]
 800494c:	4433      	add	r3, r6
 800494e:	9321      	str	r3, [sp, #132]	; 0x84
 8004950:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004952:	3301      	adds	r3, #1
 8004954:	2b07      	cmp	r3, #7
 8004956:	9320      	str	r3, [sp, #128]	; 0x80
 8004958:	dc01      	bgt.n	800495e <_svfprintf_r+0x9d2>
 800495a:	3408      	adds	r4, #8
 800495c:	e008      	b.n	8004970 <_svfprintf_r+0x9e4>
 800495e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004960:	4659      	mov	r1, fp
 8004962:	4648      	mov	r0, r9
 8004964:	f003 fa31 	bl	8007dca <__ssprint_r>
 8004968:	2800      	cmp	r0, #0
 800496a:	f040 8185 	bne.w	8004c78 <_svfprintf_r+0xcec>
 800496e:	ac2c      	add	r4, sp, #176	; 0xb0
 8004970:	2e00      	cmp	r6, #0
 8004972:	bfb4      	ite	lt
 8004974:	463e      	movlt	r6, r7
 8004976:	1bbe      	subge	r6, r7, r6
 8004978:	2e00      	cmp	r6, #0
 800497a:	dd30      	ble.n	80049de <_svfprintf_r+0xa52>
 800497c:	f04f 0a10 	mov.w	sl, #16
 8004980:	4b4f      	ldr	r3, [pc, #316]	; (8004ac0 <_svfprintf_r+0xb34>)
 8004982:	2e10      	cmp	r6, #16
 8004984:	6023      	str	r3, [r4, #0]
 8004986:	dd16      	ble.n	80049b6 <_svfprintf_r+0xa2a>
 8004988:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800498a:	f8c4 a004 	str.w	sl, [r4, #4]
 800498e:	3310      	adds	r3, #16
 8004990:	9321      	str	r3, [sp, #132]	; 0x84
 8004992:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004994:	3301      	adds	r3, #1
 8004996:	2b07      	cmp	r3, #7
 8004998:	9320      	str	r3, [sp, #128]	; 0x80
 800499a:	dc01      	bgt.n	80049a0 <_svfprintf_r+0xa14>
 800499c:	3408      	adds	r4, #8
 800499e:	e008      	b.n	80049b2 <_svfprintf_r+0xa26>
 80049a0:	aa1f      	add	r2, sp, #124	; 0x7c
 80049a2:	4659      	mov	r1, fp
 80049a4:	4648      	mov	r0, r9
 80049a6:	f003 fa10 	bl	8007dca <__ssprint_r>
 80049aa:	2800      	cmp	r0, #0
 80049ac:	f040 8164 	bne.w	8004c78 <_svfprintf_r+0xcec>
 80049b0:	ac2c      	add	r4, sp, #176	; 0xb0
 80049b2:	3e10      	subs	r6, #16
 80049b4:	e7e4      	b.n	8004980 <_svfprintf_r+0x9f4>
 80049b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80049b8:	6066      	str	r6, [r4, #4]
 80049ba:	441e      	add	r6, r3
 80049bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80049be:	9621      	str	r6, [sp, #132]	; 0x84
 80049c0:	3301      	adds	r3, #1
 80049c2:	2b07      	cmp	r3, #7
 80049c4:	9320      	str	r3, [sp, #128]	; 0x80
 80049c6:	dc01      	bgt.n	80049cc <_svfprintf_r+0xa40>
 80049c8:	3408      	adds	r4, #8
 80049ca:	e008      	b.n	80049de <_svfprintf_r+0xa52>
 80049cc:	aa1f      	add	r2, sp, #124	; 0x7c
 80049ce:	4659      	mov	r1, fp
 80049d0:	4648      	mov	r0, r9
 80049d2:	f003 f9fa 	bl	8007dca <__ssprint_r>
 80049d6:	2800      	cmp	r0, #0
 80049d8:	f040 814e 	bne.w	8004c78 <_svfprintf_r+0xcec>
 80049dc:	ac2c      	add	r4, sp, #176	; 0xb0
 80049de:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80049e0:	9a08      	ldr	r2, [sp, #32]
 80049e2:	4447      	add	r7, r8
 80049e4:	4293      	cmp	r3, r2
 80049e6:	db01      	blt.n	80049ec <_svfprintf_r+0xa60>
 80049e8:	07e9      	lsls	r1, r5, #31
 80049ea:	d517      	bpl.n	8004a1c <_svfprintf_r+0xa90>
 80049ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80049ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80049f0:	6023      	str	r3, [r4, #0]
 80049f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049f4:	6063      	str	r3, [r4, #4]
 80049f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80049f8:	4413      	add	r3, r2
 80049fa:	9321      	str	r3, [sp, #132]	; 0x84
 80049fc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80049fe:	3301      	adds	r3, #1
 8004a00:	2b07      	cmp	r3, #7
 8004a02:	9320      	str	r3, [sp, #128]	; 0x80
 8004a04:	dc01      	bgt.n	8004a0a <_svfprintf_r+0xa7e>
 8004a06:	3408      	adds	r4, #8
 8004a08:	e008      	b.n	8004a1c <_svfprintf_r+0xa90>
 8004a0a:	aa1f      	add	r2, sp, #124	; 0x7c
 8004a0c:	4659      	mov	r1, fp
 8004a0e:	4648      	mov	r0, r9
 8004a10:	f003 f9db 	bl	8007dca <__ssprint_r>
 8004a14:	2800      	cmp	r0, #0
 8004a16:	f040 812f 	bne.w	8004c78 <_svfprintf_r+0xcec>
 8004a1a:	ac2c      	add	r4, sp, #176	; 0xb0
 8004a1c:	9b08      	ldr	r3, [sp, #32]
 8004a1e:	9a08      	ldr	r2, [sp, #32]
 8004a20:	eb08 0603 	add.w	r6, r8, r3
 8004a24:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004a26:	1bf6      	subs	r6, r6, r7
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	429e      	cmp	r6, r3
 8004a2c:	bfa8      	it	ge
 8004a2e:	461e      	movge	r6, r3
 8004a30:	2e00      	cmp	r6, #0
 8004a32:	dd14      	ble.n	8004a5e <_svfprintf_r+0xad2>
 8004a34:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004a36:	6027      	str	r7, [r4, #0]
 8004a38:	4433      	add	r3, r6
 8004a3a:	9321      	str	r3, [sp, #132]	; 0x84
 8004a3c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004a3e:	6066      	str	r6, [r4, #4]
 8004a40:	3301      	adds	r3, #1
 8004a42:	2b07      	cmp	r3, #7
 8004a44:	9320      	str	r3, [sp, #128]	; 0x80
 8004a46:	dc01      	bgt.n	8004a4c <_svfprintf_r+0xac0>
 8004a48:	3408      	adds	r4, #8
 8004a4a:	e008      	b.n	8004a5e <_svfprintf_r+0xad2>
 8004a4c:	aa1f      	add	r2, sp, #124	; 0x7c
 8004a4e:	4659      	mov	r1, fp
 8004a50:	4648      	mov	r0, r9
 8004a52:	f003 f9ba 	bl	8007dca <__ssprint_r>
 8004a56:	2800      	cmp	r0, #0
 8004a58:	f040 810e 	bne.w	8004c78 <_svfprintf_r+0xcec>
 8004a5c:	ac2c      	add	r4, sp, #176	; 0xb0
 8004a5e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004a60:	9a08      	ldr	r2, [sp, #32]
 8004a62:	2e00      	cmp	r6, #0
 8004a64:	eba2 0303 	sub.w	r3, r2, r3
 8004a68:	bfb4      	ite	lt
 8004a6a:	461e      	movlt	r6, r3
 8004a6c:	1b9e      	subge	r6, r3, r6
 8004a6e:	2e00      	cmp	r6, #0
 8004a70:	f340 80b2 	ble.w	8004bd8 <_svfprintf_r+0xc4c>
 8004a74:	4f12      	ldr	r7, [pc, #72]	; (8004ac0 <_svfprintf_r+0xb34>)
 8004a76:	f04f 0810 	mov.w	r8, #16
 8004a7a:	2e10      	cmp	r6, #16
 8004a7c:	dd16      	ble.n	8004aac <_svfprintf_r+0xb20>
 8004a7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004a80:	e884 0180 	stmia.w	r4, {r7, r8}
 8004a84:	3310      	adds	r3, #16
 8004a86:	9321      	str	r3, [sp, #132]	; 0x84
 8004a88:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	2b07      	cmp	r3, #7
 8004a8e:	9320      	str	r3, [sp, #128]	; 0x80
 8004a90:	dc01      	bgt.n	8004a96 <_svfprintf_r+0xb0a>
 8004a92:	3408      	adds	r4, #8
 8004a94:	e008      	b.n	8004aa8 <_svfprintf_r+0xb1c>
 8004a96:	aa1f      	add	r2, sp, #124	; 0x7c
 8004a98:	4659      	mov	r1, fp
 8004a9a:	4648      	mov	r0, r9
 8004a9c:	f003 f995 	bl	8007dca <__ssprint_r>
 8004aa0:	2800      	cmp	r0, #0
 8004aa2:	f040 80e9 	bne.w	8004c78 <_svfprintf_r+0xcec>
 8004aa6:	ac2c      	add	r4, sp, #176	; 0xb0
 8004aa8:	3e10      	subs	r6, #16
 8004aaa:	e7e6      	b.n	8004a7a <_svfprintf_r+0xaee>
 8004aac:	4b04      	ldr	r3, [pc, #16]	; (8004ac0 <_svfprintf_r+0xb34>)
 8004aae:	e884 0048 	stmia.w	r4, {r3, r6}
 8004ab2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ab4:	441e      	add	r6, r3
 8004ab6:	9621      	str	r6, [sp, #132]	; 0x84
 8004ab8:	e642      	b.n	8004740 <_svfprintf_r+0x7b4>
 8004aba:	bf00      	nop
 8004abc:	08008ad6 	.word	0x08008ad6
 8004ac0:	08008a94 	.word	0x08008a94
 8004ac4:	9b08      	ldr	r3, [sp, #32]
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	dc01      	bgt.n	8004ace <_svfprintf_r+0xb42>
 8004aca:	07ea      	lsls	r2, r5, #31
 8004acc:	d573      	bpl.n	8004bb6 <_svfprintf_r+0xc2a>
 8004ace:	2301      	movs	r3, #1
 8004ad0:	6063      	str	r3, [r4, #4]
 8004ad2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ad4:	f8c4 8000 	str.w	r8, [r4]
 8004ad8:	3301      	adds	r3, #1
 8004ada:	9321      	str	r3, [sp, #132]	; 0x84
 8004adc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004ade:	3301      	adds	r3, #1
 8004ae0:	2b07      	cmp	r3, #7
 8004ae2:	9320      	str	r3, [sp, #128]	; 0x80
 8004ae4:	dc01      	bgt.n	8004aea <_svfprintf_r+0xb5e>
 8004ae6:	3408      	adds	r4, #8
 8004ae8:	e008      	b.n	8004afc <_svfprintf_r+0xb70>
 8004aea:	aa1f      	add	r2, sp, #124	; 0x7c
 8004aec:	4659      	mov	r1, fp
 8004aee:	4648      	mov	r0, r9
 8004af0:	f003 f96b 	bl	8007dca <__ssprint_r>
 8004af4:	2800      	cmp	r0, #0
 8004af6:	f040 80bf 	bne.w	8004c78 <_svfprintf_r+0xcec>
 8004afa:	ac2c      	add	r4, sp, #176	; 0xb0
 8004afc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004afe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b00:	6023      	str	r3, [r4, #0]
 8004b02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b04:	6063      	str	r3, [r4, #4]
 8004b06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b08:	4413      	add	r3, r2
 8004b0a:	9321      	str	r3, [sp, #132]	; 0x84
 8004b0c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004b0e:	3301      	adds	r3, #1
 8004b10:	2b07      	cmp	r3, #7
 8004b12:	9320      	str	r3, [sp, #128]	; 0x80
 8004b14:	dc01      	bgt.n	8004b1a <_svfprintf_r+0xb8e>
 8004b16:	3408      	adds	r4, #8
 8004b18:	e008      	b.n	8004b2c <_svfprintf_r+0xba0>
 8004b1a:	aa1f      	add	r2, sp, #124	; 0x7c
 8004b1c:	4659      	mov	r1, fp
 8004b1e:	4648      	mov	r0, r9
 8004b20:	f003 f953 	bl	8007dca <__ssprint_r>
 8004b24:	2800      	cmp	r0, #0
 8004b26:	f040 80a7 	bne.w	8004c78 <_svfprintf_r+0xcec>
 8004b2a:	ac2c      	add	r4, sp, #176	; 0xb0
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	2200      	movs	r2, #0
 8004b30:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004b32:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004b34:	f7fb ffa0 	bl	8000a78 <__aeabi_dcmpeq>
 8004b38:	9b08      	ldr	r3, [sp, #32]
 8004b3a:	1e5e      	subs	r6, r3, #1
 8004b3c:	b9b8      	cbnz	r0, 8004b6e <_svfprintf_r+0xbe2>
 8004b3e:	f108 0301 	add.w	r3, r8, #1
 8004b42:	e884 0048 	stmia.w	r4, {r3, r6}
 8004b46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b48:	9a08      	ldr	r2, [sp, #32]
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	4413      	add	r3, r2
 8004b4e:	9321      	str	r3, [sp, #132]	; 0x84
 8004b50:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004b52:	3301      	adds	r3, #1
 8004b54:	2b07      	cmp	r3, #7
 8004b56:	9320      	str	r3, [sp, #128]	; 0x80
 8004b58:	dd34      	ble.n	8004bc4 <_svfprintf_r+0xc38>
 8004b5a:	aa1f      	add	r2, sp, #124	; 0x7c
 8004b5c:	4659      	mov	r1, fp
 8004b5e:	4648      	mov	r0, r9
 8004b60:	f003 f933 	bl	8007dca <__ssprint_r>
 8004b64:	2800      	cmp	r0, #0
 8004b66:	f040 8087 	bne.w	8004c78 <_svfprintf_r+0xcec>
 8004b6a:	ac2c      	add	r4, sp, #176	; 0xb0
 8004b6c:	e02b      	b.n	8004bc6 <_svfprintf_r+0xc3a>
 8004b6e:	2e00      	cmp	r6, #0
 8004b70:	dd29      	ble.n	8004bc6 <_svfprintf_r+0xc3a>
 8004b72:	4f8f      	ldr	r7, [pc, #572]	; (8004db0 <_svfprintf_r+0xe24>)
 8004b74:	f04f 0810 	mov.w	r8, #16
 8004b78:	2e10      	cmp	r6, #16
 8004b7a:	dd15      	ble.n	8004ba8 <_svfprintf_r+0xc1c>
 8004b7c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b7e:	e884 0180 	stmia.w	r4, {r7, r8}
 8004b82:	3310      	adds	r3, #16
 8004b84:	9321      	str	r3, [sp, #132]	; 0x84
 8004b86:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004b88:	3301      	adds	r3, #1
 8004b8a:	2b07      	cmp	r3, #7
 8004b8c:	9320      	str	r3, [sp, #128]	; 0x80
 8004b8e:	dc01      	bgt.n	8004b94 <_svfprintf_r+0xc08>
 8004b90:	3408      	adds	r4, #8
 8004b92:	e007      	b.n	8004ba4 <_svfprintf_r+0xc18>
 8004b94:	aa1f      	add	r2, sp, #124	; 0x7c
 8004b96:	4659      	mov	r1, fp
 8004b98:	4648      	mov	r0, r9
 8004b9a:	f003 f916 	bl	8007dca <__ssprint_r>
 8004b9e:	2800      	cmp	r0, #0
 8004ba0:	d16a      	bne.n	8004c78 <_svfprintf_r+0xcec>
 8004ba2:	ac2c      	add	r4, sp, #176	; 0xb0
 8004ba4:	3e10      	subs	r6, #16
 8004ba6:	e7e7      	b.n	8004b78 <_svfprintf_r+0xbec>
 8004ba8:	4b81      	ldr	r3, [pc, #516]	; (8004db0 <_svfprintf_r+0xe24>)
 8004baa:	e884 0048 	stmia.w	r4, {r3, r6}
 8004bae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004bb0:	441e      	add	r6, r3
 8004bb2:	9621      	str	r6, [sp, #132]	; 0x84
 8004bb4:	e7cc      	b.n	8004b50 <_svfprintf_r+0xbc4>
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	6063      	str	r3, [r4, #4]
 8004bba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004bbc:	f8c4 8000 	str.w	r8, [r4]
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	e7c4      	b.n	8004b4e <_svfprintf_r+0xbc2>
 8004bc4:	3408      	adds	r4, #8
 8004bc6:	ab1b      	add	r3, sp, #108	; 0x6c
 8004bc8:	6023      	str	r3, [r4, #0]
 8004bca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004bcc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004bce:	6063      	str	r3, [r4, #4]
 8004bd0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004bd2:	4413      	add	r3, r2
 8004bd4:	e5b3      	b.n	800473e <_svfprintf_r+0x7b2>
 8004bd6:	3408      	adds	r4, #8
 8004bd8:	076b      	lsls	r3, r5, #29
 8004bda:	d40b      	bmi.n	8004bf4 <_svfprintf_r+0xc68>
 8004bdc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004bde:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004be0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004be2:	428a      	cmp	r2, r1
 8004be4:	bfac      	ite	ge
 8004be6:	189b      	addge	r3, r3, r2
 8004be8:	185b      	addlt	r3, r3, r1
 8004bea:	930e      	str	r3, [sp, #56]	; 0x38
 8004bec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d035      	beq.n	8004c5e <_svfprintf_r+0xcd2>
 8004bf2:	e02e      	b.n	8004c52 <_svfprintf_r+0xcc6>
 8004bf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004bf6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004bf8:	1a9d      	subs	r5, r3, r2
 8004bfa:	2d00      	cmp	r5, #0
 8004bfc:	ddee      	ble.n	8004bdc <_svfprintf_r+0xc50>
 8004bfe:	2610      	movs	r6, #16
 8004c00:	4b6c      	ldr	r3, [pc, #432]	; (8004db4 <_svfprintf_r+0xe28>)
 8004c02:	2d10      	cmp	r5, #16
 8004c04:	6023      	str	r3, [r4, #0]
 8004c06:	dd13      	ble.n	8004c30 <_svfprintf_r+0xca4>
 8004c08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004c0a:	6066      	str	r6, [r4, #4]
 8004c0c:	3310      	adds	r3, #16
 8004c0e:	9321      	str	r3, [sp, #132]	; 0x84
 8004c10:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004c12:	3301      	adds	r3, #1
 8004c14:	2b07      	cmp	r3, #7
 8004c16:	9320      	str	r3, [sp, #128]	; 0x80
 8004c18:	dc01      	bgt.n	8004c1e <_svfprintf_r+0xc92>
 8004c1a:	3408      	adds	r4, #8
 8004c1c:	e006      	b.n	8004c2c <_svfprintf_r+0xca0>
 8004c1e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004c20:	4659      	mov	r1, fp
 8004c22:	4648      	mov	r0, r9
 8004c24:	f003 f8d1 	bl	8007dca <__ssprint_r>
 8004c28:	bb30      	cbnz	r0, 8004c78 <_svfprintf_r+0xcec>
 8004c2a:	ac2c      	add	r4, sp, #176	; 0xb0
 8004c2c:	3d10      	subs	r5, #16
 8004c2e:	e7e7      	b.n	8004c00 <_svfprintf_r+0xc74>
 8004c30:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004c32:	6065      	str	r5, [r4, #4]
 8004c34:	441d      	add	r5, r3
 8004c36:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004c38:	9521      	str	r5, [sp, #132]	; 0x84
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	2b07      	cmp	r3, #7
 8004c3e:	9320      	str	r3, [sp, #128]	; 0x80
 8004c40:	ddcc      	ble.n	8004bdc <_svfprintf_r+0xc50>
 8004c42:	aa1f      	add	r2, sp, #124	; 0x7c
 8004c44:	4659      	mov	r1, fp
 8004c46:	4648      	mov	r0, r9
 8004c48:	f003 f8bf 	bl	8007dca <__ssprint_r>
 8004c4c:	2800      	cmp	r0, #0
 8004c4e:	d0c5      	beq.n	8004bdc <_svfprintf_r+0xc50>
 8004c50:	e012      	b.n	8004c78 <_svfprintf_r+0xcec>
 8004c52:	aa1f      	add	r2, sp, #124	; 0x7c
 8004c54:	4659      	mov	r1, fp
 8004c56:	4648      	mov	r0, r9
 8004c58:	f003 f8b7 	bl	8007dca <__ssprint_r>
 8004c5c:	b960      	cbnz	r0, 8004c78 <_svfprintf_r+0xcec>
 8004c5e:	2300      	movs	r3, #0
 8004c60:	9320      	str	r3, [sp, #128]	; 0x80
 8004c62:	9f07      	ldr	r7, [sp, #28]
 8004c64:	ac2c      	add	r4, sp, #176	; 0xb0
 8004c66:	f7ff b9c5 	b.w	8003ff4 <_svfprintf_r+0x68>
 8004c6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004c6c:	b123      	cbz	r3, 8004c78 <_svfprintf_r+0xcec>
 8004c6e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004c70:	4659      	mov	r1, fp
 8004c72:	4648      	mov	r0, r9
 8004c74:	f003 f8a9 	bl	8007dca <__ssprint_r>
 8004c78:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8004c7c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004c80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c82:	bf18      	it	ne
 8004c84:	f04f 33ff 	movne.w	r3, #4294967295
 8004c88:	4618      	mov	r0, r3
 8004c8a:	e130      	b.n	8004eee <_svfprintf_r+0xf62>
 8004c8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004c8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c90:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004c92:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004c94:	f7fb ff22 	bl	8000adc <__aeabi_dcmpun>
 8004c98:	b160      	cbz	r0, 8004cb4 <_svfprintf_r+0xd28>
 8004c9a:	4b47      	ldr	r3, [pc, #284]	; (8004db8 <_svfprintf_r+0xe2c>)
 8004c9c:	4a47      	ldr	r2, [pc, #284]	; (8004dbc <_svfprintf_r+0xe30>)
 8004c9e:	9906      	ldr	r1, [sp, #24]
 8004ca0:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8004ca4:	2947      	cmp	r1, #71	; 0x47
 8004ca6:	bfcc      	ite	gt
 8004ca8:	4690      	movgt	r8, r2
 8004caa:	4698      	movle	r8, r3
 8004cac:	f04f 0a03 	mov.w	sl, #3
 8004cb0:	2600      	movs	r6, #0
 8004cb2:	e449      	b.n	8004548 <_svfprintf_r+0x5bc>
 8004cb4:	f1ba 3fff 	cmp.w	sl, #4294967295
 8004cb8:	d00a      	beq.n	8004cd0 <_svfprintf_r+0xd44>
 8004cba:	9b06      	ldr	r3, [sp, #24]
 8004cbc:	f023 0320 	bic.w	r3, r3, #32
 8004cc0:	2b47      	cmp	r3, #71	; 0x47
 8004cc2:	d107      	bne.n	8004cd4 <_svfprintf_r+0xd48>
 8004cc4:	f1ba 0f00 	cmp.w	sl, #0
 8004cc8:	bf08      	it	eq
 8004cca:	f04f 0a01 	moveq.w	sl, #1
 8004cce:	e001      	b.n	8004cd4 <_svfprintf_r+0xd48>
 8004cd0:	f04f 0a06 	mov.w	sl, #6
 8004cd4:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8004cd8:	9315      	str	r3, [sp, #84]	; 0x54
 8004cda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004cdc:	1e1f      	subs	r7, r3, #0
 8004cde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004ce0:	bfa8      	it	ge
 8004ce2:	9710      	strge	r7, [sp, #64]	; 0x40
 8004ce4:	930f      	str	r3, [sp, #60]	; 0x3c
 8004ce6:	bfbd      	ittte	lt
 8004ce8:	463b      	movlt	r3, r7
 8004cea:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004cee:	9310      	strlt	r3, [sp, #64]	; 0x40
 8004cf0:	2300      	movge	r3, #0
 8004cf2:	bfb8      	it	lt
 8004cf4:	232d      	movlt	r3, #45	; 0x2d
 8004cf6:	9314      	str	r3, [sp, #80]	; 0x50
 8004cf8:	9b06      	ldr	r3, [sp, #24]
 8004cfa:	f023 0720 	bic.w	r7, r3, #32
 8004cfe:	2f46      	cmp	r7, #70	; 0x46
 8004d00:	d004      	beq.n	8004d0c <_svfprintf_r+0xd80>
 8004d02:	2f45      	cmp	r7, #69	; 0x45
 8004d04:	d105      	bne.n	8004d12 <_svfprintf_r+0xd86>
 8004d06:	f10a 0601 	add.w	r6, sl, #1
 8004d0a:	e003      	b.n	8004d14 <_svfprintf_r+0xd88>
 8004d0c:	4656      	mov	r6, sl
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e001      	b.n	8004d16 <_svfprintf_r+0xd8a>
 8004d12:	4656      	mov	r6, sl
 8004d14:	2302      	movs	r3, #2
 8004d16:	aa1d      	add	r2, sp, #116	; 0x74
 8004d18:	9204      	str	r2, [sp, #16]
 8004d1a:	aa1a      	add	r2, sp, #104	; 0x68
 8004d1c:	9203      	str	r2, [sp, #12]
 8004d1e:	aa19      	add	r2, sp, #100	; 0x64
 8004d20:	9202      	str	r2, [sp, #8]
 8004d22:	e88d 0048 	stmia.w	sp, {r3, r6}
 8004d26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004d28:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004d2a:	4648      	mov	r0, r9
 8004d2c:	f001 fa04 	bl	8006138 <_dtoa_r>
 8004d30:	2f47      	cmp	r7, #71	; 0x47
 8004d32:	4680      	mov	r8, r0
 8004d34:	d102      	bne.n	8004d3c <_svfprintf_r+0xdb0>
 8004d36:	07eb      	lsls	r3, r5, #31
 8004d38:	f140 80cf 	bpl.w	8004eda <_svfprintf_r+0xf4e>
 8004d3c:	eb08 0306 	add.w	r3, r8, r6
 8004d40:	2f46      	cmp	r7, #70	; 0x46
 8004d42:	9308      	str	r3, [sp, #32]
 8004d44:	d111      	bne.n	8004d6a <_svfprintf_r+0xdde>
 8004d46:	f898 3000 	ldrb.w	r3, [r8]
 8004d4a:	2b30      	cmp	r3, #48	; 0x30
 8004d4c:	d109      	bne.n	8004d62 <_svfprintf_r+0xdd6>
 8004d4e:	2200      	movs	r2, #0
 8004d50:	2300      	movs	r3, #0
 8004d52:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004d54:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004d56:	f7fb fe8f 	bl	8000a78 <__aeabi_dcmpeq>
 8004d5a:	b910      	cbnz	r0, 8004d62 <_svfprintf_r+0xdd6>
 8004d5c:	f1c6 0601 	rsb	r6, r6, #1
 8004d60:	9619      	str	r6, [sp, #100]	; 0x64
 8004d62:	9a08      	ldr	r2, [sp, #32]
 8004d64:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004d66:	441a      	add	r2, r3
 8004d68:	9208      	str	r2, [sp, #32]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004d70:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004d72:	f7fb fe81 	bl	8000a78 <__aeabi_dcmpeq>
 8004d76:	b908      	cbnz	r0, 8004d7c <_svfprintf_r+0xdf0>
 8004d78:	2230      	movs	r2, #48	; 0x30
 8004d7a:	e002      	b.n	8004d82 <_svfprintf_r+0xdf6>
 8004d7c:	9b08      	ldr	r3, [sp, #32]
 8004d7e:	931d      	str	r3, [sp, #116]	; 0x74
 8004d80:	e007      	b.n	8004d92 <_svfprintf_r+0xe06>
 8004d82:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004d84:	9908      	ldr	r1, [sp, #32]
 8004d86:	4299      	cmp	r1, r3
 8004d88:	d903      	bls.n	8004d92 <_svfprintf_r+0xe06>
 8004d8a:	1c59      	adds	r1, r3, #1
 8004d8c:	911d      	str	r1, [sp, #116]	; 0x74
 8004d8e:	701a      	strb	r2, [r3, #0]
 8004d90:	e7f7      	b.n	8004d82 <_svfprintf_r+0xdf6>
 8004d92:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004d94:	2f47      	cmp	r7, #71	; 0x47
 8004d96:	ebc8 0303 	rsb	r3, r8, r3
 8004d9a:	9308      	str	r3, [sp, #32]
 8004d9c:	d110      	bne.n	8004dc0 <_svfprintf_r+0xe34>
 8004d9e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004da0:	1cdf      	adds	r7, r3, #3
 8004da2:	db01      	blt.n	8004da8 <_svfprintf_r+0xe1c>
 8004da4:	459a      	cmp	sl, r3
 8004da6:	da6a      	bge.n	8004e7e <_svfprintf_r+0xef2>
 8004da8:	9b06      	ldr	r3, [sp, #24]
 8004daa:	3b02      	subs	r3, #2
 8004dac:	9306      	str	r3, [sp, #24]
 8004dae:	e00a      	b.n	8004dc6 <_svfprintf_r+0xe3a>
 8004db0:	08008a94 	.word	0x08008a94
 8004db4:	08008ad8 	.word	0x08008ad8
 8004db8:	08008aac 	.word	0x08008aac
 8004dbc:	08008ab0 	.word	0x08008ab0
 8004dc0:	9b06      	ldr	r3, [sp, #24]
 8004dc2:	2b65      	cmp	r3, #101	; 0x65
 8004dc4:	dc44      	bgt.n	8004e50 <_svfprintf_r+0xec4>
 8004dc6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004dc8:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	9319      	str	r3, [sp, #100]	; 0x64
 8004dd2:	bfb8      	it	lt
 8004dd4:	425b      	neglt	r3, r3
 8004dd6:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
 8004dda:	bfb4      	ite	lt
 8004ddc:	222d      	movlt	r2, #45	; 0x2d
 8004dde:	222b      	movge	r2, #43	; 0x2b
 8004de0:	2b09      	cmp	r3, #9
 8004de2:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8004de6:	dd1d      	ble.n	8004e24 <_svfprintf_r+0xe98>
 8004de8:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8004dec:	200a      	movs	r0, #10
 8004dee:	fb93 f1f0 	sdiv	r1, r3, r0
 8004df2:	fb00 3311 	mls	r3, r0, r1, r3
 8004df6:	2909      	cmp	r1, #9
 8004df8:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8004dfc:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8004e00:	460b      	mov	r3, r1
 8004e02:	dcf4      	bgt.n	8004dee <_svfprintf_r+0xe62>
 8004e04:	3330      	adds	r3, #48	; 0x30
 8004e06:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004e0a:	1e51      	subs	r1, r2, #1
 8004e0c:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 8004e10:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 8004e14:	4281      	cmp	r1, r0
 8004e16:	461a      	mov	r2, r3
 8004e18:	d20b      	bcs.n	8004e32 <_svfprintf_r+0xea6>
 8004e1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e1e:	f803 2b01 	strb.w	r2, [r3], #1
 8004e22:	e7f7      	b.n	8004e14 <_svfprintf_r+0xe88>
 8004e24:	2230      	movs	r2, #48	; 0x30
 8004e26:	4413      	add	r3, r2
 8004e28:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8004e2c:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8004e30:	aa1c      	add	r2, sp, #112	; 0x70
 8004e32:	ab1b      	add	r3, sp, #108	; 0x6c
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	9a08      	ldr	r2, [sp, #32]
 8004e38:	9312      	str	r3, [sp, #72]	; 0x48
 8004e3a:	2a01      	cmp	r2, #1
 8004e3c:	eb03 0a02 	add.w	sl, r3, r2
 8004e40:	dc02      	bgt.n	8004e48 <_svfprintf_r+0xebc>
 8004e42:	f015 0701 	ands.w	r7, r5, #1
 8004e46:	d032      	beq.n	8004eae <_svfprintf_r+0xf22>
 8004e48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e4a:	2700      	movs	r7, #0
 8004e4c:	449a      	add	sl, r3
 8004e4e:	e02e      	b.n	8004eae <_svfprintf_r+0xf22>
 8004e50:	9b06      	ldr	r3, [sp, #24]
 8004e52:	2b66      	cmp	r3, #102	; 0x66
 8004e54:	d113      	bne.n	8004e7e <_svfprintf_r+0xef2>
 8004e56:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	dd07      	ble.n	8004e6c <_svfprintf_r+0xee0>
 8004e5c:	f1ba 0f00 	cmp.w	sl, #0
 8004e60:	d101      	bne.n	8004e66 <_svfprintf_r+0xeda>
 8004e62:	07ee      	lsls	r6, r5, #31
 8004e64:	d521      	bpl.n	8004eaa <_svfprintf_r+0xf1e>
 8004e66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e68:	4413      	add	r3, r2
 8004e6a:	e006      	b.n	8004e7a <_svfprintf_r+0xeee>
 8004e6c:	f1ba 0f00 	cmp.w	sl, #0
 8004e70:	d101      	bne.n	8004e76 <_svfprintf_r+0xeea>
 8004e72:	07ed      	lsls	r5, r5, #31
 8004e74:	d514      	bpl.n	8004ea0 <_svfprintf_r+0xf14>
 8004e76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e78:	3301      	adds	r3, #1
 8004e7a:	4453      	add	r3, sl
 8004e7c:	e015      	b.n	8004eaa <_svfprintf_r+0xf1e>
 8004e7e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004e80:	9a08      	ldr	r2, [sp, #32]
 8004e82:	4293      	cmp	r3, r2
 8004e84:	db03      	blt.n	8004e8e <_svfprintf_r+0xf02>
 8004e86:	07e8      	lsls	r0, r5, #31
 8004e88:	d50d      	bpl.n	8004ea6 <_svfprintf_r+0xf1a>
 8004e8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e8c:	e006      	b.n	8004e9c <_svfprintf_r+0xf10>
 8004e8e:	9a08      	ldr	r2, [sp, #32]
 8004e90:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	440a      	add	r2, r1
 8004e96:	dc05      	bgt.n	8004ea4 <_svfprintf_r+0xf18>
 8004e98:	f1c3 0301 	rsb	r3, r3, #1
 8004e9c:	4413      	add	r3, r2
 8004e9e:	e002      	b.n	8004ea6 <_svfprintf_r+0xf1a>
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e002      	b.n	8004eaa <_svfprintf_r+0xf1e>
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	2267      	movs	r2, #103	; 0x67
 8004ea8:	9206      	str	r2, [sp, #24]
 8004eaa:	469a      	mov	sl, r3
 8004eac:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8004eae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004eb0:	b113      	cbz	r3, 8004eb8 <_svfprintf_r+0xf2c>
 8004eb2:	232d      	movs	r3, #45	; 0x2d
 8004eb4:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8004eb8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8004eba:	2600      	movs	r6, #0
 8004ebc:	f7ff bb45 	b.w	800454a <_svfprintf_r+0x5be>
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004ec6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004ec8:	f7fb fde0 	bl	8000a8c <__aeabi_dcmplt>
 8004ecc:	b110      	cbz	r0, 8004ed4 <_svfprintf_r+0xf48>
 8004ece:	232d      	movs	r3, #45	; 0x2d
 8004ed0:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8004ed4:	4b07      	ldr	r3, [pc, #28]	; (8004ef4 <_svfprintf_r+0xf68>)
 8004ed6:	4a08      	ldr	r2, [pc, #32]	; (8004ef8 <_svfprintf_r+0xf6c>)
 8004ed8:	e6e1      	b.n	8004c9e <_svfprintf_r+0xd12>
 8004eda:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004edc:	1a1b      	subs	r3, r3, r0
 8004ede:	9308      	str	r3, [sp, #32]
 8004ee0:	e75d      	b.n	8004d9e <_svfprintf_r+0xe12>
 8004ee2:	ea56 0207 	orrs.w	r2, r6, r7
 8004ee6:	f47f aaa9 	bne.w	800443c <_svfprintf_r+0x4b0>
 8004eea:	f7ff baae 	b.w	800444a <_svfprintf_r+0x4be>
 8004eee:	b03d      	add	sp, #244	; 0xf4
 8004ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ef4:	08008aa4 	.word	0x08008aa4
 8004ef8:	08008aa8 	.word	0x08008aa8

08004efc <_vfprintf_r>:
 8004efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f00:	b0bd      	sub	sp, #244	; 0xf4
 8004f02:	468b      	mov	fp, r1
 8004f04:	9209      	str	r2, [sp, #36]	; 0x24
 8004f06:	461c      	mov	r4, r3
 8004f08:	461f      	mov	r7, r3
 8004f0a:	4681      	mov	r9, r0
 8004f0c:	f002 f954 	bl	80071b8 <_localeconv_r>
 8004f10:	6803      	ldr	r3, [r0, #0]
 8004f12:	4618      	mov	r0, r3
 8004f14:	9311      	str	r3, [sp, #68]	; 0x44
 8004f16:	f7fb f987 	bl	8000228 <strlen>
 8004f1a:	900a      	str	r0, [sp, #40]	; 0x28
 8004f1c:	f1b9 0f00 	cmp.w	r9, #0
 8004f20:	d005      	beq.n	8004f2e <_vfprintf_r+0x32>
 8004f22:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8004f26:	b913      	cbnz	r3, 8004f2e <_vfprintf_r+0x32>
 8004f28:	4648      	mov	r0, r9
 8004f2a:	f001 ff97 	bl	8006e5c <__sinit>
 8004f2e:	4b96      	ldr	r3, [pc, #600]	; (8005188 <_vfprintf_r+0x28c>)
 8004f30:	459b      	cmp	fp, r3
 8004f32:	d102      	bne.n	8004f3a <_vfprintf_r+0x3e>
 8004f34:	f8d9 b004 	ldr.w	fp, [r9, #4]
 8004f38:	e00a      	b.n	8004f50 <_vfprintf_r+0x54>
 8004f3a:	4b94      	ldr	r3, [pc, #592]	; (800518c <_vfprintf_r+0x290>)
 8004f3c:	459b      	cmp	fp, r3
 8004f3e:	d102      	bne.n	8004f46 <_vfprintf_r+0x4a>
 8004f40:	f8d9 b008 	ldr.w	fp, [r9, #8]
 8004f44:	e004      	b.n	8004f50 <_vfprintf_r+0x54>
 8004f46:	4b92      	ldr	r3, [pc, #584]	; (8005190 <_vfprintf_r+0x294>)
 8004f48:	459b      	cmp	fp, r3
 8004f4a:	bf08      	it	eq
 8004f4c:	f8d9 b00c 	ldreq.w	fp, [r9, #12]
 8004f50:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 8004f54:	0498      	lsls	r0, r3, #18
 8004f56:	d409      	bmi.n	8004f6c <_vfprintf_r+0x70>
 8004f58:	f8db 2064 	ldr.w	r2, [fp, #100]	; 0x64
 8004f5c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004f60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f64:	f8ab 300c 	strh.w	r3, [fp, #12]
 8004f68:	f8cb 2064 	str.w	r2, [fp, #100]	; 0x64
 8004f6c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8004f70:	0719      	lsls	r1, r3, #28
 8004f72:	d509      	bpl.n	8004f88 <_vfprintf_r+0x8c>
 8004f74:	f8db 3010 	ldr.w	r3, [fp, #16]
 8004f78:	b133      	cbz	r3, 8004f88 <_vfprintf_r+0x8c>
 8004f7a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8004f7e:	f003 031a 	and.w	r3, r3, #26
 8004f82:	2b0a      	cmp	r3, #10
 8004f84:	d116      	bne.n	8004fb4 <_vfprintf_r+0xb8>
 8004f86:	e009      	b.n	8004f9c <_vfprintf_r+0xa0>
 8004f88:	4659      	mov	r1, fp
 8004f8a:	4648      	mov	r0, r9
 8004f8c:	f000 ffda 	bl	8005f44 <__swsetup_r>
 8004f90:	2800      	cmp	r0, #0
 8004f92:	d0f2      	beq.n	8004f7a <_vfprintf_r+0x7e>
 8004f94:	f04f 30ff 	mov.w	r0, #4294967295
 8004f98:	f000 bf97 	b.w	8005eca <_vfprintf_r+0xfce>
 8004f9c:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	db07      	blt.n	8004fb4 <_vfprintf_r+0xb8>
 8004fa4:	4623      	mov	r3, r4
 8004fa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004fa8:	4659      	mov	r1, fp
 8004faa:	4648      	mov	r0, r9
 8004fac:	f000 ff94 	bl	8005ed8 <__sbprintf>
 8004fb0:	f000 bf8b 	b.w	8005eca <_vfprintf_r+0xfce>
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	ac2c      	add	r4, sp, #176	; 0xb0
 8004fb8:	941f      	str	r4, [sp, #124]	; 0x7c
 8004fba:	9321      	str	r3, [sp, #132]	; 0x84
 8004fbc:	9320      	str	r3, [sp, #128]	; 0x80
 8004fbe:	9308      	str	r3, [sp, #32]
 8004fc0:	930c      	str	r3, [sp, #48]	; 0x30
 8004fc2:	930d      	str	r3, [sp, #52]	; 0x34
 8004fc4:	9313      	str	r3, [sp, #76]	; 0x4c
 8004fc6:	9312      	str	r3, [sp, #72]	; 0x48
 8004fc8:	930e      	str	r3, [sp, #56]	; 0x38
 8004fca:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004fcc:	462b      	mov	r3, r5
 8004fce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004fd2:	b11a      	cbz	r2, 8004fdc <_vfprintf_r+0xe0>
 8004fd4:	2a25      	cmp	r2, #37	; 0x25
 8004fd6:	d001      	beq.n	8004fdc <_vfprintf_r+0xe0>
 8004fd8:	461d      	mov	r5, r3
 8004fda:	e7f7      	b.n	8004fcc <_vfprintf_r+0xd0>
 8004fdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fde:	1aee      	subs	r6, r5, r3
 8004fe0:	d017      	beq.n	8005012 <_vfprintf_r+0x116>
 8004fe2:	e884 0048 	stmia.w	r4, {r3, r6}
 8004fe6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004fe8:	4433      	add	r3, r6
 8004fea:	9321      	str	r3, [sp, #132]	; 0x84
 8004fec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004fee:	3301      	adds	r3, #1
 8004ff0:	2b07      	cmp	r3, #7
 8004ff2:	9320      	str	r3, [sp, #128]	; 0x80
 8004ff4:	dc01      	bgt.n	8004ffa <_vfprintf_r+0xfe>
 8004ff6:	3408      	adds	r4, #8
 8004ff8:	e008      	b.n	800500c <_vfprintf_r+0x110>
 8004ffa:	aa1f      	add	r2, sp, #124	; 0x7c
 8004ffc:	4659      	mov	r1, fp
 8004ffe:	4648      	mov	r0, r9
 8005000:	f002 ff62 	bl	8007ec8 <__sprint_r>
 8005004:	2800      	cmp	r0, #0
 8005006:	f040 8627 	bne.w	8005c58 <_vfprintf_r+0xd5c>
 800500a:	ac2c      	add	r4, sp, #176	; 0xb0
 800500c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800500e:	4433      	add	r3, r6
 8005010:	930e      	str	r3, [sp, #56]	; 0x38
 8005012:	782b      	ldrb	r3, [r5, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	f000 8618 	beq.w	8005c4a <_vfprintf_r+0xd4e>
 800501a:	2200      	movs	r2, #0
 800501c:	1c6b      	adds	r3, r5, #1
 800501e:	4611      	mov	r1, r2
 8005020:	4615      	mov	r5, r2
 8005022:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8005026:	f04f 3aff 	mov.w	sl, #4294967295
 800502a:	920b      	str	r2, [sp, #44]	; 0x2c
 800502c:	200a      	movs	r0, #10
 800502e:	1c5e      	adds	r6, r3, #1
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	9609      	str	r6, [sp, #36]	; 0x24
 8005034:	9306      	str	r3, [sp, #24]
 8005036:	9b06      	ldr	r3, [sp, #24]
 8005038:	3b20      	subs	r3, #32
 800503a:	2b58      	cmp	r3, #88	; 0x58
 800503c:	f200 825b 	bhi.w	80054f6 <_vfprintf_r+0x5fa>
 8005040:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005044:	0259005c 	.word	0x0259005c
 8005048:	006b0259 	.word	0x006b0259
 800504c:	02590259 	.word	0x02590259
 8005050:	02590259 	.word	0x02590259
 8005054:	02590259 	.word	0x02590259
 8005058:	0059006e 	.word	0x0059006e
 800505c:	00780259 	.word	0x00780259
 8005060:	0259007b 	.word	0x0259007b
 8005064:	00aa009f 	.word	0x00aa009f
 8005068:	00aa00aa 	.word	0x00aa00aa
 800506c:	00aa00aa 	.word	0x00aa00aa
 8005070:	00aa00aa 	.word	0x00aa00aa
 8005074:	00aa00aa 	.word	0x00aa00aa
 8005078:	02590259 	.word	0x02590259
 800507c:	02590259 	.word	0x02590259
 8005080:	02590259 	.word	0x02590259
 8005084:	02590259 	.word	0x02590259
 8005088:	02590259 	.word	0x02590259
 800508c:	010600da 	.word	0x010600da
 8005090:	01060259 	.word	0x01060259
 8005094:	02590259 	.word	0x02590259
 8005098:	02590259 	.word	0x02590259
 800509c:	025900bd 	.word	0x025900bd
 80050a0:	014b0259 	.word	0x014b0259
 80050a4:	02590259 	.word	0x02590259
 80050a8:	02590259 	.word	0x02590259
 80050ac:	01920259 	.word	0x01920259
 80050b0:	02590259 	.word	0x02590259
 80050b4:	02590066 	.word	0x02590066
 80050b8:	02590259 	.word	0x02590259
 80050bc:	02590259 	.word	0x02590259
 80050c0:	02590259 	.word	0x02590259
 80050c4:	02590259 	.word	0x02590259
 80050c8:	00d10259 	.word	0x00d10259
 80050cc:	01060061 	.word	0x01060061
 80050d0:	01060106 	.word	0x01060106
 80050d4:	006100c0 	.word	0x006100c0
 80050d8:	02590259 	.word	0x02590259
 80050dc:	025900c3 	.word	0x025900c3
 80050e0:	014d012d 	.word	0x014d012d
 80050e4:	00ce0168 	.word	0x00ce0168
 80050e8:	01790259 	.word	0x01790259
 80050ec:	01940259 	.word	0x01940259
 80050f0:	02590259 	.word	0x02590259
 80050f4:	01ac      	.short	0x01ac
 80050f6:	2201      	movs	r2, #1
 80050f8:	212b      	movs	r1, #43	; 0x2b
 80050fa:	e002      	b.n	8005102 <_vfprintf_r+0x206>
 80050fc:	b909      	cbnz	r1, 8005102 <_vfprintf_r+0x206>
 80050fe:	2201      	movs	r2, #1
 8005100:	2120      	movs	r1, #32
 8005102:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005104:	e793      	b.n	800502e <_vfprintf_r+0x132>
 8005106:	2a00      	cmp	r2, #0
 8005108:	d07b      	beq.n	8005202 <_vfprintf_r+0x306>
 800510a:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800510e:	e078      	b.n	8005202 <_vfprintf_r+0x306>
 8005110:	b10a      	cbz	r2, 8005116 <_vfprintf_r+0x21a>
 8005112:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8005116:	4b1f      	ldr	r3, [pc, #124]	; (8005194 <_vfprintf_r+0x298>)
 8005118:	e144      	b.n	80053a4 <_vfprintf_r+0x4a8>
 800511a:	f045 0501 	orr.w	r5, r5, #1
 800511e:	e7f0      	b.n	8005102 <_vfprintf_r+0x206>
 8005120:	683e      	ldr	r6, [r7, #0]
 8005122:	1d3b      	adds	r3, r7, #4
 8005124:	2e00      	cmp	r6, #0
 8005126:	960b      	str	r6, [sp, #44]	; 0x2c
 8005128:	db01      	blt.n	800512e <_vfprintf_r+0x232>
 800512a:	461f      	mov	r7, r3
 800512c:	e7e9      	b.n	8005102 <_vfprintf_r+0x206>
 800512e:	461f      	mov	r7, r3
 8005130:	4276      	negs	r6, r6
 8005132:	960b      	str	r6, [sp, #44]	; 0x2c
 8005134:	f045 0504 	orr.w	r5, r5, #4
 8005138:	e7e3      	b.n	8005102 <_vfprintf_r+0x206>
 800513a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800513c:	1c5e      	adds	r6, r3, #1
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	2b2a      	cmp	r3, #42	; 0x2a
 8005142:	9306      	str	r3, [sp, #24]
 8005144:	d001      	beq.n	800514a <_vfprintf_r+0x24e>
 8005146:	2300      	movs	r3, #0
 8005148:	e00a      	b.n	8005160 <_vfprintf_r+0x264>
 800514a:	f8d7 a000 	ldr.w	sl, [r7]
 800514e:	1d3b      	adds	r3, r7, #4
 8005150:	f1ba 0f00 	cmp.w	sl, #0
 8005154:	461f      	mov	r7, r3
 8005156:	9609      	str	r6, [sp, #36]	; 0x24
 8005158:	dad3      	bge.n	8005102 <_vfprintf_r+0x206>
 800515a:	f04f 3aff 	mov.w	sl, #4294967295
 800515e:	e7d0      	b.n	8005102 <_vfprintf_r+0x206>
 8005160:	9609      	str	r6, [sp, #36]	; 0x24
 8005162:	9e06      	ldr	r6, [sp, #24]
 8005164:	3e30      	subs	r6, #48	; 0x30
 8005166:	2e09      	cmp	r6, #9
 8005168:	d808      	bhi.n	800517c <_vfprintf_r+0x280>
 800516a:	fb00 6303 	mla	r3, r0, r3, r6
 800516e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005170:	46b6      	mov	lr, r6
 8005172:	f81e 6b01 	ldrb.w	r6, [lr], #1
 8005176:	9606      	str	r6, [sp, #24]
 8005178:	4676      	mov	r6, lr
 800517a:	e7f1      	b.n	8005160 <_vfprintf_r+0x264>
 800517c:	ea43 7ae3 	orr.w	sl, r3, r3, asr #31
 8005180:	e759      	b.n	8005036 <_vfprintf_r+0x13a>
 8005182:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8005186:	e7bc      	b.n	8005102 <_vfprintf_r+0x206>
 8005188:	08008b18 	.word	0x08008b18
 800518c:	08008b38 	.word	0x08008b38
 8005190:	08008b58 	.word	0x08008b58
 8005194:	08008ab4 	.word	0x08008ab4
 8005198:	2300      	movs	r3, #0
 800519a:	930b      	str	r3, [sp, #44]	; 0x2c
 800519c:	9b06      	ldr	r3, [sp, #24]
 800519e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80051a0:	3b30      	subs	r3, #48	; 0x30
 80051a2:	fb00 3306 	mla	r3, r0, r6, r3
 80051a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80051a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051aa:	461e      	mov	r6, r3
 80051ac:	f816 3b01 	ldrb.w	r3, [r6], #1
 80051b0:	9306      	str	r3, [sp, #24]
 80051b2:	9b06      	ldr	r3, [sp, #24]
 80051b4:	9609      	str	r6, [sp, #36]	; 0x24
 80051b6:	3b30      	subs	r3, #48	; 0x30
 80051b8:	2b09      	cmp	r3, #9
 80051ba:	d9ef      	bls.n	800519c <_vfprintf_r+0x2a0>
 80051bc:	e73b      	b.n	8005036 <_vfprintf_r+0x13a>
 80051be:	f045 0508 	orr.w	r5, r5, #8
 80051c2:	e79e      	b.n	8005102 <_vfprintf_r+0x206>
 80051c4:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 80051c8:	e79b      	b.n	8005102 <_vfprintf_r+0x206>
 80051ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	2b6c      	cmp	r3, #108	; 0x6c
 80051d0:	d103      	bne.n	80051da <_vfprintf_r+0x2de>
 80051d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051d4:	3301      	adds	r3, #1
 80051d6:	9309      	str	r3, [sp, #36]	; 0x24
 80051d8:	e002      	b.n	80051e0 <_vfprintf_r+0x2e4>
 80051da:	f045 0510 	orr.w	r5, r5, #16
 80051de:	e790      	b.n	8005102 <_vfprintf_r+0x206>
 80051e0:	f045 0520 	orr.w	r5, r5, #32
 80051e4:	e78d      	b.n	8005102 <_vfprintf_r+0x206>
 80051e6:	1d3b      	adds	r3, r7, #4
 80051e8:	9307      	str	r3, [sp, #28]
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	2600      	movs	r6, #0
 80051ee:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 80051f2:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 80051f6:	e18d      	b.n	8005514 <_vfprintf_r+0x618>
 80051f8:	b10a      	cbz	r2, 80051fe <_vfprintf_r+0x302>
 80051fa:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80051fe:	f045 0510 	orr.w	r5, r5, #16
 8005202:	06aa      	lsls	r2, r5, #26
 8005204:	d508      	bpl.n	8005218 <_vfprintf_r+0x31c>
 8005206:	3707      	adds	r7, #7
 8005208:	f027 0707 	bic.w	r7, r7, #7
 800520c:	f107 0308 	add.w	r3, r7, #8
 8005210:	9307      	str	r3, [sp, #28]
 8005212:	e9d7 6700 	ldrd	r6, r7, [r7]
 8005216:	e00e      	b.n	8005236 <_vfprintf_r+0x33a>
 8005218:	f015 0f10 	tst.w	r5, #16
 800521c:	f107 0304 	add.w	r3, r7, #4
 8005220:	d002      	beq.n	8005228 <_vfprintf_r+0x32c>
 8005222:	9307      	str	r3, [sp, #28]
 8005224:	683e      	ldr	r6, [r7, #0]
 8005226:	e005      	b.n	8005234 <_vfprintf_r+0x338>
 8005228:	683e      	ldr	r6, [r7, #0]
 800522a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800522e:	9307      	str	r3, [sp, #28]
 8005230:	bf18      	it	ne
 8005232:	b236      	sxthne	r6, r6
 8005234:	17f7      	asrs	r7, r6, #31
 8005236:	2e00      	cmp	r6, #0
 8005238:	f177 0300 	sbcs.w	r3, r7, #0
 800523c:	f280 80dc 	bge.w	80053f8 <_vfprintf_r+0x4fc>
 8005240:	4276      	negs	r6, r6
 8005242:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8005246:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800524a:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800524e:	e0d3      	b.n	80053f8 <_vfprintf_r+0x4fc>
 8005250:	b10a      	cbz	r2, 8005256 <_vfprintf_r+0x35a>
 8005252:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8005256:	3707      	adds	r7, #7
 8005258:	f027 0707 	bic.w	r7, r7, #7
 800525c:	f107 0308 	add.w	r3, r7, #8
 8005260:	9307      	str	r3, [sp, #28]
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	f04f 32ff 	mov.w	r2, #4294967295
 8005268:	930c      	str	r3, [sp, #48]	; 0x30
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800526e:	930d      	str	r3, [sp, #52]	; 0x34
 8005270:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005272:	4638      	mov	r0, r7
 8005274:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 8005278:	4631      	mov	r1, r6
 800527a:	4ba9      	ldr	r3, [pc, #676]	; (8005520 <_vfprintf_r+0x624>)
 800527c:	f7fb fc2e 	bl	8000adc <__aeabi_dcmpun>
 8005280:	2800      	cmp	r0, #0
 8005282:	f040 84f0 	bne.w	8005c66 <_vfprintf_r+0xd6a>
 8005286:	f04f 32ff 	mov.w	r2, #4294967295
 800528a:	4ba5      	ldr	r3, [pc, #660]	; (8005520 <_vfprintf_r+0x624>)
 800528c:	4638      	mov	r0, r7
 800528e:	4631      	mov	r1, r6
 8005290:	f7fb fc06 	bl	8000aa0 <__aeabi_dcmple>
 8005294:	2800      	cmp	r0, #0
 8005296:	f040 84e6 	bne.w	8005c66 <_vfprintf_r+0xd6a>
 800529a:	f000 bdff 	b.w	8005e9c <_vfprintf_r+0xfa0>
 800529e:	b10a      	cbz	r2, 80052a4 <_vfprintf_r+0x3a8>
 80052a0:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80052a4:	f015 0f20 	tst.w	r5, #32
 80052a8:	f107 0304 	add.w	r3, r7, #4
 80052ac:	d007      	beq.n	80052be <_vfprintf_r+0x3c2>
 80052ae:	990e      	ldr	r1, [sp, #56]	; 0x38
 80052b0:	683a      	ldr	r2, [r7, #0]
 80052b2:	17ce      	asrs	r6, r1, #31
 80052b4:	4608      	mov	r0, r1
 80052b6:	4631      	mov	r1, r6
 80052b8:	e9c2 0100 	strd	r0, r1, [r2]
 80052bc:	e00b      	b.n	80052d6 <_vfprintf_r+0x3da>
 80052be:	06e9      	lsls	r1, r5, #27
 80052c0:	d406      	bmi.n	80052d0 <_vfprintf_r+0x3d4>
 80052c2:	066a      	lsls	r2, r5, #25
 80052c4:	d504      	bpl.n	80052d0 <_vfprintf_r+0x3d4>
 80052c6:	683a      	ldr	r2, [r7, #0]
 80052c8:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 80052cc:	8011      	strh	r1, [r2, #0]
 80052ce:	e002      	b.n	80052d6 <_vfprintf_r+0x3da>
 80052d0:	683a      	ldr	r2, [r7, #0]
 80052d2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80052d4:	6011      	str	r1, [r2, #0]
 80052d6:	461f      	mov	r7, r3
 80052d8:	e677      	b.n	8004fca <_vfprintf_r+0xce>
 80052da:	f045 0510 	orr.w	r5, r5, #16
 80052de:	f015 0320 	ands.w	r3, r5, #32
 80052e2:	d009      	beq.n	80052f8 <_vfprintf_r+0x3fc>
 80052e4:	3707      	adds	r7, #7
 80052e6:	f027 0707 	bic.w	r7, r7, #7
 80052ea:	f107 0308 	add.w	r3, r7, #8
 80052ee:	9307      	str	r3, [sp, #28]
 80052f0:	e9d7 6700 	ldrd	r6, r7, [r7]
 80052f4:	2300      	movs	r3, #0
 80052f6:	e07b      	b.n	80053f0 <_vfprintf_r+0x4f4>
 80052f8:	1d3a      	adds	r2, r7, #4
 80052fa:	f015 0110 	ands.w	r1, r5, #16
 80052fe:	9207      	str	r2, [sp, #28]
 8005300:	d105      	bne.n	800530e <_vfprintf_r+0x412>
 8005302:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8005306:	d002      	beq.n	800530e <_vfprintf_r+0x412>
 8005308:	883e      	ldrh	r6, [r7, #0]
 800530a:	2700      	movs	r7, #0
 800530c:	e7f2      	b.n	80052f4 <_vfprintf_r+0x3f8>
 800530e:	683e      	ldr	r6, [r7, #0]
 8005310:	2700      	movs	r7, #0
 8005312:	e06d      	b.n	80053f0 <_vfprintf_r+0x4f4>
 8005314:	1d3b      	adds	r3, r7, #4
 8005316:	9307      	str	r3, [sp, #28]
 8005318:	2330      	movs	r3, #48	; 0x30
 800531a:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800531e:	4b81      	ldr	r3, [pc, #516]	; (8005524 <_vfprintf_r+0x628>)
 8005320:	2278      	movs	r2, #120	; 0x78
 8005322:	683e      	ldr	r6, [r7, #0]
 8005324:	9313      	str	r3, [sp, #76]	; 0x4c
 8005326:	2700      	movs	r7, #0
 8005328:	f045 0502 	orr.w	r5, r5, #2
 800532c:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8005330:	2302      	movs	r3, #2
 8005332:	9206      	str	r2, [sp, #24]
 8005334:	e05c      	b.n	80053f0 <_vfprintf_r+0x4f4>
 8005336:	2600      	movs	r6, #0
 8005338:	1d3b      	adds	r3, r7, #4
 800533a:	45b2      	cmp	sl, r6
 800533c:	9307      	str	r3, [sp, #28]
 800533e:	f8d7 8000 	ldr.w	r8, [r7]
 8005342:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8005346:	db0a      	blt.n	800535e <_vfprintf_r+0x462>
 8005348:	4652      	mov	r2, sl
 800534a:	4631      	mov	r1, r6
 800534c:	4640      	mov	r0, r8
 800534e:	f002 f9c3 	bl	80076d8 <memchr>
 8005352:	2800      	cmp	r0, #0
 8005354:	f000 80e8 	beq.w	8005528 <_vfprintf_r+0x62c>
 8005358:	ebc8 0a00 	rsb	sl, r8, r0
 800535c:	e0e5      	b.n	800552a <_vfprintf_r+0x62e>
 800535e:	4640      	mov	r0, r8
 8005360:	f7fa ff62 	bl	8000228 <strlen>
 8005364:	4682      	mov	sl, r0
 8005366:	e0e0      	b.n	800552a <_vfprintf_r+0x62e>
 8005368:	f045 0510 	orr.w	r5, r5, #16
 800536c:	06ae      	lsls	r6, r5, #26
 800536e:	d508      	bpl.n	8005382 <_vfprintf_r+0x486>
 8005370:	3707      	adds	r7, #7
 8005372:	f027 0707 	bic.w	r7, r7, #7
 8005376:	f107 0308 	add.w	r3, r7, #8
 800537a:	9307      	str	r3, [sp, #28]
 800537c:	e9d7 6700 	ldrd	r6, r7, [r7]
 8005380:	e00a      	b.n	8005398 <_vfprintf_r+0x49c>
 8005382:	1d3b      	adds	r3, r7, #4
 8005384:	f015 0f10 	tst.w	r5, #16
 8005388:	9307      	str	r3, [sp, #28]
 800538a:	d103      	bne.n	8005394 <_vfprintf_r+0x498>
 800538c:	0668      	lsls	r0, r5, #25
 800538e:	d501      	bpl.n	8005394 <_vfprintf_r+0x498>
 8005390:	883e      	ldrh	r6, [r7, #0]
 8005392:	e000      	b.n	8005396 <_vfprintf_r+0x49a>
 8005394:	683e      	ldr	r6, [r7, #0]
 8005396:	2700      	movs	r7, #0
 8005398:	2301      	movs	r3, #1
 800539a:	e029      	b.n	80053f0 <_vfprintf_r+0x4f4>
 800539c:	b10a      	cbz	r2, 80053a2 <_vfprintf_r+0x4a6>
 800539e:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80053a2:	4b60      	ldr	r3, [pc, #384]	; (8005524 <_vfprintf_r+0x628>)
 80053a4:	06a9      	lsls	r1, r5, #26
 80053a6:	9313      	str	r3, [sp, #76]	; 0x4c
 80053a8:	d508      	bpl.n	80053bc <_vfprintf_r+0x4c0>
 80053aa:	3707      	adds	r7, #7
 80053ac:	f027 0707 	bic.w	r7, r7, #7
 80053b0:	f107 0308 	add.w	r3, r7, #8
 80053b4:	9307      	str	r3, [sp, #28]
 80053b6:	e9d7 6700 	ldrd	r6, r7, [r7]
 80053ba:	e00a      	b.n	80053d2 <_vfprintf_r+0x4d6>
 80053bc:	1d3b      	adds	r3, r7, #4
 80053be:	f015 0f10 	tst.w	r5, #16
 80053c2:	9307      	str	r3, [sp, #28]
 80053c4:	d103      	bne.n	80053ce <_vfprintf_r+0x4d2>
 80053c6:	066a      	lsls	r2, r5, #25
 80053c8:	d501      	bpl.n	80053ce <_vfprintf_r+0x4d2>
 80053ca:	883e      	ldrh	r6, [r7, #0]
 80053cc:	e000      	b.n	80053d0 <_vfprintf_r+0x4d4>
 80053ce:	683e      	ldr	r6, [r7, #0]
 80053d0:	2700      	movs	r7, #0
 80053d2:	07eb      	lsls	r3, r5, #31
 80053d4:	d50b      	bpl.n	80053ee <_vfprintf_r+0x4f2>
 80053d6:	ea56 0307 	orrs.w	r3, r6, r7
 80053da:	d008      	beq.n	80053ee <_vfprintf_r+0x4f2>
 80053dc:	2330      	movs	r3, #48	; 0x30
 80053de:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 80053e2:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80053e6:	f045 0502 	orr.w	r5, r5, #2
 80053ea:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 80053ee:	2302      	movs	r3, #2
 80053f0:	2200      	movs	r2, #0
 80053f2:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80053f6:	e000      	b.n	80053fa <_vfprintf_r+0x4fe>
 80053f8:	2301      	movs	r3, #1
 80053fa:	f1ba 0f00 	cmp.w	sl, #0
 80053fe:	f2c0 855e 	blt.w	8005ebe <_vfprintf_r+0xfc2>
 8005402:	ea56 0207 	orrs.w	r2, r6, r7
 8005406:	f025 0180 	bic.w	r1, r5, #128	; 0x80
 800540a:	d103      	bne.n	8005414 <_vfprintf_r+0x518>
 800540c:	f1ba 0f00 	cmp.w	sl, #0
 8005410:	d05f      	beq.n	80054d2 <_vfprintf_r+0x5d6>
 8005412:	e006      	b.n	8005422 <_vfprintf_r+0x526>
 8005414:	460d      	mov	r5, r1
 8005416:	2b01      	cmp	r3, #1
 8005418:	d025      	beq.n	8005466 <_vfprintf_r+0x56a>
 800541a:	2b02      	cmp	r3, #2
 800541c:	d046      	beq.n	80054ac <_vfprintf_r+0x5b0>
 800541e:	4629      	mov	r1, r5
 8005420:	e007      	b.n	8005432 <_vfprintf_r+0x536>
 8005422:	460d      	mov	r5, r1
 8005424:	2b01      	cmp	r3, #1
 8005426:	d022      	beq.n	800546e <_vfprintf_r+0x572>
 8005428:	2b02      	cmp	r3, #2
 800542a:	d03d      	beq.n	80054a8 <_vfprintf_r+0x5ac>
 800542c:	4629      	mov	r1, r5
 800542e:	2600      	movs	r6, #0
 8005430:	2700      	movs	r7, #0
 8005432:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8005436:	08f2      	lsrs	r2, r6, #3
 8005438:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 800543c:	08f8      	lsrs	r0, r7, #3
 800543e:	f006 0307 	and.w	r3, r6, #7
 8005442:	4607      	mov	r7, r0
 8005444:	4616      	mov	r6, r2
 8005446:	3330      	adds	r3, #48	; 0x30
 8005448:	ea56 0207 	orrs.w	r2, r6, r7
 800544c:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8005450:	d1f1      	bne.n	8005436 <_vfprintf_r+0x53a>
 8005452:	07e8      	lsls	r0, r5, #31
 8005454:	d548      	bpl.n	80054e8 <_vfprintf_r+0x5ec>
 8005456:	2b30      	cmp	r3, #48	; 0x30
 8005458:	d046      	beq.n	80054e8 <_vfprintf_r+0x5ec>
 800545a:	2330      	movs	r3, #48	; 0x30
 800545c:	f808 3c01 	strb.w	r3, [r8, #-1]
 8005460:	f108 38ff 	add.w	r8, r8, #4294967295
 8005464:	e040      	b.n	80054e8 <_vfprintf_r+0x5ec>
 8005466:	2f00      	cmp	r7, #0
 8005468:	bf08      	it	eq
 800546a:	2e0a      	cmpeq	r6, #10
 800546c:	d205      	bcs.n	800547a <_vfprintf_r+0x57e>
 800546e:	3630      	adds	r6, #48	; 0x30
 8005470:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8005474:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8005478:	e029      	b.n	80054ce <_vfprintf_r+0x5d2>
 800547a:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800547e:	4630      	mov	r0, r6
 8005480:	4639      	mov	r1, r7
 8005482:	220a      	movs	r2, #10
 8005484:	2300      	movs	r3, #0
 8005486:	f7fb fb67 	bl	8000b58 <__aeabi_uldivmod>
 800548a:	3230      	adds	r2, #48	; 0x30
 800548c:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8005490:	2300      	movs	r3, #0
 8005492:	4630      	mov	r0, r6
 8005494:	4639      	mov	r1, r7
 8005496:	220a      	movs	r2, #10
 8005498:	f7fb fb5e 	bl	8000b58 <__aeabi_uldivmod>
 800549c:	4606      	mov	r6, r0
 800549e:	460f      	mov	r7, r1
 80054a0:	ea56 0307 	orrs.w	r3, r6, r7
 80054a4:	d1eb      	bne.n	800547e <_vfprintf_r+0x582>
 80054a6:	e012      	b.n	80054ce <_vfprintf_r+0x5d2>
 80054a8:	2600      	movs	r6, #0
 80054aa:	2700      	movs	r7, #0
 80054ac:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 80054b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80054b2:	f006 030f 	and.w	r3, r6, #15
 80054b6:	5cd3      	ldrb	r3, [r2, r3]
 80054b8:	093a      	lsrs	r2, r7, #4
 80054ba:	f808 3d01 	strb.w	r3, [r8, #-1]!
 80054be:	0933      	lsrs	r3, r6, #4
 80054c0:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 80054c4:	461e      	mov	r6, r3
 80054c6:	4617      	mov	r7, r2
 80054c8:	ea56 0307 	orrs.w	r3, r6, r7
 80054cc:	d1f0      	bne.n	80054b0 <_vfprintf_r+0x5b4>
 80054ce:	4629      	mov	r1, r5
 80054d0:	e00a      	b.n	80054e8 <_vfprintf_r+0x5ec>
 80054d2:	b93b      	cbnz	r3, 80054e4 <_vfprintf_r+0x5e8>
 80054d4:	07ea      	lsls	r2, r5, #31
 80054d6:	d505      	bpl.n	80054e4 <_vfprintf_r+0x5e8>
 80054d8:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 80054dc:	2330      	movs	r3, #48	; 0x30
 80054de:	f808 3d41 	strb.w	r3, [r8, #-65]!
 80054e2:	e001      	b.n	80054e8 <_vfprintf_r+0x5ec>
 80054e4:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 80054e8:	ab2c      	add	r3, sp, #176	; 0xb0
 80054ea:	4656      	mov	r6, sl
 80054ec:	460d      	mov	r5, r1
 80054ee:	ebc8 0a03 	rsb	sl, r8, r3
 80054f2:	2700      	movs	r7, #0
 80054f4:	e01a      	b.n	800552c <_vfprintf_r+0x630>
 80054f6:	b10a      	cbz	r2, 80054fc <_vfprintf_r+0x600>
 80054f8:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80054fc:	9b06      	ldr	r3, [sp, #24]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	f000 83a3 	beq.w	8005c4a <_vfprintf_r+0xd4e>
 8005504:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8005508:	2600      	movs	r6, #0
 800550a:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 800550e:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8005512:	9707      	str	r7, [sp, #28]
 8005514:	f04f 0a01 	mov.w	sl, #1
 8005518:	4637      	mov	r7, r6
 800551a:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 800551e:	e005      	b.n	800552c <_vfprintf_r+0x630>
 8005520:	7fefffff 	.word	0x7fefffff
 8005524:	08008ac5 	.word	0x08008ac5
 8005528:	4606      	mov	r6, r0
 800552a:	4637      	mov	r7, r6
 800552c:	4556      	cmp	r6, sl
 800552e:	4633      	mov	r3, r6
 8005530:	bfb8      	it	lt
 8005532:	4653      	movlt	r3, sl
 8005534:	930f      	str	r3, [sp, #60]	; 0x3c
 8005536:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 800553a:	b113      	cbz	r3, 8005542 <_vfprintf_r+0x646>
 800553c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800553e:	3301      	adds	r3, #1
 8005540:	930f      	str	r3, [sp, #60]	; 0x3c
 8005542:	f015 0302 	ands.w	r3, r5, #2
 8005546:	9314      	str	r3, [sp, #80]	; 0x50
 8005548:	bf1e      	ittt	ne
 800554a:	9b0f      	ldrne	r3, [sp, #60]	; 0x3c
 800554c:	3302      	addne	r3, #2
 800554e:	930f      	strne	r3, [sp, #60]	; 0x3c
 8005550:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8005554:	9315      	str	r3, [sp, #84]	; 0x54
 8005556:	d139      	bne.n	80055cc <_vfprintf_r+0x6d0>
 8005558:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800555a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800555c:	1a9b      	subs	r3, r3, r2
 800555e:	2b00      	cmp	r3, #0
 8005560:	9310      	str	r3, [sp, #64]	; 0x40
 8005562:	dd33      	ble.n	80055cc <_vfprintf_r+0x6d0>
 8005564:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005566:	2b10      	cmp	r3, #16
 8005568:	4ba2      	ldr	r3, [pc, #648]	; (80057f4 <_vfprintf_r+0x8f8>)
 800556a:	6023      	str	r3, [r4, #0]
 800556c:	dd18      	ble.n	80055a0 <_vfprintf_r+0x6a4>
 800556e:	2310      	movs	r3, #16
 8005570:	6063      	str	r3, [r4, #4]
 8005572:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005574:	3310      	adds	r3, #16
 8005576:	9321      	str	r3, [sp, #132]	; 0x84
 8005578:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800557a:	3301      	adds	r3, #1
 800557c:	2b07      	cmp	r3, #7
 800557e:	9320      	str	r3, [sp, #128]	; 0x80
 8005580:	dc01      	bgt.n	8005586 <_vfprintf_r+0x68a>
 8005582:	3408      	adds	r4, #8
 8005584:	e008      	b.n	8005598 <_vfprintf_r+0x69c>
 8005586:	aa1f      	add	r2, sp, #124	; 0x7c
 8005588:	4659      	mov	r1, fp
 800558a:	4648      	mov	r0, r9
 800558c:	f002 fc9c 	bl	8007ec8 <__sprint_r>
 8005590:	2800      	cmp	r0, #0
 8005592:	f040 8361 	bne.w	8005c58 <_vfprintf_r+0xd5c>
 8005596:	ac2c      	add	r4, sp, #176	; 0xb0
 8005598:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800559a:	3b10      	subs	r3, #16
 800559c:	9310      	str	r3, [sp, #64]	; 0x40
 800559e:	e7e1      	b.n	8005564 <_vfprintf_r+0x668>
 80055a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80055a2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80055a4:	6063      	str	r3, [r4, #4]
 80055a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80055a8:	4413      	add	r3, r2
 80055aa:	9321      	str	r3, [sp, #132]	; 0x84
 80055ac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80055ae:	3301      	adds	r3, #1
 80055b0:	2b07      	cmp	r3, #7
 80055b2:	9320      	str	r3, [sp, #128]	; 0x80
 80055b4:	dc01      	bgt.n	80055ba <_vfprintf_r+0x6be>
 80055b6:	3408      	adds	r4, #8
 80055b8:	e008      	b.n	80055cc <_vfprintf_r+0x6d0>
 80055ba:	aa1f      	add	r2, sp, #124	; 0x7c
 80055bc:	4659      	mov	r1, fp
 80055be:	4648      	mov	r0, r9
 80055c0:	f002 fc82 	bl	8007ec8 <__sprint_r>
 80055c4:	2800      	cmp	r0, #0
 80055c6:	f040 8347 	bne.w	8005c58 <_vfprintf_r+0xd5c>
 80055ca:	ac2c      	add	r4, sp, #176	; 0xb0
 80055cc:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 80055d0:	b1bb      	cbz	r3, 8005602 <_vfprintf_r+0x706>
 80055d2:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 80055d6:	6023      	str	r3, [r4, #0]
 80055d8:	2301      	movs	r3, #1
 80055da:	6063      	str	r3, [r4, #4]
 80055dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80055de:	3301      	adds	r3, #1
 80055e0:	9321      	str	r3, [sp, #132]	; 0x84
 80055e2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80055e4:	3301      	adds	r3, #1
 80055e6:	2b07      	cmp	r3, #7
 80055e8:	9320      	str	r3, [sp, #128]	; 0x80
 80055ea:	dc01      	bgt.n	80055f0 <_vfprintf_r+0x6f4>
 80055ec:	3408      	adds	r4, #8
 80055ee:	e008      	b.n	8005602 <_vfprintf_r+0x706>
 80055f0:	aa1f      	add	r2, sp, #124	; 0x7c
 80055f2:	4659      	mov	r1, fp
 80055f4:	4648      	mov	r0, r9
 80055f6:	f002 fc67 	bl	8007ec8 <__sprint_r>
 80055fa:	2800      	cmp	r0, #0
 80055fc:	f040 832c 	bne.w	8005c58 <_vfprintf_r+0xd5c>
 8005600:	ac2c      	add	r4, sp, #176	; 0xb0
 8005602:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005604:	b1b3      	cbz	r3, 8005634 <_vfprintf_r+0x738>
 8005606:	ab18      	add	r3, sp, #96	; 0x60
 8005608:	6023      	str	r3, [r4, #0]
 800560a:	2302      	movs	r3, #2
 800560c:	6063      	str	r3, [r4, #4]
 800560e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005610:	3302      	adds	r3, #2
 8005612:	9321      	str	r3, [sp, #132]	; 0x84
 8005614:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005616:	3301      	adds	r3, #1
 8005618:	2b07      	cmp	r3, #7
 800561a:	9320      	str	r3, [sp, #128]	; 0x80
 800561c:	dc01      	bgt.n	8005622 <_vfprintf_r+0x726>
 800561e:	3408      	adds	r4, #8
 8005620:	e008      	b.n	8005634 <_vfprintf_r+0x738>
 8005622:	aa1f      	add	r2, sp, #124	; 0x7c
 8005624:	4659      	mov	r1, fp
 8005626:	4648      	mov	r0, r9
 8005628:	f002 fc4e 	bl	8007ec8 <__sprint_r>
 800562c:	2800      	cmp	r0, #0
 800562e:	f040 8313 	bne.w	8005c58 <_vfprintf_r+0xd5c>
 8005632:	ac2c      	add	r4, sp, #176	; 0xb0
 8005634:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005636:	2b80      	cmp	r3, #128	; 0x80
 8005638:	d139      	bne.n	80056ae <_vfprintf_r+0x7b2>
 800563a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800563c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800563e:	1a9b      	subs	r3, r3, r2
 8005640:	2b00      	cmp	r3, #0
 8005642:	9310      	str	r3, [sp, #64]	; 0x40
 8005644:	dd33      	ble.n	80056ae <_vfprintf_r+0x7b2>
 8005646:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005648:	2b10      	cmp	r3, #16
 800564a:	4b6b      	ldr	r3, [pc, #428]	; (80057f8 <_vfprintf_r+0x8fc>)
 800564c:	6023      	str	r3, [r4, #0]
 800564e:	dd18      	ble.n	8005682 <_vfprintf_r+0x786>
 8005650:	2310      	movs	r3, #16
 8005652:	6063      	str	r3, [r4, #4]
 8005654:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005656:	3310      	adds	r3, #16
 8005658:	9321      	str	r3, [sp, #132]	; 0x84
 800565a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800565c:	3301      	adds	r3, #1
 800565e:	2b07      	cmp	r3, #7
 8005660:	9320      	str	r3, [sp, #128]	; 0x80
 8005662:	dc01      	bgt.n	8005668 <_vfprintf_r+0x76c>
 8005664:	3408      	adds	r4, #8
 8005666:	e008      	b.n	800567a <_vfprintf_r+0x77e>
 8005668:	aa1f      	add	r2, sp, #124	; 0x7c
 800566a:	4659      	mov	r1, fp
 800566c:	4648      	mov	r0, r9
 800566e:	f002 fc2b 	bl	8007ec8 <__sprint_r>
 8005672:	2800      	cmp	r0, #0
 8005674:	f040 82f0 	bne.w	8005c58 <_vfprintf_r+0xd5c>
 8005678:	ac2c      	add	r4, sp, #176	; 0xb0
 800567a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800567c:	3b10      	subs	r3, #16
 800567e:	9310      	str	r3, [sp, #64]	; 0x40
 8005680:	e7e1      	b.n	8005646 <_vfprintf_r+0x74a>
 8005682:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005684:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005686:	6063      	str	r3, [r4, #4]
 8005688:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800568a:	4413      	add	r3, r2
 800568c:	9321      	str	r3, [sp, #132]	; 0x84
 800568e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005690:	3301      	adds	r3, #1
 8005692:	2b07      	cmp	r3, #7
 8005694:	9320      	str	r3, [sp, #128]	; 0x80
 8005696:	dc01      	bgt.n	800569c <_vfprintf_r+0x7a0>
 8005698:	3408      	adds	r4, #8
 800569a:	e008      	b.n	80056ae <_vfprintf_r+0x7b2>
 800569c:	aa1f      	add	r2, sp, #124	; 0x7c
 800569e:	4659      	mov	r1, fp
 80056a0:	4648      	mov	r0, r9
 80056a2:	f002 fc11 	bl	8007ec8 <__sprint_r>
 80056a6:	2800      	cmp	r0, #0
 80056a8:	f040 82d6 	bne.w	8005c58 <_vfprintf_r+0xd5c>
 80056ac:	ac2c      	add	r4, sp, #176	; 0xb0
 80056ae:	ebca 0606 	rsb	r6, sl, r6
 80056b2:	2e00      	cmp	r6, #0
 80056b4:	dd2e      	ble.n	8005714 <_vfprintf_r+0x818>
 80056b6:	4b50      	ldr	r3, [pc, #320]	; (80057f8 <_vfprintf_r+0x8fc>)
 80056b8:	2e10      	cmp	r6, #16
 80056ba:	6023      	str	r3, [r4, #0]
 80056bc:	dd16      	ble.n	80056ec <_vfprintf_r+0x7f0>
 80056be:	2310      	movs	r3, #16
 80056c0:	6063      	str	r3, [r4, #4]
 80056c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80056c4:	3310      	adds	r3, #16
 80056c6:	9321      	str	r3, [sp, #132]	; 0x84
 80056c8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80056ca:	3301      	adds	r3, #1
 80056cc:	2b07      	cmp	r3, #7
 80056ce:	9320      	str	r3, [sp, #128]	; 0x80
 80056d0:	dc01      	bgt.n	80056d6 <_vfprintf_r+0x7da>
 80056d2:	3408      	adds	r4, #8
 80056d4:	e008      	b.n	80056e8 <_vfprintf_r+0x7ec>
 80056d6:	aa1f      	add	r2, sp, #124	; 0x7c
 80056d8:	4659      	mov	r1, fp
 80056da:	4648      	mov	r0, r9
 80056dc:	f002 fbf4 	bl	8007ec8 <__sprint_r>
 80056e0:	2800      	cmp	r0, #0
 80056e2:	f040 82b9 	bne.w	8005c58 <_vfprintf_r+0xd5c>
 80056e6:	ac2c      	add	r4, sp, #176	; 0xb0
 80056e8:	3e10      	subs	r6, #16
 80056ea:	e7e4      	b.n	80056b6 <_vfprintf_r+0x7ba>
 80056ec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80056ee:	9821      	ldr	r0, [sp, #132]	; 0x84
 80056f0:	3301      	adds	r3, #1
 80056f2:	6066      	str	r6, [r4, #4]
 80056f4:	2b07      	cmp	r3, #7
 80056f6:	4406      	add	r6, r0
 80056f8:	9621      	str	r6, [sp, #132]	; 0x84
 80056fa:	9320      	str	r3, [sp, #128]	; 0x80
 80056fc:	dc01      	bgt.n	8005702 <_vfprintf_r+0x806>
 80056fe:	3408      	adds	r4, #8
 8005700:	e008      	b.n	8005714 <_vfprintf_r+0x818>
 8005702:	aa1f      	add	r2, sp, #124	; 0x7c
 8005704:	4659      	mov	r1, fp
 8005706:	4648      	mov	r0, r9
 8005708:	f002 fbde 	bl	8007ec8 <__sprint_r>
 800570c:	2800      	cmp	r0, #0
 800570e:	f040 82a3 	bne.w	8005c58 <_vfprintf_r+0xd5c>
 8005712:	ac2c      	add	r4, sp, #176	; 0xb0
 8005714:	05eb      	lsls	r3, r5, #23
 8005716:	d414      	bmi.n	8005742 <_vfprintf_r+0x846>
 8005718:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800571a:	e884 0500 	stmia.w	r4, {r8, sl}
 800571e:	4453      	add	r3, sl
 8005720:	9321      	str	r3, [sp, #132]	; 0x84
 8005722:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005724:	3301      	adds	r3, #1
 8005726:	2b07      	cmp	r3, #7
 8005728:	9320      	str	r3, [sp, #128]	; 0x80
 800572a:	f340 8244 	ble.w	8005bb6 <_vfprintf_r+0xcba>
 800572e:	aa1f      	add	r2, sp, #124	; 0x7c
 8005730:	4659      	mov	r1, fp
 8005732:	4648      	mov	r0, r9
 8005734:	f002 fbc8 	bl	8007ec8 <__sprint_r>
 8005738:	2800      	cmp	r0, #0
 800573a:	f040 828d 	bne.w	8005c58 <_vfprintf_r+0xd5c>
 800573e:	ac2c      	add	r4, sp, #176	; 0xb0
 8005740:	e23a      	b.n	8005bb8 <_vfprintf_r+0xcbc>
 8005742:	9b06      	ldr	r3, [sp, #24]
 8005744:	2b65      	cmp	r3, #101	; 0x65
 8005746:	f340 81ad 	ble.w	8005aa4 <_vfprintf_r+0xba8>
 800574a:	2200      	movs	r2, #0
 800574c:	2300      	movs	r3, #0
 800574e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005750:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005752:	f7fb f991 	bl	8000a78 <__aeabi_dcmpeq>
 8005756:	2800      	cmp	r0, #0
 8005758:	d05d      	beq.n	8005816 <_vfprintf_r+0x91a>
 800575a:	4b28      	ldr	r3, [pc, #160]	; (80057fc <_vfprintf_r+0x900>)
 800575c:	6023      	str	r3, [r4, #0]
 800575e:	2301      	movs	r3, #1
 8005760:	6063      	str	r3, [r4, #4]
 8005762:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005764:	3301      	adds	r3, #1
 8005766:	9321      	str	r3, [sp, #132]	; 0x84
 8005768:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800576a:	3301      	adds	r3, #1
 800576c:	2b07      	cmp	r3, #7
 800576e:	9320      	str	r3, [sp, #128]	; 0x80
 8005770:	dc01      	bgt.n	8005776 <_vfprintf_r+0x87a>
 8005772:	3408      	adds	r4, #8
 8005774:	e008      	b.n	8005788 <_vfprintf_r+0x88c>
 8005776:	aa1f      	add	r2, sp, #124	; 0x7c
 8005778:	4659      	mov	r1, fp
 800577a:	4648      	mov	r0, r9
 800577c:	f002 fba4 	bl	8007ec8 <__sprint_r>
 8005780:	2800      	cmp	r0, #0
 8005782:	f040 8269 	bne.w	8005c58 <_vfprintf_r+0xd5c>
 8005786:	ac2c      	add	r4, sp, #176	; 0xb0
 8005788:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800578a:	9a08      	ldr	r2, [sp, #32]
 800578c:	4293      	cmp	r3, r2
 800578e:	db02      	blt.n	8005796 <_vfprintf_r+0x89a>
 8005790:	07ef      	lsls	r7, r5, #31
 8005792:	f140 8211 	bpl.w	8005bb8 <_vfprintf_r+0xcbc>
 8005796:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005798:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800579a:	6023      	str	r3, [r4, #0]
 800579c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800579e:	6063      	str	r3, [r4, #4]
 80057a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80057a2:	4413      	add	r3, r2
 80057a4:	9321      	str	r3, [sp, #132]	; 0x84
 80057a6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80057a8:	3301      	adds	r3, #1
 80057aa:	2b07      	cmp	r3, #7
 80057ac:	9320      	str	r3, [sp, #128]	; 0x80
 80057ae:	dc01      	bgt.n	80057b4 <_vfprintf_r+0x8b8>
 80057b0:	3408      	adds	r4, #8
 80057b2:	e008      	b.n	80057c6 <_vfprintf_r+0x8ca>
 80057b4:	aa1f      	add	r2, sp, #124	; 0x7c
 80057b6:	4659      	mov	r1, fp
 80057b8:	4648      	mov	r0, r9
 80057ba:	f002 fb85 	bl	8007ec8 <__sprint_r>
 80057be:	2800      	cmp	r0, #0
 80057c0:	f040 824a 	bne.w	8005c58 <_vfprintf_r+0xd5c>
 80057c4:	ac2c      	add	r4, sp, #176	; 0xb0
 80057c6:	9b08      	ldr	r3, [sp, #32]
 80057c8:	1e5e      	subs	r6, r3, #1
 80057ca:	2e00      	cmp	r6, #0
 80057cc:	f340 81f4 	ble.w	8005bb8 <_vfprintf_r+0xcbc>
 80057d0:	4f09      	ldr	r7, [pc, #36]	; (80057f8 <_vfprintf_r+0x8fc>)
 80057d2:	f04f 0810 	mov.w	r8, #16
 80057d6:	2e10      	cmp	r6, #16
 80057d8:	f340 8158 	ble.w	8005a8c <_vfprintf_r+0xb90>
 80057dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80057de:	e884 0180 	stmia.w	r4, {r7, r8}
 80057e2:	3310      	adds	r3, #16
 80057e4:	9321      	str	r3, [sp, #132]	; 0x84
 80057e6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80057e8:	3301      	adds	r3, #1
 80057ea:	2b07      	cmp	r3, #7
 80057ec:	9320      	str	r3, [sp, #128]	; 0x80
 80057ee:	dc07      	bgt.n	8005800 <_vfprintf_r+0x904>
 80057f0:	3408      	adds	r4, #8
 80057f2:	e00e      	b.n	8005812 <_vfprintf_r+0x916>
 80057f4:	08008ae8 	.word	0x08008ae8
 80057f8:	08008af8 	.word	0x08008af8
 80057fc:	08008ad6 	.word	0x08008ad6
 8005800:	aa1f      	add	r2, sp, #124	; 0x7c
 8005802:	4659      	mov	r1, fp
 8005804:	4648      	mov	r0, r9
 8005806:	f002 fb5f 	bl	8007ec8 <__sprint_r>
 800580a:	2800      	cmp	r0, #0
 800580c:	f040 8224 	bne.w	8005c58 <_vfprintf_r+0xd5c>
 8005810:	ac2c      	add	r4, sp, #176	; 0xb0
 8005812:	3e10      	subs	r6, #16
 8005814:	e7df      	b.n	80057d6 <_vfprintf_r+0x8da>
 8005816:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005818:	2b00      	cmp	r3, #0
 800581a:	dc7c      	bgt.n	8005916 <_vfprintf_r+0xa1a>
 800581c:	4b9f      	ldr	r3, [pc, #636]	; (8005a9c <_vfprintf_r+0xba0>)
 800581e:	6023      	str	r3, [r4, #0]
 8005820:	2301      	movs	r3, #1
 8005822:	6063      	str	r3, [r4, #4]
 8005824:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005826:	3301      	adds	r3, #1
 8005828:	9321      	str	r3, [sp, #132]	; 0x84
 800582a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800582c:	3301      	adds	r3, #1
 800582e:	2b07      	cmp	r3, #7
 8005830:	9320      	str	r3, [sp, #128]	; 0x80
 8005832:	dc01      	bgt.n	8005838 <_vfprintf_r+0x93c>
 8005834:	3408      	adds	r4, #8
 8005836:	e008      	b.n	800584a <_vfprintf_r+0x94e>
 8005838:	aa1f      	add	r2, sp, #124	; 0x7c
 800583a:	4659      	mov	r1, fp
 800583c:	4648      	mov	r0, r9
 800583e:	f002 fb43 	bl	8007ec8 <__sprint_r>
 8005842:	2800      	cmp	r0, #0
 8005844:	f040 8208 	bne.w	8005c58 <_vfprintf_r+0xd5c>
 8005848:	ac2c      	add	r4, sp, #176	; 0xb0
 800584a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800584c:	b923      	cbnz	r3, 8005858 <_vfprintf_r+0x95c>
 800584e:	9b08      	ldr	r3, [sp, #32]
 8005850:	b913      	cbnz	r3, 8005858 <_vfprintf_r+0x95c>
 8005852:	07ee      	lsls	r6, r5, #31
 8005854:	f140 81b0 	bpl.w	8005bb8 <_vfprintf_r+0xcbc>
 8005858:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800585a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800585c:	6023      	str	r3, [r4, #0]
 800585e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005860:	6063      	str	r3, [r4, #4]
 8005862:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005864:	4413      	add	r3, r2
 8005866:	9321      	str	r3, [sp, #132]	; 0x84
 8005868:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800586a:	3301      	adds	r3, #1
 800586c:	2b07      	cmp	r3, #7
 800586e:	9320      	str	r3, [sp, #128]	; 0x80
 8005870:	dc02      	bgt.n	8005878 <_vfprintf_r+0x97c>
 8005872:	f104 0308 	add.w	r3, r4, #8
 8005876:	e008      	b.n	800588a <_vfprintf_r+0x98e>
 8005878:	aa1f      	add	r2, sp, #124	; 0x7c
 800587a:	4659      	mov	r1, fp
 800587c:	4648      	mov	r0, r9
 800587e:	f002 fb23 	bl	8007ec8 <__sprint_r>
 8005882:	2800      	cmp	r0, #0
 8005884:	f040 81e8 	bne.w	8005c58 <_vfprintf_r+0xd5c>
 8005888:	ab2c      	add	r3, sp, #176	; 0xb0
 800588a:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800588c:	4276      	negs	r6, r6
 800588e:	2e00      	cmp	r6, #0
 8005890:	dd30      	ble.n	80058f4 <_vfprintf_r+0x9f8>
 8005892:	4f83      	ldr	r7, [pc, #524]	; (8005aa0 <_vfprintf_r+0xba4>)
 8005894:	2410      	movs	r4, #16
 8005896:	2e10      	cmp	r6, #16
 8005898:	dd16      	ble.n	80058c8 <_vfprintf_r+0x9cc>
 800589a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800589c:	601f      	str	r7, [r3, #0]
 800589e:	3210      	adds	r2, #16
 80058a0:	9221      	str	r2, [sp, #132]	; 0x84
 80058a2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80058a4:	605c      	str	r4, [r3, #4]
 80058a6:	3201      	adds	r2, #1
 80058a8:	2a07      	cmp	r2, #7
 80058aa:	9220      	str	r2, [sp, #128]	; 0x80
 80058ac:	dc01      	bgt.n	80058b2 <_vfprintf_r+0x9b6>
 80058ae:	3308      	adds	r3, #8
 80058b0:	e008      	b.n	80058c4 <_vfprintf_r+0x9c8>
 80058b2:	aa1f      	add	r2, sp, #124	; 0x7c
 80058b4:	4659      	mov	r1, fp
 80058b6:	4648      	mov	r0, r9
 80058b8:	f002 fb06 	bl	8007ec8 <__sprint_r>
 80058bc:	2800      	cmp	r0, #0
 80058be:	f040 81cb 	bne.w	8005c58 <_vfprintf_r+0xd5c>
 80058c2:	ab2c      	add	r3, sp, #176	; 0xb0
 80058c4:	3e10      	subs	r6, #16
 80058c6:	e7e6      	b.n	8005896 <_vfprintf_r+0x99a>
 80058c8:	4a75      	ldr	r2, [pc, #468]	; (8005aa0 <_vfprintf_r+0xba4>)
 80058ca:	e883 0044 	stmia.w	r3, {r2, r6}
 80058ce:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80058d0:	4416      	add	r6, r2
 80058d2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80058d4:	9621      	str	r6, [sp, #132]	; 0x84
 80058d6:	3201      	adds	r2, #1
 80058d8:	2a07      	cmp	r2, #7
 80058da:	9220      	str	r2, [sp, #128]	; 0x80
 80058dc:	dc01      	bgt.n	80058e2 <_vfprintf_r+0x9e6>
 80058de:	3308      	adds	r3, #8
 80058e0:	e008      	b.n	80058f4 <_vfprintf_r+0x9f8>
 80058e2:	aa1f      	add	r2, sp, #124	; 0x7c
 80058e4:	4659      	mov	r1, fp
 80058e6:	4648      	mov	r0, r9
 80058e8:	f002 faee 	bl	8007ec8 <__sprint_r>
 80058ec:	2800      	cmp	r0, #0
 80058ee:	f040 81b3 	bne.w	8005c58 <_vfprintf_r+0xd5c>
 80058f2:	ab2c      	add	r3, sp, #176	; 0xb0
 80058f4:	9a08      	ldr	r2, [sp, #32]
 80058f6:	9908      	ldr	r1, [sp, #32]
 80058f8:	605a      	str	r2, [r3, #4]
 80058fa:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80058fc:	f8c3 8000 	str.w	r8, [r3]
 8005900:	440a      	add	r2, r1
 8005902:	9221      	str	r2, [sp, #132]	; 0x84
 8005904:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005906:	3201      	adds	r2, #1
 8005908:	2a07      	cmp	r2, #7
 800590a:	9220      	str	r2, [sp, #128]	; 0x80
 800590c:	f73f af0f 	bgt.w	800572e <_vfprintf_r+0x832>
 8005910:	f103 0408 	add.w	r4, r3, #8
 8005914:	e150      	b.n	8005bb8 <_vfprintf_r+0xcbc>
 8005916:	9b08      	ldr	r3, [sp, #32]
 8005918:	42bb      	cmp	r3, r7
 800591a:	bfa8      	it	ge
 800591c:	463b      	movge	r3, r7
 800591e:	2b00      	cmp	r3, #0
 8005920:	461e      	mov	r6, r3
 8005922:	dd15      	ble.n	8005950 <_vfprintf_r+0xa54>
 8005924:	6063      	str	r3, [r4, #4]
 8005926:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005928:	f8c4 8000 	str.w	r8, [r4]
 800592c:	4433      	add	r3, r6
 800592e:	9321      	str	r3, [sp, #132]	; 0x84
 8005930:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005932:	3301      	adds	r3, #1
 8005934:	2b07      	cmp	r3, #7
 8005936:	9320      	str	r3, [sp, #128]	; 0x80
 8005938:	dc01      	bgt.n	800593e <_vfprintf_r+0xa42>
 800593a:	3408      	adds	r4, #8
 800593c:	e008      	b.n	8005950 <_vfprintf_r+0xa54>
 800593e:	aa1f      	add	r2, sp, #124	; 0x7c
 8005940:	4659      	mov	r1, fp
 8005942:	4648      	mov	r0, r9
 8005944:	f002 fac0 	bl	8007ec8 <__sprint_r>
 8005948:	2800      	cmp	r0, #0
 800594a:	f040 8185 	bne.w	8005c58 <_vfprintf_r+0xd5c>
 800594e:	ac2c      	add	r4, sp, #176	; 0xb0
 8005950:	2e00      	cmp	r6, #0
 8005952:	bfb4      	ite	lt
 8005954:	463e      	movlt	r6, r7
 8005956:	1bbe      	subge	r6, r7, r6
 8005958:	2e00      	cmp	r6, #0
 800595a:	dd30      	ble.n	80059be <_vfprintf_r+0xac2>
 800595c:	f04f 0a10 	mov.w	sl, #16
 8005960:	4b4f      	ldr	r3, [pc, #316]	; (8005aa0 <_vfprintf_r+0xba4>)
 8005962:	2e10      	cmp	r6, #16
 8005964:	6023      	str	r3, [r4, #0]
 8005966:	dd16      	ble.n	8005996 <_vfprintf_r+0xa9a>
 8005968:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800596a:	f8c4 a004 	str.w	sl, [r4, #4]
 800596e:	3310      	adds	r3, #16
 8005970:	9321      	str	r3, [sp, #132]	; 0x84
 8005972:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005974:	3301      	adds	r3, #1
 8005976:	2b07      	cmp	r3, #7
 8005978:	9320      	str	r3, [sp, #128]	; 0x80
 800597a:	dc01      	bgt.n	8005980 <_vfprintf_r+0xa84>
 800597c:	3408      	adds	r4, #8
 800597e:	e008      	b.n	8005992 <_vfprintf_r+0xa96>
 8005980:	aa1f      	add	r2, sp, #124	; 0x7c
 8005982:	4659      	mov	r1, fp
 8005984:	4648      	mov	r0, r9
 8005986:	f002 fa9f 	bl	8007ec8 <__sprint_r>
 800598a:	2800      	cmp	r0, #0
 800598c:	f040 8164 	bne.w	8005c58 <_vfprintf_r+0xd5c>
 8005990:	ac2c      	add	r4, sp, #176	; 0xb0
 8005992:	3e10      	subs	r6, #16
 8005994:	e7e4      	b.n	8005960 <_vfprintf_r+0xa64>
 8005996:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005998:	6066      	str	r6, [r4, #4]
 800599a:	441e      	add	r6, r3
 800599c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800599e:	9621      	str	r6, [sp, #132]	; 0x84
 80059a0:	3301      	adds	r3, #1
 80059a2:	2b07      	cmp	r3, #7
 80059a4:	9320      	str	r3, [sp, #128]	; 0x80
 80059a6:	dc01      	bgt.n	80059ac <_vfprintf_r+0xab0>
 80059a8:	3408      	adds	r4, #8
 80059aa:	e008      	b.n	80059be <_vfprintf_r+0xac2>
 80059ac:	aa1f      	add	r2, sp, #124	; 0x7c
 80059ae:	4659      	mov	r1, fp
 80059b0:	4648      	mov	r0, r9
 80059b2:	f002 fa89 	bl	8007ec8 <__sprint_r>
 80059b6:	2800      	cmp	r0, #0
 80059b8:	f040 814e 	bne.w	8005c58 <_vfprintf_r+0xd5c>
 80059bc:	ac2c      	add	r4, sp, #176	; 0xb0
 80059be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80059c0:	9a08      	ldr	r2, [sp, #32]
 80059c2:	4447      	add	r7, r8
 80059c4:	4293      	cmp	r3, r2
 80059c6:	db01      	blt.n	80059cc <_vfprintf_r+0xad0>
 80059c8:	07e8      	lsls	r0, r5, #31
 80059ca:	d517      	bpl.n	80059fc <_vfprintf_r+0xb00>
 80059cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80059ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80059d0:	6023      	str	r3, [r4, #0]
 80059d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059d4:	6063      	str	r3, [r4, #4]
 80059d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059d8:	4413      	add	r3, r2
 80059da:	9321      	str	r3, [sp, #132]	; 0x84
 80059dc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80059de:	3301      	adds	r3, #1
 80059e0:	2b07      	cmp	r3, #7
 80059e2:	9320      	str	r3, [sp, #128]	; 0x80
 80059e4:	dc01      	bgt.n	80059ea <_vfprintf_r+0xaee>
 80059e6:	3408      	adds	r4, #8
 80059e8:	e008      	b.n	80059fc <_vfprintf_r+0xb00>
 80059ea:	aa1f      	add	r2, sp, #124	; 0x7c
 80059ec:	4659      	mov	r1, fp
 80059ee:	4648      	mov	r0, r9
 80059f0:	f002 fa6a 	bl	8007ec8 <__sprint_r>
 80059f4:	2800      	cmp	r0, #0
 80059f6:	f040 812f 	bne.w	8005c58 <_vfprintf_r+0xd5c>
 80059fa:	ac2c      	add	r4, sp, #176	; 0xb0
 80059fc:	9b08      	ldr	r3, [sp, #32]
 80059fe:	9a08      	ldr	r2, [sp, #32]
 8005a00:	eb08 0603 	add.w	r6, r8, r3
 8005a04:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005a06:	1bf6      	subs	r6, r6, r7
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	429e      	cmp	r6, r3
 8005a0c:	bfa8      	it	ge
 8005a0e:	461e      	movge	r6, r3
 8005a10:	2e00      	cmp	r6, #0
 8005a12:	dd14      	ble.n	8005a3e <_vfprintf_r+0xb42>
 8005a14:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a16:	6027      	str	r7, [r4, #0]
 8005a18:	4433      	add	r3, r6
 8005a1a:	9321      	str	r3, [sp, #132]	; 0x84
 8005a1c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005a1e:	6066      	str	r6, [r4, #4]
 8005a20:	3301      	adds	r3, #1
 8005a22:	2b07      	cmp	r3, #7
 8005a24:	9320      	str	r3, [sp, #128]	; 0x80
 8005a26:	dc01      	bgt.n	8005a2c <_vfprintf_r+0xb30>
 8005a28:	3408      	adds	r4, #8
 8005a2a:	e008      	b.n	8005a3e <_vfprintf_r+0xb42>
 8005a2c:	aa1f      	add	r2, sp, #124	; 0x7c
 8005a2e:	4659      	mov	r1, fp
 8005a30:	4648      	mov	r0, r9
 8005a32:	f002 fa49 	bl	8007ec8 <__sprint_r>
 8005a36:	2800      	cmp	r0, #0
 8005a38:	f040 810e 	bne.w	8005c58 <_vfprintf_r+0xd5c>
 8005a3c:	ac2c      	add	r4, sp, #176	; 0xb0
 8005a3e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005a40:	9a08      	ldr	r2, [sp, #32]
 8005a42:	2e00      	cmp	r6, #0
 8005a44:	eba2 0303 	sub.w	r3, r2, r3
 8005a48:	bfb4      	ite	lt
 8005a4a:	461e      	movlt	r6, r3
 8005a4c:	1b9e      	subge	r6, r3, r6
 8005a4e:	2e00      	cmp	r6, #0
 8005a50:	f340 80b2 	ble.w	8005bb8 <_vfprintf_r+0xcbc>
 8005a54:	4f12      	ldr	r7, [pc, #72]	; (8005aa0 <_vfprintf_r+0xba4>)
 8005a56:	f04f 0810 	mov.w	r8, #16
 8005a5a:	2e10      	cmp	r6, #16
 8005a5c:	dd16      	ble.n	8005a8c <_vfprintf_r+0xb90>
 8005a5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a60:	e884 0180 	stmia.w	r4, {r7, r8}
 8005a64:	3310      	adds	r3, #16
 8005a66:	9321      	str	r3, [sp, #132]	; 0x84
 8005a68:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	2b07      	cmp	r3, #7
 8005a6e:	9320      	str	r3, [sp, #128]	; 0x80
 8005a70:	dc01      	bgt.n	8005a76 <_vfprintf_r+0xb7a>
 8005a72:	3408      	adds	r4, #8
 8005a74:	e008      	b.n	8005a88 <_vfprintf_r+0xb8c>
 8005a76:	aa1f      	add	r2, sp, #124	; 0x7c
 8005a78:	4659      	mov	r1, fp
 8005a7a:	4648      	mov	r0, r9
 8005a7c:	f002 fa24 	bl	8007ec8 <__sprint_r>
 8005a80:	2800      	cmp	r0, #0
 8005a82:	f040 80e9 	bne.w	8005c58 <_vfprintf_r+0xd5c>
 8005a86:	ac2c      	add	r4, sp, #176	; 0xb0
 8005a88:	3e10      	subs	r6, #16
 8005a8a:	e7e6      	b.n	8005a5a <_vfprintf_r+0xb5e>
 8005a8c:	4b04      	ldr	r3, [pc, #16]	; (8005aa0 <_vfprintf_r+0xba4>)
 8005a8e:	e884 0048 	stmia.w	r4, {r3, r6}
 8005a92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a94:	441e      	add	r6, r3
 8005a96:	9621      	str	r6, [sp, #132]	; 0x84
 8005a98:	e643      	b.n	8005722 <_vfprintf_r+0x826>
 8005a9a:	bf00      	nop
 8005a9c:	08008ad6 	.word	0x08008ad6
 8005aa0:	08008af8 	.word	0x08008af8
 8005aa4:	9b08      	ldr	r3, [sp, #32]
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	dc01      	bgt.n	8005aae <_vfprintf_r+0xbb2>
 8005aaa:	07e9      	lsls	r1, r5, #31
 8005aac:	d573      	bpl.n	8005b96 <_vfprintf_r+0xc9a>
 8005aae:	2301      	movs	r3, #1
 8005ab0:	6063      	str	r3, [r4, #4]
 8005ab2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ab4:	f8c4 8000 	str.w	r8, [r4]
 8005ab8:	3301      	adds	r3, #1
 8005aba:	9321      	str	r3, [sp, #132]	; 0x84
 8005abc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005abe:	3301      	adds	r3, #1
 8005ac0:	2b07      	cmp	r3, #7
 8005ac2:	9320      	str	r3, [sp, #128]	; 0x80
 8005ac4:	dc01      	bgt.n	8005aca <_vfprintf_r+0xbce>
 8005ac6:	3408      	adds	r4, #8
 8005ac8:	e008      	b.n	8005adc <_vfprintf_r+0xbe0>
 8005aca:	aa1f      	add	r2, sp, #124	; 0x7c
 8005acc:	4659      	mov	r1, fp
 8005ace:	4648      	mov	r0, r9
 8005ad0:	f002 f9fa 	bl	8007ec8 <__sprint_r>
 8005ad4:	2800      	cmp	r0, #0
 8005ad6:	f040 80bf 	bne.w	8005c58 <_vfprintf_r+0xd5c>
 8005ada:	ac2c      	add	r4, sp, #176	; 0xb0
 8005adc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ade:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ae0:	6023      	str	r3, [r4, #0]
 8005ae2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ae4:	6063      	str	r3, [r4, #4]
 8005ae6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ae8:	4413      	add	r3, r2
 8005aea:	9321      	str	r3, [sp, #132]	; 0x84
 8005aec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005aee:	3301      	adds	r3, #1
 8005af0:	2b07      	cmp	r3, #7
 8005af2:	9320      	str	r3, [sp, #128]	; 0x80
 8005af4:	dc01      	bgt.n	8005afa <_vfprintf_r+0xbfe>
 8005af6:	3408      	adds	r4, #8
 8005af8:	e008      	b.n	8005b0c <_vfprintf_r+0xc10>
 8005afa:	aa1f      	add	r2, sp, #124	; 0x7c
 8005afc:	4659      	mov	r1, fp
 8005afe:	4648      	mov	r0, r9
 8005b00:	f002 f9e2 	bl	8007ec8 <__sprint_r>
 8005b04:	2800      	cmp	r0, #0
 8005b06:	f040 80a7 	bne.w	8005c58 <_vfprintf_r+0xd5c>
 8005b0a:	ac2c      	add	r4, sp, #176	; 0xb0
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	2200      	movs	r2, #0
 8005b10:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005b12:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005b14:	f7fa ffb0 	bl	8000a78 <__aeabi_dcmpeq>
 8005b18:	9b08      	ldr	r3, [sp, #32]
 8005b1a:	1e5e      	subs	r6, r3, #1
 8005b1c:	b9b8      	cbnz	r0, 8005b4e <_vfprintf_r+0xc52>
 8005b1e:	f108 0301 	add.w	r3, r8, #1
 8005b22:	e884 0048 	stmia.w	r4, {r3, r6}
 8005b26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b28:	9a08      	ldr	r2, [sp, #32]
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	4413      	add	r3, r2
 8005b2e:	9321      	str	r3, [sp, #132]	; 0x84
 8005b30:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005b32:	3301      	adds	r3, #1
 8005b34:	2b07      	cmp	r3, #7
 8005b36:	9320      	str	r3, [sp, #128]	; 0x80
 8005b38:	dd34      	ble.n	8005ba4 <_vfprintf_r+0xca8>
 8005b3a:	aa1f      	add	r2, sp, #124	; 0x7c
 8005b3c:	4659      	mov	r1, fp
 8005b3e:	4648      	mov	r0, r9
 8005b40:	f002 f9c2 	bl	8007ec8 <__sprint_r>
 8005b44:	2800      	cmp	r0, #0
 8005b46:	f040 8087 	bne.w	8005c58 <_vfprintf_r+0xd5c>
 8005b4a:	ac2c      	add	r4, sp, #176	; 0xb0
 8005b4c:	e02b      	b.n	8005ba6 <_vfprintf_r+0xcaa>
 8005b4e:	2e00      	cmp	r6, #0
 8005b50:	dd29      	ble.n	8005ba6 <_vfprintf_r+0xcaa>
 8005b52:	4f8e      	ldr	r7, [pc, #568]	; (8005d8c <_vfprintf_r+0xe90>)
 8005b54:	f04f 0810 	mov.w	r8, #16
 8005b58:	2e10      	cmp	r6, #16
 8005b5a:	dd15      	ble.n	8005b88 <_vfprintf_r+0xc8c>
 8005b5c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b5e:	e884 0180 	stmia.w	r4, {r7, r8}
 8005b62:	3310      	adds	r3, #16
 8005b64:	9321      	str	r3, [sp, #132]	; 0x84
 8005b66:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005b68:	3301      	adds	r3, #1
 8005b6a:	2b07      	cmp	r3, #7
 8005b6c:	9320      	str	r3, [sp, #128]	; 0x80
 8005b6e:	dc01      	bgt.n	8005b74 <_vfprintf_r+0xc78>
 8005b70:	3408      	adds	r4, #8
 8005b72:	e007      	b.n	8005b84 <_vfprintf_r+0xc88>
 8005b74:	aa1f      	add	r2, sp, #124	; 0x7c
 8005b76:	4659      	mov	r1, fp
 8005b78:	4648      	mov	r0, r9
 8005b7a:	f002 f9a5 	bl	8007ec8 <__sprint_r>
 8005b7e:	2800      	cmp	r0, #0
 8005b80:	d16a      	bne.n	8005c58 <_vfprintf_r+0xd5c>
 8005b82:	ac2c      	add	r4, sp, #176	; 0xb0
 8005b84:	3e10      	subs	r6, #16
 8005b86:	e7e7      	b.n	8005b58 <_vfprintf_r+0xc5c>
 8005b88:	4b80      	ldr	r3, [pc, #512]	; (8005d8c <_vfprintf_r+0xe90>)
 8005b8a:	e884 0048 	stmia.w	r4, {r3, r6}
 8005b8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b90:	441e      	add	r6, r3
 8005b92:	9621      	str	r6, [sp, #132]	; 0x84
 8005b94:	e7cc      	b.n	8005b30 <_vfprintf_r+0xc34>
 8005b96:	2301      	movs	r3, #1
 8005b98:	6063      	str	r3, [r4, #4]
 8005b9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b9c:	f8c4 8000 	str.w	r8, [r4]
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	e7c4      	b.n	8005b2e <_vfprintf_r+0xc32>
 8005ba4:	3408      	adds	r4, #8
 8005ba6:	ab1b      	add	r3, sp, #108	; 0x6c
 8005ba8:	6023      	str	r3, [r4, #0]
 8005baa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005bac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005bae:	6063      	str	r3, [r4, #4]
 8005bb0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005bb2:	4413      	add	r3, r2
 8005bb4:	e5b4      	b.n	8005720 <_vfprintf_r+0x824>
 8005bb6:	3408      	adds	r4, #8
 8005bb8:	076a      	lsls	r2, r5, #29
 8005bba:	d40b      	bmi.n	8005bd4 <_vfprintf_r+0xcd8>
 8005bbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005bbe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005bc0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005bc2:	428a      	cmp	r2, r1
 8005bc4:	bfac      	ite	ge
 8005bc6:	189b      	addge	r3, r3, r2
 8005bc8:	185b      	addlt	r3, r3, r1
 8005bca:	930e      	str	r3, [sp, #56]	; 0x38
 8005bcc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d035      	beq.n	8005c3e <_vfprintf_r+0xd42>
 8005bd2:	e02e      	b.n	8005c32 <_vfprintf_r+0xd36>
 8005bd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bd6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005bd8:	1a9d      	subs	r5, r3, r2
 8005bda:	2d00      	cmp	r5, #0
 8005bdc:	ddee      	ble.n	8005bbc <_vfprintf_r+0xcc0>
 8005bde:	2610      	movs	r6, #16
 8005be0:	4b6b      	ldr	r3, [pc, #428]	; (8005d90 <_vfprintf_r+0xe94>)
 8005be2:	2d10      	cmp	r5, #16
 8005be4:	6023      	str	r3, [r4, #0]
 8005be6:	dd13      	ble.n	8005c10 <_vfprintf_r+0xd14>
 8005be8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005bea:	6066      	str	r6, [r4, #4]
 8005bec:	3310      	adds	r3, #16
 8005bee:	9321      	str	r3, [sp, #132]	; 0x84
 8005bf0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	2b07      	cmp	r3, #7
 8005bf6:	9320      	str	r3, [sp, #128]	; 0x80
 8005bf8:	dc01      	bgt.n	8005bfe <_vfprintf_r+0xd02>
 8005bfa:	3408      	adds	r4, #8
 8005bfc:	e006      	b.n	8005c0c <_vfprintf_r+0xd10>
 8005bfe:	aa1f      	add	r2, sp, #124	; 0x7c
 8005c00:	4659      	mov	r1, fp
 8005c02:	4648      	mov	r0, r9
 8005c04:	f002 f960 	bl	8007ec8 <__sprint_r>
 8005c08:	bb30      	cbnz	r0, 8005c58 <_vfprintf_r+0xd5c>
 8005c0a:	ac2c      	add	r4, sp, #176	; 0xb0
 8005c0c:	3d10      	subs	r5, #16
 8005c0e:	e7e7      	b.n	8005be0 <_vfprintf_r+0xce4>
 8005c10:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c12:	6065      	str	r5, [r4, #4]
 8005c14:	441d      	add	r5, r3
 8005c16:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005c18:	9521      	str	r5, [sp, #132]	; 0x84
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	2b07      	cmp	r3, #7
 8005c1e:	9320      	str	r3, [sp, #128]	; 0x80
 8005c20:	ddcc      	ble.n	8005bbc <_vfprintf_r+0xcc0>
 8005c22:	aa1f      	add	r2, sp, #124	; 0x7c
 8005c24:	4659      	mov	r1, fp
 8005c26:	4648      	mov	r0, r9
 8005c28:	f002 f94e 	bl	8007ec8 <__sprint_r>
 8005c2c:	2800      	cmp	r0, #0
 8005c2e:	d0c5      	beq.n	8005bbc <_vfprintf_r+0xcc0>
 8005c30:	e012      	b.n	8005c58 <_vfprintf_r+0xd5c>
 8005c32:	aa1f      	add	r2, sp, #124	; 0x7c
 8005c34:	4659      	mov	r1, fp
 8005c36:	4648      	mov	r0, r9
 8005c38:	f002 f946 	bl	8007ec8 <__sprint_r>
 8005c3c:	b960      	cbnz	r0, 8005c58 <_vfprintf_r+0xd5c>
 8005c3e:	2300      	movs	r3, #0
 8005c40:	9320      	str	r3, [sp, #128]	; 0x80
 8005c42:	9f07      	ldr	r7, [sp, #28]
 8005c44:	ac2c      	add	r4, sp, #176	; 0xb0
 8005c46:	f7ff b9c0 	b.w	8004fca <_vfprintf_r+0xce>
 8005c4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c4c:	b123      	cbz	r3, 8005c58 <_vfprintf_r+0xd5c>
 8005c4e:	aa1f      	add	r2, sp, #124	; 0x7c
 8005c50:	4659      	mov	r1, fp
 8005c52:	4648      	mov	r0, r9
 8005c54:	f002 f938 	bl	8007ec8 <__sprint_r>
 8005c58:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8005c5c:	065b      	lsls	r3, r3, #25
 8005c5e:	f53f a999 	bmi.w	8004f94 <_vfprintf_r+0x98>
 8005c62:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005c64:	e131      	b.n	8005eca <_vfprintf_r+0xfce>
 8005c66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005c68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c6a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005c6c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005c6e:	f7fa ff35 	bl	8000adc <__aeabi_dcmpun>
 8005c72:	b160      	cbz	r0, 8005c8e <_vfprintf_r+0xd92>
 8005c74:	4b47      	ldr	r3, [pc, #284]	; (8005d94 <_vfprintf_r+0xe98>)
 8005c76:	4a48      	ldr	r2, [pc, #288]	; (8005d98 <_vfprintf_r+0xe9c>)
 8005c78:	9906      	ldr	r1, [sp, #24]
 8005c7a:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8005c7e:	2947      	cmp	r1, #71	; 0x47
 8005c80:	bfcc      	ite	gt
 8005c82:	4690      	movgt	r8, r2
 8005c84:	4698      	movle	r8, r3
 8005c86:	f04f 0a03 	mov.w	sl, #3
 8005c8a:	2600      	movs	r6, #0
 8005c8c:	e44d      	b.n	800552a <_vfprintf_r+0x62e>
 8005c8e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005c92:	d00a      	beq.n	8005caa <_vfprintf_r+0xdae>
 8005c94:	9b06      	ldr	r3, [sp, #24]
 8005c96:	f023 0320 	bic.w	r3, r3, #32
 8005c9a:	2b47      	cmp	r3, #71	; 0x47
 8005c9c:	d107      	bne.n	8005cae <_vfprintf_r+0xdb2>
 8005c9e:	f1ba 0f00 	cmp.w	sl, #0
 8005ca2:	bf08      	it	eq
 8005ca4:	f04f 0a01 	moveq.w	sl, #1
 8005ca8:	e001      	b.n	8005cae <_vfprintf_r+0xdb2>
 8005caa:	f04f 0a06 	mov.w	sl, #6
 8005cae:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8005cb2:	9315      	str	r3, [sp, #84]	; 0x54
 8005cb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005cb6:	1e1f      	subs	r7, r3, #0
 8005cb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005cba:	bfa8      	it	ge
 8005cbc:	9710      	strge	r7, [sp, #64]	; 0x40
 8005cbe:	930f      	str	r3, [sp, #60]	; 0x3c
 8005cc0:	bfbd      	ittte	lt
 8005cc2:	463b      	movlt	r3, r7
 8005cc4:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005cc8:	9310      	strlt	r3, [sp, #64]	; 0x40
 8005cca:	2300      	movge	r3, #0
 8005ccc:	bfb8      	it	lt
 8005cce:	232d      	movlt	r3, #45	; 0x2d
 8005cd0:	9314      	str	r3, [sp, #80]	; 0x50
 8005cd2:	9b06      	ldr	r3, [sp, #24]
 8005cd4:	f023 0720 	bic.w	r7, r3, #32
 8005cd8:	2f46      	cmp	r7, #70	; 0x46
 8005cda:	d004      	beq.n	8005ce6 <_vfprintf_r+0xdea>
 8005cdc:	2f45      	cmp	r7, #69	; 0x45
 8005cde:	d105      	bne.n	8005cec <_vfprintf_r+0xdf0>
 8005ce0:	f10a 0601 	add.w	r6, sl, #1
 8005ce4:	e003      	b.n	8005cee <_vfprintf_r+0xdf2>
 8005ce6:	4656      	mov	r6, sl
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e001      	b.n	8005cf0 <_vfprintf_r+0xdf4>
 8005cec:	4656      	mov	r6, sl
 8005cee:	2302      	movs	r3, #2
 8005cf0:	aa1d      	add	r2, sp, #116	; 0x74
 8005cf2:	9204      	str	r2, [sp, #16]
 8005cf4:	aa1a      	add	r2, sp, #104	; 0x68
 8005cf6:	9203      	str	r2, [sp, #12]
 8005cf8:	aa19      	add	r2, sp, #100	; 0x64
 8005cfa:	9202      	str	r2, [sp, #8]
 8005cfc:	e88d 0048 	stmia.w	sp, {r3, r6}
 8005d00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005d02:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005d04:	4648      	mov	r0, r9
 8005d06:	f000 fa17 	bl	8006138 <_dtoa_r>
 8005d0a:	2f47      	cmp	r7, #71	; 0x47
 8005d0c:	4680      	mov	r8, r0
 8005d0e:	d102      	bne.n	8005d16 <_vfprintf_r+0xe1a>
 8005d10:	07eb      	lsls	r3, r5, #31
 8005d12:	f140 80d0 	bpl.w	8005eb6 <_vfprintf_r+0xfba>
 8005d16:	eb08 0306 	add.w	r3, r8, r6
 8005d1a:	2f46      	cmp	r7, #70	; 0x46
 8005d1c:	9308      	str	r3, [sp, #32]
 8005d1e:	d111      	bne.n	8005d44 <_vfprintf_r+0xe48>
 8005d20:	f898 3000 	ldrb.w	r3, [r8]
 8005d24:	2b30      	cmp	r3, #48	; 0x30
 8005d26:	d109      	bne.n	8005d3c <_vfprintf_r+0xe40>
 8005d28:	2200      	movs	r2, #0
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005d2e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005d30:	f7fa fea2 	bl	8000a78 <__aeabi_dcmpeq>
 8005d34:	b910      	cbnz	r0, 8005d3c <_vfprintf_r+0xe40>
 8005d36:	f1c6 0601 	rsb	r6, r6, #1
 8005d3a:	9619      	str	r6, [sp, #100]	; 0x64
 8005d3c:	9a08      	ldr	r2, [sp, #32]
 8005d3e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005d40:	441a      	add	r2, r3
 8005d42:	9208      	str	r2, [sp, #32]
 8005d44:	2200      	movs	r2, #0
 8005d46:	2300      	movs	r3, #0
 8005d48:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005d4a:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005d4c:	f7fa fe94 	bl	8000a78 <__aeabi_dcmpeq>
 8005d50:	b908      	cbnz	r0, 8005d56 <_vfprintf_r+0xe5a>
 8005d52:	2230      	movs	r2, #48	; 0x30
 8005d54:	e002      	b.n	8005d5c <_vfprintf_r+0xe60>
 8005d56:	9b08      	ldr	r3, [sp, #32]
 8005d58:	931d      	str	r3, [sp, #116]	; 0x74
 8005d5a:	e007      	b.n	8005d6c <_vfprintf_r+0xe70>
 8005d5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005d5e:	9908      	ldr	r1, [sp, #32]
 8005d60:	4299      	cmp	r1, r3
 8005d62:	d903      	bls.n	8005d6c <_vfprintf_r+0xe70>
 8005d64:	1c59      	adds	r1, r3, #1
 8005d66:	911d      	str	r1, [sp, #116]	; 0x74
 8005d68:	701a      	strb	r2, [r3, #0]
 8005d6a:	e7f7      	b.n	8005d5c <_vfprintf_r+0xe60>
 8005d6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005d6e:	2f47      	cmp	r7, #71	; 0x47
 8005d70:	ebc8 0303 	rsb	r3, r8, r3
 8005d74:	9308      	str	r3, [sp, #32]
 8005d76:	d111      	bne.n	8005d9c <_vfprintf_r+0xea0>
 8005d78:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005d7a:	1cdf      	adds	r7, r3, #3
 8005d7c:	db01      	blt.n	8005d82 <_vfprintf_r+0xe86>
 8005d7e:	459a      	cmp	sl, r3
 8005d80:	da6b      	bge.n	8005e5a <_vfprintf_r+0xf5e>
 8005d82:	9b06      	ldr	r3, [sp, #24]
 8005d84:	3b02      	subs	r3, #2
 8005d86:	9306      	str	r3, [sp, #24]
 8005d88:	e00b      	b.n	8005da2 <_vfprintf_r+0xea6>
 8005d8a:	bf00      	nop
 8005d8c:	08008af8 	.word	0x08008af8
 8005d90:	08008ae8 	.word	0x08008ae8
 8005d94:	08008aac 	.word	0x08008aac
 8005d98:	08008ab0 	.word	0x08008ab0
 8005d9c:	9b06      	ldr	r3, [sp, #24]
 8005d9e:	2b65      	cmp	r3, #101	; 0x65
 8005da0:	dc44      	bgt.n	8005e2c <_vfprintf_r+0xf30>
 8005da2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005da4:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8005da8:	3b01      	subs	r3, #1
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	9319      	str	r3, [sp, #100]	; 0x64
 8005dae:	bfb8      	it	lt
 8005db0:	425b      	neglt	r3, r3
 8005db2:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
 8005db6:	bfb4      	ite	lt
 8005db8:	222d      	movlt	r2, #45	; 0x2d
 8005dba:	222b      	movge	r2, #43	; 0x2b
 8005dbc:	2b09      	cmp	r3, #9
 8005dbe:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8005dc2:	dd1d      	ble.n	8005e00 <_vfprintf_r+0xf04>
 8005dc4:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8005dc8:	200a      	movs	r0, #10
 8005dca:	fb93 f1f0 	sdiv	r1, r3, r0
 8005dce:	fb00 3311 	mls	r3, r0, r1, r3
 8005dd2:	2909      	cmp	r1, #9
 8005dd4:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8005dd8:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8005ddc:	460b      	mov	r3, r1
 8005dde:	dcf4      	bgt.n	8005dca <_vfprintf_r+0xece>
 8005de0:	3330      	adds	r3, #48	; 0x30
 8005de2:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005de6:	1e51      	subs	r1, r2, #1
 8005de8:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 8005dec:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 8005df0:	4281      	cmp	r1, r0
 8005df2:	461a      	mov	r2, r3
 8005df4:	d20b      	bcs.n	8005e0e <_vfprintf_r+0xf12>
 8005df6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005dfa:	f803 2b01 	strb.w	r2, [r3], #1
 8005dfe:	e7f7      	b.n	8005df0 <_vfprintf_r+0xef4>
 8005e00:	2230      	movs	r2, #48	; 0x30
 8005e02:	4413      	add	r3, r2
 8005e04:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8005e08:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8005e0c:	aa1c      	add	r2, sp, #112	; 0x70
 8005e0e:	ab1b      	add	r3, sp, #108	; 0x6c
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	9a08      	ldr	r2, [sp, #32]
 8005e14:	9312      	str	r3, [sp, #72]	; 0x48
 8005e16:	2a01      	cmp	r2, #1
 8005e18:	eb03 0a02 	add.w	sl, r3, r2
 8005e1c:	dc02      	bgt.n	8005e24 <_vfprintf_r+0xf28>
 8005e1e:	f015 0701 	ands.w	r7, r5, #1
 8005e22:	d032      	beq.n	8005e8a <_vfprintf_r+0xf8e>
 8005e24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e26:	2700      	movs	r7, #0
 8005e28:	449a      	add	sl, r3
 8005e2a:	e02e      	b.n	8005e8a <_vfprintf_r+0xf8e>
 8005e2c:	9b06      	ldr	r3, [sp, #24]
 8005e2e:	2b66      	cmp	r3, #102	; 0x66
 8005e30:	d113      	bne.n	8005e5a <_vfprintf_r+0xf5e>
 8005e32:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	dd07      	ble.n	8005e48 <_vfprintf_r+0xf4c>
 8005e38:	f1ba 0f00 	cmp.w	sl, #0
 8005e3c:	d101      	bne.n	8005e42 <_vfprintf_r+0xf46>
 8005e3e:	07ee      	lsls	r6, r5, #31
 8005e40:	d521      	bpl.n	8005e86 <_vfprintf_r+0xf8a>
 8005e42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e44:	4413      	add	r3, r2
 8005e46:	e006      	b.n	8005e56 <_vfprintf_r+0xf5a>
 8005e48:	f1ba 0f00 	cmp.w	sl, #0
 8005e4c:	d101      	bne.n	8005e52 <_vfprintf_r+0xf56>
 8005e4e:	07ed      	lsls	r5, r5, #31
 8005e50:	d514      	bpl.n	8005e7c <_vfprintf_r+0xf80>
 8005e52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e54:	3301      	adds	r3, #1
 8005e56:	4453      	add	r3, sl
 8005e58:	e015      	b.n	8005e86 <_vfprintf_r+0xf8a>
 8005e5a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005e5c:	9a08      	ldr	r2, [sp, #32]
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	db03      	blt.n	8005e6a <_vfprintf_r+0xf6e>
 8005e62:	07e8      	lsls	r0, r5, #31
 8005e64:	d50d      	bpl.n	8005e82 <_vfprintf_r+0xf86>
 8005e66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e68:	e006      	b.n	8005e78 <_vfprintf_r+0xf7c>
 8005e6a:	9a08      	ldr	r2, [sp, #32]
 8005e6c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	440a      	add	r2, r1
 8005e72:	dc05      	bgt.n	8005e80 <_vfprintf_r+0xf84>
 8005e74:	f1c3 0301 	rsb	r3, r3, #1
 8005e78:	4413      	add	r3, r2
 8005e7a:	e002      	b.n	8005e82 <_vfprintf_r+0xf86>
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e002      	b.n	8005e86 <_vfprintf_r+0xf8a>
 8005e80:	4613      	mov	r3, r2
 8005e82:	2267      	movs	r2, #103	; 0x67
 8005e84:	9206      	str	r2, [sp, #24]
 8005e86:	469a      	mov	sl, r3
 8005e88:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8005e8a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005e8c:	b113      	cbz	r3, 8005e94 <_vfprintf_r+0xf98>
 8005e8e:	232d      	movs	r3, #45	; 0x2d
 8005e90:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8005e94:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8005e96:	2600      	movs	r6, #0
 8005e98:	f7ff bb48 	b.w	800552c <_vfprintf_r+0x630>
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005ea2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005ea4:	f7fa fdf2 	bl	8000a8c <__aeabi_dcmplt>
 8005ea8:	b110      	cbz	r0, 8005eb0 <_vfprintf_r+0xfb4>
 8005eaa:	232d      	movs	r3, #45	; 0x2d
 8005eac:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8005eb0:	4b07      	ldr	r3, [pc, #28]	; (8005ed0 <_vfprintf_r+0xfd4>)
 8005eb2:	4a08      	ldr	r2, [pc, #32]	; (8005ed4 <_vfprintf_r+0xfd8>)
 8005eb4:	e6e0      	b.n	8005c78 <_vfprintf_r+0xd7c>
 8005eb6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005eb8:	1a1b      	subs	r3, r3, r0
 8005eba:	9308      	str	r3, [sp, #32]
 8005ebc:	e75c      	b.n	8005d78 <_vfprintf_r+0xe7c>
 8005ebe:	ea56 0207 	orrs.w	r2, r6, r7
 8005ec2:	f47f aaa8 	bne.w	8005416 <_vfprintf_r+0x51a>
 8005ec6:	f7ff baad 	b.w	8005424 <_vfprintf_r+0x528>
 8005eca:	b03d      	add	sp, #244	; 0xf4
 8005ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ed0:	08008aa4 	.word	0x08008aa4
 8005ed4:	08008aa8 	.word	0x08008aa8

08005ed8 <__sbprintf>:
 8005ed8:	b570      	push	{r4, r5, r6, lr}
 8005eda:	460c      	mov	r4, r1
 8005edc:	8989      	ldrh	r1, [r1, #12]
 8005ede:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 8005ee2:	f021 0102 	bic.w	r1, r1, #2
 8005ee6:	f8ad 100c 	strh.w	r1, [sp, #12]
 8005eea:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8005eec:	4606      	mov	r6, r0
 8005eee:	9119      	str	r1, [sp, #100]	; 0x64
 8005ef0:	89e1      	ldrh	r1, [r4, #14]
 8005ef2:	f8ad 100e 	strh.w	r1, [sp, #14]
 8005ef6:	6a21      	ldr	r1, [r4, #32]
 8005ef8:	9108      	str	r1, [sp, #32]
 8005efa:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005efc:	910a      	str	r1, [sp, #40]	; 0x28
 8005efe:	a91a      	add	r1, sp, #104	; 0x68
 8005f00:	9100      	str	r1, [sp, #0]
 8005f02:	9104      	str	r1, [sp, #16]
 8005f04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005f08:	9102      	str	r1, [sp, #8]
 8005f0a:	9105      	str	r1, [sp, #20]
 8005f0c:	2100      	movs	r1, #0
 8005f0e:	9106      	str	r1, [sp, #24]
 8005f10:	4669      	mov	r1, sp
 8005f12:	f7fe fff3 	bl	8004efc <_vfprintf_r>
 8005f16:	1e05      	subs	r5, r0, #0
 8005f18:	db07      	blt.n	8005f2a <__sbprintf+0x52>
 8005f1a:	4669      	mov	r1, sp
 8005f1c:	4630      	mov	r0, r6
 8005f1e:	f000 ff33 	bl	8006d88 <_fflush_r>
 8005f22:	2800      	cmp	r0, #0
 8005f24:	bf18      	it	ne
 8005f26:	f04f 35ff 	movne.w	r5, #4294967295
 8005f2a:	4628      	mov	r0, r5
 8005f2c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8005f30:	065b      	lsls	r3, r3, #25
 8005f32:	bf42      	ittt	mi
 8005f34:	89a3      	ldrhmi	r3, [r4, #12]
 8005f36:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8005f3a:	81a3      	strhmi	r3, [r4, #12]
 8005f3c:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
 8005f40:	bd70      	pop	{r4, r5, r6, pc}
	...

08005f44 <__swsetup_r>:
 8005f44:	4b32      	ldr	r3, [pc, #200]	; (8006010 <__swsetup_r+0xcc>)
 8005f46:	b570      	push	{r4, r5, r6, lr}
 8005f48:	681d      	ldr	r5, [r3, #0]
 8005f4a:	4606      	mov	r6, r0
 8005f4c:	460c      	mov	r4, r1
 8005f4e:	b125      	cbz	r5, 8005f5a <__swsetup_r+0x16>
 8005f50:	69ab      	ldr	r3, [r5, #24]
 8005f52:	b913      	cbnz	r3, 8005f5a <__swsetup_r+0x16>
 8005f54:	4628      	mov	r0, r5
 8005f56:	f000 ff81 	bl	8006e5c <__sinit>
 8005f5a:	4b2e      	ldr	r3, [pc, #184]	; (8006014 <__swsetup_r+0xd0>)
 8005f5c:	429c      	cmp	r4, r3
 8005f5e:	d101      	bne.n	8005f64 <__swsetup_r+0x20>
 8005f60:	686c      	ldr	r4, [r5, #4]
 8005f62:	e008      	b.n	8005f76 <__swsetup_r+0x32>
 8005f64:	4b2c      	ldr	r3, [pc, #176]	; (8006018 <__swsetup_r+0xd4>)
 8005f66:	429c      	cmp	r4, r3
 8005f68:	d101      	bne.n	8005f6e <__swsetup_r+0x2a>
 8005f6a:	68ac      	ldr	r4, [r5, #8]
 8005f6c:	e003      	b.n	8005f76 <__swsetup_r+0x32>
 8005f6e:	4b2b      	ldr	r3, [pc, #172]	; (800601c <__swsetup_r+0xd8>)
 8005f70:	429c      	cmp	r4, r3
 8005f72:	bf08      	it	eq
 8005f74:	68ec      	ldreq	r4, [r5, #12]
 8005f76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f7a:	b29a      	uxth	r2, r3
 8005f7c:	0715      	lsls	r5, r2, #28
 8005f7e:	d41d      	bmi.n	8005fbc <__swsetup_r+0x78>
 8005f80:	06d0      	lsls	r0, r2, #27
 8005f82:	d402      	bmi.n	8005f8a <__swsetup_r+0x46>
 8005f84:	2209      	movs	r2, #9
 8005f86:	6032      	str	r2, [r6, #0]
 8005f88:	e03a      	b.n	8006000 <__swsetup_r+0xbc>
 8005f8a:	0751      	lsls	r1, r2, #29
 8005f8c:	d512      	bpl.n	8005fb4 <__swsetup_r+0x70>
 8005f8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f90:	b141      	cbz	r1, 8005fa4 <__swsetup_r+0x60>
 8005f92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f96:	4299      	cmp	r1, r3
 8005f98:	d002      	beq.n	8005fa0 <__swsetup_r+0x5c>
 8005f9a:	4630      	mov	r0, r6
 8005f9c:	f001 f826 	bl	8006fec <_free_r>
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	6363      	str	r3, [r4, #52]	; 0x34
 8005fa4:	89a3      	ldrh	r3, [r4, #12]
 8005fa6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005faa:	81a3      	strh	r3, [r4, #12]
 8005fac:	2300      	movs	r3, #0
 8005fae:	6063      	str	r3, [r4, #4]
 8005fb0:	6923      	ldr	r3, [r4, #16]
 8005fb2:	6023      	str	r3, [r4, #0]
 8005fb4:	89a3      	ldrh	r3, [r4, #12]
 8005fb6:	f043 0308 	orr.w	r3, r3, #8
 8005fba:	81a3      	strh	r3, [r4, #12]
 8005fbc:	6923      	ldr	r3, [r4, #16]
 8005fbe:	b94b      	cbnz	r3, 8005fd4 <__swsetup_r+0x90>
 8005fc0:	89a3      	ldrh	r3, [r4, #12]
 8005fc2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005fc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fca:	d003      	beq.n	8005fd4 <__swsetup_r+0x90>
 8005fcc:	4621      	mov	r1, r4
 8005fce:	4630      	mov	r0, r6
 8005fd0:	f001 f922 	bl	8007218 <__smakebuf_r>
 8005fd4:	89a2      	ldrh	r2, [r4, #12]
 8005fd6:	f012 0301 	ands.w	r3, r2, #1
 8005fda:	d005      	beq.n	8005fe8 <__swsetup_r+0xa4>
 8005fdc:	2300      	movs	r3, #0
 8005fde:	60a3      	str	r3, [r4, #8]
 8005fe0:	6963      	ldr	r3, [r4, #20]
 8005fe2:	425b      	negs	r3, r3
 8005fe4:	61a3      	str	r3, [r4, #24]
 8005fe6:	e003      	b.n	8005ff0 <__swsetup_r+0xac>
 8005fe8:	0792      	lsls	r2, r2, #30
 8005fea:	bf58      	it	pl
 8005fec:	6963      	ldrpl	r3, [r4, #20]
 8005fee:	60a3      	str	r3, [r4, #8]
 8005ff0:	6923      	ldr	r3, [r4, #16]
 8005ff2:	b95b      	cbnz	r3, 800600c <__swsetup_r+0xc8>
 8005ff4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ff8:	f003 0080 	and.w	r0, r3, #128	; 0x80
 8005ffc:	b280      	uxth	r0, r0
 8005ffe:	b130      	cbz	r0, 800600e <__swsetup_r+0xca>
 8006000:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006004:	81a3      	strh	r3, [r4, #12]
 8006006:	f04f 30ff 	mov.w	r0, #4294967295
 800600a:	bd70      	pop	{r4, r5, r6, pc}
 800600c:	2000      	movs	r0, #0
 800600e:	bd70      	pop	{r4, r5, r6, pc}
 8006010:	20000254 	.word	0x20000254
 8006014:	08008b18 	.word	0x08008b18
 8006018:	08008b38 	.word	0x08008b38
 800601c:	08008b58 	.word	0x08008b58

08006020 <quorem>:
 8006020:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006024:	6903      	ldr	r3, [r0, #16]
 8006026:	690c      	ldr	r4, [r1, #16]
 8006028:	4680      	mov	r8, r0
 800602a:	429c      	cmp	r4, r3
 800602c:	dc7f      	bgt.n	800612e <quorem+0x10e>
 800602e:	3c01      	subs	r4, #1
 8006030:	f101 0714 	add.w	r7, r1, #20
 8006034:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8006038:	f100 0614 	add.w	r6, r0, #20
 800603c:	eb06 030e 	add.w	r3, r6, lr
 8006040:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006044:	9301      	str	r3, [sp, #4]
 8006046:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 800604a:	3501      	adds	r5, #1
 800604c:	fbb3 f5f5 	udiv	r5, r3, r5
 8006050:	eb07 090e 	add.w	r9, r7, lr
 8006054:	b3c5      	cbz	r5, 80060c8 <quorem+0xa8>
 8006056:	f04f 0a00 	mov.w	sl, #0
 800605a:	4638      	mov	r0, r7
 800605c:	46b4      	mov	ip, r6
 800605e:	46d3      	mov	fp, sl
 8006060:	f850 3b04 	ldr.w	r3, [r0], #4
 8006064:	b29a      	uxth	r2, r3
 8006066:	fb05 a202 	mla	r2, r5, r2, sl
 800606a:	0c1b      	lsrs	r3, r3, #16
 800606c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006070:	fb05 a303 	mla	r3, r5, r3, sl
 8006074:	b292      	uxth	r2, r2
 8006076:	ebc2 0b0b 	rsb	fp, r2, fp
 800607a:	f8bc 2000 	ldrh.w	r2, [ip]
 800607e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006082:	445a      	add	r2, fp
 8006084:	fa1f fb83 	uxth.w	fp, r3
 8006088:	f8dc 3000 	ldr.w	r3, [ip]
 800608c:	4581      	cmp	r9, r0
 800608e:	ebcb 4313 	rsb	r3, fp, r3, lsr #16
 8006092:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8006096:	b292      	uxth	r2, r2
 8006098:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800609c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80060a0:	f84c 2b04 	str.w	r2, [ip], #4
 80060a4:	d2dc      	bcs.n	8006060 <quorem+0x40>
 80060a6:	f856 300e 	ldr.w	r3, [r6, lr]
 80060aa:	b96b      	cbnz	r3, 80060c8 <quorem+0xa8>
 80060ac:	9b01      	ldr	r3, [sp, #4]
 80060ae:	3b04      	subs	r3, #4
 80060b0:	429e      	cmp	r6, r3
 80060b2:	461a      	mov	r2, r3
 80060b4:	d302      	bcc.n	80060bc <quorem+0x9c>
 80060b6:	f8c8 4010 	str.w	r4, [r8, #16]
 80060ba:	e005      	b.n	80060c8 <quorem+0xa8>
 80060bc:	6812      	ldr	r2, [r2, #0]
 80060be:	3b04      	subs	r3, #4
 80060c0:	2a00      	cmp	r2, #0
 80060c2:	d1f8      	bne.n	80060b6 <quorem+0x96>
 80060c4:	3c01      	subs	r4, #1
 80060c6:	e7f3      	b.n	80060b0 <quorem+0x90>
 80060c8:	4640      	mov	r0, r8
 80060ca:	f001 fd2c 	bl	8007b26 <__mcmp>
 80060ce:	2800      	cmp	r0, #0
 80060d0:	db2b      	blt.n	800612a <quorem+0x10a>
 80060d2:	4630      	mov	r0, r6
 80060d4:	3501      	adds	r5, #1
 80060d6:	f04f 0e00 	mov.w	lr, #0
 80060da:	f857 2b04 	ldr.w	r2, [r7], #4
 80060de:	6803      	ldr	r3, [r0, #0]
 80060e0:	b291      	uxth	r1, r2
 80060e2:	ebc1 0e0e 	rsb	lr, r1, lr
 80060e6:	0c12      	lsrs	r2, r2, #16
 80060e8:	b299      	uxth	r1, r3
 80060ea:	4471      	add	r1, lr
 80060ec:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
 80060f0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80060f4:	b289      	uxth	r1, r1
 80060f6:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80060fa:	45b9      	cmp	r9, r7
 80060fc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006100:	f840 3b04 	str.w	r3, [r0], #4
 8006104:	d2e9      	bcs.n	80060da <quorem+0xba>
 8006106:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800610a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800610e:	b962      	cbnz	r2, 800612a <quorem+0x10a>
 8006110:	3b04      	subs	r3, #4
 8006112:	429e      	cmp	r6, r3
 8006114:	461a      	mov	r2, r3
 8006116:	d302      	bcc.n	800611e <quorem+0xfe>
 8006118:	f8c8 4010 	str.w	r4, [r8, #16]
 800611c:	e005      	b.n	800612a <quorem+0x10a>
 800611e:	6812      	ldr	r2, [r2, #0]
 8006120:	3b04      	subs	r3, #4
 8006122:	2a00      	cmp	r2, #0
 8006124:	d1f8      	bne.n	8006118 <quorem+0xf8>
 8006126:	3c01      	subs	r4, #1
 8006128:	e7f3      	b.n	8006112 <quorem+0xf2>
 800612a:	4628      	mov	r0, r5
 800612c:	e000      	b.n	8006130 <quorem+0x110>
 800612e:	2000      	movs	r0, #0
 8006130:	b003      	add	sp, #12
 8006132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08006138 <_dtoa_r>:
 8006138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800613c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800613e:	b095      	sub	sp, #84	; 0x54
 8006140:	4682      	mov	sl, r0
 8006142:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8006144:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006148:	b945      	cbnz	r5, 800615c <_dtoa_r+0x24>
 800614a:	2010      	movs	r0, #16
 800614c:	f001 f8a0 	bl	8007290 <malloc>
 8006150:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 8006154:	6045      	str	r5, [r0, #4]
 8006156:	6085      	str	r5, [r0, #8]
 8006158:	6005      	str	r5, [r0, #0]
 800615a:	60c5      	str	r5, [r0, #12]
 800615c:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8006160:	6819      	ldr	r1, [r3, #0]
 8006162:	b159      	cbz	r1, 800617c <_dtoa_r+0x44>
 8006164:	685a      	ldr	r2, [r3, #4]
 8006166:	2301      	movs	r3, #1
 8006168:	4093      	lsls	r3, r2
 800616a:	604a      	str	r2, [r1, #4]
 800616c:	608b      	str	r3, [r1, #8]
 800616e:	4650      	mov	r0, sl
 8006170:	f001 fb02 	bl	8007778 <_Bfree>
 8006174:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8006178:	2200      	movs	r2, #0
 800617a:	601a      	str	r2, [r3, #0]
 800617c:	9b03      	ldr	r3, [sp, #12]
 800617e:	4aa0      	ldr	r2, [pc, #640]	; (8006400 <_dtoa_r+0x2c8>)
 8006180:	2b00      	cmp	r3, #0
 8006182:	bfbd      	ittte	lt
 8006184:	2301      	movlt	r3, #1
 8006186:	6023      	strlt	r3, [r4, #0]
 8006188:	9b03      	ldrlt	r3, [sp, #12]
 800618a:	2300      	movge	r3, #0
 800618c:	bfbc      	itt	lt
 800618e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006192:	9303      	strlt	r3, [sp, #12]
 8006194:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006198:	bfa8      	it	ge
 800619a:	6023      	strge	r3, [r4, #0]
 800619c:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80061a0:	0d1b      	lsrs	r3, r3, #20
 80061a2:	051b      	lsls	r3, r3, #20
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d11d      	bne.n	80061e4 <_dtoa_r+0xac>
 80061a8:	f242 730f 	movw	r3, #9999	; 0x270f
 80061ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80061ae:	6013      	str	r3, [r2, #0]
 80061b0:	9b02      	ldr	r3, [sp, #8]
 80061b2:	b943      	cbnz	r3, 80061c6 <_dtoa_r+0x8e>
 80061b4:	4a93      	ldr	r2, [pc, #588]	; (8006404 <_dtoa_r+0x2cc>)
 80061b6:	4b94      	ldr	r3, [pc, #592]	; (8006408 <_dtoa_r+0x2d0>)
 80061b8:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80061bc:	2800      	cmp	r0, #0
 80061be:	bf14      	ite	ne
 80061c0:	4618      	movne	r0, r3
 80061c2:	4610      	moveq	r0, r2
 80061c4:	e000      	b.n	80061c8 <_dtoa_r+0x90>
 80061c6:	4890      	ldr	r0, [pc, #576]	; (8006408 <_dtoa_r+0x2d0>)
 80061c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	f000 8546 	beq.w	8006c5c <_dtoa_r+0xb24>
 80061d0:	78c3      	ldrb	r3, [r0, #3]
 80061d2:	b113      	cbz	r3, 80061da <_dtoa_r+0xa2>
 80061d4:	f100 0308 	add.w	r3, r0, #8
 80061d8:	e000      	b.n	80061dc <_dtoa_r+0xa4>
 80061da:	1cc3      	adds	r3, r0, #3
 80061dc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80061de:	6013      	str	r3, [r2, #0]
 80061e0:	f000 bd3c 	b.w	8006c5c <_dtoa_r+0xb24>
 80061e4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80061e8:	2200      	movs	r2, #0
 80061ea:	2300      	movs	r3, #0
 80061ec:	4620      	mov	r0, r4
 80061ee:	4629      	mov	r1, r5
 80061f0:	f7fa fc42 	bl	8000a78 <__aeabi_dcmpeq>
 80061f4:	4607      	mov	r7, r0
 80061f6:	b158      	cbz	r0, 8006210 <_dtoa_r+0xd8>
 80061f8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80061fa:	2301      	movs	r3, #1
 80061fc:	6013      	str	r3, [r2, #0]
 80061fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006200:	2b00      	cmp	r3, #0
 8006202:	f000 851e 	beq.w	8006c42 <_dtoa_r+0xb0a>
 8006206:	4881      	ldr	r0, [pc, #516]	; (800640c <_dtoa_r+0x2d4>)
 8006208:	6018      	str	r0, [r3, #0]
 800620a:	3801      	subs	r0, #1
 800620c:	f000 bd26 	b.w	8006c5c <_dtoa_r+0xb24>
 8006210:	ab12      	add	r3, sp, #72	; 0x48
 8006212:	9301      	str	r3, [sp, #4]
 8006214:	ab13      	add	r3, sp, #76	; 0x4c
 8006216:	9300      	str	r3, [sp, #0]
 8006218:	4622      	mov	r2, r4
 800621a:	462b      	mov	r3, r5
 800621c:	4650      	mov	r0, sl
 800621e:	f001 fcfd 	bl	8007c1c <__d2b>
 8006222:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8006226:	9004      	str	r0, [sp, #16]
 8006228:	b156      	cbz	r6, 8006240 <_dtoa_r+0x108>
 800622a:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800622e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006232:	4620      	mov	r0, r4
 8006234:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006238:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 800623c:	9711      	str	r7, [sp, #68]	; 0x44
 800623e:	e01d      	b.n	800627c <_dtoa_r+0x144>
 8006240:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006242:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8006244:	441e      	add	r6, r3
 8006246:	f206 4332 	addw	r3, r6, #1074	; 0x432
 800624a:	2b20      	cmp	r3, #32
 800624c:	dd0a      	ble.n	8006264 <_dtoa_r+0x12c>
 800624e:	9a02      	ldr	r2, [sp, #8]
 8006250:	f206 4012 	addw	r0, r6, #1042	; 0x412
 8006254:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8006258:	fa22 f000 	lsr.w	r0, r2, r0
 800625c:	fa08 f303 	lsl.w	r3, r8, r3
 8006260:	4318      	orrs	r0, r3
 8006262:	e004      	b.n	800626e <_dtoa_r+0x136>
 8006264:	f1c3 0020 	rsb	r0, r3, #32
 8006268:	9b02      	ldr	r3, [sp, #8]
 800626a:	fa03 f000 	lsl.w	r0, r3, r0
 800626e:	f7fa f925 	bl	80004bc <__aeabi_ui2d>
 8006272:	2301      	movs	r3, #1
 8006274:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006278:	3e01      	subs	r6, #1
 800627a:	9311      	str	r3, [sp, #68]	; 0x44
 800627c:	2200      	movs	r2, #0
 800627e:	4b64      	ldr	r3, [pc, #400]	; (8006410 <_dtoa_r+0x2d8>)
 8006280:	f7f9 ffde 	bl	8000240 <__aeabi_dsub>
 8006284:	a358      	add	r3, pc, #352	; (adr r3, 80063e8 <_dtoa_r+0x2b0>)
 8006286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628a:	f7fa f98d 	bl	80005a8 <__aeabi_dmul>
 800628e:	a358      	add	r3, pc, #352	; (adr r3, 80063f0 <_dtoa_r+0x2b8>)
 8006290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006294:	f7f9 ffd6 	bl	8000244 <__adddf3>
 8006298:	4604      	mov	r4, r0
 800629a:	4630      	mov	r0, r6
 800629c:	460d      	mov	r5, r1
 800629e:	f7fa f91d 	bl	80004dc <__aeabi_i2d>
 80062a2:	a355      	add	r3, pc, #340	; (adr r3, 80063f8 <_dtoa_r+0x2c0>)
 80062a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a8:	f7fa f97e 	bl	80005a8 <__aeabi_dmul>
 80062ac:	4602      	mov	r2, r0
 80062ae:	460b      	mov	r3, r1
 80062b0:	4620      	mov	r0, r4
 80062b2:	4629      	mov	r1, r5
 80062b4:	f7f9 ffc6 	bl	8000244 <__adddf3>
 80062b8:	4604      	mov	r4, r0
 80062ba:	460d      	mov	r5, r1
 80062bc:	f7fa fc24 	bl	8000b08 <__aeabi_d2iz>
 80062c0:	2200      	movs	r2, #0
 80062c2:	4683      	mov	fp, r0
 80062c4:	2300      	movs	r3, #0
 80062c6:	4620      	mov	r0, r4
 80062c8:	4629      	mov	r1, r5
 80062ca:	f7fa fbdf 	bl	8000a8c <__aeabi_dcmplt>
 80062ce:	b158      	cbz	r0, 80062e8 <_dtoa_r+0x1b0>
 80062d0:	4658      	mov	r0, fp
 80062d2:	f7fa f903 	bl	80004dc <__aeabi_i2d>
 80062d6:	4602      	mov	r2, r0
 80062d8:	460b      	mov	r3, r1
 80062da:	4620      	mov	r0, r4
 80062dc:	4629      	mov	r1, r5
 80062de:	f7fa fbcb 	bl	8000a78 <__aeabi_dcmpeq>
 80062e2:	b908      	cbnz	r0, 80062e8 <_dtoa_r+0x1b0>
 80062e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80062e8:	f1bb 0f16 	cmp.w	fp, #22
 80062ec:	d80d      	bhi.n	800630a <_dtoa_r+0x1d2>
 80062ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80062f2:	4948      	ldr	r1, [pc, #288]	; (8006414 <_dtoa_r+0x2dc>)
 80062f4:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80062f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80062fc:	f7fa fbe4 	bl	8000ac8 <__aeabi_dcmpgt>
 8006300:	b130      	cbz	r0, 8006310 <_dtoa_r+0x1d8>
 8006302:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006306:	2300      	movs	r3, #0
 8006308:	e000      	b.n	800630c <_dtoa_r+0x1d4>
 800630a:	2301      	movs	r3, #1
 800630c:	9310      	str	r3, [sp, #64]	; 0x40
 800630e:	e000      	b.n	8006312 <_dtoa_r+0x1da>
 8006310:	9010      	str	r0, [sp, #64]	; 0x40
 8006312:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006314:	1b9e      	subs	r6, r3, r6
 8006316:	1e73      	subs	r3, r6, #1
 8006318:	9307      	str	r3, [sp, #28]
 800631a:	bf43      	ittte	mi
 800631c:	f1c3 0800 	rsbmi	r8, r3, #0
 8006320:	2300      	movmi	r3, #0
 8006322:	9307      	strmi	r3, [sp, #28]
 8006324:	f04f 0800 	movpl.w	r8, #0
 8006328:	f1bb 0f00 	cmp.w	fp, #0
 800632c:	db06      	blt.n	800633c <_dtoa_r+0x204>
 800632e:	9b07      	ldr	r3, [sp, #28]
 8006330:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006334:	445b      	add	r3, fp
 8006336:	9307      	str	r3, [sp, #28]
 8006338:	2700      	movs	r7, #0
 800633a:	e005      	b.n	8006348 <_dtoa_r+0x210>
 800633c:	2300      	movs	r3, #0
 800633e:	ebcb 0808 	rsb	r8, fp, r8
 8006342:	f1cb 0700 	rsb	r7, fp, #0
 8006346:	930b      	str	r3, [sp, #44]	; 0x2c
 8006348:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800634a:	2b09      	cmp	r3, #9
 800634c:	d828      	bhi.n	80063a0 <_dtoa_r+0x268>
 800634e:	2b05      	cmp	r3, #5
 8006350:	bfc4      	itt	gt
 8006352:	3b04      	subgt	r3, #4
 8006354:	931e      	strgt	r3, [sp, #120]	; 0x78
 8006356:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006358:	bfc8      	it	gt
 800635a:	2500      	movgt	r5, #0
 800635c:	f1a3 0302 	sub.w	r3, r3, #2
 8006360:	bfd8      	it	le
 8006362:	2501      	movle	r5, #1
 8006364:	2b03      	cmp	r3, #3
 8006366:	d820      	bhi.n	80063aa <_dtoa_r+0x272>
 8006368:	e8df f003 	tbb	[pc, r3]
 800636c:	04020e06 	.word	0x04020e06
 8006370:	2301      	movs	r3, #1
 8006372:	e002      	b.n	800637a <_dtoa_r+0x242>
 8006374:	2301      	movs	r3, #1
 8006376:	e008      	b.n	800638a <_dtoa_r+0x252>
 8006378:	2300      	movs	r3, #0
 800637a:	930a      	str	r3, [sp, #40]	; 0x28
 800637c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800637e:	2b00      	cmp	r3, #0
 8006380:	dd1d      	ble.n	80063be <_dtoa_r+0x286>
 8006382:	4699      	mov	r9, r3
 8006384:	9305      	str	r3, [sp, #20]
 8006386:	e021      	b.n	80063cc <_dtoa_r+0x294>
 8006388:	2300      	movs	r3, #0
 800638a:	930a      	str	r3, [sp, #40]	; 0x28
 800638c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800638e:	eb0b 0903 	add.w	r9, fp, r3
 8006392:	f109 0301 	add.w	r3, r9, #1
 8006396:	2b01      	cmp	r3, #1
 8006398:	9305      	str	r3, [sp, #20]
 800639a:	bfb8      	it	lt
 800639c:	2301      	movlt	r3, #1
 800639e:	e015      	b.n	80063cc <_dtoa_r+0x294>
 80063a0:	2501      	movs	r5, #1
 80063a2:	2300      	movs	r3, #0
 80063a4:	931e      	str	r3, [sp, #120]	; 0x78
 80063a6:	950a      	str	r5, [sp, #40]	; 0x28
 80063a8:	e001      	b.n	80063ae <_dtoa_r+0x276>
 80063aa:	2301      	movs	r3, #1
 80063ac:	930a      	str	r3, [sp, #40]	; 0x28
 80063ae:	f04f 39ff 	mov.w	r9, #4294967295
 80063b2:	2200      	movs	r2, #0
 80063b4:	f8cd 9014 	str.w	r9, [sp, #20]
 80063b8:	2312      	movs	r3, #18
 80063ba:	921f      	str	r2, [sp, #124]	; 0x7c
 80063bc:	e006      	b.n	80063cc <_dtoa_r+0x294>
 80063be:	f04f 0901 	mov.w	r9, #1
 80063c2:	464b      	mov	r3, r9
 80063c4:	f8cd 9014 	str.w	r9, [sp, #20]
 80063c8:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
 80063cc:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
 80063d0:	2200      	movs	r2, #0
 80063d2:	6062      	str	r2, [r4, #4]
 80063d4:	2104      	movs	r1, #4
 80063d6:	f101 0214 	add.w	r2, r1, #20
 80063da:	429a      	cmp	r2, r3
 80063dc:	d81c      	bhi.n	8006418 <_dtoa_r+0x2e0>
 80063de:	6862      	ldr	r2, [r4, #4]
 80063e0:	0049      	lsls	r1, r1, #1
 80063e2:	3201      	adds	r2, #1
 80063e4:	6062      	str	r2, [r4, #4]
 80063e6:	e7f6      	b.n	80063d6 <_dtoa_r+0x29e>
 80063e8:	636f4361 	.word	0x636f4361
 80063ec:	3fd287a7 	.word	0x3fd287a7
 80063f0:	8b60c8b3 	.word	0x8b60c8b3
 80063f4:	3fc68a28 	.word	0x3fc68a28
 80063f8:	509f79fb 	.word	0x509f79fb
 80063fc:	3fd34413 	.word	0x3fd34413
 8006400:	7ff00000 	.word	0x7ff00000
 8006404:	08008b08 	.word	0x08008b08
 8006408:	08008b11 	.word	0x08008b11
 800640c:	08008ad7 	.word	0x08008ad7
 8006410:	3ff80000 	.word	0x3ff80000
 8006414:	08008b88 	.word	0x08008b88
 8006418:	6861      	ldr	r1, [r4, #4]
 800641a:	4650      	mov	r0, sl
 800641c:	f001 f977 	bl	800770e <_Balloc>
 8006420:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8006424:	6020      	str	r0, [r4, #0]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	9306      	str	r3, [sp, #24]
 800642a:	9b05      	ldr	r3, [sp, #20]
 800642c:	2b0e      	cmp	r3, #14
 800642e:	f200 815b 	bhi.w	80066e8 <_dtoa_r+0x5b0>
 8006432:	2d00      	cmp	r5, #0
 8006434:	f000 8158 	beq.w	80066e8 <_dtoa_r+0x5b0>
 8006438:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 800643c:	f1bb 0f00 	cmp.w	fp, #0
 8006440:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
 8006444:	dd30      	ble.n	80064a8 <_dtoa_r+0x370>
 8006446:	4a9f      	ldr	r2, [pc, #636]	; (80066c4 <_dtoa_r+0x58c>)
 8006448:	f00b 030f 	and.w	r3, fp, #15
 800644c:	ea4f 152b 	mov.w	r5, fp, asr #4
 8006450:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006454:	06e8      	lsls	r0, r5, #27
 8006456:	cb18      	ldmia	r3, {r3, r4}
 8006458:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800645c:	d50c      	bpl.n	8006478 <_dtoa_r+0x340>
 800645e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006462:	4b99      	ldr	r3, [pc, #612]	; (80066c8 <_dtoa_r+0x590>)
 8006464:	f005 050f 	and.w	r5, r5, #15
 8006468:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800646c:	f7fa f9c6 	bl	80007fc <__aeabi_ddiv>
 8006470:	2403      	movs	r4, #3
 8006472:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006476:	e000      	b.n	800647a <_dtoa_r+0x342>
 8006478:	2402      	movs	r4, #2
 800647a:	4e93      	ldr	r6, [pc, #588]	; (80066c8 <_dtoa_r+0x590>)
 800647c:	b16d      	cbz	r5, 800649a <_dtoa_r+0x362>
 800647e:	07e9      	lsls	r1, r5, #31
 8006480:	d508      	bpl.n	8006494 <_dtoa_r+0x35c>
 8006482:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006486:	e9d6 2300 	ldrd	r2, r3, [r6]
 800648a:	f7fa f88d 	bl	80005a8 <__aeabi_dmul>
 800648e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006492:	3401      	adds	r4, #1
 8006494:	106d      	asrs	r5, r5, #1
 8006496:	3608      	adds	r6, #8
 8006498:	e7f0      	b.n	800647c <_dtoa_r+0x344>
 800649a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800649e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064a2:	f7fa f9ab 	bl	80007fc <__aeabi_ddiv>
 80064a6:	e020      	b.n	80064ea <_dtoa_r+0x3b2>
 80064a8:	f1cb 0500 	rsb	r5, fp, #0
 80064ac:	b305      	cbz	r5, 80064f0 <_dtoa_r+0x3b8>
 80064ae:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80064b2:	4b84      	ldr	r3, [pc, #528]	; (80066c4 <_dtoa_r+0x58c>)
 80064b4:	f005 020f 	and.w	r2, r5, #15
 80064b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c0:	f7fa f872 	bl	80005a8 <__aeabi_dmul>
 80064c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064c8:	4e7f      	ldr	r6, [pc, #508]	; (80066c8 <_dtoa_r+0x590>)
 80064ca:	112d      	asrs	r5, r5, #4
 80064cc:	2300      	movs	r3, #0
 80064ce:	2402      	movs	r4, #2
 80064d0:	b155      	cbz	r5, 80064e8 <_dtoa_r+0x3b0>
 80064d2:	07ea      	lsls	r2, r5, #31
 80064d4:	d505      	bpl.n	80064e2 <_dtoa_r+0x3aa>
 80064d6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80064da:	f7fa f865 	bl	80005a8 <__aeabi_dmul>
 80064de:	3401      	adds	r4, #1
 80064e0:	2301      	movs	r3, #1
 80064e2:	106d      	asrs	r5, r5, #1
 80064e4:	3608      	adds	r6, #8
 80064e6:	e7f3      	b.n	80064d0 <_dtoa_r+0x398>
 80064e8:	b11b      	cbz	r3, 80064f2 <_dtoa_r+0x3ba>
 80064ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064ee:	e000      	b.n	80064f2 <_dtoa_r+0x3ba>
 80064f0:	2402      	movs	r4, #2
 80064f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80064f4:	b1e3      	cbz	r3, 8006530 <_dtoa_r+0x3f8>
 80064f6:	e9dd 5602 	ldrd	r5, r6, [sp, #8]
 80064fa:	2200      	movs	r2, #0
 80064fc:	4b73      	ldr	r3, [pc, #460]	; (80066cc <_dtoa_r+0x594>)
 80064fe:	4628      	mov	r0, r5
 8006500:	4631      	mov	r1, r6
 8006502:	f7fa fac3 	bl	8000a8c <__aeabi_dcmplt>
 8006506:	b198      	cbz	r0, 8006530 <_dtoa_r+0x3f8>
 8006508:	9b05      	ldr	r3, [sp, #20]
 800650a:	b18b      	cbz	r3, 8006530 <_dtoa_r+0x3f8>
 800650c:	f1b9 0f00 	cmp.w	r9, #0
 8006510:	f340 80e6 	ble.w	80066e0 <_dtoa_r+0x5a8>
 8006514:	f10b 33ff 	add.w	r3, fp, #4294967295
 8006518:	9308      	str	r3, [sp, #32]
 800651a:	4631      	mov	r1, r6
 800651c:	2200      	movs	r2, #0
 800651e:	4b6c      	ldr	r3, [pc, #432]	; (80066d0 <_dtoa_r+0x598>)
 8006520:	4628      	mov	r0, r5
 8006522:	f7fa f841 	bl	80005a8 <__aeabi_dmul>
 8006526:	3401      	adds	r4, #1
 8006528:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800652c:	464e      	mov	r6, r9
 800652e:	e002      	b.n	8006536 <_dtoa_r+0x3fe>
 8006530:	9e05      	ldr	r6, [sp, #20]
 8006532:	f8cd b020 	str.w	fp, [sp, #32]
 8006536:	4620      	mov	r0, r4
 8006538:	f7f9 ffd0 	bl	80004dc <__aeabi_i2d>
 800653c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006540:	f7fa f832 	bl	80005a8 <__aeabi_dmul>
 8006544:	4b63      	ldr	r3, [pc, #396]	; (80066d4 <_dtoa_r+0x59c>)
 8006546:	2200      	movs	r2, #0
 8006548:	f7f9 fe7c 	bl	8000244 <__adddf3>
 800654c:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006550:	4604      	mov	r4, r0
 8006552:	930c      	str	r3, [sp, #48]	; 0x30
 8006554:	461d      	mov	r5, r3
 8006556:	b9d6      	cbnz	r6, 800658e <_dtoa_r+0x456>
 8006558:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800655c:	2200      	movs	r2, #0
 800655e:	4b5e      	ldr	r3, [pc, #376]	; (80066d8 <_dtoa_r+0x5a0>)
 8006560:	f7f9 fe6e 	bl	8000240 <__aeabi_dsub>
 8006564:	4622      	mov	r2, r4
 8006566:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006568:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800656c:	f7fa faac 	bl	8000ac8 <__aeabi_dcmpgt>
 8006570:	2800      	cmp	r0, #0
 8006572:	f040 823f 	bne.w	80069f4 <_dtoa_r+0x8bc>
 8006576:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006578:	4622      	mov	r2, r4
 800657a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800657e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006582:	f7fa fa83 	bl	8000a8c <__aeabi_dcmplt>
 8006586:	2800      	cmp	r0, #0
 8006588:	f040 822b 	bne.w	80069e2 <_dtoa_r+0x8aa>
 800658c:	e0a8      	b.n	80066e0 <_dtoa_r+0x5a8>
 800658e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006590:	4b4c      	ldr	r3, [pc, #304]	; (80066c4 <_dtoa_r+0x58c>)
 8006592:	1e71      	subs	r1, r6, #1
 8006594:	2a00      	cmp	r2, #0
 8006596:	d049      	beq.n	800662c <_dtoa_r+0x4f4>
 8006598:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800659c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a0:	2000      	movs	r0, #0
 80065a2:	494e      	ldr	r1, [pc, #312]	; (80066dc <_dtoa_r+0x5a4>)
 80065a4:	f7fa f92a 	bl	80007fc <__aeabi_ddiv>
 80065a8:	4622      	mov	r2, r4
 80065aa:	462b      	mov	r3, r5
 80065ac:	f7f9 fe48 	bl	8000240 <__aeabi_dsub>
 80065b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80065b4:	9c06      	ldr	r4, [sp, #24]
 80065b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065ba:	f7fa faa5 	bl	8000b08 <__aeabi_d2iz>
 80065be:	4605      	mov	r5, r0
 80065c0:	f7f9 ff8c 	bl	80004dc <__aeabi_i2d>
 80065c4:	4602      	mov	r2, r0
 80065c6:	460b      	mov	r3, r1
 80065c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065cc:	f7f9 fe38 	bl	8000240 <__aeabi_dsub>
 80065d0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80065d4:	3530      	adds	r5, #48	; 0x30
 80065d6:	f804 5b01 	strb.w	r5, [r4], #1
 80065da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065de:	f7fa fa55 	bl	8000a8c <__aeabi_dcmplt>
 80065e2:	2800      	cmp	r0, #0
 80065e4:	f040 831d 	bne.w	8006c22 <_dtoa_r+0xaea>
 80065e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065ec:	2000      	movs	r0, #0
 80065ee:	4937      	ldr	r1, [pc, #220]	; (80066cc <_dtoa_r+0x594>)
 80065f0:	f7f9 fe26 	bl	8000240 <__aeabi_dsub>
 80065f4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80065f8:	f7fa fa48 	bl	8000a8c <__aeabi_dcmplt>
 80065fc:	2800      	cmp	r0, #0
 80065fe:	f040 80d1 	bne.w	80067a4 <_dtoa_r+0x66c>
 8006602:	9b06      	ldr	r3, [sp, #24]
 8006604:	1ae3      	subs	r3, r4, r3
 8006606:	42b3      	cmp	r3, r6
 8006608:	da6a      	bge.n	80066e0 <_dtoa_r+0x5a8>
 800660a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800660e:	2200      	movs	r2, #0
 8006610:	4b2f      	ldr	r3, [pc, #188]	; (80066d0 <_dtoa_r+0x598>)
 8006612:	f7f9 ffc9 	bl	80005a8 <__aeabi_dmul>
 8006616:	2200      	movs	r2, #0
 8006618:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800661c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006620:	4b2b      	ldr	r3, [pc, #172]	; (80066d0 <_dtoa_r+0x598>)
 8006622:	f7f9 ffc1 	bl	80005a8 <__aeabi_dmul>
 8006626:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800662a:	e7c4      	b.n	80065b6 <_dtoa_r+0x47e>
 800662c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8006630:	4622      	mov	r2, r4
 8006632:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006636:	462b      	mov	r3, r5
 8006638:	f7f9 ffb6 	bl	80005a8 <__aeabi_dmul>
 800663c:	9b06      	ldr	r3, [sp, #24]
 800663e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006642:	461d      	mov	r5, r3
 8006644:	199c      	adds	r4, r3, r6
 8006646:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800664a:	f7fa fa5d 	bl	8000b08 <__aeabi_d2iz>
 800664e:	4606      	mov	r6, r0
 8006650:	f7f9 ff44 	bl	80004dc <__aeabi_i2d>
 8006654:	4602      	mov	r2, r0
 8006656:	460b      	mov	r3, r1
 8006658:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800665c:	f7f9 fdf0 	bl	8000240 <__aeabi_dsub>
 8006660:	3630      	adds	r6, #48	; 0x30
 8006662:	f805 6b01 	strb.w	r6, [r5], #1
 8006666:	42ac      	cmp	r4, r5
 8006668:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800666c:	f04f 0200 	mov.w	r2, #0
 8006670:	d122      	bne.n	80066b8 <_dtoa_r+0x580>
 8006672:	4b1a      	ldr	r3, [pc, #104]	; (80066dc <_dtoa_r+0x5a4>)
 8006674:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006678:	f7f9 fde4 	bl	8000244 <__adddf3>
 800667c:	4602      	mov	r2, r0
 800667e:	460b      	mov	r3, r1
 8006680:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006684:	f7fa fa20 	bl	8000ac8 <__aeabi_dcmpgt>
 8006688:	2800      	cmp	r0, #0
 800668a:	f040 808b 	bne.w	80067a4 <_dtoa_r+0x66c>
 800668e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006692:	2000      	movs	r0, #0
 8006694:	4911      	ldr	r1, [pc, #68]	; (80066dc <_dtoa_r+0x5a4>)
 8006696:	f7f9 fdd3 	bl	8000240 <__aeabi_dsub>
 800669a:	4602      	mov	r2, r0
 800669c:	460b      	mov	r3, r1
 800669e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066a2:	f7fa f9f3 	bl	8000a8c <__aeabi_dcmplt>
 80066a6:	b1d8      	cbz	r0, 80066e0 <_dtoa_r+0x5a8>
 80066a8:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 80066ac:	1e62      	subs	r2, r4, #1
 80066ae:	2b30      	cmp	r3, #48	; 0x30
 80066b0:	f040 82b7 	bne.w	8006c22 <_dtoa_r+0xaea>
 80066b4:	4614      	mov	r4, r2
 80066b6:	e7f7      	b.n	80066a8 <_dtoa_r+0x570>
 80066b8:	4b05      	ldr	r3, [pc, #20]	; (80066d0 <_dtoa_r+0x598>)
 80066ba:	f7f9 ff75 	bl	80005a8 <__aeabi_dmul>
 80066be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066c2:	e7c0      	b.n	8006646 <_dtoa_r+0x50e>
 80066c4:	08008b88 	.word	0x08008b88
 80066c8:	08008c50 	.word	0x08008c50
 80066cc:	3ff00000 	.word	0x3ff00000
 80066d0:	40240000 	.word	0x40240000
 80066d4:	401c0000 	.word	0x401c0000
 80066d8:	40140000 	.word	0x40140000
 80066dc:	3fe00000 	.word	0x3fe00000
 80066e0:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
 80066e4:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80066e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	db7c      	blt.n	80067e8 <_dtoa_r+0x6b0>
 80066ee:	f1bb 0f0e 	cmp.w	fp, #14
 80066f2:	dc79      	bgt.n	80067e8 <_dtoa_r+0x6b0>
 80066f4:	4bab      	ldr	r3, [pc, #684]	; (80069a4 <_dtoa_r+0x86c>)
 80066f6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80066fa:	e9d3 6700 	ldrd	r6, r7, [r3]
 80066fe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006700:	2b00      	cmp	r3, #0
 8006702:	da14      	bge.n	800672e <_dtoa_r+0x5f6>
 8006704:	9b05      	ldr	r3, [sp, #20]
 8006706:	2b00      	cmp	r3, #0
 8006708:	dc11      	bgt.n	800672e <_dtoa_r+0x5f6>
 800670a:	f040 816c 	bne.w	80069e6 <_dtoa_r+0x8ae>
 800670e:	2200      	movs	r2, #0
 8006710:	4ba5      	ldr	r3, [pc, #660]	; (80069a8 <_dtoa_r+0x870>)
 8006712:	4630      	mov	r0, r6
 8006714:	4639      	mov	r1, r7
 8006716:	f7f9 ff47 	bl	80005a8 <__aeabi_dmul>
 800671a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800671e:	f7fa f9c9 	bl	8000ab4 <__aeabi_dcmpge>
 8006722:	9d05      	ldr	r5, [sp, #20]
 8006724:	462e      	mov	r6, r5
 8006726:	2800      	cmp	r0, #0
 8006728:	f040 815f 	bne.w	80069ea <_dtoa_r+0x8b2>
 800672c:	e165      	b.n	80069fa <_dtoa_r+0x8c2>
 800672e:	9c06      	ldr	r4, [sp, #24]
 8006730:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006734:	4632      	mov	r2, r6
 8006736:	463b      	mov	r3, r7
 8006738:	4640      	mov	r0, r8
 800673a:	4649      	mov	r1, r9
 800673c:	f7fa f85e 	bl	80007fc <__aeabi_ddiv>
 8006740:	f7fa f9e2 	bl	8000b08 <__aeabi_d2iz>
 8006744:	4605      	mov	r5, r0
 8006746:	f7f9 fec9 	bl	80004dc <__aeabi_i2d>
 800674a:	4632      	mov	r2, r6
 800674c:	463b      	mov	r3, r7
 800674e:	f7f9 ff2b 	bl	80005a8 <__aeabi_dmul>
 8006752:	460b      	mov	r3, r1
 8006754:	4602      	mov	r2, r0
 8006756:	4649      	mov	r1, r9
 8006758:	4640      	mov	r0, r8
 800675a:	f7f9 fd71 	bl	8000240 <__aeabi_dsub>
 800675e:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 8006762:	9b06      	ldr	r3, [sp, #24]
 8006764:	f804 eb01 	strb.w	lr, [r4], #1
 8006768:	ebc3 0e04 	rsb	lr, r3, r4
 800676c:	9b05      	ldr	r3, [sp, #20]
 800676e:	4573      	cmp	r3, lr
 8006770:	d12d      	bne.n	80067ce <_dtoa_r+0x696>
 8006772:	4602      	mov	r2, r0
 8006774:	460b      	mov	r3, r1
 8006776:	f7f9 fd65 	bl	8000244 <__adddf3>
 800677a:	4680      	mov	r8, r0
 800677c:	4689      	mov	r9, r1
 800677e:	4602      	mov	r2, r0
 8006780:	460b      	mov	r3, r1
 8006782:	4630      	mov	r0, r6
 8006784:	4639      	mov	r1, r7
 8006786:	f7fa f981 	bl	8000a8c <__aeabi_dcmplt>
 800678a:	b978      	cbnz	r0, 80067ac <_dtoa_r+0x674>
 800678c:	4642      	mov	r2, r8
 800678e:	464b      	mov	r3, r9
 8006790:	4630      	mov	r0, r6
 8006792:	4639      	mov	r1, r7
 8006794:	f7fa f970 	bl	8000a78 <__aeabi_dcmpeq>
 8006798:	2800      	cmp	r0, #0
 800679a:	f000 8244 	beq.w	8006c26 <_dtoa_r+0xaee>
 800679e:	07eb      	lsls	r3, r5, #31
 80067a0:	d404      	bmi.n	80067ac <_dtoa_r+0x674>
 80067a2:	e240      	b.n	8006c26 <_dtoa_r+0xaee>
 80067a4:	f8dd b020 	ldr.w	fp, [sp, #32]
 80067a8:	e000      	b.n	80067ac <_dtoa_r+0x674>
 80067aa:	461c      	mov	r4, r3
 80067ac:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 80067b0:	1e63      	subs	r3, r4, #1
 80067b2:	2a39      	cmp	r2, #57	; 0x39
 80067b4:	d107      	bne.n	80067c6 <_dtoa_r+0x68e>
 80067b6:	9a06      	ldr	r2, [sp, #24]
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d1f6      	bne.n	80067aa <_dtoa_r+0x672>
 80067bc:	9906      	ldr	r1, [sp, #24]
 80067be:	2230      	movs	r2, #48	; 0x30
 80067c0:	f10b 0b01 	add.w	fp, fp, #1
 80067c4:	700a      	strb	r2, [r1, #0]
 80067c6:	781a      	ldrb	r2, [r3, #0]
 80067c8:	3201      	adds	r2, #1
 80067ca:	701a      	strb	r2, [r3, #0]
 80067cc:	e22b      	b.n	8006c26 <_dtoa_r+0xaee>
 80067ce:	2200      	movs	r2, #0
 80067d0:	4b76      	ldr	r3, [pc, #472]	; (80069ac <_dtoa_r+0x874>)
 80067d2:	f7f9 fee9 	bl	80005a8 <__aeabi_dmul>
 80067d6:	2200      	movs	r2, #0
 80067d8:	2300      	movs	r3, #0
 80067da:	4680      	mov	r8, r0
 80067dc:	4689      	mov	r9, r1
 80067de:	f7fa f94b 	bl	8000a78 <__aeabi_dcmpeq>
 80067e2:	2800      	cmp	r0, #0
 80067e4:	d0a6      	beq.n	8006734 <_dtoa_r+0x5fc>
 80067e6:	e21e      	b.n	8006c26 <_dtoa_r+0xaee>
 80067e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067ea:	2a00      	cmp	r2, #0
 80067ec:	d02b      	beq.n	8006846 <_dtoa_r+0x70e>
 80067ee:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80067f0:	2a01      	cmp	r2, #1
 80067f2:	dc0a      	bgt.n	800680a <_dtoa_r+0x6d2>
 80067f4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80067f6:	b112      	cbz	r2, 80067fe <_dtoa_r+0x6c6>
 80067f8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80067fc:	e002      	b.n	8006804 <_dtoa_r+0x6cc>
 80067fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006800:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006804:	463d      	mov	r5, r7
 8006806:	4644      	mov	r4, r8
 8006808:	e013      	b.n	8006832 <_dtoa_r+0x6fa>
 800680a:	9b05      	ldr	r3, [sp, #20]
 800680c:	1e5d      	subs	r5, r3, #1
 800680e:	42af      	cmp	r7, r5
 8006810:	bfbf      	itttt	lt
 8006812:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8006814:	1bea      	sublt	r2, r5, r7
 8006816:	189b      	addlt	r3, r3, r2
 8006818:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800681a:	9b05      	ldr	r3, [sp, #20]
 800681c:	bfb6      	itet	lt
 800681e:	462f      	movlt	r7, r5
 8006820:	1b7d      	subge	r5, r7, r5
 8006822:	2500      	movlt	r5, #0
 8006824:	2b00      	cmp	r3, #0
 8006826:	bfa7      	ittee	ge
 8006828:	4644      	movge	r4, r8
 800682a:	9b05      	ldrge	r3, [sp, #20]
 800682c:	ebc3 0408 	rsblt	r4, r3, r8
 8006830:	2300      	movlt	r3, #0
 8006832:	9a07      	ldr	r2, [sp, #28]
 8006834:	2101      	movs	r1, #1
 8006836:	441a      	add	r2, r3
 8006838:	4650      	mov	r0, sl
 800683a:	4498      	add	r8, r3
 800683c:	9207      	str	r2, [sp, #28]
 800683e:	f001 f83a 	bl	80078b6 <__i2b>
 8006842:	4606      	mov	r6, r0
 8006844:	e002      	b.n	800684c <_dtoa_r+0x714>
 8006846:	463d      	mov	r5, r7
 8006848:	4644      	mov	r4, r8
 800684a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800684c:	b15c      	cbz	r4, 8006866 <_dtoa_r+0x72e>
 800684e:	9b07      	ldr	r3, [sp, #28]
 8006850:	2b00      	cmp	r3, #0
 8006852:	dd08      	ble.n	8006866 <_dtoa_r+0x72e>
 8006854:	42a3      	cmp	r3, r4
 8006856:	bfa8      	it	ge
 8006858:	4623      	movge	r3, r4
 800685a:	9a07      	ldr	r2, [sp, #28]
 800685c:	ebc3 0808 	rsb	r8, r3, r8
 8006860:	1ae4      	subs	r4, r4, r3
 8006862:	1ad3      	subs	r3, r2, r3
 8006864:	9307      	str	r3, [sp, #28]
 8006866:	2f00      	cmp	r7, #0
 8006868:	dd1d      	ble.n	80068a6 <_dtoa_r+0x76e>
 800686a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800686c:	b1ab      	cbz	r3, 800689a <_dtoa_r+0x762>
 800686e:	b18d      	cbz	r5, 8006894 <_dtoa_r+0x75c>
 8006870:	4631      	mov	r1, r6
 8006872:	462a      	mov	r2, r5
 8006874:	4650      	mov	r0, sl
 8006876:	f001 f8b7 	bl	80079e8 <__pow5mult>
 800687a:	9a04      	ldr	r2, [sp, #16]
 800687c:	4601      	mov	r1, r0
 800687e:	4606      	mov	r6, r0
 8006880:	4650      	mov	r0, sl
 8006882:	f001 f821 	bl	80078c8 <__multiply>
 8006886:	9904      	ldr	r1, [sp, #16]
 8006888:	9008      	str	r0, [sp, #32]
 800688a:	4650      	mov	r0, sl
 800688c:	f000 ff74 	bl	8007778 <_Bfree>
 8006890:	9b08      	ldr	r3, [sp, #32]
 8006892:	9304      	str	r3, [sp, #16]
 8006894:	1b7a      	subs	r2, r7, r5
 8006896:	d006      	beq.n	80068a6 <_dtoa_r+0x76e>
 8006898:	e000      	b.n	800689c <_dtoa_r+0x764>
 800689a:	463a      	mov	r2, r7
 800689c:	9904      	ldr	r1, [sp, #16]
 800689e:	4650      	mov	r0, sl
 80068a0:	f001 f8a2 	bl	80079e8 <__pow5mult>
 80068a4:	9004      	str	r0, [sp, #16]
 80068a6:	2101      	movs	r1, #1
 80068a8:	4650      	mov	r0, sl
 80068aa:	f001 f804 	bl	80078b6 <__i2b>
 80068ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068b0:	4605      	mov	r5, r0
 80068b2:	b35b      	cbz	r3, 800690c <_dtoa_r+0x7d4>
 80068b4:	461a      	mov	r2, r3
 80068b6:	4601      	mov	r1, r0
 80068b8:	4650      	mov	r0, sl
 80068ba:	f001 f895 	bl	80079e8 <__pow5mult>
 80068be:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80068c0:	4605      	mov	r5, r0
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	dc18      	bgt.n	80068f8 <_dtoa_r+0x7c0>
 80068c6:	9b02      	ldr	r3, [sp, #8]
 80068c8:	b983      	cbnz	r3, 80068ec <_dtoa_r+0x7b4>
 80068ca:	9b03      	ldr	r3, [sp, #12]
 80068cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068d0:	b973      	cbnz	r3, 80068f0 <_dtoa_r+0x7b8>
 80068d2:	9b03      	ldr	r3, [sp, #12]
 80068d4:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 80068d8:	0d3f      	lsrs	r7, r7, #20
 80068da:	053f      	lsls	r7, r7, #20
 80068dc:	b14f      	cbz	r7, 80068f2 <_dtoa_r+0x7ba>
 80068de:	9b07      	ldr	r3, [sp, #28]
 80068e0:	f108 0801 	add.w	r8, r8, #1
 80068e4:	3301      	adds	r3, #1
 80068e6:	9307      	str	r3, [sp, #28]
 80068e8:	2701      	movs	r7, #1
 80068ea:	e002      	b.n	80068f2 <_dtoa_r+0x7ba>
 80068ec:	2700      	movs	r7, #0
 80068ee:	e000      	b.n	80068f2 <_dtoa_r+0x7ba>
 80068f0:	9f02      	ldr	r7, [sp, #8]
 80068f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068f4:	b173      	cbz	r3, 8006914 <_dtoa_r+0x7dc>
 80068f6:	e000      	b.n	80068fa <_dtoa_r+0x7c2>
 80068f8:	2700      	movs	r7, #0
 80068fa:	692b      	ldr	r3, [r5, #16]
 80068fc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006900:	6918      	ldr	r0, [r3, #16]
 8006902:	f000 ff8b 	bl	800781c <__hi0bits>
 8006906:	f1c0 0020 	rsb	r0, r0, #32
 800690a:	e004      	b.n	8006916 <_dtoa_r+0x7de>
 800690c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800690e:	2b01      	cmp	r3, #1
 8006910:	ddd9      	ble.n	80068c6 <_dtoa_r+0x78e>
 8006912:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8006914:	2001      	movs	r0, #1
 8006916:	9b07      	ldr	r3, [sp, #28]
 8006918:	4418      	add	r0, r3
 800691a:	f010 001f 	ands.w	r0, r0, #31
 800691e:	d008      	beq.n	8006932 <_dtoa_r+0x7fa>
 8006920:	f1c0 0320 	rsb	r3, r0, #32
 8006924:	2b04      	cmp	r3, #4
 8006926:	dd02      	ble.n	800692e <_dtoa_r+0x7f6>
 8006928:	f1c0 001c 	rsb	r0, r0, #28
 800692c:	e002      	b.n	8006934 <_dtoa_r+0x7fc>
 800692e:	d006      	beq.n	800693e <_dtoa_r+0x806>
 8006930:	4618      	mov	r0, r3
 8006932:	301c      	adds	r0, #28
 8006934:	9b07      	ldr	r3, [sp, #28]
 8006936:	4480      	add	r8, r0
 8006938:	4403      	add	r3, r0
 800693a:	4404      	add	r4, r0
 800693c:	9307      	str	r3, [sp, #28]
 800693e:	f1b8 0f00 	cmp.w	r8, #0
 8006942:	dd05      	ble.n	8006950 <_dtoa_r+0x818>
 8006944:	4642      	mov	r2, r8
 8006946:	9904      	ldr	r1, [sp, #16]
 8006948:	4650      	mov	r0, sl
 800694a:	f001 f89b 	bl	8007a84 <__lshift>
 800694e:	9004      	str	r0, [sp, #16]
 8006950:	9b07      	ldr	r3, [sp, #28]
 8006952:	2b00      	cmp	r3, #0
 8006954:	dd05      	ble.n	8006962 <_dtoa_r+0x82a>
 8006956:	4629      	mov	r1, r5
 8006958:	461a      	mov	r2, r3
 800695a:	4650      	mov	r0, sl
 800695c:	f001 f892 	bl	8007a84 <__lshift>
 8006960:	4605      	mov	r5, r0
 8006962:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006964:	b323      	cbz	r3, 80069b0 <_dtoa_r+0x878>
 8006966:	4629      	mov	r1, r5
 8006968:	9804      	ldr	r0, [sp, #16]
 800696a:	f001 f8dc 	bl	8007b26 <__mcmp>
 800696e:	2800      	cmp	r0, #0
 8006970:	da1e      	bge.n	80069b0 <_dtoa_r+0x878>
 8006972:	2300      	movs	r3, #0
 8006974:	220a      	movs	r2, #10
 8006976:	9904      	ldr	r1, [sp, #16]
 8006978:	4650      	mov	r0, sl
 800697a:	f000 ff14 	bl	80077a6 <__multadd>
 800697e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006980:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006984:	9004      	str	r0, [sp, #16]
 8006986:	2b00      	cmp	r3, #0
 8006988:	f000 815f 	beq.w	8006c4a <_dtoa_r+0xb12>
 800698c:	4631      	mov	r1, r6
 800698e:	2300      	movs	r3, #0
 8006990:	220a      	movs	r2, #10
 8006992:	4650      	mov	r0, sl
 8006994:	f000 ff07 	bl	80077a6 <__multadd>
 8006998:	f1b9 0f00 	cmp.w	r9, #0
 800699c:	4606      	mov	r6, r0
 800699e:	dc3f      	bgt.n	8006a20 <_dtoa_r+0x8e8>
 80069a0:	e03b      	b.n	8006a1a <_dtoa_r+0x8e2>
 80069a2:	bf00      	nop
 80069a4:	08008b88 	.word	0x08008b88
 80069a8:	40140000 	.word	0x40140000
 80069ac:	40240000 	.word	0x40240000
 80069b0:	9b05      	ldr	r3, [sp, #20]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	dc2b      	bgt.n	8006a0e <_dtoa_r+0x8d6>
 80069b6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80069b8:	2b02      	cmp	r3, #2
 80069ba:	dd28      	ble.n	8006a0e <_dtoa_r+0x8d6>
 80069bc:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80069c0:	f1b9 0f00 	cmp.w	r9, #0
 80069c4:	d111      	bne.n	80069ea <_dtoa_r+0x8b2>
 80069c6:	4629      	mov	r1, r5
 80069c8:	464b      	mov	r3, r9
 80069ca:	2205      	movs	r2, #5
 80069cc:	4650      	mov	r0, sl
 80069ce:	f000 feea 	bl	80077a6 <__multadd>
 80069d2:	4601      	mov	r1, r0
 80069d4:	4605      	mov	r5, r0
 80069d6:	9804      	ldr	r0, [sp, #16]
 80069d8:	f001 f8a5 	bl	8007b26 <__mcmp>
 80069dc:	2800      	cmp	r0, #0
 80069de:	dc0c      	bgt.n	80069fa <_dtoa_r+0x8c2>
 80069e0:	e003      	b.n	80069ea <_dtoa_r+0x8b2>
 80069e2:	4635      	mov	r5, r6
 80069e4:	e000      	b.n	80069e8 <_dtoa_r+0x8b0>
 80069e6:	2500      	movs	r5, #0
 80069e8:	462e      	mov	r6, r5
 80069ea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80069ec:	9c06      	ldr	r4, [sp, #24]
 80069ee:	ea6f 0b03 	mvn.w	fp, r3
 80069f2:	e009      	b.n	8006a08 <_dtoa_r+0x8d0>
 80069f4:	4635      	mov	r5, r6
 80069f6:	f8dd b020 	ldr.w	fp, [sp, #32]
 80069fa:	9b06      	ldr	r3, [sp, #24]
 80069fc:	9a06      	ldr	r2, [sp, #24]
 80069fe:	1c5c      	adds	r4, r3, #1
 8006a00:	2331      	movs	r3, #49	; 0x31
 8006a02:	7013      	strb	r3, [r2, #0]
 8006a04:	f10b 0b01 	add.w	fp, fp, #1
 8006a08:	9605      	str	r6, [sp, #20]
 8006a0a:	2600      	movs	r6, #0
 8006a0c:	e0f7      	b.n	8006bfe <_dtoa_r+0xac6>
 8006a0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a10:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006a14:	b923      	cbnz	r3, 8006a20 <_dtoa_r+0x8e8>
 8006a16:	9c06      	ldr	r4, [sp, #24]
 8006a18:	e0b2      	b.n	8006b80 <_dtoa_r+0xa48>
 8006a1a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	dccf      	bgt.n	80069c0 <_dtoa_r+0x888>
 8006a20:	2c00      	cmp	r4, #0
 8006a22:	dd05      	ble.n	8006a30 <_dtoa_r+0x8f8>
 8006a24:	4631      	mov	r1, r6
 8006a26:	4622      	mov	r2, r4
 8006a28:	4650      	mov	r0, sl
 8006a2a:	f001 f82b 	bl	8007a84 <__lshift>
 8006a2e:	4606      	mov	r6, r0
 8006a30:	b19f      	cbz	r7, 8006a5a <_dtoa_r+0x922>
 8006a32:	6871      	ldr	r1, [r6, #4]
 8006a34:	4650      	mov	r0, sl
 8006a36:	f000 fe6a 	bl	800770e <_Balloc>
 8006a3a:	4604      	mov	r4, r0
 8006a3c:	6932      	ldr	r2, [r6, #16]
 8006a3e:	f106 010c 	add.w	r1, r6, #12
 8006a42:	3202      	adds	r2, #2
 8006a44:	0092      	lsls	r2, r2, #2
 8006a46:	300c      	adds	r0, #12
 8006a48:	f000 fe54 	bl	80076f4 <memcpy>
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	4621      	mov	r1, r4
 8006a50:	4650      	mov	r0, sl
 8006a52:	f001 f817 	bl	8007a84 <__lshift>
 8006a56:	9005      	str	r0, [sp, #20]
 8006a58:	e000      	b.n	8006a5c <_dtoa_r+0x924>
 8006a5a:	9605      	str	r6, [sp, #20]
 8006a5c:	9b02      	ldr	r3, [sp, #8]
 8006a5e:	9f06      	ldr	r7, [sp, #24]
 8006a60:	f003 0301 	and.w	r3, r3, #1
 8006a64:	9307      	str	r3, [sp, #28]
 8006a66:	4629      	mov	r1, r5
 8006a68:	9804      	ldr	r0, [sp, #16]
 8006a6a:	f7ff fad9 	bl	8006020 <quorem>
 8006a6e:	4631      	mov	r1, r6
 8006a70:	4604      	mov	r4, r0
 8006a72:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006a76:	9804      	ldr	r0, [sp, #16]
 8006a78:	f001 f855 	bl	8007b26 <__mcmp>
 8006a7c:	9a05      	ldr	r2, [sp, #20]
 8006a7e:	9002      	str	r0, [sp, #8]
 8006a80:	4629      	mov	r1, r5
 8006a82:	4650      	mov	r0, sl
 8006a84:	f001 f86b 	bl	8007b5e <__mdiff>
 8006a88:	68c3      	ldr	r3, [r0, #12]
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	b93b      	cbnz	r3, 8006a9e <_dtoa_r+0x966>
 8006a8e:	4601      	mov	r1, r0
 8006a90:	900a      	str	r0, [sp, #40]	; 0x28
 8006a92:	9804      	ldr	r0, [sp, #16]
 8006a94:	f001 f847 	bl	8007b26 <__mcmp>
 8006a98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	e000      	b.n	8006aa0 <_dtoa_r+0x968>
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	4611      	mov	r1, r2
 8006aa2:	4650      	mov	r0, sl
 8006aa4:	930a      	str	r3, [sp, #40]	; 0x28
 8006aa6:	f000 fe67 	bl	8007778 <_Bfree>
 8006aaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006aac:	b953      	cbnz	r3, 8006ac4 <_dtoa_r+0x98c>
 8006aae:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006ab0:	b942      	cbnz	r2, 8006ac4 <_dtoa_r+0x98c>
 8006ab2:	9a07      	ldr	r2, [sp, #28]
 8006ab4:	b932      	cbnz	r2, 8006ac4 <_dtoa_r+0x98c>
 8006ab6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006aba:	d02a      	beq.n	8006b12 <_dtoa_r+0x9da>
 8006abc:	9b02      	ldr	r3, [sp, #8]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	dc1c      	bgt.n	8006afc <_dtoa_r+0x9c4>
 8006ac2:	e01d      	b.n	8006b00 <_dtoa_r+0x9c8>
 8006ac4:	9a02      	ldr	r2, [sp, #8]
 8006ac6:	2a00      	cmp	r2, #0
 8006ac8:	db04      	blt.n	8006ad4 <_dtoa_r+0x99c>
 8006aca:	d11b      	bne.n	8006b04 <_dtoa_r+0x9cc>
 8006acc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006ace:	b9ca      	cbnz	r2, 8006b04 <_dtoa_r+0x9cc>
 8006ad0:	9a07      	ldr	r2, [sp, #28]
 8006ad2:	b9ba      	cbnz	r2, 8006b04 <_dtoa_r+0x9cc>
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	dd13      	ble.n	8006b00 <_dtoa_r+0x9c8>
 8006ad8:	2201      	movs	r2, #1
 8006ada:	9904      	ldr	r1, [sp, #16]
 8006adc:	4650      	mov	r0, sl
 8006ade:	f000 ffd1 	bl	8007a84 <__lshift>
 8006ae2:	4629      	mov	r1, r5
 8006ae4:	9004      	str	r0, [sp, #16]
 8006ae6:	f001 f81e 	bl	8007b26 <__mcmp>
 8006aea:	2800      	cmp	r0, #0
 8006aec:	dc03      	bgt.n	8006af6 <_dtoa_r+0x9be>
 8006aee:	d107      	bne.n	8006b00 <_dtoa_r+0x9c8>
 8006af0:	f018 0f01 	tst.w	r8, #1
 8006af4:	d004      	beq.n	8006b00 <_dtoa_r+0x9c8>
 8006af6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006afa:	d00a      	beq.n	8006b12 <_dtoa_r+0x9da>
 8006afc:	f104 0831 	add.w	r8, r4, #49	; 0x31
 8006b00:	1c7c      	adds	r4, r7, #1
 8006b02:	e00c      	b.n	8006b1e <_dtoa_r+0x9e6>
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	f107 0401 	add.w	r4, r7, #1
 8006b0a:	dd0b      	ble.n	8006b24 <_dtoa_r+0x9ec>
 8006b0c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006b10:	d103      	bne.n	8006b1a <_dtoa_r+0x9e2>
 8006b12:	2339      	movs	r3, #57	; 0x39
 8006b14:	703b      	strb	r3, [r7, #0]
 8006b16:	3701      	adds	r7, #1
 8006b18:	e056      	b.n	8006bc8 <_dtoa_r+0xa90>
 8006b1a:	f108 0801 	add.w	r8, r8, #1
 8006b1e:	f887 8000 	strb.w	r8, [r7]
 8006b22:	e06c      	b.n	8006bfe <_dtoa_r+0xac6>
 8006b24:	9b06      	ldr	r3, [sp, #24]
 8006b26:	4627      	mov	r7, r4
 8006b28:	1ae3      	subs	r3, r4, r3
 8006b2a:	454b      	cmp	r3, r9
 8006b2c:	f804 8c01 	strb.w	r8, [r4, #-1]
 8006b30:	d03b      	beq.n	8006baa <_dtoa_r+0xa72>
 8006b32:	2300      	movs	r3, #0
 8006b34:	220a      	movs	r2, #10
 8006b36:	9904      	ldr	r1, [sp, #16]
 8006b38:	4650      	mov	r0, sl
 8006b3a:	f000 fe34 	bl	80077a6 <__multadd>
 8006b3e:	9b05      	ldr	r3, [sp, #20]
 8006b40:	9004      	str	r0, [sp, #16]
 8006b42:	429e      	cmp	r6, r3
 8006b44:	f04f 020a 	mov.w	r2, #10
 8006b48:	f04f 0300 	mov.w	r3, #0
 8006b4c:	4631      	mov	r1, r6
 8006b4e:	4650      	mov	r0, sl
 8006b50:	d104      	bne.n	8006b5c <_dtoa_r+0xa24>
 8006b52:	f000 fe28 	bl	80077a6 <__multadd>
 8006b56:	4606      	mov	r6, r0
 8006b58:	9005      	str	r0, [sp, #20]
 8006b5a:	e784      	b.n	8006a66 <_dtoa_r+0x92e>
 8006b5c:	f000 fe23 	bl	80077a6 <__multadd>
 8006b60:	2300      	movs	r3, #0
 8006b62:	4606      	mov	r6, r0
 8006b64:	220a      	movs	r2, #10
 8006b66:	9905      	ldr	r1, [sp, #20]
 8006b68:	4650      	mov	r0, sl
 8006b6a:	f000 fe1c 	bl	80077a6 <__multadd>
 8006b6e:	9005      	str	r0, [sp, #20]
 8006b70:	e779      	b.n	8006a66 <_dtoa_r+0x92e>
 8006b72:	2300      	movs	r3, #0
 8006b74:	220a      	movs	r2, #10
 8006b76:	9904      	ldr	r1, [sp, #16]
 8006b78:	4650      	mov	r0, sl
 8006b7a:	f000 fe14 	bl	80077a6 <__multadd>
 8006b7e:	9004      	str	r0, [sp, #16]
 8006b80:	4629      	mov	r1, r5
 8006b82:	9804      	ldr	r0, [sp, #16]
 8006b84:	f7ff fa4c 	bl	8006020 <quorem>
 8006b88:	9b06      	ldr	r3, [sp, #24]
 8006b8a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006b8e:	f804 8b01 	strb.w	r8, [r4], #1
 8006b92:	1ae3      	subs	r3, r4, r3
 8006b94:	454b      	cmp	r3, r9
 8006b96:	dbec      	blt.n	8006b72 <_dtoa_r+0xa3a>
 8006b98:	9b06      	ldr	r3, [sp, #24]
 8006b9a:	9605      	str	r6, [sp, #20]
 8006b9c:	f1b9 0f01 	cmp.w	r9, #1
 8006ba0:	bfac      	ite	ge
 8006ba2:	444b      	addge	r3, r9
 8006ba4:	3301      	addlt	r3, #1
 8006ba6:	461f      	mov	r7, r3
 8006ba8:	2600      	movs	r6, #0
 8006baa:	2201      	movs	r2, #1
 8006bac:	9904      	ldr	r1, [sp, #16]
 8006bae:	4650      	mov	r0, sl
 8006bb0:	f000 ff68 	bl	8007a84 <__lshift>
 8006bb4:	4629      	mov	r1, r5
 8006bb6:	9004      	str	r0, [sp, #16]
 8006bb8:	f000 ffb5 	bl	8007b26 <__mcmp>
 8006bbc:	2800      	cmp	r0, #0
 8006bbe:	dc03      	bgt.n	8006bc8 <_dtoa_r+0xa90>
 8006bc0:	d115      	bne.n	8006bee <_dtoa_r+0xab6>
 8006bc2:	f018 0f01 	tst.w	r8, #1
 8006bc6:	d012      	beq.n	8006bee <_dtoa_r+0xab6>
 8006bc8:	463c      	mov	r4, r7
 8006bca:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8006bce:	1e62      	subs	r2, r4, #1
 8006bd0:	2b39      	cmp	r3, #57	; 0x39
 8006bd2:	d109      	bne.n	8006be8 <_dtoa_r+0xab0>
 8006bd4:	9b06      	ldr	r3, [sp, #24]
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d104      	bne.n	8006be4 <_dtoa_r+0xaac>
 8006bda:	f10b 0b01 	add.w	fp, fp, #1
 8006bde:	2331      	movs	r3, #49	; 0x31
 8006be0:	9a06      	ldr	r2, [sp, #24]
 8006be2:	e002      	b.n	8006bea <_dtoa_r+0xab2>
 8006be4:	4614      	mov	r4, r2
 8006be6:	e7f0      	b.n	8006bca <_dtoa_r+0xa92>
 8006be8:	3301      	adds	r3, #1
 8006bea:	7013      	strb	r3, [r2, #0]
 8006bec:	e007      	b.n	8006bfe <_dtoa_r+0xac6>
 8006bee:	463c      	mov	r4, r7
 8006bf0:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8006bf4:	1e62      	subs	r2, r4, #1
 8006bf6:	2b30      	cmp	r3, #48	; 0x30
 8006bf8:	d101      	bne.n	8006bfe <_dtoa_r+0xac6>
 8006bfa:	4614      	mov	r4, r2
 8006bfc:	e7f8      	b.n	8006bf0 <_dtoa_r+0xab8>
 8006bfe:	4629      	mov	r1, r5
 8006c00:	4650      	mov	r0, sl
 8006c02:	f000 fdb9 	bl	8007778 <_Bfree>
 8006c06:	9b05      	ldr	r3, [sp, #20]
 8006c08:	b16b      	cbz	r3, 8006c26 <_dtoa_r+0xaee>
 8006c0a:	b12e      	cbz	r6, 8006c18 <_dtoa_r+0xae0>
 8006c0c:	429e      	cmp	r6, r3
 8006c0e:	d003      	beq.n	8006c18 <_dtoa_r+0xae0>
 8006c10:	4631      	mov	r1, r6
 8006c12:	4650      	mov	r0, sl
 8006c14:	f000 fdb0 	bl	8007778 <_Bfree>
 8006c18:	9905      	ldr	r1, [sp, #20]
 8006c1a:	4650      	mov	r0, sl
 8006c1c:	f000 fdac 	bl	8007778 <_Bfree>
 8006c20:	e001      	b.n	8006c26 <_dtoa_r+0xaee>
 8006c22:	f8dd b020 	ldr.w	fp, [sp, #32]
 8006c26:	9904      	ldr	r1, [sp, #16]
 8006c28:	4650      	mov	r0, sl
 8006c2a:	f000 fda5 	bl	8007778 <_Bfree>
 8006c2e:	2300      	movs	r3, #0
 8006c30:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006c32:	7023      	strb	r3, [r4, #0]
 8006c34:	f10b 0301 	add.w	r3, fp, #1
 8006c38:	6013      	str	r3, [r2, #0]
 8006c3a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c3c:	b11b      	cbz	r3, 8006c46 <_dtoa_r+0xb0e>
 8006c3e:	601c      	str	r4, [r3, #0]
 8006c40:	e001      	b.n	8006c46 <_dtoa_r+0xb0e>
 8006c42:	4808      	ldr	r0, [pc, #32]	; (8006c64 <_dtoa_r+0xb2c>)
 8006c44:	e00a      	b.n	8006c5c <_dtoa_r+0xb24>
 8006c46:	9806      	ldr	r0, [sp, #24]
 8006c48:	e008      	b.n	8006c5c <_dtoa_r+0xb24>
 8006c4a:	f1b9 0f00 	cmp.w	r9, #0
 8006c4e:	f73f aee2 	bgt.w	8006a16 <_dtoa_r+0x8de>
 8006c52:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006c54:	2b02      	cmp	r3, #2
 8006c56:	f77f aede 	ble.w	8006a16 <_dtoa_r+0x8de>
 8006c5a:	e6b1      	b.n	80069c0 <_dtoa_r+0x888>
 8006c5c:	b015      	add	sp, #84	; 0x54
 8006c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c62:	bf00      	nop
 8006c64:	08008ad6 	.word	0x08008ad6

08006c68 <__sflush_r>:
 8006c68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c70:	b293      	uxth	r3, r2
 8006c72:	4605      	mov	r5, r0
 8006c74:	0718      	lsls	r0, r3, #28
 8006c76:	460c      	mov	r4, r1
 8006c78:	d460      	bmi.n	8006d3c <__sflush_r+0xd4>
 8006c7a:	684b      	ldr	r3, [r1, #4]
 8006c7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	818a      	strh	r2, [r1, #12]
 8006c84:	dc02      	bgt.n	8006c8c <__sflush_r+0x24>
 8006c86:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	dd17      	ble.n	8006cbc <__sflush_r+0x54>
 8006c8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c8e:	b1ae      	cbz	r6, 8006cbc <__sflush_r+0x54>
 8006c90:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006c94:	2300      	movs	r3, #0
 8006c96:	b292      	uxth	r2, r2
 8006c98:	682f      	ldr	r7, [r5, #0]
 8006c9a:	602b      	str	r3, [r5, #0]
 8006c9c:	b10a      	cbz	r2, 8006ca2 <__sflush_r+0x3a>
 8006c9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006ca0:	e015      	b.n	8006cce <__sflush_r+0x66>
 8006ca2:	6a21      	ldr	r1, [r4, #32]
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	4628      	mov	r0, r5
 8006ca8:	47b0      	blx	r6
 8006caa:	1c41      	adds	r1, r0, #1
 8006cac:	d10f      	bne.n	8006cce <__sflush_r+0x66>
 8006cae:	682b      	ldr	r3, [r5, #0]
 8006cb0:	b16b      	cbz	r3, 8006cce <__sflush_r+0x66>
 8006cb2:	2b1d      	cmp	r3, #29
 8006cb4:	d001      	beq.n	8006cba <__sflush_r+0x52>
 8006cb6:	2b16      	cmp	r3, #22
 8006cb8:	d103      	bne.n	8006cc2 <__sflush_r+0x5a>
 8006cba:	602f      	str	r7, [r5, #0]
 8006cbc:	2000      	movs	r0, #0
 8006cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cc2:	89a3      	ldrh	r3, [r4, #12]
 8006cc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cc8:	81a3      	strh	r3, [r4, #12]
 8006cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cce:	89a3      	ldrh	r3, [r4, #12]
 8006cd0:	075a      	lsls	r2, r3, #29
 8006cd2:	d505      	bpl.n	8006ce0 <__sflush_r+0x78>
 8006cd4:	6863      	ldr	r3, [r4, #4]
 8006cd6:	1ac0      	subs	r0, r0, r3
 8006cd8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006cda:	b10b      	cbz	r3, 8006ce0 <__sflush_r+0x78>
 8006cdc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006cde:	1ac0      	subs	r0, r0, r3
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ce6:	6a21      	ldr	r1, [r4, #32]
 8006ce8:	4628      	mov	r0, r5
 8006cea:	47b0      	blx	r6
 8006cec:	1c43      	adds	r3, r0, #1
 8006cee:	89a3      	ldrh	r3, [r4, #12]
 8006cf0:	d106      	bne.n	8006d00 <__sflush_r+0x98>
 8006cf2:	6829      	ldr	r1, [r5, #0]
 8006cf4:	291d      	cmp	r1, #29
 8006cf6:	d83d      	bhi.n	8006d74 <__sflush_r+0x10c>
 8006cf8:	4a22      	ldr	r2, [pc, #136]	; (8006d84 <__sflush_r+0x11c>)
 8006cfa:	40ca      	lsrs	r2, r1
 8006cfc:	07d6      	lsls	r6, r2, #31
 8006cfe:	d539      	bpl.n	8006d74 <__sflush_r+0x10c>
 8006d00:	2200      	movs	r2, #0
 8006d02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d06:	b21b      	sxth	r3, r3
 8006d08:	6062      	str	r2, [r4, #4]
 8006d0a:	6922      	ldr	r2, [r4, #16]
 8006d0c:	04d9      	lsls	r1, r3, #19
 8006d0e:	81a3      	strh	r3, [r4, #12]
 8006d10:	6022      	str	r2, [r4, #0]
 8006d12:	d504      	bpl.n	8006d1e <__sflush_r+0xb6>
 8006d14:	1c42      	adds	r2, r0, #1
 8006d16:	d101      	bne.n	8006d1c <__sflush_r+0xb4>
 8006d18:	682b      	ldr	r3, [r5, #0]
 8006d1a:	b903      	cbnz	r3, 8006d1e <__sflush_r+0xb6>
 8006d1c:	6560      	str	r0, [r4, #84]	; 0x54
 8006d1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d20:	602f      	str	r7, [r5, #0]
 8006d22:	2900      	cmp	r1, #0
 8006d24:	d0ca      	beq.n	8006cbc <__sflush_r+0x54>
 8006d26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d2a:	4299      	cmp	r1, r3
 8006d2c:	d002      	beq.n	8006d34 <__sflush_r+0xcc>
 8006d2e:	4628      	mov	r0, r5
 8006d30:	f000 f95c 	bl	8006fec <_free_r>
 8006d34:	2000      	movs	r0, #0
 8006d36:	6360      	str	r0, [r4, #52]	; 0x34
 8006d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d3c:	690f      	ldr	r7, [r1, #16]
 8006d3e:	2f00      	cmp	r7, #0
 8006d40:	d0bc      	beq.n	8006cbc <__sflush_r+0x54>
 8006d42:	079b      	lsls	r3, r3, #30
 8006d44:	680e      	ldr	r6, [r1, #0]
 8006d46:	bf0c      	ite	eq
 8006d48:	694b      	ldreq	r3, [r1, #20]
 8006d4a:	2300      	movne	r3, #0
 8006d4c:	ebc7 0806 	rsb	r8, r7, r6
 8006d50:	600f      	str	r7, [r1, #0]
 8006d52:	608b      	str	r3, [r1, #8]
 8006d54:	e002      	b.n	8006d5c <__sflush_r+0xf4>
 8006d56:	4407      	add	r7, r0
 8006d58:	ebc0 0808 	rsb	r8, r0, r8
 8006d5c:	f1b8 0f00 	cmp.w	r8, #0
 8006d60:	ddac      	ble.n	8006cbc <__sflush_r+0x54>
 8006d62:	4643      	mov	r3, r8
 8006d64:	463a      	mov	r2, r7
 8006d66:	6a21      	ldr	r1, [r4, #32]
 8006d68:	4628      	mov	r0, r5
 8006d6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006d6c:	47b0      	blx	r6
 8006d6e:	2800      	cmp	r0, #0
 8006d70:	dcf1      	bgt.n	8006d56 <__sflush_r+0xee>
 8006d72:	89a3      	ldrh	r3, [r4, #12]
 8006d74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d78:	81a3      	strh	r3, [r4, #12]
 8006d7a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d82:	bf00      	nop
 8006d84:	20400001 	.word	0x20400001

08006d88 <_fflush_r>:
 8006d88:	b538      	push	{r3, r4, r5, lr}
 8006d8a:	690b      	ldr	r3, [r1, #16]
 8006d8c:	4605      	mov	r5, r0
 8006d8e:	460c      	mov	r4, r1
 8006d90:	b1db      	cbz	r3, 8006dca <_fflush_r+0x42>
 8006d92:	b118      	cbz	r0, 8006d9c <_fflush_r+0x14>
 8006d94:	6983      	ldr	r3, [r0, #24]
 8006d96:	b90b      	cbnz	r3, 8006d9c <_fflush_r+0x14>
 8006d98:	f000 f860 	bl	8006e5c <__sinit>
 8006d9c:	4b0c      	ldr	r3, [pc, #48]	; (8006dd0 <_fflush_r+0x48>)
 8006d9e:	429c      	cmp	r4, r3
 8006da0:	d101      	bne.n	8006da6 <_fflush_r+0x1e>
 8006da2:	686c      	ldr	r4, [r5, #4]
 8006da4:	e008      	b.n	8006db8 <_fflush_r+0x30>
 8006da6:	4b0b      	ldr	r3, [pc, #44]	; (8006dd4 <_fflush_r+0x4c>)
 8006da8:	429c      	cmp	r4, r3
 8006daa:	d101      	bne.n	8006db0 <_fflush_r+0x28>
 8006dac:	68ac      	ldr	r4, [r5, #8]
 8006dae:	e003      	b.n	8006db8 <_fflush_r+0x30>
 8006db0:	4b09      	ldr	r3, [pc, #36]	; (8006dd8 <_fflush_r+0x50>)
 8006db2:	429c      	cmp	r4, r3
 8006db4:	bf08      	it	eq
 8006db6:	68ec      	ldreq	r4, [r5, #12]
 8006db8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dbc:	b12b      	cbz	r3, 8006dca <_fflush_r+0x42>
 8006dbe:	4621      	mov	r1, r4
 8006dc0:	4628      	mov	r0, r5
 8006dc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006dc6:	f7ff bf4f 	b.w	8006c68 <__sflush_r>
 8006dca:	2000      	movs	r0, #0
 8006dcc:	bd38      	pop	{r3, r4, r5, pc}
 8006dce:	bf00      	nop
 8006dd0:	08008b18 	.word	0x08008b18
 8006dd4:	08008b38 	.word	0x08008b38
 8006dd8:	08008b58 	.word	0x08008b58

08006ddc <_cleanup_r>:
 8006ddc:	4901      	ldr	r1, [pc, #4]	; (8006de4 <_cleanup_r+0x8>)
 8006dde:	f000 b9c3 	b.w	8007168 <_fwalk_reent>
 8006de2:	bf00      	nop
 8006de4:	08008089 	.word	0x08008089

08006de8 <std.isra.0>:
 8006de8:	b510      	push	{r4, lr}
 8006dea:	4604      	mov	r4, r0
 8006dec:	2300      	movs	r3, #0
 8006dee:	6003      	str	r3, [r0, #0]
 8006df0:	6043      	str	r3, [r0, #4]
 8006df2:	6083      	str	r3, [r0, #8]
 8006df4:	8181      	strh	r1, [r0, #12]
 8006df6:	6643      	str	r3, [r0, #100]	; 0x64
 8006df8:	81c2      	strh	r2, [r0, #14]
 8006dfa:	6103      	str	r3, [r0, #16]
 8006dfc:	6143      	str	r3, [r0, #20]
 8006dfe:	6183      	str	r3, [r0, #24]
 8006e00:	4619      	mov	r1, r3
 8006e02:	2208      	movs	r2, #8
 8006e04:	305c      	adds	r0, #92	; 0x5c
 8006e06:	f7fd f869 	bl	8003edc <memset>
 8006e0a:	4b05      	ldr	r3, [pc, #20]	; (8006e20 <std.isra.0+0x38>)
 8006e0c:	6224      	str	r4, [r4, #32]
 8006e0e:	6263      	str	r3, [r4, #36]	; 0x24
 8006e10:	4b04      	ldr	r3, [pc, #16]	; (8006e24 <std.isra.0+0x3c>)
 8006e12:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e14:	4b04      	ldr	r3, [pc, #16]	; (8006e28 <std.isra.0+0x40>)
 8006e16:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e18:	4b04      	ldr	r3, [pc, #16]	; (8006e2c <std.isra.0+0x44>)
 8006e1a:	6323      	str	r3, [r4, #48]	; 0x30
 8006e1c:	bd10      	pop	{r4, pc}
 8006e1e:	bf00      	nop
 8006e20:	08007d45 	.word	0x08007d45
 8006e24:	08007d67 	.word	0x08007d67
 8006e28:	08007d9f 	.word	0x08007d9f
 8006e2c:	08007dc3 	.word	0x08007dc3

08006e30 <__sfmoreglue>:
 8006e30:	b570      	push	{r4, r5, r6, lr}
 8006e32:	2368      	movs	r3, #104	; 0x68
 8006e34:	1e4d      	subs	r5, r1, #1
 8006e36:	435d      	muls	r5, r3
 8006e38:	460e      	mov	r6, r1
 8006e3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006e3e:	f000 fa2f 	bl	80072a0 <_malloc_r>
 8006e42:	4604      	mov	r4, r0
 8006e44:	b140      	cbz	r0, 8006e58 <__sfmoreglue+0x28>
 8006e46:	2100      	movs	r1, #0
 8006e48:	e880 0042 	stmia.w	r0, {r1, r6}
 8006e4c:	300c      	adds	r0, #12
 8006e4e:	60a0      	str	r0, [r4, #8]
 8006e50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006e54:	f7fd f842 	bl	8003edc <memset>
 8006e58:	4620      	mov	r0, r4
 8006e5a:	bd70      	pop	{r4, r5, r6, pc}

08006e5c <__sinit>:
 8006e5c:	6983      	ldr	r3, [r0, #24]
 8006e5e:	b510      	push	{r4, lr}
 8006e60:	4604      	mov	r4, r0
 8006e62:	bb4b      	cbnz	r3, 8006eb8 <__sinit+0x5c>
 8006e64:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
 8006e68:	f8c0 30dc 	str.w	r3, [r0, #220]	; 0xdc
 8006e6c:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0
 8006e70:	4b12      	ldr	r3, [pc, #72]	; (8006ebc <__sinit+0x60>)
 8006e72:	4a13      	ldr	r2, [pc, #76]	; (8006ec0 <__sinit+0x64>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	6282      	str	r2, [r0, #40]	; 0x28
 8006e78:	4298      	cmp	r0, r3
 8006e7a:	bf04      	itt	eq
 8006e7c:	2301      	moveq	r3, #1
 8006e7e:	6183      	streq	r3, [r0, #24]
 8006e80:	f000 f820 	bl	8006ec4 <__sfp>
 8006e84:	6060      	str	r0, [r4, #4]
 8006e86:	4620      	mov	r0, r4
 8006e88:	f000 f81c 	bl	8006ec4 <__sfp>
 8006e8c:	60a0      	str	r0, [r4, #8]
 8006e8e:	4620      	mov	r0, r4
 8006e90:	f000 f818 	bl	8006ec4 <__sfp>
 8006e94:	2200      	movs	r2, #0
 8006e96:	60e0      	str	r0, [r4, #12]
 8006e98:	2104      	movs	r1, #4
 8006e9a:	6860      	ldr	r0, [r4, #4]
 8006e9c:	f7ff ffa4 	bl	8006de8 <std.isra.0>
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	2109      	movs	r1, #9
 8006ea4:	68a0      	ldr	r0, [r4, #8]
 8006ea6:	f7ff ff9f 	bl	8006de8 <std.isra.0>
 8006eaa:	2202      	movs	r2, #2
 8006eac:	2112      	movs	r1, #18
 8006eae:	68e0      	ldr	r0, [r4, #12]
 8006eb0:	f7ff ff9a 	bl	8006de8 <std.isra.0>
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	61a3      	str	r3, [r4, #24]
 8006eb8:	bd10      	pop	{r4, pc}
 8006eba:	bf00      	nop
 8006ebc:	08008b7c 	.word	0x08008b7c
 8006ec0:	08006ddd 	.word	0x08006ddd

08006ec4 <__sfp>:
 8006ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ec6:	4b1c      	ldr	r3, [pc, #112]	; (8006f38 <__sfp+0x74>)
 8006ec8:	4607      	mov	r7, r0
 8006eca:	681e      	ldr	r6, [r3, #0]
 8006ecc:	69b3      	ldr	r3, [r6, #24]
 8006ece:	b913      	cbnz	r3, 8006ed6 <__sfp+0x12>
 8006ed0:	4630      	mov	r0, r6
 8006ed2:	f7ff ffc3 	bl	8006e5c <__sinit>
 8006ed6:	36d8      	adds	r6, #216	; 0xd8
 8006ed8:	68b4      	ldr	r4, [r6, #8]
 8006eda:	6873      	ldr	r3, [r6, #4]
 8006edc:	3b01      	subs	r3, #1
 8006ede:	d404      	bmi.n	8006eea <__sfp+0x26>
 8006ee0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006ee4:	b17d      	cbz	r5, 8006f06 <__sfp+0x42>
 8006ee6:	3468      	adds	r4, #104	; 0x68
 8006ee8:	e7f8      	b.n	8006edc <__sfp+0x18>
 8006eea:	6833      	ldr	r3, [r6, #0]
 8006eec:	b10b      	cbz	r3, 8006ef2 <__sfp+0x2e>
 8006eee:	6836      	ldr	r6, [r6, #0]
 8006ef0:	e7f2      	b.n	8006ed8 <__sfp+0x14>
 8006ef2:	2104      	movs	r1, #4
 8006ef4:	4638      	mov	r0, r7
 8006ef6:	f7ff ff9b 	bl	8006e30 <__sfmoreglue>
 8006efa:	6030      	str	r0, [r6, #0]
 8006efc:	2800      	cmp	r0, #0
 8006efe:	d1f6      	bne.n	8006eee <__sfp+0x2a>
 8006f00:	230c      	movs	r3, #12
 8006f02:	603b      	str	r3, [r7, #0]
 8006f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006f0a:	81e3      	strh	r3, [r4, #14]
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	81a3      	strh	r3, [r4, #12]
 8006f10:	6665      	str	r5, [r4, #100]	; 0x64
 8006f12:	6025      	str	r5, [r4, #0]
 8006f14:	60a5      	str	r5, [r4, #8]
 8006f16:	6065      	str	r5, [r4, #4]
 8006f18:	6125      	str	r5, [r4, #16]
 8006f1a:	6165      	str	r5, [r4, #20]
 8006f1c:	61a5      	str	r5, [r4, #24]
 8006f1e:	2208      	movs	r2, #8
 8006f20:	4629      	mov	r1, r5
 8006f22:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006f26:	f7fc ffd9 	bl	8003edc <memset>
 8006f2a:	6365      	str	r5, [r4, #52]	; 0x34
 8006f2c:	63a5      	str	r5, [r4, #56]	; 0x38
 8006f2e:	64a5      	str	r5, [r4, #72]	; 0x48
 8006f30:	64e5      	str	r5, [r4, #76]	; 0x4c
 8006f32:	4620      	mov	r0, r4
 8006f34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f36:	bf00      	nop
 8006f38:	08008b7c 	.word	0x08008b7c

08006f3c <__sfp_lock_acquire>:
 8006f3c:	4770      	bx	lr

08006f3e <__sfp_lock_release>:
 8006f3e:	4770      	bx	lr

08006f40 <_malloc_trim_r>:
 8006f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f44:	4689      	mov	r9, r1
 8006f46:	4f25      	ldr	r7, [pc, #148]	; (8006fdc <_malloc_trim_r+0x9c>)
 8006f48:	4606      	mov	r6, r0
 8006f4a:	f000 fbde 	bl	800770a <__malloc_lock>
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8006fe8 <_malloc_trim_r+0xa8>
 8006f54:	685d      	ldr	r5, [r3, #4]
 8006f56:	f1a8 0411 	sub.w	r4, r8, #17
 8006f5a:	f025 0503 	bic.w	r5, r5, #3
 8006f5e:	442c      	add	r4, r5
 8006f60:	ebc9 0404 	rsb	r4, r9, r4
 8006f64:	fbb4 f4f8 	udiv	r4, r4, r8
 8006f68:	3c01      	subs	r4, #1
 8006f6a:	fb08 f404 	mul.w	r4, r8, r4
 8006f6e:	4544      	cmp	r4, r8
 8006f70:	da05      	bge.n	8006f7e <_malloc_trim_r+0x3e>
 8006f72:	4630      	mov	r0, r6
 8006f74:	f000 fbca 	bl	800770c <__malloc_unlock>
 8006f78:	2000      	movs	r0, #0
 8006f7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f7e:	2100      	movs	r1, #0
 8006f80:	4630      	mov	r0, r6
 8006f82:	f000 fecf 	bl	8007d24 <_sbrk_r>
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	442b      	add	r3, r5
 8006f8a:	4298      	cmp	r0, r3
 8006f8c:	d1f1      	bne.n	8006f72 <_malloc_trim_r+0x32>
 8006f8e:	4261      	negs	r1, r4
 8006f90:	4630      	mov	r0, r6
 8006f92:	f000 fec7 	bl	8007d24 <_sbrk_r>
 8006f96:	3001      	adds	r0, #1
 8006f98:	d110      	bne.n	8006fbc <_malloc_trim_r+0x7c>
 8006f9a:	2100      	movs	r1, #0
 8006f9c:	4630      	mov	r0, r6
 8006f9e:	f000 fec1 	bl	8007d24 <_sbrk_r>
 8006fa2:	68ba      	ldr	r2, [r7, #8]
 8006fa4:	1a83      	subs	r3, r0, r2
 8006fa6:	2b0f      	cmp	r3, #15
 8006fa8:	dde3      	ble.n	8006f72 <_malloc_trim_r+0x32>
 8006faa:	490d      	ldr	r1, [pc, #52]	; (8006fe0 <_malloc_trim_r+0xa0>)
 8006fac:	f043 0301 	orr.w	r3, r3, #1
 8006fb0:	6809      	ldr	r1, [r1, #0]
 8006fb2:	6053      	str	r3, [r2, #4]
 8006fb4:	1a40      	subs	r0, r0, r1
 8006fb6:	490b      	ldr	r1, [pc, #44]	; (8006fe4 <_malloc_trim_r+0xa4>)
 8006fb8:	6008      	str	r0, [r1, #0]
 8006fba:	e7da      	b.n	8006f72 <_malloc_trim_r+0x32>
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	4a09      	ldr	r2, [pc, #36]	; (8006fe4 <_malloc_trim_r+0xa4>)
 8006fc0:	1b2d      	subs	r5, r5, r4
 8006fc2:	f045 0501 	orr.w	r5, r5, #1
 8006fc6:	605d      	str	r5, [r3, #4]
 8006fc8:	6813      	ldr	r3, [r2, #0]
 8006fca:	4630      	mov	r0, r6
 8006fcc:	1b1c      	subs	r4, r3, r4
 8006fce:	6014      	str	r4, [r2, #0]
 8006fd0:	f000 fb9c 	bl	800770c <__malloc_unlock>
 8006fd4:	2001      	movs	r0, #1
 8006fd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fda:	bf00      	nop
 8006fdc:	200002b4 	.word	0x200002b4
 8006fe0:	200006c0 	.word	0x200006c0
 8006fe4:	20000780 	.word	0x20000780
 8006fe8:	00000080 	.word	0x00000080

08006fec <_free_r>:
 8006fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ff0:	4604      	mov	r4, r0
 8006ff2:	4688      	mov	r8, r1
 8006ff4:	2900      	cmp	r1, #0
 8006ff6:	f000 80ad 	beq.w	8007154 <_free_r+0x168>
 8006ffa:	f000 fb86 	bl	800770a <__malloc_lock>
 8006ffe:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8007002:	4d55      	ldr	r5, [pc, #340]	; (8007158 <_free_r+0x16c>)
 8007004:	f022 0001 	bic.w	r0, r2, #1
 8007008:	f1a8 0308 	sub.w	r3, r8, #8
 800700c:	181f      	adds	r7, r3, r0
 800700e:	68a9      	ldr	r1, [r5, #8]
 8007010:	687e      	ldr	r6, [r7, #4]
 8007012:	428f      	cmp	r7, r1
 8007014:	f026 0603 	bic.w	r6, r6, #3
 8007018:	f002 0201 	and.w	r2, r2, #1
 800701c:	d11b      	bne.n	8007056 <_free_r+0x6a>
 800701e:	4430      	add	r0, r6
 8007020:	b93a      	cbnz	r2, 8007032 <_free_r+0x46>
 8007022:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8007026:	1a9b      	subs	r3, r3, r2
 8007028:	6899      	ldr	r1, [r3, #8]
 800702a:	4410      	add	r0, r2
 800702c:	68da      	ldr	r2, [r3, #12]
 800702e:	60ca      	str	r2, [r1, #12]
 8007030:	6091      	str	r1, [r2, #8]
 8007032:	f040 0201 	orr.w	r2, r0, #1
 8007036:	605a      	str	r2, [r3, #4]
 8007038:	60ab      	str	r3, [r5, #8]
 800703a:	4b48      	ldr	r3, [pc, #288]	; (800715c <_free_r+0x170>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4298      	cmp	r0, r3
 8007040:	d304      	bcc.n	800704c <_free_r+0x60>
 8007042:	4b47      	ldr	r3, [pc, #284]	; (8007160 <_free_r+0x174>)
 8007044:	4620      	mov	r0, r4
 8007046:	6819      	ldr	r1, [r3, #0]
 8007048:	f7ff ff7a 	bl	8006f40 <_malloc_trim_r>
 800704c:	4620      	mov	r0, r4
 800704e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007052:	f000 bb5b 	b.w	800770c <__malloc_unlock>
 8007056:	607e      	str	r6, [r7, #4]
 8007058:	b97a      	cbnz	r2, 800707a <_free_r+0x8e>
 800705a:	f858 1c08 	ldr.w	r1, [r8, #-8]
 800705e:	f105 0e08 	add.w	lr, r5, #8
 8007062:	1a5b      	subs	r3, r3, r1
 8007064:	4408      	add	r0, r1
 8007066:	6899      	ldr	r1, [r3, #8]
 8007068:	4571      	cmp	r1, lr
 800706a:	d008      	beq.n	800707e <_free_r+0x92>
 800706c:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8007070:	f8c1 e00c 	str.w	lr, [r1, #12]
 8007074:	f8ce 1008 	str.w	r1, [lr, #8]
 8007078:	e002      	b.n	8007080 <_free_r+0x94>
 800707a:	2200      	movs	r2, #0
 800707c:	e000      	b.n	8007080 <_free_r+0x94>
 800707e:	2201      	movs	r2, #1
 8007080:	19b9      	adds	r1, r7, r6
 8007082:	6849      	ldr	r1, [r1, #4]
 8007084:	07c9      	lsls	r1, r1, #31
 8007086:	d40e      	bmi.n	80070a6 <_free_r+0xba>
 8007088:	4430      	add	r0, r6
 800708a:	68b9      	ldr	r1, [r7, #8]
 800708c:	b942      	cbnz	r2, 80070a0 <_free_r+0xb4>
 800708e:	4e35      	ldr	r6, [pc, #212]	; (8007164 <_free_r+0x178>)
 8007090:	42b1      	cmp	r1, r6
 8007092:	d105      	bne.n	80070a0 <_free_r+0xb4>
 8007094:	616b      	str	r3, [r5, #20]
 8007096:	612b      	str	r3, [r5, #16]
 8007098:	2201      	movs	r2, #1
 800709a:	60d9      	str	r1, [r3, #12]
 800709c:	6099      	str	r1, [r3, #8]
 800709e:	e002      	b.n	80070a6 <_free_r+0xba>
 80070a0:	68fe      	ldr	r6, [r7, #12]
 80070a2:	60ce      	str	r6, [r1, #12]
 80070a4:	60b1      	str	r1, [r6, #8]
 80070a6:	f040 0101 	orr.w	r1, r0, #1
 80070aa:	6059      	str	r1, [r3, #4]
 80070ac:	5018      	str	r0, [r3, r0]
 80070ae:	2a00      	cmp	r2, #0
 80070b0:	d1cc      	bne.n	800704c <_free_r+0x60>
 80070b2:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80070b6:	d212      	bcs.n	80070de <_free_r+0xf2>
 80070b8:	08c0      	lsrs	r0, r0, #3
 80070ba:	1081      	asrs	r1, r0, #2
 80070bc:	2201      	movs	r2, #1
 80070be:	fa02 f101 	lsl.w	r1, r2, r1
 80070c2:	686a      	ldr	r2, [r5, #4]
 80070c4:	3001      	adds	r0, #1
 80070c6:	430a      	orrs	r2, r1
 80070c8:	606a      	str	r2, [r5, #4]
 80070ca:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 80070ce:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 80070d2:	3a08      	subs	r2, #8
 80070d4:	60da      	str	r2, [r3, #12]
 80070d6:	6099      	str	r1, [r3, #8]
 80070d8:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 80070dc:	e038      	b.n	8007150 <_free_r+0x164>
 80070de:	0a42      	lsrs	r2, r0, #9
 80070e0:	2a04      	cmp	r2, #4
 80070e2:	d802      	bhi.n	80070ea <_free_r+0xfe>
 80070e4:	0982      	lsrs	r2, r0, #6
 80070e6:	3238      	adds	r2, #56	; 0x38
 80070e8:	e015      	b.n	8007116 <_free_r+0x12a>
 80070ea:	2a14      	cmp	r2, #20
 80070ec:	d801      	bhi.n	80070f2 <_free_r+0x106>
 80070ee:	325b      	adds	r2, #91	; 0x5b
 80070f0:	e011      	b.n	8007116 <_free_r+0x12a>
 80070f2:	2a54      	cmp	r2, #84	; 0x54
 80070f4:	d802      	bhi.n	80070fc <_free_r+0x110>
 80070f6:	0b02      	lsrs	r2, r0, #12
 80070f8:	326e      	adds	r2, #110	; 0x6e
 80070fa:	e00c      	b.n	8007116 <_free_r+0x12a>
 80070fc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8007100:	d802      	bhi.n	8007108 <_free_r+0x11c>
 8007102:	0bc2      	lsrs	r2, r0, #15
 8007104:	3277      	adds	r2, #119	; 0x77
 8007106:	e006      	b.n	8007116 <_free_r+0x12a>
 8007108:	f240 5154 	movw	r1, #1364	; 0x554
 800710c:	428a      	cmp	r2, r1
 800710e:	bf9a      	itte	ls
 8007110:	0c82      	lsrls	r2, r0, #18
 8007112:	327c      	addls	r2, #124	; 0x7c
 8007114:	227e      	movhi	r2, #126	; 0x7e
 8007116:	1c51      	adds	r1, r2, #1
 8007118:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800711c:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8007120:	428e      	cmp	r6, r1
 8007122:	4f0d      	ldr	r7, [pc, #52]	; (8007158 <_free_r+0x16c>)
 8007124:	d10b      	bne.n	800713e <_free_r+0x152>
 8007126:	2101      	movs	r1, #1
 8007128:	1092      	asrs	r2, r2, #2
 800712a:	fa01 f202 	lsl.w	r2, r1, r2
 800712e:	6879      	ldr	r1, [r7, #4]
 8007130:	4311      	orrs	r1, r2
 8007132:	6079      	str	r1, [r7, #4]
 8007134:	4631      	mov	r1, r6
 8007136:	e008      	b.n	800714a <_free_r+0x15e>
 8007138:	6889      	ldr	r1, [r1, #8]
 800713a:	428e      	cmp	r6, r1
 800713c:	d004      	beq.n	8007148 <_free_r+0x15c>
 800713e:	684a      	ldr	r2, [r1, #4]
 8007140:	f022 0203 	bic.w	r2, r2, #3
 8007144:	4290      	cmp	r0, r2
 8007146:	d3f7      	bcc.n	8007138 <_free_r+0x14c>
 8007148:	68ce      	ldr	r6, [r1, #12]
 800714a:	60de      	str	r6, [r3, #12]
 800714c:	6099      	str	r1, [r3, #8]
 800714e:	60b3      	str	r3, [r6, #8]
 8007150:	60cb      	str	r3, [r1, #12]
 8007152:	e77b      	b.n	800704c <_free_r+0x60>
 8007154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007158:	200002b4 	.word	0x200002b4
 800715c:	200006bc 	.word	0x200006bc
 8007160:	2000077c 	.word	0x2000077c
 8007164:	200002bc 	.word	0x200002bc

08007168 <_fwalk_reent>:
 8007168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800716c:	4680      	mov	r8, r0
 800716e:	4689      	mov	r9, r1
 8007170:	f100 04d8 	add.w	r4, r0, #216	; 0xd8
 8007174:	2600      	movs	r6, #0
 8007176:	b194      	cbz	r4, 800719e <_fwalk_reent+0x36>
 8007178:	68a5      	ldr	r5, [r4, #8]
 800717a:	6867      	ldr	r7, [r4, #4]
 800717c:	3f01      	subs	r7, #1
 800717e:	d40c      	bmi.n	800719a <_fwalk_reent+0x32>
 8007180:	89ab      	ldrh	r3, [r5, #12]
 8007182:	2b01      	cmp	r3, #1
 8007184:	d907      	bls.n	8007196 <_fwalk_reent+0x2e>
 8007186:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800718a:	3301      	adds	r3, #1
 800718c:	d003      	beq.n	8007196 <_fwalk_reent+0x2e>
 800718e:	4629      	mov	r1, r5
 8007190:	4640      	mov	r0, r8
 8007192:	47c8      	blx	r9
 8007194:	4306      	orrs	r6, r0
 8007196:	3568      	adds	r5, #104	; 0x68
 8007198:	e7f0      	b.n	800717c <_fwalk_reent+0x14>
 800719a:	6824      	ldr	r4, [r4, #0]
 800719c:	e7eb      	b.n	8007176 <_fwalk_reent+0xe>
 800719e:	4630      	mov	r0, r6
 80071a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080071a4 <__locale_charset>:
 80071a4:	4800      	ldr	r0, [pc, #0]	; (80071a8 <__locale_charset+0x4>)
 80071a6:	4770      	bx	lr
 80071a8:	20000290 	.word	0x20000290

080071ac <__locale_mb_cur_max>:
 80071ac:	4b01      	ldr	r3, [pc, #4]	; (80071b4 <__locale_mb_cur_max+0x8>)
 80071ae:	6818      	ldr	r0, [r3, #0]
 80071b0:	4770      	bx	lr
 80071b2:	bf00      	nop
 80071b4:	200002b0 	.word	0x200002b0

080071b8 <_localeconv_r>:
 80071b8:	4800      	ldr	r0, [pc, #0]	; (80071bc <_localeconv_r+0x4>)
 80071ba:	4770      	bx	lr
 80071bc:	20000258 	.word	0x20000258

080071c0 <__swhatbuf_r>:
 80071c0:	b570      	push	{r4, r5, r6, lr}
 80071c2:	460e      	mov	r6, r1
 80071c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071c8:	b090      	sub	sp, #64	; 0x40
 80071ca:	2900      	cmp	r1, #0
 80071cc:	4614      	mov	r4, r2
 80071ce:	461d      	mov	r5, r3
 80071d0:	da0a      	bge.n	80071e8 <__swhatbuf_r+0x28>
 80071d2:	89b3      	ldrh	r3, [r6, #12]
 80071d4:	2200      	movs	r2, #0
 80071d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071da:	b298      	uxth	r0, r3
 80071dc:	602a      	str	r2, [r5, #0]
 80071de:	b1b0      	cbz	r0, 800720e <__swhatbuf_r+0x4e>
 80071e0:	2340      	movs	r3, #64	; 0x40
 80071e2:	6023      	str	r3, [r4, #0]
 80071e4:	4610      	mov	r0, r2
 80071e6:	e015      	b.n	8007214 <__swhatbuf_r+0x54>
 80071e8:	aa01      	add	r2, sp, #4
 80071ea:	f000 ffed 	bl	80081c8 <_fstat_r>
 80071ee:	2800      	cmp	r0, #0
 80071f0:	dbef      	blt.n	80071d2 <__swhatbuf_r+0x12>
 80071f2:	9a02      	ldr	r2, [sp, #8]
 80071f4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80071f8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80071fc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007200:	425a      	negs	r2, r3
 8007202:	415a      	adcs	r2, r3
 8007204:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007208:	602a      	str	r2, [r5, #0]
 800720a:	6023      	str	r3, [r4, #0]
 800720c:	e002      	b.n	8007214 <__swhatbuf_r+0x54>
 800720e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007212:	6023      	str	r3, [r4, #0]
 8007214:	b010      	add	sp, #64	; 0x40
 8007216:	bd70      	pop	{r4, r5, r6, pc}

08007218 <__smakebuf_r>:
 8007218:	898b      	ldrh	r3, [r1, #12]
 800721a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800721c:	079e      	lsls	r6, r3, #30
 800721e:	4605      	mov	r5, r0
 8007220:	460c      	mov	r4, r1
 8007222:	d410      	bmi.n	8007246 <__smakebuf_r+0x2e>
 8007224:	ab01      	add	r3, sp, #4
 8007226:	466a      	mov	r2, sp
 8007228:	f7ff ffca 	bl	80071c0 <__swhatbuf_r>
 800722c:	9900      	ldr	r1, [sp, #0]
 800722e:	4606      	mov	r6, r0
 8007230:	4628      	mov	r0, r5
 8007232:	f000 f835 	bl	80072a0 <_malloc_r>
 8007236:	b968      	cbnz	r0, 8007254 <__smakebuf_r+0x3c>
 8007238:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800723c:	059a      	lsls	r2, r3, #22
 800723e:	d422      	bmi.n	8007286 <__smakebuf_r+0x6e>
 8007240:	f043 0302 	orr.w	r3, r3, #2
 8007244:	81a3      	strh	r3, [r4, #12]
 8007246:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800724a:	6023      	str	r3, [r4, #0]
 800724c:	6123      	str	r3, [r4, #16]
 800724e:	2301      	movs	r3, #1
 8007250:	6163      	str	r3, [r4, #20]
 8007252:	e018      	b.n	8007286 <__smakebuf_r+0x6e>
 8007254:	4b0d      	ldr	r3, [pc, #52]	; (800728c <__smakebuf_r+0x74>)
 8007256:	62ab      	str	r3, [r5, #40]	; 0x28
 8007258:	89a3      	ldrh	r3, [r4, #12]
 800725a:	6020      	str	r0, [r4, #0]
 800725c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007260:	81a3      	strh	r3, [r4, #12]
 8007262:	9b00      	ldr	r3, [sp, #0]
 8007264:	6120      	str	r0, [r4, #16]
 8007266:	6163      	str	r3, [r4, #20]
 8007268:	9b01      	ldr	r3, [sp, #4]
 800726a:	b14b      	cbz	r3, 8007280 <__smakebuf_r+0x68>
 800726c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007270:	4628      	mov	r0, r5
 8007272:	f001 f905 	bl	8008480 <_isatty_r>
 8007276:	b118      	cbz	r0, 8007280 <__smakebuf_r+0x68>
 8007278:	89a3      	ldrh	r3, [r4, #12]
 800727a:	f043 0301 	orr.w	r3, r3, #1
 800727e:	81a3      	strh	r3, [r4, #12]
 8007280:	89a0      	ldrh	r0, [r4, #12]
 8007282:	4330      	orrs	r0, r6
 8007284:	81a0      	strh	r0, [r4, #12]
 8007286:	b002      	add	sp, #8
 8007288:	bd70      	pop	{r4, r5, r6, pc}
 800728a:	bf00      	nop
 800728c:	08006ddd 	.word	0x08006ddd

08007290 <malloc>:
 8007290:	4b02      	ldr	r3, [pc, #8]	; (800729c <malloc+0xc>)
 8007292:	4601      	mov	r1, r0
 8007294:	6818      	ldr	r0, [r3, #0]
 8007296:	f000 b803 	b.w	80072a0 <_malloc_r>
 800729a:	bf00      	nop
 800729c:	20000254 	.word	0x20000254

080072a0 <_malloc_r>:
 80072a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072a4:	f101 040b 	add.w	r4, r1, #11
 80072a8:	2c16      	cmp	r4, #22
 80072aa:	b085      	sub	sp, #20
 80072ac:	4681      	mov	r9, r0
 80072ae:	d903      	bls.n	80072b8 <_malloc_r+0x18>
 80072b0:	f034 0407 	bics.w	r4, r4, #7
 80072b4:	d501      	bpl.n	80072ba <_malloc_r+0x1a>
 80072b6:	e002      	b.n	80072be <_malloc_r+0x1e>
 80072b8:	2410      	movs	r4, #16
 80072ba:	428c      	cmp	r4, r1
 80072bc:	d203      	bcs.n	80072c6 <_malloc_r+0x26>
 80072be:	230c      	movs	r3, #12
 80072c0:	f8c9 3000 	str.w	r3, [r9]
 80072c4:	e1e7      	b.n	8007696 <_malloc_r+0x3f6>
 80072c6:	4648      	mov	r0, r9
 80072c8:	f000 fa1f 	bl	800770a <__malloc_lock>
 80072cc:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 80072d0:	4d9d      	ldr	r5, [pc, #628]	; (8007548 <_malloc_r+0x2a8>)
 80072d2:	d217      	bcs.n	8007304 <_malloc_r+0x64>
 80072d4:	f104 0208 	add.w	r2, r4, #8
 80072d8:	442a      	add	r2, r5
 80072da:	6856      	ldr	r6, [r2, #4]
 80072dc:	f1a2 0108 	sub.w	r1, r2, #8
 80072e0:	428e      	cmp	r6, r1
 80072e2:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 80072e6:	d102      	bne.n	80072ee <_malloc_r+0x4e>
 80072e8:	68d6      	ldr	r6, [r2, #12]
 80072ea:	42b2      	cmp	r2, r6
 80072ec:	d008      	beq.n	8007300 <_malloc_r+0x60>
 80072ee:	6873      	ldr	r3, [r6, #4]
 80072f0:	68f2      	ldr	r2, [r6, #12]
 80072f2:	68b1      	ldr	r1, [r6, #8]
 80072f4:	f023 0303 	bic.w	r3, r3, #3
 80072f8:	60ca      	str	r2, [r1, #12]
 80072fa:	4433      	add	r3, r6
 80072fc:	6091      	str	r1, [r2, #8]
 80072fe:	e02f      	b.n	8007360 <_malloc_r+0xc0>
 8007300:	3302      	adds	r3, #2
 8007302:	e03d      	b.n	8007380 <_malloc_r+0xe0>
 8007304:	0a63      	lsrs	r3, r4, #9
 8007306:	d01a      	beq.n	800733e <_malloc_r+0x9e>
 8007308:	2b04      	cmp	r3, #4
 800730a:	d802      	bhi.n	8007312 <_malloc_r+0x72>
 800730c:	09a3      	lsrs	r3, r4, #6
 800730e:	3338      	adds	r3, #56	; 0x38
 8007310:	e018      	b.n	8007344 <_malloc_r+0xa4>
 8007312:	2b14      	cmp	r3, #20
 8007314:	d801      	bhi.n	800731a <_malloc_r+0x7a>
 8007316:	335b      	adds	r3, #91	; 0x5b
 8007318:	e014      	b.n	8007344 <_malloc_r+0xa4>
 800731a:	2b54      	cmp	r3, #84	; 0x54
 800731c:	d802      	bhi.n	8007324 <_malloc_r+0x84>
 800731e:	0b23      	lsrs	r3, r4, #12
 8007320:	336e      	adds	r3, #110	; 0x6e
 8007322:	e00f      	b.n	8007344 <_malloc_r+0xa4>
 8007324:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8007328:	d802      	bhi.n	8007330 <_malloc_r+0x90>
 800732a:	0be3      	lsrs	r3, r4, #15
 800732c:	3377      	adds	r3, #119	; 0x77
 800732e:	e009      	b.n	8007344 <_malloc_r+0xa4>
 8007330:	f240 5254 	movw	r2, #1364	; 0x554
 8007334:	4293      	cmp	r3, r2
 8007336:	d804      	bhi.n	8007342 <_malloc_r+0xa2>
 8007338:	0ca3      	lsrs	r3, r4, #18
 800733a:	337c      	adds	r3, #124	; 0x7c
 800733c:	e002      	b.n	8007344 <_malloc_r+0xa4>
 800733e:	233f      	movs	r3, #63	; 0x3f
 8007340:	e000      	b.n	8007344 <_malloc_r+0xa4>
 8007342:	237e      	movs	r3, #126	; 0x7e
 8007344:	1c5a      	adds	r2, r3, #1
 8007346:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800734a:	f1a2 0008 	sub.w	r0, r2, #8
 800734e:	6856      	ldr	r6, [r2, #4]
 8007350:	e00c      	b.n	800736c <_malloc_r+0xcc>
 8007352:	2900      	cmp	r1, #0
 8007354:	68f1      	ldr	r1, [r6, #12]
 8007356:	db08      	blt.n	800736a <_malloc_r+0xca>
 8007358:	68b3      	ldr	r3, [r6, #8]
 800735a:	60d9      	str	r1, [r3, #12]
 800735c:	608b      	str	r3, [r1, #8]
 800735e:	18b3      	adds	r3, r6, r2
 8007360:	685a      	ldr	r2, [r3, #4]
 8007362:	f042 0201 	orr.w	r2, r2, #1
 8007366:	605a      	str	r2, [r3, #4]
 8007368:	e1a0      	b.n	80076ac <_malloc_r+0x40c>
 800736a:	460e      	mov	r6, r1
 800736c:	4286      	cmp	r6, r0
 800736e:	d006      	beq.n	800737e <_malloc_r+0xde>
 8007370:	6872      	ldr	r2, [r6, #4]
 8007372:	f022 0203 	bic.w	r2, r2, #3
 8007376:	1b11      	subs	r1, r2, r4
 8007378:	290f      	cmp	r1, #15
 800737a:	ddea      	ble.n	8007352 <_malloc_r+0xb2>
 800737c:	3b01      	subs	r3, #1
 800737e:	3301      	adds	r3, #1
 8007380:	4a71      	ldr	r2, [pc, #452]	; (8007548 <_malloc_r+0x2a8>)
 8007382:	692e      	ldr	r6, [r5, #16]
 8007384:	f102 0708 	add.w	r7, r2, #8
 8007388:	42be      	cmp	r6, r7
 800738a:	4639      	mov	r1, r7
 800738c:	d079      	beq.n	8007482 <_malloc_r+0x1e2>
 800738e:	6870      	ldr	r0, [r6, #4]
 8007390:	f020 0003 	bic.w	r0, r0, #3
 8007394:	ebc4 0e00 	rsb	lr, r4, r0
 8007398:	f1be 0f0f 	cmp.w	lr, #15
 800739c:	dd0d      	ble.n	80073ba <_malloc_r+0x11a>
 800739e:	1933      	adds	r3, r6, r4
 80073a0:	f044 0401 	orr.w	r4, r4, #1
 80073a4:	6074      	str	r4, [r6, #4]
 80073a6:	6153      	str	r3, [r2, #20]
 80073a8:	6113      	str	r3, [r2, #16]
 80073aa:	f04e 0201 	orr.w	r2, lr, #1
 80073ae:	60df      	str	r7, [r3, #12]
 80073b0:	609f      	str	r7, [r3, #8]
 80073b2:	605a      	str	r2, [r3, #4]
 80073b4:	f843 e00e 	str.w	lr, [r3, lr]
 80073b8:	e178      	b.n	80076ac <_malloc_r+0x40c>
 80073ba:	f1be 0f00 	cmp.w	lr, #0
 80073be:	6157      	str	r7, [r2, #20]
 80073c0:	6117      	str	r7, [r2, #16]
 80073c2:	db05      	blt.n	80073d0 <_malloc_r+0x130>
 80073c4:	4430      	add	r0, r6
 80073c6:	6843      	ldr	r3, [r0, #4]
 80073c8:	f043 0301 	orr.w	r3, r3, #1
 80073cc:	6043      	str	r3, [r0, #4]
 80073ce:	e16d      	b.n	80076ac <_malloc_r+0x40c>
 80073d0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80073d4:	d215      	bcs.n	8007402 <_malloc_r+0x162>
 80073d6:	08c0      	lsrs	r0, r0, #3
 80073d8:	ea4f 0ea0 	mov.w	lr, r0, asr #2
 80073dc:	2701      	movs	r7, #1
 80073de:	fa07 fe0e 	lsl.w	lr, r7, lr
 80073e2:	6857      	ldr	r7, [r2, #4]
 80073e4:	3001      	adds	r0, #1
 80073e6:	ea4e 0707 	orr.w	r7, lr, r7
 80073ea:	6057      	str	r7, [r2, #4]
 80073ec:	f852 e030 	ldr.w	lr, [r2, r0, lsl #3]
 80073f0:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
 80073f4:	3f08      	subs	r7, #8
 80073f6:	60f7      	str	r7, [r6, #12]
 80073f8:	f8c6 e008 	str.w	lr, [r6, #8]
 80073fc:	f842 6030 	str.w	r6, [r2, r0, lsl #3]
 8007400:	e03d      	b.n	800747e <_malloc_r+0x1de>
 8007402:	0a42      	lsrs	r2, r0, #9
 8007404:	2a04      	cmp	r2, #4
 8007406:	d802      	bhi.n	800740e <_malloc_r+0x16e>
 8007408:	0982      	lsrs	r2, r0, #6
 800740a:	3238      	adds	r2, #56	; 0x38
 800740c:	e015      	b.n	800743a <_malloc_r+0x19a>
 800740e:	2a14      	cmp	r2, #20
 8007410:	d801      	bhi.n	8007416 <_malloc_r+0x176>
 8007412:	325b      	adds	r2, #91	; 0x5b
 8007414:	e011      	b.n	800743a <_malloc_r+0x19a>
 8007416:	2a54      	cmp	r2, #84	; 0x54
 8007418:	d802      	bhi.n	8007420 <_malloc_r+0x180>
 800741a:	0b02      	lsrs	r2, r0, #12
 800741c:	326e      	adds	r2, #110	; 0x6e
 800741e:	e00c      	b.n	800743a <_malloc_r+0x19a>
 8007420:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8007424:	d802      	bhi.n	800742c <_malloc_r+0x18c>
 8007426:	0bc2      	lsrs	r2, r0, #15
 8007428:	3277      	adds	r2, #119	; 0x77
 800742a:	e006      	b.n	800743a <_malloc_r+0x19a>
 800742c:	f240 5754 	movw	r7, #1364	; 0x554
 8007430:	42ba      	cmp	r2, r7
 8007432:	bf9a      	itte	ls
 8007434:	0c82      	lsrls	r2, r0, #18
 8007436:	327c      	addls	r2, #124	; 0x7c
 8007438:	227e      	movhi	r2, #126	; 0x7e
 800743a:	1c57      	adds	r7, r2, #1
 800743c:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8007440:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8007444:	45be      	cmp	lr, r7
 8007446:	f8df c100 	ldr.w	ip, [pc, #256]	; 8007548 <_malloc_r+0x2a8>
 800744a:	d10d      	bne.n	8007468 <_malloc_r+0x1c8>
 800744c:	2001      	movs	r0, #1
 800744e:	1092      	asrs	r2, r2, #2
 8007450:	fa00 f202 	lsl.w	r2, r0, r2
 8007454:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8007458:	4310      	orrs	r0, r2
 800745a:	f8cc 0004 	str.w	r0, [ip, #4]
 800745e:	4672      	mov	r2, lr
 8007460:	e009      	b.n	8007476 <_malloc_r+0x1d6>
 8007462:	68bf      	ldr	r7, [r7, #8]
 8007464:	45be      	cmp	lr, r7
 8007466:	d004      	beq.n	8007472 <_malloc_r+0x1d2>
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	f022 0203 	bic.w	r2, r2, #3
 800746e:	4290      	cmp	r0, r2
 8007470:	d3f7      	bcc.n	8007462 <_malloc_r+0x1c2>
 8007472:	46be      	mov	lr, r7
 8007474:	68fa      	ldr	r2, [r7, #12]
 8007476:	60f2      	str	r2, [r6, #12]
 8007478:	f8c6 e008 	str.w	lr, [r6, #8]
 800747c:	6096      	str	r6, [r2, #8]
 800747e:	f8ce 600c 	str.w	r6, [lr, #12]
 8007482:	2001      	movs	r0, #1
 8007484:	109a      	asrs	r2, r3, #2
 8007486:	fa00 f202 	lsl.w	r2, r0, r2
 800748a:	6868      	ldr	r0, [r5, #4]
 800748c:	4282      	cmp	r2, r0
 800748e:	d85d      	bhi.n	800754c <_malloc_r+0x2ac>
 8007490:	4202      	tst	r2, r0
 8007492:	d106      	bne.n	80074a2 <_malloc_r+0x202>
 8007494:	f023 0303 	bic.w	r3, r3, #3
 8007498:	0052      	lsls	r2, r2, #1
 800749a:	4202      	tst	r2, r0
 800749c:	f103 0304 	add.w	r3, r3, #4
 80074a0:	d0fa      	beq.n	8007498 <_malloc_r+0x1f8>
 80074a2:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
 80074a6:	46c2      	mov	sl, r8
 80074a8:	469c      	mov	ip, r3
 80074aa:	f8da 600c 	ldr.w	r6, [sl, #12]
 80074ae:	4556      	cmp	r6, sl
 80074b0:	d02c      	beq.n	800750c <_malloc_r+0x26c>
 80074b2:	6870      	ldr	r0, [r6, #4]
 80074b4:	68f7      	ldr	r7, [r6, #12]
 80074b6:	f020 0003 	bic.w	r0, r0, #3
 80074ba:	ebc4 0e00 	rsb	lr, r4, r0
 80074be:	f1be 0f0f 	cmp.w	lr, #15
 80074c2:	dd11      	ble.n	80074e8 <_malloc_r+0x248>
 80074c4:	1933      	adds	r3, r6, r4
 80074c6:	f044 0401 	orr.w	r4, r4, #1
 80074ca:	6074      	str	r4, [r6, #4]
 80074cc:	f856 2f08 	ldr.w	r2, [r6, #8]!
 80074d0:	60d7      	str	r7, [r2, #12]
 80074d2:	60ba      	str	r2, [r7, #8]
 80074d4:	f04e 0201 	orr.w	r2, lr, #1
 80074d8:	616b      	str	r3, [r5, #20]
 80074da:	612b      	str	r3, [r5, #16]
 80074dc:	60d9      	str	r1, [r3, #12]
 80074de:	6099      	str	r1, [r3, #8]
 80074e0:	605a      	str	r2, [r3, #4]
 80074e2:	f843 e00e 	str.w	lr, [r3, lr]
 80074e6:	e00b      	b.n	8007500 <_malloc_r+0x260>
 80074e8:	f1be 0f00 	cmp.w	lr, #0
 80074ec:	db0c      	blt.n	8007508 <_malloc_r+0x268>
 80074ee:	1833      	adds	r3, r6, r0
 80074f0:	685a      	ldr	r2, [r3, #4]
 80074f2:	f042 0201 	orr.w	r2, r2, #1
 80074f6:	605a      	str	r2, [r3, #4]
 80074f8:	f856 3f08 	ldr.w	r3, [r6, #8]!
 80074fc:	60df      	str	r7, [r3, #12]
 80074fe:	60bb      	str	r3, [r7, #8]
 8007500:	4648      	mov	r0, r9
 8007502:	f000 f903 	bl	800770c <__malloc_unlock>
 8007506:	e0d5      	b.n	80076b4 <_malloc_r+0x414>
 8007508:	463e      	mov	r6, r7
 800750a:	e7d0      	b.n	80074ae <_malloc_r+0x20e>
 800750c:	f10c 0c01 	add.w	ip, ip, #1
 8007510:	f01c 0f03 	tst.w	ip, #3
 8007514:	f10a 0a08 	add.w	sl, sl, #8
 8007518:	d1c7      	bne.n	80074aa <_malloc_r+0x20a>
 800751a:	0798      	lsls	r0, r3, #30
 800751c:	d104      	bne.n	8007528 <_malloc_r+0x288>
 800751e:	686b      	ldr	r3, [r5, #4]
 8007520:	ea23 0302 	bic.w	r3, r3, r2
 8007524:	606b      	str	r3, [r5, #4]
 8007526:	e004      	b.n	8007532 <_malloc_r+0x292>
 8007528:	f858 0908 	ldr.w	r0, [r8], #-8
 800752c:	3b01      	subs	r3, #1
 800752e:	4580      	cmp	r8, r0
 8007530:	d0f3      	beq.n	800751a <_malloc_r+0x27a>
 8007532:	6868      	ldr	r0, [r5, #4]
 8007534:	0052      	lsls	r2, r2, #1
 8007536:	4282      	cmp	r2, r0
 8007538:	d808      	bhi.n	800754c <_malloc_r+0x2ac>
 800753a:	b13a      	cbz	r2, 800754c <_malloc_r+0x2ac>
 800753c:	4663      	mov	r3, ip
 800753e:	4202      	tst	r2, r0
 8007540:	d1af      	bne.n	80074a2 <_malloc_r+0x202>
 8007542:	3304      	adds	r3, #4
 8007544:	0052      	lsls	r2, r2, #1
 8007546:	e7fa      	b.n	800753e <_malloc_r+0x29e>
 8007548:	200002b4 	.word	0x200002b4
 800754c:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8007550:	f8db 6004 	ldr.w	r6, [fp, #4]
 8007554:	f026 0603 	bic.w	r6, r6, #3
 8007558:	42b4      	cmp	r4, r6
 800755a:	d803      	bhi.n	8007564 <_malloc_r+0x2c4>
 800755c:	1b33      	subs	r3, r6, r4
 800755e:	2b0f      	cmp	r3, #15
 8007560:	f300 809b 	bgt.w	800769a <_malloc_r+0x3fa>
 8007564:	4a55      	ldr	r2, [pc, #340]	; (80076bc <_malloc_r+0x41c>)
 8007566:	4956      	ldr	r1, [pc, #344]	; (80076c0 <_malloc_r+0x420>)
 8007568:	6812      	ldr	r2, [r2, #0]
 800756a:	6808      	ldr	r0, [r1, #0]
 800756c:	f102 0810 	add.w	r8, r2, #16
 8007570:	4a54      	ldr	r2, [pc, #336]	; (80076c4 <_malloc_r+0x424>)
 8007572:	3001      	adds	r0, #1
 8007574:	9101      	str	r1, [sp, #4]
 8007576:	44a0      	add	r8, r4
 8007578:	bf1f      	itttt	ne
 800757a:	f102 31ff 	addne.w	r1, r2, #4294967295
 800757e:	4488      	addne	r8, r1
 8007580:	4251      	negne	r1, r2
 8007582:	ea01 0808 	andne.w	r8, r1, r8
 8007586:	eb0b 0306 	add.w	r3, fp, r6
 800758a:	4641      	mov	r1, r8
 800758c:	4648      	mov	r0, r9
 800758e:	9203      	str	r2, [sp, #12]
 8007590:	9302      	str	r3, [sp, #8]
 8007592:	f000 fbc7 	bl	8007d24 <_sbrk_r>
 8007596:	1c42      	adds	r2, r0, #1
 8007598:	4607      	mov	r7, r0
 800759a:	d06f      	beq.n	800767c <_malloc_r+0x3dc>
 800759c:	9b02      	ldr	r3, [sp, #8]
 800759e:	9a03      	ldr	r2, [sp, #12]
 80075a0:	4283      	cmp	r3, r0
 80075a2:	d901      	bls.n	80075a8 <_malloc_r+0x308>
 80075a4:	45ab      	cmp	fp, r5
 80075a6:	d169      	bne.n	800767c <_malloc_r+0x3dc>
 80075a8:	f8df a124 	ldr.w	sl, [pc, #292]	; 80076d0 <_malloc_r+0x430>
 80075ac:	42bb      	cmp	r3, r7
 80075ae:	f8da 0000 	ldr.w	r0, [sl]
 80075b2:	f8df c120 	ldr.w	ip, [pc, #288]	; 80076d4 <_malloc_r+0x434>
 80075b6:	4440      	add	r0, r8
 80075b8:	f8ca 0000 	str.w	r0, [sl]
 80075bc:	d108      	bne.n	80075d0 <_malloc_r+0x330>
 80075be:	ea13 0f0c 	tst.w	r3, ip
 80075c2:	d105      	bne.n	80075d0 <_malloc_r+0x330>
 80075c4:	68ab      	ldr	r3, [r5, #8]
 80075c6:	4446      	add	r6, r8
 80075c8:	f046 0601 	orr.w	r6, r6, #1
 80075cc:	605e      	str	r6, [r3, #4]
 80075ce:	e049      	b.n	8007664 <_malloc_r+0x3c4>
 80075d0:	9901      	ldr	r1, [sp, #4]
 80075d2:	f8d1 e000 	ldr.w	lr, [r1]
 80075d6:	f1be 3fff 	cmp.w	lr, #4294967295
 80075da:	bf15      	itete	ne
 80075dc:	1afb      	subne	r3, r7, r3
 80075de:	4b38      	ldreq	r3, [pc, #224]	; (80076c0 <_malloc_r+0x420>)
 80075e0:	181b      	addne	r3, r3, r0
 80075e2:	601f      	streq	r7, [r3, #0]
 80075e4:	bf18      	it	ne
 80075e6:	f8ca 3000 	strne.w	r3, [sl]
 80075ea:	f017 0307 	ands.w	r3, r7, #7
 80075ee:	bf1c      	itt	ne
 80075f0:	f1c3 0308 	rsbne	r3, r3, #8
 80075f4:	18ff      	addne	r7, r7, r3
 80075f6:	44b8      	add	r8, r7
 80075f8:	441a      	add	r2, r3
 80075fa:	ea08 080c 	and.w	r8, r8, ip
 80075fe:	ebc8 0802 	rsb	r8, r8, r2
 8007602:	4641      	mov	r1, r8
 8007604:	4648      	mov	r0, r9
 8007606:	f000 fb8d 	bl	8007d24 <_sbrk_r>
 800760a:	1c43      	adds	r3, r0, #1
 800760c:	bf04      	itt	eq
 800760e:	4638      	moveq	r0, r7
 8007610:	f04f 0800 	moveq.w	r8, #0
 8007614:	f8da 3000 	ldr.w	r3, [sl]
 8007618:	1bc2      	subs	r2, r0, r7
 800761a:	4442      	add	r2, r8
 800761c:	4443      	add	r3, r8
 800761e:	f042 0201 	orr.w	r2, r2, #1
 8007622:	45ab      	cmp	fp, r5
 8007624:	60af      	str	r7, [r5, #8]
 8007626:	f8ca 3000 	str.w	r3, [sl]
 800762a:	607a      	str	r2, [r7, #4]
 800762c:	d01a      	beq.n	8007664 <_malloc_r+0x3c4>
 800762e:	2e0f      	cmp	r6, #15
 8007630:	d802      	bhi.n	8007638 <_malloc_r+0x398>
 8007632:	2301      	movs	r3, #1
 8007634:	607b      	str	r3, [r7, #4]
 8007636:	e021      	b.n	800767c <_malloc_r+0x3dc>
 8007638:	f8db 3004 	ldr.w	r3, [fp, #4]
 800763c:	3e0c      	subs	r6, #12
 800763e:	f026 0607 	bic.w	r6, r6, #7
 8007642:	f003 0301 	and.w	r3, r3, #1
 8007646:	4333      	orrs	r3, r6
 8007648:	f8cb 3004 	str.w	r3, [fp, #4]
 800764c:	2205      	movs	r2, #5
 800764e:	eb0b 0306 	add.w	r3, fp, r6
 8007652:	2e0f      	cmp	r6, #15
 8007654:	605a      	str	r2, [r3, #4]
 8007656:	609a      	str	r2, [r3, #8]
 8007658:	d904      	bls.n	8007664 <_malloc_r+0x3c4>
 800765a:	f10b 0108 	add.w	r1, fp, #8
 800765e:	4648      	mov	r0, r9
 8007660:	f7ff fcc4 	bl	8006fec <_free_r>
 8007664:	4a18      	ldr	r2, [pc, #96]	; (80076c8 <_malloc_r+0x428>)
 8007666:	f8da 3000 	ldr.w	r3, [sl]
 800766a:	6811      	ldr	r1, [r2, #0]
 800766c:	428b      	cmp	r3, r1
 800766e:	bf88      	it	hi
 8007670:	6013      	strhi	r3, [r2, #0]
 8007672:	4a16      	ldr	r2, [pc, #88]	; (80076cc <_malloc_r+0x42c>)
 8007674:	6811      	ldr	r1, [r2, #0]
 8007676:	428b      	cmp	r3, r1
 8007678:	bf88      	it	hi
 800767a:	6013      	strhi	r3, [r2, #0]
 800767c:	68ab      	ldr	r3, [r5, #8]
 800767e:	685a      	ldr	r2, [r3, #4]
 8007680:	f022 0203 	bic.w	r2, r2, #3
 8007684:	4294      	cmp	r4, r2
 8007686:	eba2 0304 	sub.w	r3, r2, r4
 800768a:	d801      	bhi.n	8007690 <_malloc_r+0x3f0>
 800768c:	2b0f      	cmp	r3, #15
 800768e:	dc04      	bgt.n	800769a <_malloc_r+0x3fa>
 8007690:	4648      	mov	r0, r9
 8007692:	f000 f83b 	bl	800770c <__malloc_unlock>
 8007696:	2600      	movs	r6, #0
 8007698:	e00c      	b.n	80076b4 <_malloc_r+0x414>
 800769a:	68ae      	ldr	r6, [r5, #8]
 800769c:	f044 0201 	orr.w	r2, r4, #1
 80076a0:	f043 0301 	orr.w	r3, r3, #1
 80076a4:	4434      	add	r4, r6
 80076a6:	6072      	str	r2, [r6, #4]
 80076a8:	60ac      	str	r4, [r5, #8]
 80076aa:	6063      	str	r3, [r4, #4]
 80076ac:	4648      	mov	r0, r9
 80076ae:	f000 f82d 	bl	800770c <__malloc_unlock>
 80076b2:	3608      	adds	r6, #8
 80076b4:	4630      	mov	r0, r6
 80076b6:	b005      	add	sp, #20
 80076b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076bc:	2000077c 	.word	0x2000077c
 80076c0:	200006c0 	.word	0x200006c0
 80076c4:	00000080 	.word	0x00000080
 80076c8:	20000778 	.word	0x20000778
 80076cc:	20000774 	.word	0x20000774
 80076d0:	20000780 	.word	0x20000780
 80076d4:	0000007f 	.word	0x0000007f

080076d8 <memchr>:
 80076d8:	b510      	push	{r4, lr}
 80076da:	b2c9      	uxtb	r1, r1
 80076dc:	4402      	add	r2, r0
 80076de:	4290      	cmp	r0, r2
 80076e0:	4603      	mov	r3, r0
 80076e2:	d005      	beq.n	80076f0 <memchr+0x18>
 80076e4:	781c      	ldrb	r4, [r3, #0]
 80076e6:	3001      	adds	r0, #1
 80076e8:	428c      	cmp	r4, r1
 80076ea:	d1f8      	bne.n	80076de <memchr+0x6>
 80076ec:	4618      	mov	r0, r3
 80076ee:	bd10      	pop	{r4, pc}
 80076f0:	2000      	movs	r0, #0
 80076f2:	bd10      	pop	{r4, pc}

080076f4 <memcpy>:
 80076f4:	b510      	push	{r4, lr}
 80076f6:	1e43      	subs	r3, r0, #1
 80076f8:	440a      	add	r2, r1
 80076fa:	4291      	cmp	r1, r2
 80076fc:	d004      	beq.n	8007708 <memcpy+0x14>
 80076fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007702:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007706:	e7f8      	b.n	80076fa <memcpy+0x6>
 8007708:	bd10      	pop	{r4, pc}

0800770a <__malloc_lock>:
 800770a:	4770      	bx	lr

0800770c <__malloc_unlock>:
 800770c:	4770      	bx	lr

0800770e <_Balloc>:
 800770e:	b570      	push	{r4, r5, r6, lr}
 8007710:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007712:	4604      	mov	r4, r0
 8007714:	460e      	mov	r6, r1
 8007716:	b93d      	cbnz	r5, 8007728 <_Balloc+0x1a>
 8007718:	2010      	movs	r0, #16
 800771a:	f7ff fdb9 	bl	8007290 <malloc>
 800771e:	6260      	str	r0, [r4, #36]	; 0x24
 8007720:	6045      	str	r5, [r0, #4]
 8007722:	6085      	str	r5, [r0, #8]
 8007724:	6005      	str	r5, [r0, #0]
 8007726:	60c5      	str	r5, [r0, #12]
 8007728:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800772a:	68eb      	ldr	r3, [r5, #12]
 800772c:	b143      	cbz	r3, 8007740 <_Balloc+0x32>
 800772e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007730:	68db      	ldr	r3, [r3, #12]
 8007732:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007736:	b178      	cbz	r0, 8007758 <_Balloc+0x4a>
 8007738:	6802      	ldr	r2, [r0, #0]
 800773a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800773e:	e017      	b.n	8007770 <_Balloc+0x62>
 8007740:	2221      	movs	r2, #33	; 0x21
 8007742:	2104      	movs	r1, #4
 8007744:	4620      	mov	r0, r4
 8007746:	f000 fc61 	bl	800800c <_calloc_r>
 800774a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800774c:	60e8      	str	r0, [r5, #12]
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d1ec      	bne.n	800772e <_Balloc+0x20>
 8007754:	2000      	movs	r0, #0
 8007756:	bd70      	pop	{r4, r5, r6, pc}
 8007758:	2101      	movs	r1, #1
 800775a:	fa01 f506 	lsl.w	r5, r1, r6
 800775e:	1d6a      	adds	r2, r5, #5
 8007760:	0092      	lsls	r2, r2, #2
 8007762:	4620      	mov	r0, r4
 8007764:	f000 fc52 	bl	800800c <_calloc_r>
 8007768:	2800      	cmp	r0, #0
 800776a:	d0f3      	beq.n	8007754 <_Balloc+0x46>
 800776c:	6046      	str	r6, [r0, #4]
 800776e:	6085      	str	r5, [r0, #8]
 8007770:	2300      	movs	r3, #0
 8007772:	6103      	str	r3, [r0, #16]
 8007774:	60c3      	str	r3, [r0, #12]
 8007776:	bd70      	pop	{r4, r5, r6, pc}

08007778 <_Bfree>:
 8007778:	b570      	push	{r4, r5, r6, lr}
 800777a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800777c:	4606      	mov	r6, r0
 800777e:	460d      	mov	r5, r1
 8007780:	b93c      	cbnz	r4, 8007792 <_Bfree+0x1a>
 8007782:	2010      	movs	r0, #16
 8007784:	f7ff fd84 	bl	8007290 <malloc>
 8007788:	6270      	str	r0, [r6, #36]	; 0x24
 800778a:	6044      	str	r4, [r0, #4]
 800778c:	6084      	str	r4, [r0, #8]
 800778e:	6004      	str	r4, [r0, #0]
 8007790:	60c4      	str	r4, [r0, #12]
 8007792:	b13d      	cbz	r5, 80077a4 <_Bfree+0x2c>
 8007794:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007796:	686a      	ldr	r2, [r5, #4]
 8007798:	68db      	ldr	r3, [r3, #12]
 800779a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800779e:	6029      	str	r1, [r5, #0]
 80077a0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80077a4:	bd70      	pop	{r4, r5, r6, pc}

080077a6 <__multadd>:
 80077a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077aa:	4606      	mov	r6, r0
 80077ac:	460c      	mov	r4, r1
 80077ae:	690d      	ldr	r5, [r1, #16]
 80077b0:	461f      	mov	r7, r3
 80077b2:	f101 0e14 	add.w	lr, r1, #20
 80077b6:	2300      	movs	r3, #0
 80077b8:	f8de 0000 	ldr.w	r0, [lr]
 80077bc:	3301      	adds	r3, #1
 80077be:	b281      	uxth	r1, r0
 80077c0:	fb02 7101 	mla	r1, r2, r1, r7
 80077c4:	0c00      	lsrs	r0, r0, #16
 80077c6:	0c0f      	lsrs	r7, r1, #16
 80077c8:	fb02 7000 	mla	r0, r2, r0, r7
 80077cc:	b289      	uxth	r1, r1
 80077ce:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80077d2:	429d      	cmp	r5, r3
 80077d4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80077d8:	f84e 1b04 	str.w	r1, [lr], #4
 80077dc:	dcec      	bgt.n	80077b8 <__multadd+0x12>
 80077de:	b1d7      	cbz	r7, 8007816 <__multadd+0x70>
 80077e0:	68a3      	ldr	r3, [r4, #8]
 80077e2:	429d      	cmp	r5, r3
 80077e4:	db12      	blt.n	800780c <__multadd+0x66>
 80077e6:	6861      	ldr	r1, [r4, #4]
 80077e8:	4630      	mov	r0, r6
 80077ea:	3101      	adds	r1, #1
 80077ec:	f7ff ff8f 	bl	800770e <_Balloc>
 80077f0:	4680      	mov	r8, r0
 80077f2:	6922      	ldr	r2, [r4, #16]
 80077f4:	f104 010c 	add.w	r1, r4, #12
 80077f8:	3202      	adds	r2, #2
 80077fa:	0092      	lsls	r2, r2, #2
 80077fc:	300c      	adds	r0, #12
 80077fe:	f7ff ff79 	bl	80076f4 <memcpy>
 8007802:	4621      	mov	r1, r4
 8007804:	4630      	mov	r0, r6
 8007806:	f7ff ffb7 	bl	8007778 <_Bfree>
 800780a:	4644      	mov	r4, r8
 800780c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007810:	3501      	adds	r5, #1
 8007812:	615f      	str	r7, [r3, #20]
 8007814:	6125      	str	r5, [r4, #16]
 8007816:	4620      	mov	r0, r4
 8007818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800781c <__hi0bits>:
 800781c:	0c03      	lsrs	r3, r0, #16
 800781e:	041b      	lsls	r3, r3, #16
 8007820:	b913      	cbnz	r3, 8007828 <__hi0bits+0xc>
 8007822:	0400      	lsls	r0, r0, #16
 8007824:	2310      	movs	r3, #16
 8007826:	e000      	b.n	800782a <__hi0bits+0xe>
 8007828:	2300      	movs	r3, #0
 800782a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800782e:	bf04      	itt	eq
 8007830:	0200      	lsleq	r0, r0, #8
 8007832:	3308      	addeq	r3, #8
 8007834:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007838:	bf04      	itt	eq
 800783a:	0100      	lsleq	r0, r0, #4
 800783c:	3304      	addeq	r3, #4
 800783e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007842:	bf04      	itt	eq
 8007844:	0080      	lsleq	r0, r0, #2
 8007846:	3302      	addeq	r3, #2
 8007848:	2800      	cmp	r0, #0
 800784a:	db03      	blt.n	8007854 <__hi0bits+0x38>
 800784c:	0042      	lsls	r2, r0, #1
 800784e:	d503      	bpl.n	8007858 <__hi0bits+0x3c>
 8007850:	1c58      	adds	r0, r3, #1
 8007852:	4770      	bx	lr
 8007854:	4618      	mov	r0, r3
 8007856:	4770      	bx	lr
 8007858:	2020      	movs	r0, #32
 800785a:	4770      	bx	lr

0800785c <__lo0bits>:
 800785c:	6803      	ldr	r3, [r0, #0]
 800785e:	f013 0207 	ands.w	r2, r3, #7
 8007862:	d00b      	beq.n	800787c <__lo0bits+0x20>
 8007864:	07d9      	lsls	r1, r3, #31
 8007866:	d422      	bmi.n	80078ae <__lo0bits+0x52>
 8007868:	079a      	lsls	r2, r3, #30
 800786a:	bf4b      	itete	mi
 800786c:	085b      	lsrmi	r3, r3, #1
 800786e:	089b      	lsrpl	r3, r3, #2
 8007870:	6003      	strmi	r3, [r0, #0]
 8007872:	6003      	strpl	r3, [r0, #0]
 8007874:	bf4c      	ite	mi
 8007876:	2001      	movmi	r0, #1
 8007878:	2002      	movpl	r0, #2
 800787a:	4770      	bx	lr
 800787c:	b299      	uxth	r1, r3
 800787e:	b909      	cbnz	r1, 8007884 <__lo0bits+0x28>
 8007880:	0c1b      	lsrs	r3, r3, #16
 8007882:	2210      	movs	r2, #16
 8007884:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007888:	bf04      	itt	eq
 800788a:	0a1b      	lsreq	r3, r3, #8
 800788c:	3208      	addeq	r2, #8
 800788e:	0719      	lsls	r1, r3, #28
 8007890:	bf04      	itt	eq
 8007892:	091b      	lsreq	r3, r3, #4
 8007894:	3204      	addeq	r2, #4
 8007896:	0799      	lsls	r1, r3, #30
 8007898:	bf04      	itt	eq
 800789a:	089b      	lsreq	r3, r3, #2
 800789c:	3202      	addeq	r2, #2
 800789e:	07d9      	lsls	r1, r3, #31
 80078a0:	d402      	bmi.n	80078a8 <__lo0bits+0x4c>
 80078a2:	085b      	lsrs	r3, r3, #1
 80078a4:	d005      	beq.n	80078b2 <__lo0bits+0x56>
 80078a6:	3201      	adds	r2, #1
 80078a8:	6003      	str	r3, [r0, #0]
 80078aa:	4610      	mov	r0, r2
 80078ac:	4770      	bx	lr
 80078ae:	2000      	movs	r0, #0
 80078b0:	4770      	bx	lr
 80078b2:	2020      	movs	r0, #32
 80078b4:	4770      	bx	lr

080078b6 <__i2b>:
 80078b6:	b510      	push	{r4, lr}
 80078b8:	460c      	mov	r4, r1
 80078ba:	2101      	movs	r1, #1
 80078bc:	f7ff ff27 	bl	800770e <_Balloc>
 80078c0:	2201      	movs	r2, #1
 80078c2:	6144      	str	r4, [r0, #20]
 80078c4:	6102      	str	r2, [r0, #16]
 80078c6:	bd10      	pop	{r4, pc}

080078c8 <__multiply>:
 80078c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078cc:	4614      	mov	r4, r2
 80078ce:	690a      	ldr	r2, [r1, #16]
 80078d0:	6923      	ldr	r3, [r4, #16]
 80078d2:	4688      	mov	r8, r1
 80078d4:	429a      	cmp	r2, r3
 80078d6:	bfbe      	ittt	lt
 80078d8:	460b      	movlt	r3, r1
 80078da:	46a0      	movlt	r8, r4
 80078dc:	461c      	movlt	r4, r3
 80078de:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80078e2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80078e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80078ea:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80078ee:	eb07 0609 	add.w	r6, r7, r9
 80078f2:	429e      	cmp	r6, r3
 80078f4:	bfc8      	it	gt
 80078f6:	3101      	addgt	r1, #1
 80078f8:	f7ff ff09 	bl	800770e <_Balloc>
 80078fc:	f100 0514 	add.w	r5, r0, #20
 8007900:	462b      	mov	r3, r5
 8007902:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 8007906:	2200      	movs	r2, #0
 8007908:	4563      	cmp	r3, ip
 800790a:	d202      	bcs.n	8007912 <__multiply+0x4a>
 800790c:	f843 2b04 	str.w	r2, [r3], #4
 8007910:	e7fa      	b.n	8007908 <__multiply+0x40>
 8007912:	f104 0214 	add.w	r2, r4, #20
 8007916:	f108 0114 	add.w	r1, r8, #20
 800791a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800791e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007922:	9300      	str	r3, [sp, #0]
 8007924:	9b00      	ldr	r3, [sp, #0]
 8007926:	9201      	str	r2, [sp, #4]
 8007928:	4293      	cmp	r3, r2
 800792a:	d957      	bls.n	80079dc <__multiply+0x114>
 800792c:	f8b2 b000 	ldrh.w	fp, [r2]
 8007930:	f1bb 0f00 	cmp.w	fp, #0
 8007934:	d023      	beq.n	800797e <__multiply+0xb6>
 8007936:	4689      	mov	r9, r1
 8007938:	46ae      	mov	lr, r5
 800793a:	f04f 0800 	mov.w	r8, #0
 800793e:	f859 4b04 	ldr.w	r4, [r9], #4
 8007942:	f8be a000 	ldrh.w	sl, [lr]
 8007946:	b2a3      	uxth	r3, r4
 8007948:	fb0b a303 	mla	r3, fp, r3, sl
 800794c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007950:	f8de 4000 	ldr.w	r4, [lr]
 8007954:	4443      	add	r3, r8
 8007956:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800795a:	fb0b 840a 	mla	r4, fp, sl, r8
 800795e:	46f2      	mov	sl, lr
 8007960:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007964:	b29b      	uxth	r3, r3
 8007966:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800796a:	454f      	cmp	r7, r9
 800796c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007970:	f84a 3b04 	str.w	r3, [sl], #4
 8007974:	d901      	bls.n	800797a <__multiply+0xb2>
 8007976:	46d6      	mov	lr, sl
 8007978:	e7e1      	b.n	800793e <__multiply+0x76>
 800797a:	f8ce 8004 	str.w	r8, [lr, #4]
 800797e:	9b01      	ldr	r3, [sp, #4]
 8007980:	3204      	adds	r2, #4
 8007982:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007986:	f1ba 0f00 	cmp.w	sl, #0
 800798a:	d021      	beq.n	80079d0 <__multiply+0x108>
 800798c:	462c      	mov	r4, r5
 800798e:	4689      	mov	r9, r1
 8007990:	682b      	ldr	r3, [r5, #0]
 8007992:	f04f 0800 	mov.w	r8, #0
 8007996:	f8b9 e000 	ldrh.w	lr, [r9]
 800799a:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 800799e:	b29b      	uxth	r3, r3
 80079a0:	fb0a be0e 	mla	lr, sl, lr, fp
 80079a4:	46a3      	mov	fp, r4
 80079a6:	44f0      	add	r8, lr
 80079a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80079ac:	f84b 3b04 	str.w	r3, [fp], #4
 80079b0:	f859 3b04 	ldr.w	r3, [r9], #4
 80079b4:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 80079b8:	0c1b      	lsrs	r3, r3, #16
 80079ba:	fb0a e303 	mla	r3, sl, r3, lr
 80079be:	454f      	cmp	r7, r9
 80079c0:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 80079c4:	ea4f 4813 	mov.w	r8, r3, lsr #16
 80079c8:	d901      	bls.n	80079ce <__multiply+0x106>
 80079ca:	465c      	mov	r4, fp
 80079cc:	e7e3      	b.n	8007996 <__multiply+0xce>
 80079ce:	6063      	str	r3, [r4, #4]
 80079d0:	3504      	adds	r5, #4
 80079d2:	e7a7      	b.n	8007924 <__multiply+0x5c>
 80079d4:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 80079d8:	b913      	cbnz	r3, 80079e0 <__multiply+0x118>
 80079da:	3e01      	subs	r6, #1
 80079dc:	2e00      	cmp	r6, #0
 80079de:	dcf9      	bgt.n	80079d4 <__multiply+0x10c>
 80079e0:	6106      	str	r6, [r0, #16]
 80079e2:	b003      	add	sp, #12
 80079e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080079e8 <__pow5mult>:
 80079e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079ec:	4615      	mov	r5, r2
 80079ee:	f012 0203 	ands.w	r2, r2, #3
 80079f2:	4606      	mov	r6, r0
 80079f4:	460f      	mov	r7, r1
 80079f6:	d007      	beq.n	8007a08 <__pow5mult+0x20>
 80079f8:	4c21      	ldr	r4, [pc, #132]	; (8007a80 <__pow5mult+0x98>)
 80079fa:	3a01      	subs	r2, #1
 80079fc:	2300      	movs	r3, #0
 80079fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007a02:	f7ff fed0 	bl	80077a6 <__multadd>
 8007a06:	4607      	mov	r7, r0
 8007a08:	10ad      	asrs	r5, r5, #2
 8007a0a:	d036      	beq.n	8007a7a <__pow5mult+0x92>
 8007a0c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007a0e:	b93c      	cbnz	r4, 8007a20 <__pow5mult+0x38>
 8007a10:	2010      	movs	r0, #16
 8007a12:	f7ff fc3d 	bl	8007290 <malloc>
 8007a16:	6270      	str	r0, [r6, #36]	; 0x24
 8007a18:	6044      	str	r4, [r0, #4]
 8007a1a:	6084      	str	r4, [r0, #8]
 8007a1c:	6004      	str	r4, [r0, #0]
 8007a1e:	60c4      	str	r4, [r0, #12]
 8007a20:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007a24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007a28:	b94c      	cbnz	r4, 8007a3e <__pow5mult+0x56>
 8007a2a:	f240 2171 	movw	r1, #625	; 0x271
 8007a2e:	4630      	mov	r0, r6
 8007a30:	f7ff ff41 	bl	80078b6 <__i2b>
 8007a34:	4604      	mov	r4, r0
 8007a36:	2300      	movs	r3, #0
 8007a38:	f8c8 0008 	str.w	r0, [r8, #8]
 8007a3c:	6003      	str	r3, [r0, #0]
 8007a3e:	f04f 0800 	mov.w	r8, #0
 8007a42:	07eb      	lsls	r3, r5, #31
 8007a44:	d50a      	bpl.n	8007a5c <__pow5mult+0x74>
 8007a46:	4639      	mov	r1, r7
 8007a48:	4622      	mov	r2, r4
 8007a4a:	4630      	mov	r0, r6
 8007a4c:	f7ff ff3c 	bl	80078c8 <__multiply>
 8007a50:	4681      	mov	r9, r0
 8007a52:	4639      	mov	r1, r7
 8007a54:	4630      	mov	r0, r6
 8007a56:	f7ff fe8f 	bl	8007778 <_Bfree>
 8007a5a:	464f      	mov	r7, r9
 8007a5c:	106d      	asrs	r5, r5, #1
 8007a5e:	d00c      	beq.n	8007a7a <__pow5mult+0x92>
 8007a60:	6820      	ldr	r0, [r4, #0]
 8007a62:	b108      	cbz	r0, 8007a68 <__pow5mult+0x80>
 8007a64:	4604      	mov	r4, r0
 8007a66:	e7ec      	b.n	8007a42 <__pow5mult+0x5a>
 8007a68:	4622      	mov	r2, r4
 8007a6a:	4621      	mov	r1, r4
 8007a6c:	4630      	mov	r0, r6
 8007a6e:	f7ff ff2b 	bl	80078c8 <__multiply>
 8007a72:	6020      	str	r0, [r4, #0]
 8007a74:	f8c0 8000 	str.w	r8, [r0]
 8007a78:	e7f4      	b.n	8007a64 <__pow5mult+0x7c>
 8007a7a:	4638      	mov	r0, r7
 8007a7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a80:	08008c78 	.word	0x08008c78

08007a84 <__lshift>:
 8007a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a88:	460c      	mov	r4, r1
 8007a8a:	4607      	mov	r7, r0
 8007a8c:	4691      	mov	r9, r2
 8007a8e:	6926      	ldr	r6, [r4, #16]
 8007a90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007a94:	4456      	add	r6, sl
 8007a96:	6849      	ldr	r1, [r1, #4]
 8007a98:	68a3      	ldr	r3, [r4, #8]
 8007a9a:	1c75      	adds	r5, r6, #1
 8007a9c:	42ab      	cmp	r3, r5
 8007a9e:	da02      	bge.n	8007aa6 <__lshift+0x22>
 8007aa0:	3101      	adds	r1, #1
 8007aa2:	005b      	lsls	r3, r3, #1
 8007aa4:	e7fa      	b.n	8007a9c <__lshift+0x18>
 8007aa6:	4638      	mov	r0, r7
 8007aa8:	f7ff fe31 	bl	800770e <_Balloc>
 8007aac:	2300      	movs	r3, #0
 8007aae:	4680      	mov	r8, r0
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	f100 0114 	add.w	r1, r0, #20
 8007ab6:	4553      	cmp	r3, sl
 8007ab8:	da03      	bge.n	8007ac2 <__lshift+0x3e>
 8007aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007abe:	3301      	adds	r3, #1
 8007ac0:	e7f9      	b.n	8007ab6 <__lshift+0x32>
 8007ac2:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 8007ac6:	6920      	ldr	r0, [r4, #16]
 8007ac8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8007acc:	f019 091f 	ands.w	r9, r9, #31
 8007ad0:	f104 0114 	add.w	r1, r4, #20
 8007ad4:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8007ad8:	d014      	beq.n	8007b04 <__lshift+0x80>
 8007ada:	f1c9 0c20 	rsb	ip, r9, #32
 8007ade:	2200      	movs	r2, #0
 8007ae0:	6808      	ldr	r0, [r1, #0]
 8007ae2:	469a      	mov	sl, r3
 8007ae4:	fa00 f009 	lsl.w	r0, r0, r9
 8007ae8:	4302      	orrs	r2, r0
 8007aea:	f843 2b04 	str.w	r2, [r3], #4
 8007aee:	f851 2b04 	ldr.w	r2, [r1], #4
 8007af2:	458e      	cmp	lr, r1
 8007af4:	fa22 f20c 	lsr.w	r2, r2, ip
 8007af8:	d8f2      	bhi.n	8007ae0 <__lshift+0x5c>
 8007afa:	f8ca 2004 	str.w	r2, [sl, #4]
 8007afe:	b142      	cbz	r2, 8007b12 <__lshift+0x8e>
 8007b00:	1cb5      	adds	r5, r6, #2
 8007b02:	e006      	b.n	8007b12 <__lshift+0x8e>
 8007b04:	3b04      	subs	r3, #4
 8007b06:	f851 2b04 	ldr.w	r2, [r1], #4
 8007b0a:	458e      	cmp	lr, r1
 8007b0c:	f843 2f04 	str.w	r2, [r3, #4]!
 8007b10:	d8f9      	bhi.n	8007b06 <__lshift+0x82>
 8007b12:	3d01      	subs	r5, #1
 8007b14:	4638      	mov	r0, r7
 8007b16:	f8c8 5010 	str.w	r5, [r8, #16]
 8007b1a:	4621      	mov	r1, r4
 8007b1c:	f7ff fe2c 	bl	8007778 <_Bfree>
 8007b20:	4640      	mov	r0, r8
 8007b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007b26 <__mcmp>:
 8007b26:	6903      	ldr	r3, [r0, #16]
 8007b28:	690a      	ldr	r2, [r1, #16]
 8007b2a:	b510      	push	{r4, lr}
 8007b2c:	1a9b      	subs	r3, r3, r2
 8007b2e:	d111      	bne.n	8007b54 <__mcmp+0x2e>
 8007b30:	0092      	lsls	r2, r2, #2
 8007b32:	3014      	adds	r0, #20
 8007b34:	3114      	adds	r1, #20
 8007b36:	1883      	adds	r3, r0, r2
 8007b38:	440a      	add	r2, r1
 8007b3a:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8007b3e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007b42:	428c      	cmp	r4, r1
 8007b44:	d002      	beq.n	8007b4c <__mcmp+0x26>
 8007b46:	d307      	bcc.n	8007b58 <__mcmp+0x32>
 8007b48:	2001      	movs	r0, #1
 8007b4a:	bd10      	pop	{r4, pc}
 8007b4c:	4298      	cmp	r0, r3
 8007b4e:	d3f4      	bcc.n	8007b3a <__mcmp+0x14>
 8007b50:	2000      	movs	r0, #0
 8007b52:	bd10      	pop	{r4, pc}
 8007b54:	4618      	mov	r0, r3
 8007b56:	bd10      	pop	{r4, pc}
 8007b58:	f04f 30ff 	mov.w	r0, #4294967295
 8007b5c:	bd10      	pop	{r4, pc}

08007b5e <__mdiff>:
 8007b5e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b62:	460c      	mov	r4, r1
 8007b64:	4607      	mov	r7, r0
 8007b66:	4611      	mov	r1, r2
 8007b68:	4620      	mov	r0, r4
 8007b6a:	4615      	mov	r5, r2
 8007b6c:	f7ff ffdb 	bl	8007b26 <__mcmp>
 8007b70:	1e06      	subs	r6, r0, #0
 8007b72:	d108      	bne.n	8007b86 <__mdiff+0x28>
 8007b74:	4631      	mov	r1, r6
 8007b76:	4638      	mov	r0, r7
 8007b78:	f7ff fdc9 	bl	800770e <_Balloc>
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	6103      	str	r3, [r0, #16]
 8007b80:	6146      	str	r6, [r0, #20]
 8007b82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b86:	bfbc      	itt	lt
 8007b88:	4623      	movlt	r3, r4
 8007b8a:	462c      	movlt	r4, r5
 8007b8c:	4638      	mov	r0, r7
 8007b8e:	6861      	ldr	r1, [r4, #4]
 8007b90:	bfba      	itte	lt
 8007b92:	461d      	movlt	r5, r3
 8007b94:	2601      	movlt	r6, #1
 8007b96:	2600      	movge	r6, #0
 8007b98:	f7ff fdb9 	bl	800770e <_Balloc>
 8007b9c:	692b      	ldr	r3, [r5, #16]
 8007b9e:	60c6      	str	r6, [r0, #12]
 8007ba0:	6926      	ldr	r6, [r4, #16]
 8007ba2:	f105 0914 	add.w	r9, r5, #20
 8007ba6:	f104 0114 	add.w	r1, r4, #20
 8007baa:	eb01 0786 	add.w	r7, r1, r6, lsl #2
 8007bae:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007bb2:	f100 0514 	add.w	r5, r0, #20
 8007bb6:	f04f 0c00 	mov.w	ip, #0
 8007bba:	f851 2b04 	ldr.w	r2, [r1], #4
 8007bbe:	f859 4b04 	ldr.w	r4, [r9], #4
 8007bc2:	b293      	uxth	r3, r2
 8007bc4:	449c      	add	ip, r3
 8007bc6:	b2a3      	uxth	r3, r4
 8007bc8:	0c24      	lsrs	r4, r4, #16
 8007bca:	ebc3 030c 	rsb	r3, r3, ip
 8007bce:	ebc4 4212 	rsb	r2, r4, r2, lsr #16
 8007bd2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007bdc:	45c8      	cmp	r8, r9
 8007bde:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8007be2:	468e      	mov	lr, r1
 8007be4:	f845 2b04 	str.w	r2, [r5], #4
 8007be8:	d8e7      	bhi.n	8007bba <__mdiff+0x5c>
 8007bea:	45be      	cmp	lr, r7
 8007bec:	d20e      	bcs.n	8007c0c <__mdiff+0xae>
 8007bee:	f85e 1b04 	ldr.w	r1, [lr], #4
 8007bf2:	b28a      	uxth	r2, r1
 8007bf4:	4462      	add	r2, ip
 8007bf6:	1413      	asrs	r3, r2, #16
 8007bf8:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 8007bfc:	b292      	uxth	r2, r2
 8007bfe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007c02:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007c06:	f845 2b04 	str.w	r2, [r5], #4
 8007c0a:	e7ee      	b.n	8007bea <__mdiff+0x8c>
 8007c0c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007c10:	b90b      	cbnz	r3, 8007c16 <__mdiff+0xb8>
 8007c12:	3e01      	subs	r6, #1
 8007c14:	e7fa      	b.n	8007c0c <__mdiff+0xae>
 8007c16:	6106      	str	r6, [r0, #16]
 8007c18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08007c1c <__d2b>:
 8007c1c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007c20:	461c      	mov	r4, r3
 8007c22:	2101      	movs	r1, #1
 8007c24:	4690      	mov	r8, r2
 8007c26:	9e08      	ldr	r6, [sp, #32]
 8007c28:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007c2a:	f7ff fd70 	bl	800770e <_Balloc>
 8007c2e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8007c32:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007c36:	4607      	mov	r7, r0
 8007c38:	b10c      	cbz	r4, 8007c3e <__d2b+0x22>
 8007c3a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007c3e:	9201      	str	r2, [sp, #4]
 8007c40:	f1b8 0f00 	cmp.w	r8, #0
 8007c44:	d019      	beq.n	8007c7a <__d2b+0x5e>
 8007c46:	a802      	add	r0, sp, #8
 8007c48:	f840 8d08 	str.w	r8, [r0, #-8]!
 8007c4c:	f7ff fe06 	bl	800785c <__lo0bits>
 8007c50:	9b00      	ldr	r3, [sp, #0]
 8007c52:	b148      	cbz	r0, 8007c68 <__d2b+0x4c>
 8007c54:	9a01      	ldr	r2, [sp, #4]
 8007c56:	f1c0 0120 	rsb	r1, r0, #32
 8007c5a:	fa02 f101 	lsl.w	r1, r2, r1
 8007c5e:	430b      	orrs	r3, r1
 8007c60:	40c2      	lsrs	r2, r0
 8007c62:	617b      	str	r3, [r7, #20]
 8007c64:	9201      	str	r2, [sp, #4]
 8007c66:	e000      	b.n	8007c6a <__d2b+0x4e>
 8007c68:	617b      	str	r3, [r7, #20]
 8007c6a:	9b01      	ldr	r3, [sp, #4]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	bf14      	ite	ne
 8007c70:	2102      	movne	r1, #2
 8007c72:	2101      	moveq	r1, #1
 8007c74:	61bb      	str	r3, [r7, #24]
 8007c76:	6139      	str	r1, [r7, #16]
 8007c78:	e007      	b.n	8007c8a <__d2b+0x6e>
 8007c7a:	a801      	add	r0, sp, #4
 8007c7c:	f7ff fdee 	bl	800785c <__lo0bits>
 8007c80:	9b01      	ldr	r3, [sp, #4]
 8007c82:	2101      	movs	r1, #1
 8007c84:	617b      	str	r3, [r7, #20]
 8007c86:	6139      	str	r1, [r7, #16]
 8007c88:	3020      	adds	r0, #32
 8007c8a:	b134      	cbz	r4, 8007c9a <__d2b+0x7e>
 8007c8c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007c90:	4404      	add	r4, r0
 8007c92:	6034      	str	r4, [r6, #0]
 8007c94:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007c98:	e009      	b.n	8007cae <__d2b+0x92>
 8007c9a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007c9e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007ca2:	6030      	str	r0, [r6, #0]
 8007ca4:	6918      	ldr	r0, [r3, #16]
 8007ca6:	f7ff fdb9 	bl	800781c <__hi0bits>
 8007caa:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007cae:	6028      	str	r0, [r5, #0]
 8007cb0:	4638      	mov	r0, r7
 8007cb2:	b002      	add	sp, #8
 8007cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007cb8 <_putc_r>:
 8007cb8:	b570      	push	{r4, r5, r6, lr}
 8007cba:	460d      	mov	r5, r1
 8007cbc:	4614      	mov	r4, r2
 8007cbe:	4606      	mov	r6, r0
 8007cc0:	b118      	cbz	r0, 8007cca <_putc_r+0x12>
 8007cc2:	6983      	ldr	r3, [r0, #24]
 8007cc4:	b90b      	cbnz	r3, 8007cca <_putc_r+0x12>
 8007cc6:	f7ff f8c9 	bl	8006e5c <__sinit>
 8007cca:	4b13      	ldr	r3, [pc, #76]	; (8007d18 <_putc_r+0x60>)
 8007ccc:	429c      	cmp	r4, r3
 8007cce:	d101      	bne.n	8007cd4 <_putc_r+0x1c>
 8007cd0:	6874      	ldr	r4, [r6, #4]
 8007cd2:	e008      	b.n	8007ce6 <_putc_r+0x2e>
 8007cd4:	4b11      	ldr	r3, [pc, #68]	; (8007d1c <_putc_r+0x64>)
 8007cd6:	429c      	cmp	r4, r3
 8007cd8:	d101      	bne.n	8007cde <_putc_r+0x26>
 8007cda:	68b4      	ldr	r4, [r6, #8]
 8007cdc:	e003      	b.n	8007ce6 <_putc_r+0x2e>
 8007cde:	4b10      	ldr	r3, [pc, #64]	; (8007d20 <_putc_r+0x68>)
 8007ce0:	429c      	cmp	r4, r3
 8007ce2:	bf08      	it	eq
 8007ce4:	68f4      	ldreq	r4, [r6, #12]
 8007ce6:	68a3      	ldr	r3, [r4, #8]
 8007ce8:	3b01      	subs	r3, #1
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	60a3      	str	r3, [r4, #8]
 8007cee:	da0c      	bge.n	8007d0a <_putc_r+0x52>
 8007cf0:	69a2      	ldr	r2, [r4, #24]
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	db02      	blt.n	8007cfc <_putc_r+0x44>
 8007cf6:	b2eb      	uxtb	r3, r5
 8007cf8:	2b0a      	cmp	r3, #10
 8007cfa:	d106      	bne.n	8007d0a <_putc_r+0x52>
 8007cfc:	4622      	mov	r2, r4
 8007cfe:	4629      	mov	r1, r5
 8007d00:	4630      	mov	r0, r6
 8007d02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007d06:	f000 b911 	b.w	8007f2c <__swbuf_r>
 8007d0a:	6823      	ldr	r3, [r4, #0]
 8007d0c:	b2e8      	uxtb	r0, r5
 8007d0e:	1c5a      	adds	r2, r3, #1
 8007d10:	6022      	str	r2, [r4, #0]
 8007d12:	701d      	strb	r5, [r3, #0]
 8007d14:	bd70      	pop	{r4, r5, r6, pc}
 8007d16:	bf00      	nop
 8007d18:	08008b18 	.word	0x08008b18
 8007d1c:	08008b38 	.word	0x08008b38
 8007d20:	08008b58 	.word	0x08008b58

08007d24 <_sbrk_r>:
 8007d24:	b538      	push	{r3, r4, r5, lr}
 8007d26:	4c06      	ldr	r4, [pc, #24]	; (8007d40 <_sbrk_r+0x1c>)
 8007d28:	2300      	movs	r3, #0
 8007d2a:	4605      	mov	r5, r0
 8007d2c:	4608      	mov	r0, r1
 8007d2e:	6023      	str	r3, [r4, #0]
 8007d30:	f000 fdfc 	bl	800892c <_sbrk>
 8007d34:	1c43      	adds	r3, r0, #1
 8007d36:	d102      	bne.n	8007d3e <_sbrk_r+0x1a>
 8007d38:	6823      	ldr	r3, [r4, #0]
 8007d3a:	b103      	cbz	r3, 8007d3e <_sbrk_r+0x1a>
 8007d3c:	602b      	str	r3, [r5, #0]
 8007d3e:	bd38      	pop	{r3, r4, r5, pc}
 8007d40:	200010b8 	.word	0x200010b8

08007d44 <__sread>:
 8007d44:	b510      	push	{r4, lr}
 8007d46:	460c      	mov	r4, r1
 8007d48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d4c:	f000 fbd6 	bl	80084fc <_read_r>
 8007d50:	2800      	cmp	r0, #0
 8007d52:	bfab      	itete	ge
 8007d54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007d56:	89a3      	ldrhlt	r3, [r4, #12]
 8007d58:	181b      	addge	r3, r3, r0
 8007d5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007d5e:	bfac      	ite	ge
 8007d60:	6563      	strge	r3, [r4, #84]	; 0x54
 8007d62:	81a3      	strhlt	r3, [r4, #12]
 8007d64:	bd10      	pop	{r4, pc}

08007d66 <__swrite>:
 8007d66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d6a:	461f      	mov	r7, r3
 8007d6c:	898b      	ldrh	r3, [r1, #12]
 8007d6e:	4605      	mov	r5, r0
 8007d70:	05db      	lsls	r3, r3, #23
 8007d72:	460c      	mov	r4, r1
 8007d74:	4616      	mov	r6, r2
 8007d76:	d505      	bpl.n	8007d84 <__swrite+0x1e>
 8007d78:	2302      	movs	r3, #2
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d80:	f000 fb8e 	bl	80084a0 <_lseek_r>
 8007d84:	89a3      	ldrh	r3, [r4, #12]
 8007d86:	4632      	mov	r2, r6
 8007d88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d8c:	81a3      	strh	r3, [r4, #12]
 8007d8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d92:	463b      	mov	r3, r7
 8007d94:	4628      	mov	r0, r5
 8007d96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d9a:	f000 b925 	b.w	8007fe8 <_write_r>

08007d9e <__sseek>:
 8007d9e:	b510      	push	{r4, lr}
 8007da0:	460c      	mov	r4, r1
 8007da2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007da6:	f000 fb7b 	bl	80084a0 <_lseek_r>
 8007daa:	1c43      	adds	r3, r0, #1
 8007dac:	89a3      	ldrh	r3, [r4, #12]
 8007dae:	bf15      	itete	ne
 8007db0:	6560      	strne	r0, [r4, #84]	; 0x54
 8007db2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007db6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007dba:	81a3      	strheq	r3, [r4, #12]
 8007dbc:	bf18      	it	ne
 8007dbe:	81a3      	strhne	r3, [r4, #12]
 8007dc0:	bd10      	pop	{r4, pc}

08007dc2 <__sclose>:
 8007dc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dc6:	f000 b94f 	b.w	8008068 <_close_r>

08007dca <__ssprint_r>:
 8007dca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dce:	4693      	mov	fp, r2
 8007dd0:	6892      	ldr	r2, [r2, #8]
 8007dd2:	4681      	mov	r9, r0
 8007dd4:	460c      	mov	r4, r1
 8007dd6:	b34a      	cbz	r2, 8007e2c <__ssprint_r+0x62>
 8007dd8:	2300      	movs	r3, #0
 8007dda:	f8db a000 	ldr.w	sl, [fp]
 8007dde:	9301      	str	r3, [sp, #4]
 8007de0:	461f      	mov	r7, r3
 8007de2:	e006      	b.n	8007df2 <__ssprint_r+0x28>
 8007de4:	f8da 3000 	ldr.w	r3, [sl]
 8007de8:	f8da 7004 	ldr.w	r7, [sl, #4]
 8007dec:	9301      	str	r3, [sp, #4]
 8007dee:	f10a 0a08 	add.w	sl, sl, #8
 8007df2:	2f00      	cmp	r7, #0
 8007df4:	d0f6      	beq.n	8007de4 <__ssprint_r+0x1a>
 8007df6:	68a6      	ldr	r6, [r4, #8]
 8007df8:	42b7      	cmp	r7, r6
 8007dfa:	d360      	bcc.n	8007ebe <__ssprint_r+0xf4>
 8007dfc:	89a0      	ldrh	r0, [r4, #12]
 8007dfe:	f410 6f90 	tst.w	r0, #1152	; 0x480
 8007e02:	d117      	bne.n	8007e34 <__ssprint_r+0x6a>
 8007e04:	42b7      	cmp	r7, r6
 8007e06:	d35a      	bcc.n	8007ebe <__ssprint_r+0xf4>
 8007e08:	4632      	mov	r2, r6
 8007e0a:	9901      	ldr	r1, [sp, #4]
 8007e0c:	6820      	ldr	r0, [r4, #0]
 8007e0e:	f000 fb59 	bl	80084c4 <memmove>
 8007e12:	68a2      	ldr	r2, [r4, #8]
 8007e14:	1b92      	subs	r2, r2, r6
 8007e16:	60a2      	str	r2, [r4, #8]
 8007e18:	6822      	ldr	r2, [r4, #0]
 8007e1a:	4416      	add	r6, r2
 8007e1c:	f8db 2008 	ldr.w	r2, [fp, #8]
 8007e20:	6026      	str	r6, [r4, #0]
 8007e22:	1bd7      	subs	r7, r2, r7
 8007e24:	f8cb 7008 	str.w	r7, [fp, #8]
 8007e28:	2f00      	cmp	r7, #0
 8007e2a:	d1db      	bne.n	8007de4 <__ssprint_r+0x1a>
 8007e2c:	2000      	movs	r0, #0
 8007e2e:	f8cb 0004 	str.w	r0, [fp, #4]
 8007e32:	e046      	b.n	8007ec2 <__ssprint_r+0xf8>
 8007e34:	6825      	ldr	r5, [r4, #0]
 8007e36:	6921      	ldr	r1, [r4, #16]
 8007e38:	2302      	movs	r3, #2
 8007e3a:	ebc1 0805 	rsb	r8, r1, r5
 8007e3e:	6965      	ldr	r5, [r4, #20]
 8007e40:	f108 0201 	add.w	r2, r8, #1
 8007e44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007e48:	fb95 f5f3 	sdiv	r5, r5, r3
 8007e4c:	443a      	add	r2, r7
 8007e4e:	4295      	cmp	r5, r2
 8007e50:	bf38      	it	cc
 8007e52:	4615      	movcc	r5, r2
 8007e54:	0543      	lsls	r3, r0, #21
 8007e56:	d510      	bpl.n	8007e7a <__ssprint_r+0xb0>
 8007e58:	4629      	mov	r1, r5
 8007e5a:	4648      	mov	r0, r9
 8007e5c:	f7ff fa20 	bl	80072a0 <_malloc_r>
 8007e60:	4606      	mov	r6, r0
 8007e62:	b1a0      	cbz	r0, 8007e8e <__ssprint_r+0xc4>
 8007e64:	4642      	mov	r2, r8
 8007e66:	6921      	ldr	r1, [r4, #16]
 8007e68:	f7ff fc44 	bl	80076f4 <memcpy>
 8007e6c:	89a2      	ldrh	r2, [r4, #12]
 8007e6e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8007e72:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007e76:	81a2      	strh	r2, [r4, #12]
 8007e78:	e018      	b.n	8007eac <__ssprint_r+0xe2>
 8007e7a:	462a      	mov	r2, r5
 8007e7c:	4648      	mov	r0, r9
 8007e7e:	f000 fb4f 	bl	8008520 <_realloc_r>
 8007e82:	4606      	mov	r6, r0
 8007e84:	b990      	cbnz	r0, 8007eac <__ssprint_r+0xe2>
 8007e86:	6921      	ldr	r1, [r4, #16]
 8007e88:	4648      	mov	r0, r9
 8007e8a:	f7ff f8af 	bl	8006fec <_free_r>
 8007e8e:	220c      	movs	r2, #12
 8007e90:	f8c9 2000 	str.w	r2, [r9]
 8007e94:	89a2      	ldrh	r2, [r4, #12]
 8007e96:	f04f 30ff 	mov.w	r0, #4294967295
 8007e9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e9e:	81a2      	strh	r2, [r4, #12]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f8cb 2008 	str.w	r2, [fp, #8]
 8007ea6:	f8cb 2004 	str.w	r2, [fp, #4]
 8007eaa:	e00a      	b.n	8007ec2 <__ssprint_r+0xf8>
 8007eac:	6126      	str	r6, [r4, #16]
 8007eae:	6165      	str	r5, [r4, #20]
 8007eb0:	4446      	add	r6, r8
 8007eb2:	ebc8 0505 	rsb	r5, r8, r5
 8007eb6:	6026      	str	r6, [r4, #0]
 8007eb8:	60a5      	str	r5, [r4, #8]
 8007eba:	463e      	mov	r6, r7
 8007ebc:	e7a2      	b.n	8007e04 <__ssprint_r+0x3a>
 8007ebe:	463e      	mov	r6, r7
 8007ec0:	e7a2      	b.n	8007e08 <__ssprint_r+0x3e>
 8007ec2:	b003      	add	sp, #12
 8007ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007ec8 <__sprint_r>:
 8007ec8:	6893      	ldr	r3, [r2, #8]
 8007eca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ece:	4680      	mov	r8, r0
 8007ed0:	460f      	mov	r7, r1
 8007ed2:	4614      	mov	r4, r2
 8007ed4:	b91b      	cbnz	r3, 8007ede <__sprint_r+0x16>
 8007ed6:	6053      	str	r3, [r2, #4]
 8007ed8:	4618      	mov	r0, r3
 8007eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ede:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8007ee0:	049d      	lsls	r5, r3, #18
 8007ee2:	d51c      	bpl.n	8007f1e <__sprint_r+0x56>
 8007ee4:	6815      	ldr	r5, [r2, #0]
 8007ee6:	68a0      	ldr	r0, [r4, #8]
 8007ee8:	3508      	adds	r5, #8
 8007eea:	b1d0      	cbz	r0, 8007f22 <__sprint_r+0x5a>
 8007eec:	f855 6c04 	ldr.w	r6, [r5, #-4]
 8007ef0:	f855 ac08 	ldr.w	sl, [r5, #-8]
 8007ef4:	08b6      	lsrs	r6, r6, #2
 8007ef6:	f04f 0900 	mov.w	r9, #0
 8007efa:	454e      	cmp	r6, r9
 8007efc:	dd0a      	ble.n	8007f14 <__sprint_r+0x4c>
 8007efe:	463a      	mov	r2, r7
 8007f00:	f85a 1029 	ldr.w	r1, [sl, r9, lsl #2]
 8007f04:	4640      	mov	r0, r8
 8007f06:	f000 f950 	bl	80081aa <_fputwc_r>
 8007f0a:	1c43      	adds	r3, r0, #1
 8007f0c:	d009      	beq.n	8007f22 <__sprint_r+0x5a>
 8007f0e:	f109 0901 	add.w	r9, r9, #1
 8007f12:	e7f2      	b.n	8007efa <__sprint_r+0x32>
 8007f14:	68a3      	ldr	r3, [r4, #8]
 8007f16:	eba3 0686 	sub.w	r6, r3, r6, lsl #2
 8007f1a:	60a6      	str	r6, [r4, #8]
 8007f1c:	e7e3      	b.n	8007ee6 <__sprint_r+0x1e>
 8007f1e:	f000 f965 	bl	80081ec <__sfvwrite_r>
 8007f22:	2300      	movs	r3, #0
 8007f24:	60a3      	str	r3, [r4, #8]
 8007f26:	6063      	str	r3, [r4, #4]
 8007f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007f2c <__swbuf_r>:
 8007f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f2e:	460f      	mov	r7, r1
 8007f30:	4614      	mov	r4, r2
 8007f32:	4606      	mov	r6, r0
 8007f34:	b118      	cbz	r0, 8007f3e <__swbuf_r+0x12>
 8007f36:	6983      	ldr	r3, [r0, #24]
 8007f38:	b90b      	cbnz	r3, 8007f3e <__swbuf_r+0x12>
 8007f3a:	f7fe ff8f 	bl	8006e5c <__sinit>
 8007f3e:	4b27      	ldr	r3, [pc, #156]	; (8007fdc <__swbuf_r+0xb0>)
 8007f40:	429c      	cmp	r4, r3
 8007f42:	d101      	bne.n	8007f48 <__swbuf_r+0x1c>
 8007f44:	6874      	ldr	r4, [r6, #4]
 8007f46:	e008      	b.n	8007f5a <__swbuf_r+0x2e>
 8007f48:	4b25      	ldr	r3, [pc, #148]	; (8007fe0 <__swbuf_r+0xb4>)
 8007f4a:	429c      	cmp	r4, r3
 8007f4c:	d101      	bne.n	8007f52 <__swbuf_r+0x26>
 8007f4e:	68b4      	ldr	r4, [r6, #8]
 8007f50:	e003      	b.n	8007f5a <__swbuf_r+0x2e>
 8007f52:	4b24      	ldr	r3, [pc, #144]	; (8007fe4 <__swbuf_r+0xb8>)
 8007f54:	429c      	cmp	r4, r3
 8007f56:	bf08      	it	eq
 8007f58:	68f4      	ldreq	r4, [r6, #12]
 8007f5a:	69a3      	ldr	r3, [r4, #24]
 8007f5c:	60a3      	str	r3, [r4, #8]
 8007f5e:	89a3      	ldrh	r3, [r4, #12]
 8007f60:	0719      	lsls	r1, r3, #28
 8007f62:	d50e      	bpl.n	8007f82 <__swbuf_r+0x56>
 8007f64:	6923      	ldr	r3, [r4, #16]
 8007f66:	b163      	cbz	r3, 8007f82 <__swbuf_r+0x56>
 8007f68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f6c:	b2fd      	uxtb	r5, r7
 8007f6e:	049a      	lsls	r2, r3, #18
 8007f70:	d410      	bmi.n	8007f94 <__swbuf_r+0x68>
 8007f72:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007f76:	81a3      	strh	r3, [r4, #12]
 8007f78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f7e:	6663      	str	r3, [r4, #100]	; 0x64
 8007f80:	e008      	b.n	8007f94 <__swbuf_r+0x68>
 8007f82:	4621      	mov	r1, r4
 8007f84:	4630      	mov	r0, r6
 8007f86:	f7fd ffdd 	bl	8005f44 <__swsetup_r>
 8007f8a:	2800      	cmp	r0, #0
 8007f8c:	d0ec      	beq.n	8007f68 <__swbuf_r+0x3c>
 8007f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8007f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f94:	6823      	ldr	r3, [r4, #0]
 8007f96:	6920      	ldr	r0, [r4, #16]
 8007f98:	1a18      	subs	r0, r3, r0
 8007f9a:	6963      	ldr	r3, [r4, #20]
 8007f9c:	4298      	cmp	r0, r3
 8007f9e:	db05      	blt.n	8007fac <__swbuf_r+0x80>
 8007fa0:	4621      	mov	r1, r4
 8007fa2:	4630      	mov	r0, r6
 8007fa4:	f7fe fef0 	bl	8006d88 <_fflush_r>
 8007fa8:	2800      	cmp	r0, #0
 8007faa:	d1f0      	bne.n	8007f8e <__swbuf_r+0x62>
 8007fac:	68a3      	ldr	r3, [r4, #8]
 8007fae:	3b01      	subs	r3, #1
 8007fb0:	60a3      	str	r3, [r4, #8]
 8007fb2:	6823      	ldr	r3, [r4, #0]
 8007fb4:	1c5a      	adds	r2, r3, #1
 8007fb6:	6022      	str	r2, [r4, #0]
 8007fb8:	701f      	strb	r7, [r3, #0]
 8007fba:	6962      	ldr	r2, [r4, #20]
 8007fbc:	1c43      	adds	r3, r0, #1
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d004      	beq.n	8007fcc <__swbuf_r+0xa0>
 8007fc2:	89a3      	ldrh	r3, [r4, #12]
 8007fc4:	07db      	lsls	r3, r3, #31
 8007fc6:	d507      	bpl.n	8007fd8 <__swbuf_r+0xac>
 8007fc8:	2d0a      	cmp	r5, #10
 8007fca:	d105      	bne.n	8007fd8 <__swbuf_r+0xac>
 8007fcc:	4621      	mov	r1, r4
 8007fce:	4630      	mov	r0, r6
 8007fd0:	f7fe feda 	bl	8006d88 <_fflush_r>
 8007fd4:	2800      	cmp	r0, #0
 8007fd6:	d1da      	bne.n	8007f8e <__swbuf_r+0x62>
 8007fd8:	4628      	mov	r0, r5
 8007fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fdc:	08008b18 	.word	0x08008b18
 8007fe0:	08008b38 	.word	0x08008b38
 8007fe4:	08008b58 	.word	0x08008b58

08007fe8 <_write_r>:
 8007fe8:	b538      	push	{r3, r4, r5, lr}
 8007fea:	4c07      	ldr	r4, [pc, #28]	; (8008008 <_write_r+0x20>)
 8007fec:	4605      	mov	r5, r0
 8007fee:	4608      	mov	r0, r1
 8007ff0:	4611      	mov	r1, r2
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	6022      	str	r2, [r4, #0]
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	f000 fca6 	bl	8008948 <_write>
 8007ffc:	1c43      	adds	r3, r0, #1
 8007ffe:	d102      	bne.n	8008006 <_write_r+0x1e>
 8008000:	6823      	ldr	r3, [r4, #0]
 8008002:	b103      	cbz	r3, 8008006 <_write_r+0x1e>
 8008004:	602b      	str	r3, [r5, #0]
 8008006:	bd38      	pop	{r3, r4, r5, pc}
 8008008:	200010b8 	.word	0x200010b8

0800800c <_calloc_r>:
 800800c:	b510      	push	{r4, lr}
 800800e:	4351      	muls	r1, r2
 8008010:	f7ff f946 	bl	80072a0 <_malloc_r>
 8008014:	4604      	mov	r4, r0
 8008016:	b320      	cbz	r0, 8008062 <_calloc_r+0x56>
 8008018:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800801c:	f022 0203 	bic.w	r2, r2, #3
 8008020:	3a04      	subs	r2, #4
 8008022:	2a24      	cmp	r2, #36	; 0x24
 8008024:	d81a      	bhi.n	800805c <_calloc_r+0x50>
 8008026:	2a13      	cmp	r2, #19
 8008028:	d912      	bls.n	8008050 <_calloc_r+0x44>
 800802a:	2100      	movs	r1, #0
 800802c:	2a1b      	cmp	r2, #27
 800802e:	6001      	str	r1, [r0, #0]
 8008030:	6041      	str	r1, [r0, #4]
 8008032:	d802      	bhi.n	800803a <_calloc_r+0x2e>
 8008034:	f100 0308 	add.w	r3, r0, #8
 8008038:	e00b      	b.n	8008052 <_calloc_r+0x46>
 800803a:	2a24      	cmp	r2, #36	; 0x24
 800803c:	6081      	str	r1, [r0, #8]
 800803e:	60c1      	str	r1, [r0, #12]
 8008040:	bf11      	iteee	ne
 8008042:	f100 0310 	addne.w	r3, r0, #16
 8008046:	6101      	streq	r1, [r0, #16]
 8008048:	f100 0318 	addeq.w	r3, r0, #24
 800804c:	6141      	streq	r1, [r0, #20]
 800804e:	e000      	b.n	8008052 <_calloc_r+0x46>
 8008050:	4603      	mov	r3, r0
 8008052:	2200      	movs	r2, #0
 8008054:	601a      	str	r2, [r3, #0]
 8008056:	605a      	str	r2, [r3, #4]
 8008058:	609a      	str	r2, [r3, #8]
 800805a:	e002      	b.n	8008062 <_calloc_r+0x56>
 800805c:	2100      	movs	r1, #0
 800805e:	f7fb ff3d 	bl	8003edc <memset>
 8008062:	4620      	mov	r0, r4
 8008064:	bd10      	pop	{r4, pc}
	...

08008068 <_close_r>:
 8008068:	b538      	push	{r3, r4, r5, lr}
 800806a:	4c06      	ldr	r4, [pc, #24]	; (8008084 <_close_r+0x1c>)
 800806c:	2300      	movs	r3, #0
 800806e:	4605      	mov	r5, r0
 8008070:	4608      	mov	r0, r1
 8008072:	6023      	str	r3, [r4, #0]
 8008074:	f000 fc32 	bl	80088dc <_close>
 8008078:	1c43      	adds	r3, r0, #1
 800807a:	d102      	bne.n	8008082 <_close_r+0x1a>
 800807c:	6823      	ldr	r3, [r4, #0]
 800807e:	b103      	cbz	r3, 8008082 <_close_r+0x1a>
 8008080:	602b      	str	r3, [r5, #0]
 8008082:	bd38      	pop	{r3, r4, r5, pc}
 8008084:	200010b8 	.word	0x200010b8

08008088 <_fclose_r>:
 8008088:	b570      	push	{r4, r5, r6, lr}
 800808a:	4605      	mov	r5, r0
 800808c:	460c      	mov	r4, r1
 800808e:	b909      	cbnz	r1, 8008094 <_fclose_r+0xc>
 8008090:	2000      	movs	r0, #0
 8008092:	bd70      	pop	{r4, r5, r6, pc}
 8008094:	b118      	cbz	r0, 800809e <_fclose_r+0x16>
 8008096:	6983      	ldr	r3, [r0, #24]
 8008098:	b90b      	cbnz	r3, 800809e <_fclose_r+0x16>
 800809a:	f7fe fedf 	bl	8006e5c <__sinit>
 800809e:	4b20      	ldr	r3, [pc, #128]	; (8008120 <_fclose_r+0x98>)
 80080a0:	429c      	cmp	r4, r3
 80080a2:	d101      	bne.n	80080a8 <_fclose_r+0x20>
 80080a4:	686c      	ldr	r4, [r5, #4]
 80080a6:	e008      	b.n	80080ba <_fclose_r+0x32>
 80080a8:	4b1e      	ldr	r3, [pc, #120]	; (8008124 <_fclose_r+0x9c>)
 80080aa:	429c      	cmp	r4, r3
 80080ac:	d101      	bne.n	80080b2 <_fclose_r+0x2a>
 80080ae:	68ac      	ldr	r4, [r5, #8]
 80080b0:	e003      	b.n	80080ba <_fclose_r+0x32>
 80080b2:	4b1d      	ldr	r3, [pc, #116]	; (8008128 <_fclose_r+0xa0>)
 80080b4:	429c      	cmp	r4, r3
 80080b6:	bf08      	it	eq
 80080b8:	68ec      	ldreq	r4, [r5, #12]
 80080ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d0e6      	beq.n	8008090 <_fclose_r+0x8>
 80080c2:	4621      	mov	r1, r4
 80080c4:	4628      	mov	r0, r5
 80080c6:	f7fe fdcf 	bl	8006c68 <__sflush_r>
 80080ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80080cc:	4606      	mov	r6, r0
 80080ce:	b133      	cbz	r3, 80080de <_fclose_r+0x56>
 80080d0:	6a21      	ldr	r1, [r4, #32]
 80080d2:	4628      	mov	r0, r5
 80080d4:	4798      	blx	r3
 80080d6:	2800      	cmp	r0, #0
 80080d8:	bfb8      	it	lt
 80080da:	f04f 36ff 	movlt.w	r6, #4294967295
 80080de:	89a3      	ldrh	r3, [r4, #12]
 80080e0:	061b      	lsls	r3, r3, #24
 80080e2:	d503      	bpl.n	80080ec <_fclose_r+0x64>
 80080e4:	6921      	ldr	r1, [r4, #16]
 80080e6:	4628      	mov	r0, r5
 80080e8:	f7fe ff80 	bl	8006fec <_free_r>
 80080ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080ee:	b141      	cbz	r1, 8008102 <_fclose_r+0x7a>
 80080f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080f4:	4299      	cmp	r1, r3
 80080f6:	d002      	beq.n	80080fe <_fclose_r+0x76>
 80080f8:	4628      	mov	r0, r5
 80080fa:	f7fe ff77 	bl	8006fec <_free_r>
 80080fe:	2300      	movs	r3, #0
 8008100:	6363      	str	r3, [r4, #52]	; 0x34
 8008102:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008104:	b121      	cbz	r1, 8008110 <_fclose_r+0x88>
 8008106:	4628      	mov	r0, r5
 8008108:	f7fe ff70 	bl	8006fec <_free_r>
 800810c:	2300      	movs	r3, #0
 800810e:	64a3      	str	r3, [r4, #72]	; 0x48
 8008110:	f7fe ff14 	bl	8006f3c <__sfp_lock_acquire>
 8008114:	2300      	movs	r3, #0
 8008116:	81a3      	strh	r3, [r4, #12]
 8008118:	f7fe ff11 	bl	8006f3e <__sfp_lock_release>
 800811c:	4630      	mov	r0, r6
 800811e:	bd70      	pop	{r4, r5, r6, pc}
 8008120:	08008b18 	.word	0x08008b18
 8008124:	08008b38 	.word	0x08008b38
 8008128:	08008b58 	.word	0x08008b58

0800812c <__fputwc>:
 800812c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008130:	4680      	mov	r8, r0
 8008132:	460e      	mov	r6, r1
 8008134:	4614      	mov	r4, r2
 8008136:	f7ff f839 	bl	80071ac <__locale_mb_cur_max>
 800813a:	2801      	cmp	r0, #1
 800813c:	d106      	bne.n	800814c <__fputwc+0x20>
 800813e:	1e73      	subs	r3, r6, #1
 8008140:	2bfe      	cmp	r3, #254	; 0xfe
 8008142:	d803      	bhi.n	800814c <__fputwc+0x20>
 8008144:	f88d 6004 	strb.w	r6, [sp, #4]
 8008148:	4605      	mov	r5, r0
 800814a:	e00e      	b.n	800816a <__fputwc+0x3e>
 800814c:	4632      	mov	r2, r6
 800814e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 8008152:	a901      	add	r1, sp, #4
 8008154:	4640      	mov	r0, r8
 8008156:	f000 fb8f 	bl	8008878 <_wcrtomb_r>
 800815a:	1c42      	adds	r2, r0, #1
 800815c:	4605      	mov	r5, r0
 800815e:	d104      	bne.n	800816a <__fputwc+0x3e>
 8008160:	89a3      	ldrh	r3, [r4, #12]
 8008162:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008166:	81a3      	strh	r3, [r4, #12]
 8008168:	e01c      	b.n	80081a4 <__fputwc+0x78>
 800816a:	2700      	movs	r7, #0
 800816c:	42af      	cmp	r7, r5
 800816e:	d018      	beq.n	80081a2 <__fputwc+0x76>
 8008170:	ab01      	add	r3, sp, #4
 8008172:	5cf9      	ldrb	r1, [r7, r3]
 8008174:	68a3      	ldr	r3, [r4, #8]
 8008176:	3b01      	subs	r3, #1
 8008178:	2b00      	cmp	r3, #0
 800817a:	60a3      	str	r3, [r4, #8]
 800817c:	da04      	bge.n	8008188 <__fputwc+0x5c>
 800817e:	69a2      	ldr	r2, [r4, #24]
 8008180:	4293      	cmp	r3, r2
 8008182:	db06      	blt.n	8008192 <__fputwc+0x66>
 8008184:	290a      	cmp	r1, #10
 8008186:	d004      	beq.n	8008192 <__fputwc+0x66>
 8008188:	6823      	ldr	r3, [r4, #0]
 800818a:	1c5a      	adds	r2, r3, #1
 800818c:	6022      	str	r2, [r4, #0]
 800818e:	7019      	strb	r1, [r3, #0]
 8008190:	e005      	b.n	800819e <__fputwc+0x72>
 8008192:	4622      	mov	r2, r4
 8008194:	4640      	mov	r0, r8
 8008196:	f7ff fec9 	bl	8007f2c <__swbuf_r>
 800819a:	1c43      	adds	r3, r0, #1
 800819c:	d002      	beq.n	80081a4 <__fputwc+0x78>
 800819e:	3701      	adds	r7, #1
 80081a0:	e7e4      	b.n	800816c <__fputwc+0x40>
 80081a2:	4630      	mov	r0, r6
 80081a4:	b002      	add	sp, #8
 80081a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080081aa <_fputwc_r>:
 80081aa:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 80081ae:	b410      	push	{r4}
 80081b0:	049c      	lsls	r4, r3, #18
 80081b2:	d406      	bmi.n	80081c2 <_fputwc_r+0x18>
 80081b4:	6e54      	ldr	r4, [r2, #100]	; 0x64
 80081b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80081ba:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 80081be:	8193      	strh	r3, [r2, #12]
 80081c0:	6654      	str	r4, [r2, #100]	; 0x64
 80081c2:	bc10      	pop	{r4}
 80081c4:	f7ff bfb2 	b.w	800812c <__fputwc>

080081c8 <_fstat_r>:
 80081c8:	b538      	push	{r3, r4, r5, lr}
 80081ca:	4c07      	ldr	r4, [pc, #28]	; (80081e8 <_fstat_r+0x20>)
 80081cc:	2300      	movs	r3, #0
 80081ce:	4605      	mov	r5, r0
 80081d0:	4608      	mov	r0, r1
 80081d2:	4611      	mov	r1, r2
 80081d4:	6023      	str	r3, [r4, #0]
 80081d6:	f000 fb89 	bl	80088ec <_fstat>
 80081da:	1c43      	adds	r3, r0, #1
 80081dc:	d102      	bne.n	80081e4 <_fstat_r+0x1c>
 80081de:	6823      	ldr	r3, [r4, #0]
 80081e0:	b103      	cbz	r3, 80081e4 <_fstat_r+0x1c>
 80081e2:	602b      	str	r3, [r5, #0]
 80081e4:	bd38      	pop	{r3, r4, r5, pc}
 80081e6:	bf00      	nop
 80081e8:	200010b8 	.word	0x200010b8

080081ec <__sfvwrite_r>:
 80081ec:	6893      	ldr	r3, [r2, #8]
 80081ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081f2:	4606      	mov	r6, r0
 80081f4:	460c      	mov	r4, r1
 80081f6:	4690      	mov	r8, r2
 80081f8:	b90b      	cbnz	r3, 80081fe <__sfvwrite_r+0x12>
 80081fa:	2000      	movs	r0, #0
 80081fc:	e13b      	b.n	8008476 <__sfvwrite_r+0x28a>
 80081fe:	898b      	ldrh	r3, [r1, #12]
 8008200:	0718      	lsls	r0, r3, #28
 8008202:	d50f      	bpl.n	8008224 <__sfvwrite_r+0x38>
 8008204:	690b      	ldr	r3, [r1, #16]
 8008206:	b16b      	cbz	r3, 8008224 <__sfvwrite_r+0x38>
 8008208:	f8b4 900c 	ldrh.w	r9, [r4, #12]
 800820c:	f8d8 b000 	ldr.w	fp, [r8]
 8008210:	f009 0502 	and.w	r5, r9, #2
 8008214:	b2ad      	uxth	r5, r5
 8008216:	b355      	cbz	r5, 800826e <__sfvwrite_r+0x82>
 8008218:	f04f 0900 	mov.w	r9, #0
 800821c:	464f      	mov	r7, r9
 800821e:	f8df a25c 	ldr.w	sl, [pc, #604]	; 800847c <__sfvwrite_r+0x290>
 8008222:	e01b      	b.n	800825c <__sfvwrite_r+0x70>
 8008224:	4621      	mov	r1, r4
 8008226:	4630      	mov	r0, r6
 8008228:	f7fd fe8c 	bl	8005f44 <__swsetup_r>
 800822c:	2800      	cmp	r0, #0
 800822e:	d0eb      	beq.n	8008208 <__sfvwrite_r+0x1c>
 8008230:	e11f      	b.n	8008472 <__sfvwrite_r+0x286>
 8008232:	4557      	cmp	r7, sl
 8008234:	463b      	mov	r3, r7
 8008236:	464a      	mov	r2, r9
 8008238:	bf28      	it	cs
 800823a:	4653      	movcs	r3, sl
 800823c:	6a21      	ldr	r1, [r4, #32]
 800823e:	4630      	mov	r0, r6
 8008240:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8008242:	47a8      	blx	r5
 8008244:	2800      	cmp	r0, #0
 8008246:	f340 8110 	ble.w	800846a <__sfvwrite_r+0x27e>
 800824a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800824e:	4481      	add	r9, r0
 8008250:	1a3f      	subs	r7, r7, r0
 8008252:	1a18      	subs	r0, r3, r0
 8008254:	f8c8 0008 	str.w	r0, [r8, #8]
 8008258:	2800      	cmp	r0, #0
 800825a:	d0ce      	beq.n	80081fa <__sfvwrite_r+0xe>
 800825c:	2f00      	cmp	r7, #0
 800825e:	d1e8      	bne.n	8008232 <__sfvwrite_r+0x46>
 8008260:	f8db 9000 	ldr.w	r9, [fp]
 8008264:	f8db 7004 	ldr.w	r7, [fp, #4]
 8008268:	f10b 0b08 	add.w	fp, fp, #8
 800826c:	e7f6      	b.n	800825c <__sfvwrite_r+0x70>
 800826e:	f019 0901 	ands.w	r9, r9, #1
 8008272:	d003      	beq.n	800827c <__sfvwrite_r+0x90>
 8008274:	9500      	str	r5, [sp, #0]
 8008276:	46a9      	mov	r9, r5
 8008278:	46aa      	mov	sl, r5
 800827a:	e0bd      	b.n	80083f8 <__sfvwrite_r+0x20c>
 800827c:	464f      	mov	r7, r9
 800827e:	b937      	cbnz	r7, 800828e <__sfvwrite_r+0xa2>
 8008280:	f8db 9000 	ldr.w	r9, [fp]
 8008284:	f8db 7004 	ldr.w	r7, [fp, #4]
 8008288:	f10b 0b08 	add.w	fp, fp, #8
 800828c:	e7f7      	b.n	800827e <__sfvwrite_r+0x92>
 800828e:	89a2      	ldrh	r2, [r4, #12]
 8008290:	68a5      	ldr	r5, [r4, #8]
 8008292:	0591      	lsls	r1, r2, #22
 8008294:	d552      	bpl.n	800833c <__sfvwrite_r+0x150>
 8008296:	42af      	cmp	r7, r5
 8008298:	d342      	bcc.n	8008320 <__sfvwrite_r+0x134>
 800829a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800829e:	d03d      	beq.n	800831c <__sfvwrite_r+0x130>
 80082a0:	6921      	ldr	r1, [r4, #16]
 80082a2:	6823      	ldr	r3, [r4, #0]
 80082a4:	2002      	movs	r0, #2
 80082a6:	1a5b      	subs	r3, r3, r1
 80082a8:	9300      	str	r3, [sp, #0]
 80082aa:	6963      	ldr	r3, [r4, #20]
 80082ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80082b0:	fb93 faf0 	sdiv	sl, r3, r0
 80082b4:	9b00      	ldr	r3, [sp, #0]
 80082b6:	3301      	adds	r3, #1
 80082b8:	443b      	add	r3, r7
 80082ba:	459a      	cmp	sl, r3
 80082bc:	bf38      	it	cc
 80082be:	469a      	movcc	sl, r3
 80082c0:	0553      	lsls	r3, r2, #21
 80082c2:	d510      	bpl.n	80082e6 <__sfvwrite_r+0xfa>
 80082c4:	4651      	mov	r1, sl
 80082c6:	4630      	mov	r0, r6
 80082c8:	f7fe ffea 	bl	80072a0 <_malloc_r>
 80082cc:	4605      	mov	r5, r0
 80082ce:	b1c0      	cbz	r0, 8008302 <__sfvwrite_r+0x116>
 80082d0:	9a00      	ldr	r2, [sp, #0]
 80082d2:	6921      	ldr	r1, [r4, #16]
 80082d4:	f7ff fa0e 	bl	80076f4 <memcpy>
 80082d8:	89a3      	ldrh	r3, [r4, #12]
 80082da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80082de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082e2:	81a3      	strh	r3, [r4, #12]
 80082e4:	e010      	b.n	8008308 <__sfvwrite_r+0x11c>
 80082e6:	4652      	mov	r2, sl
 80082e8:	4630      	mov	r0, r6
 80082ea:	f000 f919 	bl	8008520 <_realloc_r>
 80082ee:	4605      	mov	r5, r0
 80082f0:	b950      	cbnz	r0, 8008308 <__sfvwrite_r+0x11c>
 80082f2:	6921      	ldr	r1, [r4, #16]
 80082f4:	4630      	mov	r0, r6
 80082f6:	f7fe fe79 	bl	8006fec <_free_r>
 80082fa:	89a3      	ldrh	r3, [r4, #12]
 80082fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008300:	81a3      	strh	r3, [r4, #12]
 8008302:	230c      	movs	r3, #12
 8008304:	6033      	str	r3, [r6, #0]
 8008306:	e0b0      	b.n	800846a <__sfvwrite_r+0x27e>
 8008308:	9b00      	ldr	r3, [sp, #0]
 800830a:	6125      	str	r5, [r4, #16]
 800830c:	441d      	add	r5, r3
 800830e:	6025      	str	r5, [r4, #0]
 8008310:	463d      	mov	r5, r7
 8008312:	ebc3 030a 	rsb	r3, r3, sl
 8008316:	f8c4 a014 	str.w	sl, [r4, #20]
 800831a:	60a3      	str	r3, [r4, #8]
 800831c:	42af      	cmp	r7, r5
 800831e:	d200      	bcs.n	8008322 <__sfvwrite_r+0x136>
 8008320:	463d      	mov	r5, r7
 8008322:	462a      	mov	r2, r5
 8008324:	4649      	mov	r1, r9
 8008326:	6820      	ldr	r0, [r4, #0]
 8008328:	f000 f8cc 	bl	80084c4 <memmove>
 800832c:	68a3      	ldr	r3, [r4, #8]
 800832e:	1b5b      	subs	r3, r3, r5
 8008330:	60a3      	str	r3, [r4, #8]
 8008332:	6823      	ldr	r3, [r4, #0]
 8008334:	441d      	add	r5, r3
 8008336:	6025      	str	r5, [r4, #0]
 8008338:	463d      	mov	r5, r7
 800833a:	e029      	b.n	8008390 <__sfvwrite_r+0x1a4>
 800833c:	6820      	ldr	r0, [r4, #0]
 800833e:	6923      	ldr	r3, [r4, #16]
 8008340:	4298      	cmp	r0, r3
 8008342:	d802      	bhi.n	800834a <__sfvwrite_r+0x15e>
 8008344:	6962      	ldr	r2, [r4, #20]
 8008346:	4297      	cmp	r7, r2
 8008348:	d213      	bcs.n	8008372 <__sfvwrite_r+0x186>
 800834a:	42bd      	cmp	r5, r7
 800834c:	bf28      	it	cs
 800834e:	463d      	movcs	r5, r7
 8008350:	4649      	mov	r1, r9
 8008352:	462a      	mov	r2, r5
 8008354:	f000 f8b6 	bl	80084c4 <memmove>
 8008358:	68a3      	ldr	r3, [r4, #8]
 800835a:	6822      	ldr	r2, [r4, #0]
 800835c:	1b5b      	subs	r3, r3, r5
 800835e:	442a      	add	r2, r5
 8008360:	60a3      	str	r3, [r4, #8]
 8008362:	6022      	str	r2, [r4, #0]
 8008364:	b9a3      	cbnz	r3, 8008390 <__sfvwrite_r+0x1a4>
 8008366:	4621      	mov	r1, r4
 8008368:	4630      	mov	r0, r6
 800836a:	f7fe fd0d 	bl	8006d88 <_fflush_r>
 800836e:	b178      	cbz	r0, 8008390 <__sfvwrite_r+0x1a4>
 8008370:	e07b      	b.n	800846a <__sfvwrite_r+0x27e>
 8008372:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8008376:	42bb      	cmp	r3, r7
 8008378:	bf28      	it	cs
 800837a:	463b      	movcs	r3, r7
 800837c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008380:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8008382:	4353      	muls	r3, r2
 8008384:	6a21      	ldr	r1, [r4, #32]
 8008386:	464a      	mov	r2, r9
 8008388:	4630      	mov	r0, r6
 800838a:	47a8      	blx	r5
 800838c:	1e05      	subs	r5, r0, #0
 800838e:	dd6c      	ble.n	800846a <__sfvwrite_r+0x27e>
 8008390:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008394:	44a9      	add	r9, r5
 8008396:	1b7f      	subs	r7, r7, r5
 8008398:	1b5d      	subs	r5, r3, r5
 800839a:	f8c8 5008 	str.w	r5, [r8, #8]
 800839e:	2d00      	cmp	r5, #0
 80083a0:	f47f af6d 	bne.w	800827e <__sfvwrite_r+0x92>
 80083a4:	e729      	b.n	80081fa <__sfvwrite_r+0xe>
 80083a6:	9b00      	ldr	r3, [sp, #0]
 80083a8:	b383      	cbz	r3, 800840c <__sfvwrite_r+0x220>
 80083aa:	6820      	ldr	r0, [r4, #0]
 80083ac:	6921      	ldr	r1, [r4, #16]
 80083ae:	4555      	cmp	r5, sl
 80083b0:	462b      	mov	r3, r5
 80083b2:	bf28      	it	cs
 80083b4:	4653      	movcs	r3, sl
 80083b6:	4288      	cmp	r0, r1
 80083b8:	6962      	ldr	r2, [r4, #20]
 80083ba:	d936      	bls.n	800842a <__sfvwrite_r+0x23e>
 80083bc:	68a7      	ldr	r7, [r4, #8]
 80083be:	4417      	add	r7, r2
 80083c0:	42bb      	cmp	r3, r7
 80083c2:	dd32      	ble.n	800842a <__sfvwrite_r+0x23e>
 80083c4:	4649      	mov	r1, r9
 80083c6:	463a      	mov	r2, r7
 80083c8:	f000 f87c 	bl	80084c4 <memmove>
 80083cc:	6823      	ldr	r3, [r4, #0]
 80083ce:	4621      	mov	r1, r4
 80083d0:	443b      	add	r3, r7
 80083d2:	6023      	str	r3, [r4, #0]
 80083d4:	4630      	mov	r0, r6
 80083d6:	f7fe fcd7 	bl	8006d88 <_fflush_r>
 80083da:	2800      	cmp	r0, #0
 80083dc:	d145      	bne.n	800846a <__sfvwrite_r+0x27e>
 80083de:	1bed      	subs	r5, r5, r7
 80083e0:	d03c      	beq.n	800845c <__sfvwrite_r+0x270>
 80083e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80083e6:	44b9      	add	r9, r7
 80083e8:	ebc7 0a0a 	rsb	sl, r7, sl
 80083ec:	1bdf      	subs	r7, r3, r7
 80083ee:	f8c8 7008 	str.w	r7, [r8, #8]
 80083f2:	2f00      	cmp	r7, #0
 80083f4:	f43f af01 	beq.w	80081fa <__sfvwrite_r+0xe>
 80083f8:	f1ba 0f00 	cmp.w	sl, #0
 80083fc:	d1d3      	bne.n	80083a6 <__sfvwrite_r+0x1ba>
 80083fe:	e89b 0600 	ldmia.w	fp, {r9, sl}
 8008402:	2300      	movs	r3, #0
 8008404:	f10b 0b08 	add.w	fp, fp, #8
 8008408:	9300      	str	r3, [sp, #0]
 800840a:	e7f5      	b.n	80083f8 <__sfvwrite_r+0x20c>
 800840c:	4652      	mov	r2, sl
 800840e:	210a      	movs	r1, #10
 8008410:	4648      	mov	r0, r9
 8008412:	f7ff f961 	bl	80076d8 <memchr>
 8008416:	b118      	cbz	r0, 8008420 <__sfvwrite_r+0x234>
 8008418:	3001      	adds	r0, #1
 800841a:	ebc9 0500 	rsb	r5, r9, r0
 800841e:	e001      	b.n	8008424 <__sfvwrite_r+0x238>
 8008420:	f10a 0501 	add.w	r5, sl, #1
 8008424:	2301      	movs	r3, #1
 8008426:	9300      	str	r3, [sp, #0]
 8008428:	e7bf      	b.n	80083aa <__sfvwrite_r+0x1be>
 800842a:	4293      	cmp	r3, r2
 800842c:	db08      	blt.n	8008440 <__sfvwrite_r+0x254>
 800842e:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8008430:	4613      	mov	r3, r2
 8008432:	6a21      	ldr	r1, [r4, #32]
 8008434:	464a      	mov	r2, r9
 8008436:	4630      	mov	r0, r6
 8008438:	47b8      	blx	r7
 800843a:	1e07      	subs	r7, r0, #0
 800843c:	dccf      	bgt.n	80083de <__sfvwrite_r+0x1f2>
 800843e:	e014      	b.n	800846a <__sfvwrite_r+0x27e>
 8008440:	461a      	mov	r2, r3
 8008442:	4649      	mov	r1, r9
 8008444:	9301      	str	r3, [sp, #4]
 8008446:	f000 f83d 	bl	80084c4 <memmove>
 800844a:	9b01      	ldr	r3, [sp, #4]
 800844c:	68a2      	ldr	r2, [r4, #8]
 800844e:	461f      	mov	r7, r3
 8008450:	1ad2      	subs	r2, r2, r3
 8008452:	60a2      	str	r2, [r4, #8]
 8008454:	6822      	ldr	r2, [r4, #0]
 8008456:	441a      	add	r2, r3
 8008458:	6022      	str	r2, [r4, #0]
 800845a:	e7c0      	b.n	80083de <__sfvwrite_r+0x1f2>
 800845c:	4621      	mov	r1, r4
 800845e:	4630      	mov	r0, r6
 8008460:	f7fe fc92 	bl	8006d88 <_fflush_r>
 8008464:	b908      	cbnz	r0, 800846a <__sfvwrite_r+0x27e>
 8008466:	9500      	str	r5, [sp, #0]
 8008468:	e7bb      	b.n	80083e2 <__sfvwrite_r+0x1f6>
 800846a:	89a3      	ldrh	r3, [r4, #12]
 800846c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008470:	81a3      	strh	r3, [r4, #12]
 8008472:	f04f 30ff 	mov.w	r0, #4294967295
 8008476:	b003      	add	sp, #12
 8008478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800847c:	7ffffc00 	.word	0x7ffffc00

08008480 <_isatty_r>:
 8008480:	b538      	push	{r3, r4, r5, lr}
 8008482:	4c06      	ldr	r4, [pc, #24]	; (800849c <_isatty_r+0x1c>)
 8008484:	2300      	movs	r3, #0
 8008486:	4605      	mov	r5, r0
 8008488:	4608      	mov	r0, r1
 800848a:	6023      	str	r3, [r4, #0]
 800848c:	f000 fa36 	bl	80088fc <_isatty>
 8008490:	1c43      	adds	r3, r0, #1
 8008492:	d102      	bne.n	800849a <_isatty_r+0x1a>
 8008494:	6823      	ldr	r3, [r4, #0]
 8008496:	b103      	cbz	r3, 800849a <_isatty_r+0x1a>
 8008498:	602b      	str	r3, [r5, #0]
 800849a:	bd38      	pop	{r3, r4, r5, pc}
 800849c:	200010b8 	.word	0x200010b8

080084a0 <_lseek_r>:
 80084a0:	b538      	push	{r3, r4, r5, lr}
 80084a2:	4c07      	ldr	r4, [pc, #28]	; (80084c0 <_lseek_r+0x20>)
 80084a4:	4605      	mov	r5, r0
 80084a6:	4608      	mov	r0, r1
 80084a8:	4611      	mov	r1, r2
 80084aa:	2200      	movs	r2, #0
 80084ac:	6022      	str	r2, [r4, #0]
 80084ae:	461a      	mov	r2, r3
 80084b0:	f000 fa2c 	bl	800890c <_lseek>
 80084b4:	1c43      	adds	r3, r0, #1
 80084b6:	d102      	bne.n	80084be <_lseek_r+0x1e>
 80084b8:	6823      	ldr	r3, [r4, #0]
 80084ba:	b103      	cbz	r3, 80084be <_lseek_r+0x1e>
 80084bc:	602b      	str	r3, [r5, #0]
 80084be:	bd38      	pop	{r3, r4, r5, pc}
 80084c0:	200010b8 	.word	0x200010b8

080084c4 <memmove>:
 80084c4:	4288      	cmp	r0, r1
 80084c6:	b510      	push	{r4, lr}
 80084c8:	eb01 0302 	add.w	r3, r1, r2
 80084cc:	d801      	bhi.n	80084d2 <memmove+0xe>
 80084ce:	1e42      	subs	r2, r0, #1
 80084d0:	e00b      	b.n	80084ea <memmove+0x26>
 80084d2:	4298      	cmp	r0, r3
 80084d4:	d2fb      	bcs.n	80084ce <memmove+0xa>
 80084d6:	1881      	adds	r1, r0, r2
 80084d8:	1ad2      	subs	r2, r2, r3
 80084da:	42d3      	cmn	r3, r2
 80084dc:	d004      	beq.n	80084e8 <memmove+0x24>
 80084de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80084e2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80084e6:	e7f8      	b.n	80084da <memmove+0x16>
 80084e8:	bd10      	pop	{r4, pc}
 80084ea:	4299      	cmp	r1, r3
 80084ec:	d004      	beq.n	80084f8 <memmove+0x34>
 80084ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084f2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80084f6:	e7f8      	b.n	80084ea <memmove+0x26>
 80084f8:	bd10      	pop	{r4, pc}
	...

080084fc <_read_r>:
 80084fc:	b538      	push	{r3, r4, r5, lr}
 80084fe:	4c07      	ldr	r4, [pc, #28]	; (800851c <_read_r+0x20>)
 8008500:	4605      	mov	r5, r0
 8008502:	4608      	mov	r0, r1
 8008504:	4611      	mov	r1, r2
 8008506:	2200      	movs	r2, #0
 8008508:	6022      	str	r2, [r4, #0]
 800850a:	461a      	mov	r2, r3
 800850c:	f000 fa06 	bl	800891c <_read>
 8008510:	1c43      	adds	r3, r0, #1
 8008512:	d102      	bne.n	800851a <_read_r+0x1e>
 8008514:	6823      	ldr	r3, [r4, #0]
 8008516:	b103      	cbz	r3, 800851a <_read_r+0x1e>
 8008518:	602b      	str	r3, [r5, #0]
 800851a:	bd38      	pop	{r3, r4, r5, pc}
 800851c:	200010b8 	.word	0x200010b8

08008520 <_realloc_r>:
 8008520:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008524:	4681      	mov	r9, r0
 8008526:	460c      	mov	r4, r1
 8008528:	b929      	cbnz	r1, 8008536 <_realloc_r+0x16>
 800852a:	4611      	mov	r1, r2
 800852c:	b003      	add	sp, #12
 800852e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008532:	f7fe beb5 	b.w	80072a0 <_malloc_r>
 8008536:	9201      	str	r2, [sp, #4]
 8008538:	f7ff f8e7 	bl	800770a <__malloc_lock>
 800853c:	9a01      	ldr	r2, [sp, #4]
 800853e:	f854 ec04 	ldr.w	lr, [r4, #-4]
 8008542:	f102 080b 	add.w	r8, r2, #11
 8008546:	f1b8 0f16 	cmp.w	r8, #22
 800854a:	f1a4 0b08 	sub.w	fp, r4, #8
 800854e:	f02e 0503 	bic.w	r5, lr, #3
 8008552:	d903      	bls.n	800855c <_realloc_r+0x3c>
 8008554:	f038 0807 	bics.w	r8, r8, #7
 8008558:	d502      	bpl.n	8008560 <_realloc_r+0x40>
 800855a:	e003      	b.n	8008564 <_realloc_r+0x44>
 800855c:	f04f 0810 	mov.w	r8, #16
 8008560:	4590      	cmp	r8, r2
 8008562:	d204      	bcs.n	800856e <_realloc_r+0x4e>
 8008564:	230c      	movs	r3, #12
 8008566:	f8c9 3000 	str.w	r3, [r9]
 800856a:	2000      	movs	r0, #0
 800856c:	e181      	b.n	8008872 <_realloc_r+0x352>
 800856e:	45a8      	cmp	r8, r5
 8008570:	f340 8154 	ble.w	800881c <_realloc_r+0x2fc>
 8008574:	4ba8      	ldr	r3, [pc, #672]	; (8008818 <_realloc_r+0x2f8>)
 8008576:	eb0b 0105 	add.w	r1, fp, r5
 800857a:	6898      	ldr	r0, [r3, #8]
 800857c:	684f      	ldr	r7, [r1, #4]
 800857e:	4281      	cmp	r1, r0
 8008580:	d005      	beq.n	800858e <_realloc_r+0x6e>
 8008582:	f027 0601 	bic.w	r6, r7, #1
 8008586:	440e      	add	r6, r1
 8008588:	6876      	ldr	r6, [r6, #4]
 800858a:	07f6      	lsls	r6, r6, #31
 800858c:	d426      	bmi.n	80085dc <_realloc_r+0xbc>
 800858e:	f027 0a03 	bic.w	sl, r7, #3
 8008592:	4281      	cmp	r1, r0
 8008594:	eb05 070a 	add.w	r7, r5, sl
 8008598:	d118      	bne.n	80085cc <_realloc_r+0xac>
 800859a:	f108 0610 	add.w	r6, r8, #16
 800859e:	42b7      	cmp	r7, r6
 80085a0:	db1f      	blt.n	80085e2 <_realloc_r+0xc2>
 80085a2:	ebc8 0707 	rsb	r7, r8, r7
 80085a6:	eb0b 0008 	add.w	r0, fp, r8
 80085aa:	f047 0701 	orr.w	r7, r7, #1
 80085ae:	6098      	str	r0, [r3, #8]
 80085b0:	6047      	str	r7, [r0, #4]
 80085b2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80085b6:	4648      	mov	r0, r9
 80085b8:	f003 0301 	and.w	r3, r3, #1
 80085bc:	ea43 0308 	orr.w	r3, r3, r8
 80085c0:	f844 3c04 	str.w	r3, [r4, #-4]
 80085c4:	f7ff f8a2 	bl	800770c <__malloc_unlock>
 80085c8:	4620      	mov	r0, r4
 80085ca:	e152      	b.n	8008872 <_realloc_r+0x352>
 80085cc:	45b8      	cmp	r8, r7
 80085ce:	dc08      	bgt.n	80085e2 <_realloc_r+0xc2>
 80085d0:	68cb      	ldr	r3, [r1, #12]
 80085d2:	688a      	ldr	r2, [r1, #8]
 80085d4:	463d      	mov	r5, r7
 80085d6:	60d3      	str	r3, [r2, #12]
 80085d8:	609a      	str	r2, [r3, #8]
 80085da:	e11f      	b.n	800881c <_realloc_r+0x2fc>
 80085dc:	f04f 0a00 	mov.w	sl, #0
 80085e0:	4651      	mov	r1, sl
 80085e2:	f01e 0f01 	tst.w	lr, #1
 80085e6:	f040 80c6 	bne.w	8008776 <_realloc_r+0x256>
 80085ea:	f854 7c08 	ldr.w	r7, [r4, #-8]
 80085ee:	ebc7 070b 	rsb	r7, r7, fp
 80085f2:	687e      	ldr	r6, [r7, #4]
 80085f4:	f026 0603 	bic.w	r6, r6, #3
 80085f8:	442e      	add	r6, r5
 80085fa:	2900      	cmp	r1, #0
 80085fc:	f000 8085 	beq.w	800870a <_realloc_r+0x1ea>
 8008600:	4281      	cmp	r1, r0
 8008602:	44b2      	add	sl, r6
 8008604:	d148      	bne.n	8008698 <_realloc_r+0x178>
 8008606:	f108 0110 	add.w	r1, r8, #16
 800860a:	458a      	cmp	sl, r1
 800860c:	db7d      	blt.n	800870a <_realloc_r+0x1ea>
 800860e:	463e      	mov	r6, r7
 8008610:	68fa      	ldr	r2, [r7, #12]
 8008612:	f856 1f08 	ldr.w	r1, [r6, #8]!
 8008616:	60ca      	str	r2, [r1, #12]
 8008618:	6091      	str	r1, [r2, #8]
 800861a:	1f2a      	subs	r2, r5, #4
 800861c:	2a24      	cmp	r2, #36	; 0x24
 800861e:	d826      	bhi.n	800866e <_realloc_r+0x14e>
 8008620:	2a13      	cmp	r2, #19
 8008622:	d91c      	bls.n	800865e <_realloc_r+0x13e>
 8008624:	6821      	ldr	r1, [r4, #0]
 8008626:	2a1b      	cmp	r2, #27
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	6861      	ldr	r1, [r4, #4]
 800862c:	60f9      	str	r1, [r7, #12]
 800862e:	d803      	bhi.n	8008638 <_realloc_r+0x118>
 8008630:	f107 0210 	add.w	r2, r7, #16
 8008634:	3408      	adds	r4, #8
 8008636:	e013      	b.n	8008660 <_realloc_r+0x140>
 8008638:	68a1      	ldr	r1, [r4, #8]
 800863a:	2a24      	cmp	r2, #36	; 0x24
 800863c:	6139      	str	r1, [r7, #16]
 800863e:	68e1      	ldr	r1, [r4, #12]
 8008640:	bf18      	it	ne
 8008642:	f107 0218 	addne.w	r2, r7, #24
 8008646:	6179      	str	r1, [r7, #20]
 8008648:	bf09      	itett	eq
 800864a:	6922      	ldreq	r2, [r4, #16]
 800864c:	3410      	addne	r4, #16
 800864e:	61ba      	streq	r2, [r7, #24]
 8008650:	6961      	ldreq	r1, [r4, #20]
 8008652:	bf02      	ittt	eq
 8008654:	f107 0220 	addeq.w	r2, r7, #32
 8008658:	61f9      	streq	r1, [r7, #28]
 800865a:	3418      	addeq	r4, #24
 800865c:	e000      	b.n	8008660 <_realloc_r+0x140>
 800865e:	4632      	mov	r2, r6
 8008660:	6821      	ldr	r1, [r4, #0]
 8008662:	6011      	str	r1, [r2, #0]
 8008664:	6861      	ldr	r1, [r4, #4]
 8008666:	6051      	str	r1, [r2, #4]
 8008668:	68a1      	ldr	r1, [r4, #8]
 800866a:	6091      	str	r1, [r2, #8]
 800866c:	e005      	b.n	800867a <_realloc_r+0x15a>
 800866e:	4621      	mov	r1, r4
 8008670:	4630      	mov	r0, r6
 8008672:	9301      	str	r3, [sp, #4]
 8008674:	f7ff ff26 	bl	80084c4 <memmove>
 8008678:	9b01      	ldr	r3, [sp, #4]
 800867a:	eb07 0208 	add.w	r2, r7, r8
 800867e:	ebc8 0a0a 	rsb	sl, r8, sl
 8008682:	609a      	str	r2, [r3, #8]
 8008684:	f04a 0301 	orr.w	r3, sl, #1
 8008688:	6053      	str	r3, [r2, #4]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f003 0301 	and.w	r3, r3, #1
 8008690:	ea43 0308 	orr.w	r3, r3, r8
 8008694:	607b      	str	r3, [r7, #4]
 8008696:	e0b9      	b.n	800880c <_realloc_r+0x2ec>
 8008698:	45d0      	cmp	r8, sl
 800869a:	dc36      	bgt.n	800870a <_realloc_r+0x1ea>
 800869c:	4638      	mov	r0, r7
 800869e:	68cb      	ldr	r3, [r1, #12]
 80086a0:	688a      	ldr	r2, [r1, #8]
 80086a2:	60d3      	str	r3, [r2, #12]
 80086a4:	609a      	str	r2, [r3, #8]
 80086a6:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	60d3      	str	r3, [r2, #12]
 80086ae:	609a      	str	r2, [r3, #8]
 80086b0:	1f2a      	subs	r2, r5, #4
 80086b2:	2a24      	cmp	r2, #36	; 0x24
 80086b4:	d824      	bhi.n	8008700 <_realloc_r+0x1e0>
 80086b6:	2a13      	cmp	r2, #19
 80086b8:	d91b      	bls.n	80086f2 <_realloc_r+0x1d2>
 80086ba:	6823      	ldr	r3, [r4, #0]
 80086bc:	2a1b      	cmp	r2, #27
 80086be:	60bb      	str	r3, [r7, #8]
 80086c0:	6863      	ldr	r3, [r4, #4]
 80086c2:	60fb      	str	r3, [r7, #12]
 80086c4:	d803      	bhi.n	80086ce <_realloc_r+0x1ae>
 80086c6:	f107 0010 	add.w	r0, r7, #16
 80086ca:	3408      	adds	r4, #8
 80086cc:	e011      	b.n	80086f2 <_realloc_r+0x1d2>
 80086ce:	68a3      	ldr	r3, [r4, #8]
 80086d0:	2a24      	cmp	r2, #36	; 0x24
 80086d2:	613b      	str	r3, [r7, #16]
 80086d4:	68e3      	ldr	r3, [r4, #12]
 80086d6:	bf18      	it	ne
 80086d8:	f107 0018 	addne.w	r0, r7, #24
 80086dc:	617b      	str	r3, [r7, #20]
 80086de:	bf09      	itett	eq
 80086e0:	6923      	ldreq	r3, [r4, #16]
 80086e2:	3410      	addne	r4, #16
 80086e4:	61bb      	streq	r3, [r7, #24]
 80086e6:	6963      	ldreq	r3, [r4, #20]
 80086e8:	bf02      	ittt	eq
 80086ea:	f107 0020 	addeq.w	r0, r7, #32
 80086ee:	61fb      	streq	r3, [r7, #28]
 80086f0:	3418      	addeq	r4, #24
 80086f2:	6823      	ldr	r3, [r4, #0]
 80086f4:	6003      	str	r3, [r0, #0]
 80086f6:	6863      	ldr	r3, [r4, #4]
 80086f8:	6043      	str	r3, [r0, #4]
 80086fa:	68a3      	ldr	r3, [r4, #8]
 80086fc:	6083      	str	r3, [r0, #8]
 80086fe:	e002      	b.n	8008706 <_realloc_r+0x1e6>
 8008700:	4621      	mov	r1, r4
 8008702:	f7ff fedf 	bl	80084c4 <memmove>
 8008706:	4655      	mov	r5, sl
 8008708:	e02f      	b.n	800876a <_realloc_r+0x24a>
 800870a:	45b0      	cmp	r8, r6
 800870c:	dc33      	bgt.n	8008776 <_realloc_r+0x256>
 800870e:	4638      	mov	r0, r7
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8008716:	60d3      	str	r3, [r2, #12]
 8008718:	609a      	str	r2, [r3, #8]
 800871a:	1f2a      	subs	r2, r5, #4
 800871c:	2a24      	cmp	r2, #36	; 0x24
 800871e:	d826      	bhi.n	800876e <_realloc_r+0x24e>
 8008720:	2a13      	cmp	r2, #19
 8008722:	d91b      	bls.n	800875c <_realloc_r+0x23c>
 8008724:	6823      	ldr	r3, [r4, #0]
 8008726:	2a1b      	cmp	r2, #27
 8008728:	60bb      	str	r3, [r7, #8]
 800872a:	6863      	ldr	r3, [r4, #4]
 800872c:	60fb      	str	r3, [r7, #12]
 800872e:	d803      	bhi.n	8008738 <_realloc_r+0x218>
 8008730:	f107 0010 	add.w	r0, r7, #16
 8008734:	3408      	adds	r4, #8
 8008736:	e011      	b.n	800875c <_realloc_r+0x23c>
 8008738:	68a3      	ldr	r3, [r4, #8]
 800873a:	2a24      	cmp	r2, #36	; 0x24
 800873c:	613b      	str	r3, [r7, #16]
 800873e:	68e3      	ldr	r3, [r4, #12]
 8008740:	bf18      	it	ne
 8008742:	f107 0018 	addne.w	r0, r7, #24
 8008746:	617b      	str	r3, [r7, #20]
 8008748:	bf09      	itett	eq
 800874a:	6923      	ldreq	r3, [r4, #16]
 800874c:	3410      	addne	r4, #16
 800874e:	61bb      	streq	r3, [r7, #24]
 8008750:	6963      	ldreq	r3, [r4, #20]
 8008752:	bf02      	ittt	eq
 8008754:	f107 0020 	addeq.w	r0, r7, #32
 8008758:	61fb      	streq	r3, [r7, #28]
 800875a:	3418      	addeq	r4, #24
 800875c:	6823      	ldr	r3, [r4, #0]
 800875e:	6003      	str	r3, [r0, #0]
 8008760:	6863      	ldr	r3, [r4, #4]
 8008762:	6043      	str	r3, [r0, #4]
 8008764:	68a3      	ldr	r3, [r4, #8]
 8008766:	6083      	str	r3, [r0, #8]
 8008768:	4635      	mov	r5, r6
 800876a:	46bb      	mov	fp, r7
 800876c:	e056      	b.n	800881c <_realloc_r+0x2fc>
 800876e:	4621      	mov	r1, r4
 8008770:	f7ff fea8 	bl	80084c4 <memmove>
 8008774:	e7f8      	b.n	8008768 <_realloc_r+0x248>
 8008776:	4611      	mov	r1, r2
 8008778:	4648      	mov	r0, r9
 800877a:	f7fe fd91 	bl	80072a0 <_malloc_r>
 800877e:	4606      	mov	r6, r0
 8008780:	2800      	cmp	r0, #0
 8008782:	d043      	beq.n	800880c <_realloc_r+0x2ec>
 8008784:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8008788:	f1a0 0208 	sub.w	r2, r0, #8
 800878c:	f023 0301 	bic.w	r3, r3, #1
 8008790:	445b      	add	r3, fp
 8008792:	429a      	cmp	r2, r3
 8008794:	d105      	bne.n	80087a2 <_realloc_r+0x282>
 8008796:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800879a:	f023 0303 	bic.w	r3, r3, #3
 800879e:	441d      	add	r5, r3
 80087a0:	e03c      	b.n	800881c <_realloc_r+0x2fc>
 80087a2:	1f2a      	subs	r2, r5, #4
 80087a4:	2a24      	cmp	r2, #36	; 0x24
 80087a6:	d82a      	bhi.n	80087fe <_realloc_r+0x2de>
 80087a8:	2a13      	cmp	r2, #19
 80087aa:	d91f      	bls.n	80087ec <_realloc_r+0x2cc>
 80087ac:	6823      	ldr	r3, [r4, #0]
 80087ae:	2a1b      	cmp	r2, #27
 80087b0:	6003      	str	r3, [r0, #0]
 80087b2:	6863      	ldr	r3, [r4, #4]
 80087b4:	6043      	str	r3, [r0, #4]
 80087b6:	d804      	bhi.n	80087c2 <_realloc_r+0x2a2>
 80087b8:	f100 0308 	add.w	r3, r0, #8
 80087bc:	f104 0208 	add.w	r2, r4, #8
 80087c0:	e016      	b.n	80087f0 <_realloc_r+0x2d0>
 80087c2:	68a3      	ldr	r3, [r4, #8]
 80087c4:	2a24      	cmp	r2, #36	; 0x24
 80087c6:	6083      	str	r3, [r0, #8]
 80087c8:	68e3      	ldr	r3, [r4, #12]
 80087ca:	bf18      	it	ne
 80087cc:	f104 0210 	addne.w	r2, r4, #16
 80087d0:	60c3      	str	r3, [r0, #12]
 80087d2:	bf09      	itett	eq
 80087d4:	6923      	ldreq	r3, [r4, #16]
 80087d6:	f100 0310 	addne.w	r3, r0, #16
 80087da:	6103      	streq	r3, [r0, #16]
 80087dc:	6961      	ldreq	r1, [r4, #20]
 80087de:	bf02      	ittt	eq
 80087e0:	f100 0318 	addeq.w	r3, r0, #24
 80087e4:	f104 0218 	addeq.w	r2, r4, #24
 80087e8:	6141      	streq	r1, [r0, #20]
 80087ea:	e001      	b.n	80087f0 <_realloc_r+0x2d0>
 80087ec:	4603      	mov	r3, r0
 80087ee:	4622      	mov	r2, r4
 80087f0:	6811      	ldr	r1, [r2, #0]
 80087f2:	6019      	str	r1, [r3, #0]
 80087f4:	6851      	ldr	r1, [r2, #4]
 80087f6:	6059      	str	r1, [r3, #4]
 80087f8:	6892      	ldr	r2, [r2, #8]
 80087fa:	609a      	str	r2, [r3, #8]
 80087fc:	e002      	b.n	8008804 <_realloc_r+0x2e4>
 80087fe:	4621      	mov	r1, r4
 8008800:	f7ff fe60 	bl	80084c4 <memmove>
 8008804:	4621      	mov	r1, r4
 8008806:	4648      	mov	r0, r9
 8008808:	f7fe fbf0 	bl	8006fec <_free_r>
 800880c:	4648      	mov	r0, r9
 800880e:	f7fe ff7d 	bl	800770c <__malloc_unlock>
 8008812:	4630      	mov	r0, r6
 8008814:	e02d      	b.n	8008872 <_realloc_r+0x352>
 8008816:	bf00      	nop
 8008818:	200002b4 	.word	0x200002b4
 800881c:	ebc8 0205 	rsb	r2, r8, r5
 8008820:	2a0f      	cmp	r2, #15
 8008822:	f8db 3004 	ldr.w	r3, [fp, #4]
 8008826:	d914      	bls.n	8008852 <_realloc_r+0x332>
 8008828:	f003 0301 	and.w	r3, r3, #1
 800882c:	ea43 0308 	orr.w	r3, r3, r8
 8008830:	f8cb 3004 	str.w	r3, [fp, #4]
 8008834:	eb0b 0108 	add.w	r1, fp, r8
 8008838:	f042 0301 	orr.w	r3, r2, #1
 800883c:	604b      	str	r3, [r1, #4]
 800883e:	440a      	add	r2, r1
 8008840:	6853      	ldr	r3, [r2, #4]
 8008842:	3108      	adds	r1, #8
 8008844:	f043 0301 	orr.w	r3, r3, #1
 8008848:	6053      	str	r3, [r2, #4]
 800884a:	4648      	mov	r0, r9
 800884c:	f7fe fbce 	bl	8006fec <_free_r>
 8008850:	e00a      	b.n	8008868 <_realloc_r+0x348>
 8008852:	f003 0301 	and.w	r3, r3, #1
 8008856:	432b      	orrs	r3, r5
 8008858:	f8cb 3004 	str.w	r3, [fp, #4]
 800885c:	eb0b 0205 	add.w	r2, fp, r5
 8008860:	6853      	ldr	r3, [r2, #4]
 8008862:	f043 0301 	orr.w	r3, r3, #1
 8008866:	6053      	str	r3, [r2, #4]
 8008868:	4648      	mov	r0, r9
 800886a:	f7fe ff4f 	bl	800770c <__malloc_unlock>
 800886e:	f10b 0008 	add.w	r0, fp, #8
 8008872:	b003      	add	sp, #12
 8008874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008878 <_wcrtomb_r>:
 8008878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800887c:	461d      	mov	r5, r3
 800887e:	4b0f      	ldr	r3, [pc, #60]	; (80088bc <_wcrtomb_r+0x44>)
 8008880:	b086      	sub	sp, #24
 8008882:	4604      	mov	r4, r0
 8008884:	4690      	mov	r8, r2
 8008886:	460e      	mov	r6, r1
 8008888:	681f      	ldr	r7, [r3, #0]
 800888a:	b931      	cbnz	r1, 800889a <_wcrtomb_r+0x22>
 800888c:	f7fe fc8a 	bl	80071a4 <__locale_charset>
 8008890:	9500      	str	r5, [sp, #0]
 8008892:	4603      	mov	r3, r0
 8008894:	4632      	mov	r2, r6
 8008896:	a903      	add	r1, sp, #12
 8008898:	e005      	b.n	80088a6 <_wcrtomb_r+0x2e>
 800889a:	f7fe fc83 	bl	80071a4 <__locale_charset>
 800889e:	4642      	mov	r2, r8
 80088a0:	4603      	mov	r3, r0
 80088a2:	4631      	mov	r1, r6
 80088a4:	9500      	str	r5, [sp, #0]
 80088a6:	4620      	mov	r0, r4
 80088a8:	47b8      	blx	r7
 80088aa:	1c43      	adds	r3, r0, #1
 80088ac:	bf01      	itttt	eq
 80088ae:	2300      	moveq	r3, #0
 80088b0:	602b      	streq	r3, [r5, #0]
 80088b2:	238a      	moveq	r3, #138	; 0x8a
 80088b4:	6023      	streq	r3, [r4, #0]
 80088b6:	b006      	add	sp, #24
 80088b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088bc:	200006c4 	.word	0x200006c4

080088c0 <__ascii_wctomb>:
 80088c0:	b149      	cbz	r1, 80088d6 <__ascii_wctomb+0x16>
 80088c2:	2aff      	cmp	r2, #255	; 0xff
 80088c4:	bf85      	ittet	hi
 80088c6:	238a      	movhi	r3, #138	; 0x8a
 80088c8:	6003      	strhi	r3, [r0, #0]
 80088ca:	700a      	strbls	r2, [r1, #0]
 80088cc:	f04f 30ff 	movhi.w	r0, #4294967295
 80088d0:	bf98      	it	ls
 80088d2:	2001      	movls	r0, #1
 80088d4:	4770      	bx	lr
 80088d6:	4608      	mov	r0, r1
 80088d8:	4770      	bx	lr
	...

080088dc <_close>:
 80088dc:	4b02      	ldr	r3, [pc, #8]	; (80088e8 <_close+0xc>)
 80088de:	2258      	movs	r2, #88	; 0x58
 80088e0:	601a      	str	r2, [r3, #0]
 80088e2:	f04f 30ff 	mov.w	r0, #4294967295
 80088e6:	4770      	bx	lr
 80088e8:	200010b8 	.word	0x200010b8

080088ec <_fstat>:
 80088ec:	4b02      	ldr	r3, [pc, #8]	; (80088f8 <_fstat+0xc>)
 80088ee:	2258      	movs	r2, #88	; 0x58
 80088f0:	601a      	str	r2, [r3, #0]
 80088f2:	f04f 30ff 	mov.w	r0, #4294967295
 80088f6:	4770      	bx	lr
 80088f8:	200010b8 	.word	0x200010b8

080088fc <_isatty>:
 80088fc:	4b02      	ldr	r3, [pc, #8]	; (8008908 <_isatty+0xc>)
 80088fe:	2258      	movs	r2, #88	; 0x58
 8008900:	601a      	str	r2, [r3, #0]
 8008902:	2000      	movs	r0, #0
 8008904:	4770      	bx	lr
 8008906:	bf00      	nop
 8008908:	200010b8 	.word	0x200010b8

0800890c <_lseek>:
 800890c:	4b02      	ldr	r3, [pc, #8]	; (8008918 <_lseek+0xc>)
 800890e:	2258      	movs	r2, #88	; 0x58
 8008910:	601a      	str	r2, [r3, #0]
 8008912:	f04f 30ff 	mov.w	r0, #4294967295
 8008916:	4770      	bx	lr
 8008918:	200010b8 	.word	0x200010b8

0800891c <_read>:
 800891c:	4b02      	ldr	r3, [pc, #8]	; (8008928 <_read+0xc>)
 800891e:	2258      	movs	r2, #88	; 0x58
 8008920:	601a      	str	r2, [r3, #0]
 8008922:	f04f 30ff 	mov.w	r0, #4294967295
 8008926:	4770      	bx	lr
 8008928:	200010b8 	.word	0x200010b8

0800892c <_sbrk>:
 800892c:	4b04      	ldr	r3, [pc, #16]	; (8008940 <_sbrk+0x14>)
 800892e:	4602      	mov	r2, r0
 8008930:	6819      	ldr	r1, [r3, #0]
 8008932:	b909      	cbnz	r1, 8008938 <_sbrk+0xc>
 8008934:	4903      	ldr	r1, [pc, #12]	; (8008944 <_sbrk+0x18>)
 8008936:	6019      	str	r1, [r3, #0]
 8008938:	6818      	ldr	r0, [r3, #0]
 800893a:	4402      	add	r2, r0
 800893c:	601a      	str	r2, [r3, #0]
 800893e:	4770      	bx	lr
 8008940:	200007a8 	.word	0x200007a8
 8008944:	200010bc 	.word	0x200010bc

08008948 <_write>:
 8008948:	4b02      	ldr	r3, [pc, #8]	; (8008954 <_write+0xc>)
 800894a:	2258      	movs	r2, #88	; 0x58
 800894c:	601a      	str	r2, [r3, #0]
 800894e:	f04f 30ff 	mov.w	r0, #4294967295
 8008952:	4770      	bx	lr
 8008954:	200010b8 	.word	0x200010b8

08008958 <_init>:
 8008958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800895a:	bf00      	nop
 800895c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800895e:	bc08      	pop	{r3}
 8008960:	469e      	mov	lr, r3
 8008962:	4770      	bx	lr

08008964 <_fini>:
 8008964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008966:	bf00      	nop
 8008968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800896a:	bc08      	pop	{r3}
 800896c:	469e      	mov	lr, r3
 800896e:	4770      	bx	lr
